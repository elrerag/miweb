{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Java full stack El siguiente documento se compone del material facilitado para el desarrollo del curso de Java Full Stack Trainne","title":"`\u001dJava full stack`"},{"location":"#java-full-stack","text":"El siguiente documento se compone del material facilitado para el desarrollo del curso de Java Full Stack Trainne","title":"Java full stack"},{"location":"cookbook/001/","text":"Agregar apache tomcat a eclipse En el siguiente tutorial se muestra como poder agregar Apache tomcat a eclipse. Descargar tomcat: https://tomcat.apache.org/download-80.cgi Al descomprimir, la carpeta se debe llevar a un lugar en el que lo podamos encontrar, para el caso de MAC, este puee ser llevado a la siguiente ruta: /Applications/contenedor/apache-tomcat-9.0.31 De esta forma ya tenemos el servidor en nuestra m\u00e1quina, ahora queda agregarlo a eclipse. Accedemos con \u2318, o vamos a Eclipse -> preferences y lo agregamos. Si descargamos la versi\u00f3n 9.* podemos seleccionar la siguiente opci\u00f3n: En esta ventana, debemos buscar la carpeta donde se encuentra el direcctorio de apache que descargamos. Para probar iniciamos un proyecto. Entramos a las propiedades del proyecto y agregamos una nueva librer\u00eda en la pesta\u00f1a Libraries . Finalmente, creamos un index.jsp , y probamos ejecutarlo con el servidor. Con esto ya tenemos integrado el servidor de aplicaciones web de Apache Tomcat.","title":"Agregar apache tomcat a eclipse"},{"location":"cookbook/001/#agregar-apache-tomcat-a-eclipse","text":"En el siguiente tutorial se muestra como poder agregar Apache tomcat a eclipse. Descargar tomcat: https://tomcat.apache.org/download-80.cgi Al descomprimir, la carpeta se debe llevar a un lugar en el que lo podamos encontrar, para el caso de MAC, este puee ser llevado a la siguiente ruta: /Applications/contenedor/apache-tomcat-9.0.31 De esta forma ya tenemos el servidor en nuestra m\u00e1quina, ahora queda agregarlo a eclipse. Accedemos con \u2318, o vamos a Eclipse -> preferences y lo agregamos. Si descargamos la versi\u00f3n 9.* podemos seleccionar la siguiente opci\u00f3n: En esta ventana, debemos buscar la carpeta donde se encuentra el direcctorio de apache que descargamos. Para probar iniciamos un proyecto. Entramos a las propiedades del proyecto y agregamos una nueva librer\u00eda en la pesta\u00f1a Libraries . Finalmente, creamos un index.jsp , y probamos ejecutarlo con el servidor. Con esto ya tenemos integrado el servidor de aplicaciones web de Apache Tomcat.","title":"Agregar apache tomcat a eclipse"},{"location":"cookbook/nimpos/javascript/","text":"Magias Javascript Algunos trucos en javascript Mix de colores La siguiente es una forma de poder hacer un mix de colores con el fondo del navegador con jquery. const body = $('body') body.empty() setInterval(() => { var color = \"red\" if(color === \"red\") { body.css(\"background-color\", \"red\"); color = \"blue\" }else{ body.css(\"background-color\", \"blue\"); color = \"red\" } }, 500)","title":"Javascript"},{"location":"cookbook/nimpos/javascript/#magias-javascript","text":"Algunos trucos en javascript","title":"Magias Javascript"},{"location":"cookbook/nimpos/javascript/#mix-de-colores","text":"La siguiente es una forma de poder hacer un mix de colores con el fondo del navegador con jquery. const body = $('body') body.empty() setInterval(() => { var color = \"red\" if(color === \"red\") { body.css(\"background-color\", \"red\"); color = \"blue\" }else{ body.css(\"background-color\", \"blue\"); color = \"red\" } }, 500)","title":"Mix de colores"},{"location":"ejercicios/basedatos/relaciones/muchoAmuchos/","text":"Relaci\u00f3n de muchos a muchos Para el siguiente caso disponemos de dos tablas: Alumno Curso Un alumno puede estar en varios cursos y un curso lo pueden tomar varios alumnos; nos encontramos entonces ante una relaci\u00f3n de muchos a muchos, la que ser\u00e1 solventada en el siguiente ejemplo: Lo primero es identificar qu\u00e9 servicios requerimos de esta aplicaci\u00f3n, aunque partamos dise\u00f1ando el modelo, lo principal es saber qu\u00e9 es lo que si quiere obtener. Obtener los alumnos que posee un curso : Esto nos puede servir para llevar informaci\u00f3n del curso, como listar en una vista sus alumnos. Obtener los cursos que posee un alumno : Como es una relaci\u00f3n de muchos a muchos, cada uno de los cursos tambi\u00e9n puede obtener cero o muchos alumnos. Poder crear una matricula : Es decir que un alumno se inscriba en un curso aunque pertenezca a otro curso. Ahora ya podemos dise\u00f1ar un modelo de datos para la soluci\u00f3n. Modelo de datos ( SqLite ) Ya sabemos entonces que para solucionar el problema de la relaci\u00f3n de muchos a muchos desde la base de datos, es por esto que se crea la tabla alumno_curso , el nombre est\u00e1 puesto as\u00ed, solamente por orden alfab\u00e9tico. DDL El c\u00f3digo para preparar la base de datos es el siguiente (recordar crear el archivo en el proyecto). Creaci\u00f3n de las tablas DROP TABLE IF EXISTS alumno; DROP TABLE IF EXISTS curso; DROP TABLE IF EXISTS alumno_curso; CREATE TABLE alumno( id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, nombre VARCHAR(200) ); CREATE TABLE curso( id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, nombre VARCHAR(200) ); CREATE TABLE alumno_curso( id_alumno INTEGER, id_curso INTEGER, PRIMARY KEY(id_alumno, id_curso), FOREIGN KEY(id_alumno) REFERENCES alumno(id), FOREIGN KEY(id_curso) REFERENCES curso(id) ); Preparaci\u00f3n de los datos de prueba Se crean dos alumnos y 4 cursos, el primer alumno estar\u00e1 inscritos en los tres primeros cursos y el segundo alumno, solamente estar\u00e1 en el primer curso. INSERT INTO alumno (nombre) VALUES (\"Luis\"); INSERT INTO alumno (nombre) VALUES (\"Ana\"); INSERT INTO curso (nombre) VALUES (\"Curso de Java\"); INSERT INTO curso (nombre) VALUES (\"Curso de Javascript\"); INSERT INTO curso (nombre) VALUES (\"Curso de Base de Datos\"); INSERT INTO curso (nombre) VALUES (\"Curso de Apresto\"); INSERT INTO alumno_curso VALUES (1, 1); INSERT INTO alumno_curso VALUES (1, 2); INSERT INTO alumno_curso VALUES (1, 3); INSERT INTO alumno_curso VALUES (2, 1); -- Para eliminar la prueba de matr\u00edcula. -- DELETE FROM alumno_curso WHERE id_alumno = 1 and id_curso = 4; -- para probar: select * from alumno; select * from curso; select * from alumno_curso; Estructura del proyecto (Maven - normal 1.8) ./ \u251c\u2500\u2500 database.db \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 relaciones \u2502 \u2502 \u2502 \u251c\u2500\u2500 dao \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 AlumnoCursoDAO.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 AlumnoDAO.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 CursoDAO.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ManejaConexion.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 Principal.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 modelo \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 Alumno.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 AlumnoCurso.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 Curso.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 servicios \u2502 \u2502 \u2502 \u2514\u2500\u2500 ServicioMatricula.java \u2502 \u2502 \u2514\u2500\u2500 resources \u2502 \u2514\u2500\u2500 test \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2514\u2500\u2500 relaciones \u2502 \u2502 \u2514\u2500\u2500 servicios \u2502 \u2502 \u2514\u2500\u2500 ServicioMatriculaTest.java \u2502 \u2514\u2500\u2500 resources \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2502 \u2514\u2500\u2500 maven \u2502 \u2502 \u2514\u2500\u2500 cl.lherrera \u2502 \u2502 \u2514\u2500\u2500 relaciones \u2502 \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2502 \u2514\u2500\u2500 pom.xml \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 relaciones \u2502 \u251c\u2500\u2500 dao \u2502 \u2502 \u251c\u2500\u2500 AlumnoCursoDAO.class \u2502 \u2502 \u251c\u2500\u2500 AlumnoDAO.class \u2502 \u2502 \u251c\u2500\u2500 CursoDAO.class \u2502 \u2502 \u2514\u2500\u2500 ManejaConexion.class \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u2514\u2500\u2500 Principal.class \u2502 \u251c\u2500\u2500 modelo \u2502 \u2502 \u251c\u2500\u2500 Alumno.class \u2502 \u2502 \u251c\u2500\u2500 AlumnoCurso.class \u2502 \u2502 \u2514\u2500\u2500 Curso.class \u2502 \u2514\u2500\u2500 servicios \u2502 \u2514\u2500\u2500 ServicioMatricula.class \u2514\u2500\u2500 test-classes \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 relaciones \u2514\u2500\u2500 servicios \u2514\u2500\u2500 ServicioMatriculaTest.class 36 directories, 25 files pom.xml Necesitamos las dependencias de JUnit5 y el driver de SqLite . <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>cl.lherrera</groupId> <artifactId>relaciones</artifactId> <version>0.0.1-SNAPSHOT</version> <dependencies> <dependency> <groupId>org.mockito</groupId> <artifactId>mockito-core</artifactId> <version>2.28.2</version> <scope>test</scope> </dependency> <!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api --> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-api</artifactId> <version>5.6.0</version> <scope>test</scope> </dependency> <!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine --> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-engine</artifactId> <version>5.6.0</version> <scope>test</scope> </dependency> <!-- https://mvnrepository.com/artifact/org.junit.platform/junit-platform-launcher --> <dependency> <groupId>org.junit.platform</groupId> <artifactId>junit-platform-launcher</artifactId> <version>1.6.0</version> <scope>test</scope> </dependency> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> <version>3.30.1</version> </dependency> </dependencies> </project> Clase de administraci\u00f3n de la conexi\u00f3n ( Singlenton ). /relaciones/src/main/java/cl/lherrera/relaciones/dao/ManejaConexion.java package cl.lherrera.relaciones.dao; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; import java.util.logging.Logger; public class ManejaConexion { private static final String DB_URL = \"jdbc:sqlite:/Users/luisherrera/Desktop/TALENTO-PROS/servlets/relaciones/database.db\"; private static final Logger milog = Logger.getLogger(ManejaConexion.class.getName()); private static ManejaConexion manejaConexion = new ManejaConexion(); private ManejaConexion() { if (manejaConexion != null){ //Prevent Reflection throw new IllegalStateException(\"No se puede crear una nueva instancia de ManejaConexion\"); } } public static ManejaConexion obtenerManejo() { return manejaConexion; } public Connection obtenerConexion() throws SQLException { Connection conexion = null; try { Class.forName(\"org.sqlite.JDBC\"); conexion = DriverManager.getConnection(DB_URL, \"admin\", \"1234\"); } catch (ClassNotFoundException e) { milog.severe(\"No se pudo cargar el driver.\"); milog.severe(e.getMessage()); } return conexion; } } Tests Se comienza entonces programando los test, para luego ejecutar el desarrollo hasta que los test funcionen. Se probar\u00e1 solamente el servicio, ya que es lo que necesitamos. El test que matr\u00edcula realmente ingresa una matr\u00edcula, esto se soluciona con spring , por lo que no nos detenemos en intentar solucionar o volver la base de datos a lo que estaba, es solamente una prueba, por lo tanto es irrelevante. Estos test, no funcionar\u00e1n desde un principio, as\u00ed practicamos TDD. /relaciones/src/test/java/cl/lherrera/relaciones/servicios/ServicioMatriculaTest.java package cl.lherrera.relaciones.servicios; import static org.junit.jupiter.api.Assertions.assertTrue; import java.beans.Transient; import java.util.List; import java.util.logging.Logger; import org.junit.jupiter.api.BeforeAll; import org.junit.jupiter.api.BeforeEach; import org.junit.jupiter.api.DisplayName; import org.junit.jupiter.api.Test; import cl.lherrera.relaciones.dao.AlumnoDAO; import cl.lherrera.relaciones.dao.CursoDAO; import cl.lherrera.relaciones.modelo.Alumno; import cl.lherrera.relaciones.modelo.AlumnoCurso; import cl.lherrera.relaciones.modelo.Curso; @DisplayName(\"Pruebas del servicios\") public class ServicioMatriculaTest { Logger logger = Logger.getLogger(ServicioMatriculaTest.class.getName()); private static Alumno alumno; private static Curso curso; private static AlumnoCurso alumnoCurso; private static ServicioMatricula servicio; @BeforeAll static void initAll() { alumno = (new AlumnoDAO()).obtenerAlumnoPorId(1L); curso = (new CursoDAO()).obtenerCursoPorId(1L); alumnoCurso = new AlumnoCurso(alumno, curso); servicio = new ServicioMatricula(); } @BeforeEach void antesDeCada() { logger.warning(\"Nuevo test__________________________________-\"); } @Test @DisplayName(\"si el curso 1 tiene al menos un alumno\") void alumnos_por_curso() { // obtengo los alumnos por curso List<Alumno> alumnos = servicio.obtenerAlumnosPorCurso(curso); // los listo alumnos.forEach(alumno -> logger.info(alumno.toString() ) ); // compruebo que al menos tenga uno, as\u00ed debe estar en la base assertTrue(alumnos.size() > 0); } @Test @DisplayName(\"si el alumno 1 tiene al menos un curso\") void cursos_por_alumno() { // obtengo los alumnos por curso List<Curso> cursos = servicio.obtenerCursosPorAlumno(alumno); // los listo cursos.forEach(curso -> logger.info(curso.toString() ) ); // compruebo que al menos tenga uno, as\u00ed debe estar en la base assertTrue(cursos.size() > 0); } @Test @DisplayName(\"Probar si matricula\") void hacerMatricula() { Curso cursoApresto = (new CursoDAO()).obtenerCursoPorId(4L); AlumnoCurso datosMatricula = new AlumnoCurso(alumno, cursoApresto); assert(servicio.hacerMatricula(datosMatricula)); } } Servicio de matr\u00edcula Esta es la l\u00f3gica del negocio, en este caso quiz\u00e1s se parezca mucho a lo que est\u00e1n haciendo los daos, pero el DAO se encarga s\u00f3lo de los datos, no le importa el negocio, es por esto que se debe especializar una capa para este fin, de esta manera si existiera un controlador (no lo hay por que no hay vista). /relaciones/src/main/java/cl/lherrera/relaciones/servicios/ServicioMatricula.java package cl.lherrera.relaciones.servicios; import java.util.List; import cl.lherrera.relaciones.dao.AlumnoCursoDAO; import cl.lherrera.relaciones.modelo.Alumno; import cl.lherrera.relaciones.modelo.AlumnoCurso; import cl.lherrera.relaciones.modelo.Curso; public class ServicioMatricula { private AlumnoCursoDAO daoAlumnoCurso = new AlumnoCursoDAO(); public boolean hacerMatricula(AlumnoCurso alumnoCurso) { boolean retorno = false; int filasAfectadas = 0; if(alumnoCurso != null) filasAfectadas = daoAlumnoCurso.ingresaAlumnoCurso(alumnoCurso); if(filasAfectadas > 0 ) retorno = true; return retorno; } /** * No importa que por ahora esto parezca redundante, pero de esta * manera separamos la l\u00f3gica de negocio de los accesos a los datos * la l\u00f3gica de negocio puede cambiar, quiz\u00e1s ya no importa que * tenga una lista de cursos, pero el curso debe seguir * retornando los objetos cursos, esto no puede cambiar * la l\u00f3gica de negocio s\u00ed. * */ public List<Alumno> obtenerAlumnosPorCurso(Curso curso) { return curso.obtenerAlumnos(); } public List<Curso> obtenerCursosPorAlumno(Alumno alumno) { return alumno.obtenerCursos(); } } DAOS /relaciones/src/main/java/cl/lherrera/relaciones/dao/AlumnoCursoDAO.java Si se involucran alumnos y cursos en una consulta, esto debe ir en este lugar. package cl.lherrera.relaciones.dao; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.util.ArrayList; import java.util.List; import java.util.logging.Logger; import cl.lherrera.relaciones.modelo.Alumno; import cl.lherrera.relaciones.modelo.AlumnoCurso; import cl.lherrera.relaciones.modelo.Curso; public class AlumnoCursoDAO { private static final ManejaConexion manejaConexion = ManejaConexion.obtenerManejo(); Logger logger = Logger.getLogger(AlumnoCursoDAO.class.getName()); public int ingresaAlumnoCurso(AlumnoCurso alumnoCurso) { int filasAfectadas = 0; Long idAlumno = alumnoCurso.getAlumno().getId(); Long idCurso = alumnoCurso.getCurso().getId(); String sqlQuery = \"INSERT INTO alumno_curso VALUES (?, ?)\"; try( Connection conexion = manejaConexion.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(sqlQuery); ){ ps.setLong(1, idAlumno); ps.setLong(2, idCurso); filasAfectadas = ps.executeUpdate(); if(filasAfectadas != 1) throw new SQLException(\"Error al insertar registro\"); }catch (SQLException e) { logger.severe(e.getMessage()); } return filasAfectadas; } /** * |alumno| >-< |curso| * Trae todos los cursos por alumnos */ public List<Alumno> obtenerAlumnosPorCurso(Curso curso){ List<Alumno> alumnos = new ArrayList<>(); String sqlTxt = \"\" + \"SELECT a.id, \" + \" a.nombre \" + \"FROM alumno a \" + \" INNER JOIN alumno_curso ac \" + \" ON a.id = ac.id_alumno \" + \" AND ac.id_curso = \" + curso.getId(); try( Connection conexion = manejaConexion.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(sqlTxt); ResultSet rs = ps.executeQuery(); ) { while(rs.next()) { alumnos.add(new Alumno(rs.getLong(\"id\"), rs.getString(\"nombre\")) ); } } catch (SQLException e) { logger.severe(\"No se pudieron obtener los alumnos para el curso: \" + curso.toString()); logger.severe(e.getMessage()); } return alumnos; } public List<Curso> obtenerCursosPorAlumno(Alumno alumno){ List<Curso> cursos = new ArrayList<>(); String sqlTxt = \"\" + \"SELECT c.id, \" + \" c.nombre \" + \"FROM curso c \" + \" INNER JOIN alumno_curso ac \" + \" ON c.id = ac.id_curso \" + \" AND ac.id_alumno = \" + alumno.getId(); try( Connection conexion = manejaConexion.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(sqlTxt); ResultSet rs = ps.executeQuery(); ) { while(rs.next()) { cursos.add(new Curso(rs.getLong(\"id\"), rs.getString(\"nombre\")) ); } } catch (SQLException e) { logger.severe(\"No se pudieron obtener los cursos para el alumno: \" + alumno.toString()); logger.severe(e.getMessage()); } return cursos; } } /relaciones/src/main/java/cl/lherrera/relaciones/dao/AlumnoDAO.java package cl.lherrera.relaciones.dao; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.util.logging.Logger; import cl.lherrera.relaciones.modelo.Alumno; public class AlumnoDAO { ManejaConexion manejoCon = ManejaConexion.obtenerManejo(); Logger logger = Logger.getLogger(AlumnoDAO.class.getName()); public Alumno obtenerAlumnoPorId(Long id) { Alumno alumno = new Alumno(); String sqlTxt = \"select id, nombre from alumno where id = \" + id; try( Connection conn = manejoCon.obtenerConexion(); PreparedStatement ps = conn.prepareStatement(sqlTxt); ResultSet rs = ps.executeQuery(); ) { while(rs.next()) { alumno.setId(rs.getLong(\"id\")); alumno.setNombre(rs.getString(\"nombre\")); } } catch (SQLException e) { logger.severe(\"No se pudieron obtener los cursos para el alumno: \" + alumno.toString()); logger.severe(e.getMessage()); } return alumno; } } /relaciones/src/main/java/cl/lherrera/relaciones/dao/CursoDAO.java package cl.lherrera.relaciones.dao; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.util.logging.Logger; import cl.lherrera.relaciones.modelo.Curso; public class CursoDAO { ManejaConexion manejoCon = ManejaConexion.obtenerManejo(); Logger logger = Logger.getLogger(CursoDAO.class.getName()); public Curso obtenerCursoPorId(Long id) { Curso curso = new Curso(); String sqlTxt = \"select id, nombre from curso where id = \" + id; try( Connection conn = manejoCon.obtenerConexion(); PreparedStatement ps = conn.prepareStatement(sqlTxt); ResultSet rs = ps.executeQuery(); ) { while(rs.next()) { curso.setId(rs.getLong(\"id\")); curso.setNombre(rs.getString(\"nombre\")); } } catch (SQLException e) { logger.severe( \"No se pudieron obtener los cursos para el alumno: \" + curso.toString() ); logger.severe(e.getMessage()); } return curso; } } Modelo (una tabla en la BD una clase en Java...\ud83d\udde1) Se permite la obtenci\u00f3n de los datos asociados desde el mismo modelo, no directamente desde los atributos, pero s\u00ed un peque\u00f1o atajo. /relaciones/src/main/java/cl/lherrera/relaciones/modelo/Alumno.java package cl.lherrera.relaciones.modelo; import java.io.Serializable; import java.util.ArrayList; import java.util.List; import cl.lherrera.relaciones.dao.AlumnoCursoDAO; public class Alumno implements Serializable{ private static final long serialVersionUID = 5780648523799074104L; private Long id; private String nombre; public Alumno() {} public Alumno(Long id, String nombre) { this.id = id; this.nombre = nombre; } public Long getId() { return id; } public void setId(Long id) { this.id = id; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } @Override public String toString() { return \"Alumno [id=\" + id + \", nombre=\" + nombre + \"]\"; } /** * Enlace con los cursos */ public List<Curso> obtenerCursos(){ List<Curso> cursos = new ArrayList<>(); if(this.id != null) cursos = (new AlumnoCursoDAO().obtenerCursosPorAlumno(this) ); return cursos; } } /relaciones/src/main/java/cl/lherrera/relaciones/modelo/Curso.java package cl.lherrera.relaciones.modelo; import java.io.Serializable; import java.util.ArrayList; import java.util.List; import cl.lherrera.relaciones.dao.AlumnoCursoDAO; public class Curso implements Serializable{ private static final long serialVersionUID = 6037805339856868622L; private Long id; private String nombre; public Curso() {} public Curso(Long id, String nombre) { this.id = id; this.nombre = nombre; } public Long getId() { return id; } public void setId(Long id) { this.id = id; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } @Override public String toString() { return \"Curso [id=\" + id + \", nombre=\" + nombre + \"]\"; } /** * Enlace con los alumnos. */ public List<Alumno> obtenerAlumnos(){ List<Alumno> alumnos = new ArrayList<>(); if(this.id != null) alumnos = (new AlumnoCursoDAO().obtenerAlumnosPorCurso(this) ); return alumnos; } } /relaciones/src/main/java/cl/lherrera/relaciones/modelo/AlumnoCurso.java package cl.lherrera.relaciones.modelo; import java.io.Serializable; public class AlumnoCurso implements Serializable{ private static final long serialVersionUID = -1060964033872602317L; private Alumno alumno; private Curso curso; public AlumnoCurso() {} public AlumnoCurso(Alumno alumno, Curso curso) { this.alumno = alumno; this.curso = curso; } public Alumno getAlumno() { return alumno; } public void setAlumno(Alumno alumno) { this.alumno = alumno; } public Curso getCurso() { return curso; } public void setCurso(Curso curso) { this.curso = curso; } } Esto deber\u00eda ser suficiente, los test deber\u00edan funcionar una vez, luego fallar\u00eda el que inserta, solucion\u00e1ndolo, con ejecutar el delete incluido en el DDL. TODO Como trabajo adicional, se puede crear el servicio que elimina la matr\u00edcula o crear esta soluci\u00f3n WEB.","title":"muchoAmuchos"},{"location":"ejercicios/basedatos/relaciones/muchoAmuchos/#relacion-de-muchos-a-muchos","text":"Para el siguiente caso disponemos de dos tablas: Alumno Curso Un alumno puede estar en varios cursos y un curso lo pueden tomar varios alumnos; nos encontramos entonces ante una relaci\u00f3n de muchos a muchos, la que ser\u00e1 solventada en el siguiente ejemplo: Lo primero es identificar qu\u00e9 servicios requerimos de esta aplicaci\u00f3n, aunque partamos dise\u00f1ando el modelo, lo principal es saber qu\u00e9 es lo que si quiere obtener. Obtener los alumnos que posee un curso : Esto nos puede servir para llevar informaci\u00f3n del curso, como listar en una vista sus alumnos. Obtener los cursos que posee un alumno : Como es una relaci\u00f3n de muchos a muchos, cada uno de los cursos tambi\u00e9n puede obtener cero o muchos alumnos. Poder crear una matricula : Es decir que un alumno se inscriba en un curso aunque pertenezca a otro curso. Ahora ya podemos dise\u00f1ar un modelo de datos para la soluci\u00f3n.","title":"Relaci\u00f3n de muchos a muchos"},{"location":"ejercicios/basedatos/relaciones/muchoAmuchos/#modelo-de-datos-sqlite","text":"Ya sabemos entonces que para solucionar el problema de la relaci\u00f3n de muchos a muchos desde la base de datos, es por esto que se crea la tabla alumno_curso , el nombre est\u00e1 puesto as\u00ed, solamente por orden alfab\u00e9tico.","title":"Modelo de datos (SqLite)"},{"location":"ejercicios/basedatos/relaciones/muchoAmuchos/#ddl","text":"El c\u00f3digo para preparar la base de datos es el siguiente (recordar crear el archivo en el proyecto). Creaci\u00f3n de las tablas DROP TABLE IF EXISTS alumno; DROP TABLE IF EXISTS curso; DROP TABLE IF EXISTS alumno_curso; CREATE TABLE alumno( id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, nombre VARCHAR(200) ); CREATE TABLE curso( id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, nombre VARCHAR(200) ); CREATE TABLE alumno_curso( id_alumno INTEGER, id_curso INTEGER, PRIMARY KEY(id_alumno, id_curso), FOREIGN KEY(id_alumno) REFERENCES alumno(id), FOREIGN KEY(id_curso) REFERENCES curso(id) ); Preparaci\u00f3n de los datos de prueba Se crean dos alumnos y 4 cursos, el primer alumno estar\u00e1 inscritos en los tres primeros cursos y el segundo alumno, solamente estar\u00e1 en el primer curso. INSERT INTO alumno (nombre) VALUES (\"Luis\"); INSERT INTO alumno (nombre) VALUES (\"Ana\"); INSERT INTO curso (nombre) VALUES (\"Curso de Java\"); INSERT INTO curso (nombre) VALUES (\"Curso de Javascript\"); INSERT INTO curso (nombre) VALUES (\"Curso de Base de Datos\"); INSERT INTO curso (nombre) VALUES (\"Curso de Apresto\"); INSERT INTO alumno_curso VALUES (1, 1); INSERT INTO alumno_curso VALUES (1, 2); INSERT INTO alumno_curso VALUES (1, 3); INSERT INTO alumno_curso VALUES (2, 1); -- Para eliminar la prueba de matr\u00edcula. -- DELETE FROM alumno_curso WHERE id_alumno = 1 and id_curso = 4; -- para probar: select * from alumno; select * from curso; select * from alumno_curso;","title":"DDL"},{"location":"ejercicios/basedatos/relaciones/muchoAmuchos/#estructura-del-proyecto-maven-normal-18","text":"./ \u251c\u2500\u2500 database.db \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 relaciones \u2502 \u2502 \u2502 \u251c\u2500\u2500 dao \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 AlumnoCursoDAO.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 AlumnoDAO.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 CursoDAO.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ManejaConexion.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 Principal.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 modelo \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 Alumno.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 AlumnoCurso.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 Curso.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 servicios \u2502 \u2502 \u2502 \u2514\u2500\u2500 ServicioMatricula.java \u2502 \u2502 \u2514\u2500\u2500 resources \u2502 \u2514\u2500\u2500 test \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2514\u2500\u2500 relaciones \u2502 \u2502 \u2514\u2500\u2500 servicios \u2502 \u2502 \u2514\u2500\u2500 ServicioMatriculaTest.java \u2502 \u2514\u2500\u2500 resources \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2502 \u2514\u2500\u2500 maven \u2502 \u2502 \u2514\u2500\u2500 cl.lherrera \u2502 \u2502 \u2514\u2500\u2500 relaciones \u2502 \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2502 \u2514\u2500\u2500 pom.xml \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 relaciones \u2502 \u251c\u2500\u2500 dao \u2502 \u2502 \u251c\u2500\u2500 AlumnoCursoDAO.class \u2502 \u2502 \u251c\u2500\u2500 AlumnoDAO.class \u2502 \u2502 \u251c\u2500\u2500 CursoDAO.class \u2502 \u2502 \u2514\u2500\u2500 ManejaConexion.class \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u2514\u2500\u2500 Principal.class \u2502 \u251c\u2500\u2500 modelo \u2502 \u2502 \u251c\u2500\u2500 Alumno.class \u2502 \u2502 \u251c\u2500\u2500 AlumnoCurso.class \u2502 \u2502 \u2514\u2500\u2500 Curso.class \u2502 \u2514\u2500\u2500 servicios \u2502 \u2514\u2500\u2500 ServicioMatricula.class \u2514\u2500\u2500 test-classes \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 relaciones \u2514\u2500\u2500 servicios \u2514\u2500\u2500 ServicioMatriculaTest.class 36 directories, 25 files","title":"Estructura del proyecto (Maven - normal 1.8)"},{"location":"ejercicios/basedatos/relaciones/muchoAmuchos/#pomxml","text":"Necesitamos las dependencias de JUnit5 y el driver de SqLite . <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>cl.lherrera</groupId> <artifactId>relaciones</artifactId> <version>0.0.1-SNAPSHOT</version> <dependencies> <dependency> <groupId>org.mockito</groupId> <artifactId>mockito-core</artifactId> <version>2.28.2</version> <scope>test</scope> </dependency> <!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api --> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-api</artifactId> <version>5.6.0</version> <scope>test</scope> </dependency> <!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine --> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-engine</artifactId> <version>5.6.0</version> <scope>test</scope> </dependency> <!-- https://mvnrepository.com/artifact/org.junit.platform/junit-platform-launcher --> <dependency> <groupId>org.junit.platform</groupId> <artifactId>junit-platform-launcher</artifactId> <version>1.6.0</version> <scope>test</scope> </dependency> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> <version>3.30.1</version> </dependency> </dependencies> </project>","title":"pom.xml"},{"location":"ejercicios/basedatos/relaciones/muchoAmuchos/#clase-de-administracion-de-la-conexion-singlenton","text":"/relaciones/src/main/java/cl/lherrera/relaciones/dao/ManejaConexion.java package cl.lherrera.relaciones.dao; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; import java.util.logging.Logger; public class ManejaConexion { private static final String DB_URL = \"jdbc:sqlite:/Users/luisherrera/Desktop/TALENTO-PROS/servlets/relaciones/database.db\"; private static final Logger milog = Logger.getLogger(ManejaConexion.class.getName()); private static ManejaConexion manejaConexion = new ManejaConexion(); private ManejaConexion() { if (manejaConexion != null){ //Prevent Reflection throw new IllegalStateException(\"No se puede crear una nueva instancia de ManejaConexion\"); } } public static ManejaConexion obtenerManejo() { return manejaConexion; } public Connection obtenerConexion() throws SQLException { Connection conexion = null; try { Class.forName(\"org.sqlite.JDBC\"); conexion = DriverManager.getConnection(DB_URL, \"admin\", \"1234\"); } catch (ClassNotFoundException e) { milog.severe(\"No se pudo cargar el driver.\"); milog.severe(e.getMessage()); } return conexion; } }","title":"Clase de administraci\u00f3n de la conexi\u00f3n (Singlenton)."},{"location":"ejercicios/basedatos/relaciones/muchoAmuchos/#tests","text":"Se comienza entonces programando los test, para luego ejecutar el desarrollo hasta que los test funcionen. Se probar\u00e1 solamente el servicio, ya que es lo que necesitamos. El test que matr\u00edcula realmente ingresa una matr\u00edcula, esto se soluciona con spring , por lo que no nos detenemos en intentar solucionar o volver la base de datos a lo que estaba, es solamente una prueba, por lo tanto es irrelevante. Estos test, no funcionar\u00e1n desde un principio, as\u00ed practicamos TDD. /relaciones/src/test/java/cl/lherrera/relaciones/servicios/ServicioMatriculaTest.java package cl.lherrera.relaciones.servicios; import static org.junit.jupiter.api.Assertions.assertTrue; import java.beans.Transient; import java.util.List; import java.util.logging.Logger; import org.junit.jupiter.api.BeforeAll; import org.junit.jupiter.api.BeforeEach; import org.junit.jupiter.api.DisplayName; import org.junit.jupiter.api.Test; import cl.lherrera.relaciones.dao.AlumnoDAO; import cl.lherrera.relaciones.dao.CursoDAO; import cl.lherrera.relaciones.modelo.Alumno; import cl.lherrera.relaciones.modelo.AlumnoCurso; import cl.lherrera.relaciones.modelo.Curso; @DisplayName(\"Pruebas del servicios\") public class ServicioMatriculaTest { Logger logger = Logger.getLogger(ServicioMatriculaTest.class.getName()); private static Alumno alumno; private static Curso curso; private static AlumnoCurso alumnoCurso; private static ServicioMatricula servicio; @BeforeAll static void initAll() { alumno = (new AlumnoDAO()).obtenerAlumnoPorId(1L); curso = (new CursoDAO()).obtenerCursoPorId(1L); alumnoCurso = new AlumnoCurso(alumno, curso); servicio = new ServicioMatricula(); } @BeforeEach void antesDeCada() { logger.warning(\"Nuevo test__________________________________-\"); } @Test @DisplayName(\"si el curso 1 tiene al menos un alumno\") void alumnos_por_curso() { // obtengo los alumnos por curso List<Alumno> alumnos = servicio.obtenerAlumnosPorCurso(curso); // los listo alumnos.forEach(alumno -> logger.info(alumno.toString() ) ); // compruebo que al menos tenga uno, as\u00ed debe estar en la base assertTrue(alumnos.size() > 0); } @Test @DisplayName(\"si el alumno 1 tiene al menos un curso\") void cursos_por_alumno() { // obtengo los alumnos por curso List<Curso> cursos = servicio.obtenerCursosPorAlumno(alumno); // los listo cursos.forEach(curso -> logger.info(curso.toString() ) ); // compruebo que al menos tenga uno, as\u00ed debe estar en la base assertTrue(cursos.size() > 0); } @Test @DisplayName(\"Probar si matricula\") void hacerMatricula() { Curso cursoApresto = (new CursoDAO()).obtenerCursoPorId(4L); AlumnoCurso datosMatricula = new AlumnoCurso(alumno, cursoApresto); assert(servicio.hacerMatricula(datosMatricula)); } }","title":"Tests"},{"location":"ejercicios/basedatos/relaciones/muchoAmuchos/#servicio-de-matricula","text":"Esta es la l\u00f3gica del negocio, en este caso quiz\u00e1s se parezca mucho a lo que est\u00e1n haciendo los daos, pero el DAO se encarga s\u00f3lo de los datos, no le importa el negocio, es por esto que se debe especializar una capa para este fin, de esta manera si existiera un controlador (no lo hay por que no hay vista). /relaciones/src/main/java/cl/lherrera/relaciones/servicios/ServicioMatricula.java package cl.lherrera.relaciones.servicios; import java.util.List; import cl.lherrera.relaciones.dao.AlumnoCursoDAO; import cl.lherrera.relaciones.modelo.Alumno; import cl.lherrera.relaciones.modelo.AlumnoCurso; import cl.lherrera.relaciones.modelo.Curso; public class ServicioMatricula { private AlumnoCursoDAO daoAlumnoCurso = new AlumnoCursoDAO(); public boolean hacerMatricula(AlumnoCurso alumnoCurso) { boolean retorno = false; int filasAfectadas = 0; if(alumnoCurso != null) filasAfectadas = daoAlumnoCurso.ingresaAlumnoCurso(alumnoCurso); if(filasAfectadas > 0 ) retorno = true; return retorno; } /** * No importa que por ahora esto parezca redundante, pero de esta * manera separamos la l\u00f3gica de negocio de los accesos a los datos * la l\u00f3gica de negocio puede cambiar, quiz\u00e1s ya no importa que * tenga una lista de cursos, pero el curso debe seguir * retornando los objetos cursos, esto no puede cambiar * la l\u00f3gica de negocio s\u00ed. * */ public List<Alumno> obtenerAlumnosPorCurso(Curso curso) { return curso.obtenerAlumnos(); } public List<Curso> obtenerCursosPorAlumno(Alumno alumno) { return alumno.obtenerCursos(); } }","title":"Servicio de matr\u00edcula"},{"location":"ejercicios/basedatos/relaciones/muchoAmuchos/#daos","text":"/relaciones/src/main/java/cl/lherrera/relaciones/dao/AlumnoCursoDAO.java Si se involucran alumnos y cursos en una consulta, esto debe ir en este lugar. package cl.lherrera.relaciones.dao; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.util.ArrayList; import java.util.List; import java.util.logging.Logger; import cl.lherrera.relaciones.modelo.Alumno; import cl.lherrera.relaciones.modelo.AlumnoCurso; import cl.lherrera.relaciones.modelo.Curso; public class AlumnoCursoDAO { private static final ManejaConexion manejaConexion = ManejaConexion.obtenerManejo(); Logger logger = Logger.getLogger(AlumnoCursoDAO.class.getName()); public int ingresaAlumnoCurso(AlumnoCurso alumnoCurso) { int filasAfectadas = 0; Long idAlumno = alumnoCurso.getAlumno().getId(); Long idCurso = alumnoCurso.getCurso().getId(); String sqlQuery = \"INSERT INTO alumno_curso VALUES (?, ?)\"; try( Connection conexion = manejaConexion.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(sqlQuery); ){ ps.setLong(1, idAlumno); ps.setLong(2, idCurso); filasAfectadas = ps.executeUpdate(); if(filasAfectadas != 1) throw new SQLException(\"Error al insertar registro\"); }catch (SQLException e) { logger.severe(e.getMessage()); } return filasAfectadas; } /** * |alumno| >-< |curso| * Trae todos los cursos por alumnos */ public List<Alumno> obtenerAlumnosPorCurso(Curso curso){ List<Alumno> alumnos = new ArrayList<>(); String sqlTxt = \"\" + \"SELECT a.id, \" + \" a.nombre \" + \"FROM alumno a \" + \" INNER JOIN alumno_curso ac \" + \" ON a.id = ac.id_alumno \" + \" AND ac.id_curso = \" + curso.getId(); try( Connection conexion = manejaConexion.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(sqlTxt); ResultSet rs = ps.executeQuery(); ) { while(rs.next()) { alumnos.add(new Alumno(rs.getLong(\"id\"), rs.getString(\"nombre\")) ); } } catch (SQLException e) { logger.severe(\"No se pudieron obtener los alumnos para el curso: \" + curso.toString()); logger.severe(e.getMessage()); } return alumnos; } public List<Curso> obtenerCursosPorAlumno(Alumno alumno){ List<Curso> cursos = new ArrayList<>(); String sqlTxt = \"\" + \"SELECT c.id, \" + \" c.nombre \" + \"FROM curso c \" + \" INNER JOIN alumno_curso ac \" + \" ON c.id = ac.id_curso \" + \" AND ac.id_alumno = \" + alumno.getId(); try( Connection conexion = manejaConexion.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(sqlTxt); ResultSet rs = ps.executeQuery(); ) { while(rs.next()) { cursos.add(new Curso(rs.getLong(\"id\"), rs.getString(\"nombre\")) ); } } catch (SQLException e) { logger.severe(\"No se pudieron obtener los cursos para el alumno: \" + alumno.toString()); logger.severe(e.getMessage()); } return cursos; } } /relaciones/src/main/java/cl/lherrera/relaciones/dao/AlumnoDAO.java package cl.lherrera.relaciones.dao; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.util.logging.Logger; import cl.lherrera.relaciones.modelo.Alumno; public class AlumnoDAO { ManejaConexion manejoCon = ManejaConexion.obtenerManejo(); Logger logger = Logger.getLogger(AlumnoDAO.class.getName()); public Alumno obtenerAlumnoPorId(Long id) { Alumno alumno = new Alumno(); String sqlTxt = \"select id, nombre from alumno where id = \" + id; try( Connection conn = manejoCon.obtenerConexion(); PreparedStatement ps = conn.prepareStatement(sqlTxt); ResultSet rs = ps.executeQuery(); ) { while(rs.next()) { alumno.setId(rs.getLong(\"id\")); alumno.setNombre(rs.getString(\"nombre\")); } } catch (SQLException e) { logger.severe(\"No se pudieron obtener los cursos para el alumno: \" + alumno.toString()); logger.severe(e.getMessage()); } return alumno; } } /relaciones/src/main/java/cl/lherrera/relaciones/dao/CursoDAO.java package cl.lherrera.relaciones.dao; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.util.logging.Logger; import cl.lherrera.relaciones.modelo.Curso; public class CursoDAO { ManejaConexion manejoCon = ManejaConexion.obtenerManejo(); Logger logger = Logger.getLogger(CursoDAO.class.getName()); public Curso obtenerCursoPorId(Long id) { Curso curso = new Curso(); String sqlTxt = \"select id, nombre from curso where id = \" + id; try( Connection conn = manejoCon.obtenerConexion(); PreparedStatement ps = conn.prepareStatement(sqlTxt); ResultSet rs = ps.executeQuery(); ) { while(rs.next()) { curso.setId(rs.getLong(\"id\")); curso.setNombre(rs.getString(\"nombre\")); } } catch (SQLException e) { logger.severe( \"No se pudieron obtener los cursos para el alumno: \" + curso.toString() ); logger.severe(e.getMessage()); } return curso; } }","title":"DAOS"},{"location":"ejercicios/basedatos/relaciones/muchoAmuchos/#modelo-una-tabla-en-la-bd-una-clase-en-java","text":"Se permite la obtenci\u00f3n de los datos asociados desde el mismo modelo, no directamente desde los atributos, pero s\u00ed un peque\u00f1o atajo. /relaciones/src/main/java/cl/lherrera/relaciones/modelo/Alumno.java package cl.lherrera.relaciones.modelo; import java.io.Serializable; import java.util.ArrayList; import java.util.List; import cl.lherrera.relaciones.dao.AlumnoCursoDAO; public class Alumno implements Serializable{ private static final long serialVersionUID = 5780648523799074104L; private Long id; private String nombre; public Alumno() {} public Alumno(Long id, String nombre) { this.id = id; this.nombre = nombre; } public Long getId() { return id; } public void setId(Long id) { this.id = id; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } @Override public String toString() { return \"Alumno [id=\" + id + \", nombre=\" + nombre + \"]\"; } /** * Enlace con los cursos */ public List<Curso> obtenerCursos(){ List<Curso> cursos = new ArrayList<>(); if(this.id != null) cursos = (new AlumnoCursoDAO().obtenerCursosPorAlumno(this) ); return cursos; } } /relaciones/src/main/java/cl/lherrera/relaciones/modelo/Curso.java package cl.lherrera.relaciones.modelo; import java.io.Serializable; import java.util.ArrayList; import java.util.List; import cl.lherrera.relaciones.dao.AlumnoCursoDAO; public class Curso implements Serializable{ private static final long serialVersionUID = 6037805339856868622L; private Long id; private String nombre; public Curso() {} public Curso(Long id, String nombre) { this.id = id; this.nombre = nombre; } public Long getId() { return id; } public void setId(Long id) { this.id = id; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } @Override public String toString() { return \"Curso [id=\" + id + \", nombre=\" + nombre + \"]\"; } /** * Enlace con los alumnos. */ public List<Alumno> obtenerAlumnos(){ List<Alumno> alumnos = new ArrayList<>(); if(this.id != null) alumnos = (new AlumnoCursoDAO().obtenerAlumnosPorCurso(this) ); return alumnos; } } /relaciones/src/main/java/cl/lherrera/relaciones/modelo/AlumnoCurso.java package cl.lherrera.relaciones.modelo; import java.io.Serializable; public class AlumnoCurso implements Serializable{ private static final long serialVersionUID = -1060964033872602317L; private Alumno alumno; private Curso curso; public AlumnoCurso() {} public AlumnoCurso(Alumno alumno, Curso curso) { this.alumno = alumno; this.curso = curso; } public Alumno getAlumno() { return alumno; } public void setAlumno(Alumno alumno) { this.alumno = alumno; } public Curso getCurso() { return curso; } public void setCurso(Curso curso) { this.curso = curso; } } Esto deber\u00eda ser suficiente, los test deber\u00edan funcionar una vez, luego fallar\u00eda el que inserta, solucion\u00e1ndolo, con ejecutar el delete incluido en el DDL.","title":"Modelo (una tabla en la BD una clase en Java...\ud83d\udde1)"},{"location":"ejercicios/basedatos/relaciones/muchoAmuchos/#todo","text":"Como trabajo adicional, se puede crear el servicio que elimina la matr\u00edcula o crear esta soluci\u00f3n WEB.","title":"TODO"},{"location":"ejercicios/basedatos/relaciones/unoAmuchos/","text":"Relaci\u00f3n de uno a muchos La relaci\u00f3n m\u00e1s com\u00fan que tendremos en un modelo de datos, aunque necesitamos conocerlas todas, esta relaci\u00f3n es la que m\u00e1s veces implementaremos. Necesitamos conocer los comentarios que realiza un usuario. adem\u00e1s de poder ingresar alg\u00fan comentario. Modelo de datos ( SQLITE ) DDL -- activamos la restricci\u00f3n de las llaves foraneas pragma foreign_keys = ON; -- se crea la tabla de usuarios CREATE table usuario ( id integer primary key autoincrement, nombre text ); -- se crea la tabla comentario CREATE table comentario ( id integer primary key autoincrement, fecha datetime, texto text, usuario_id integer not null, FOREIGN KEY(usuario_id) REFERENCES usuario(id) ON DELETE CASCADE ); -- se ingresan los datos para comenzar con las pruebas desde el sistema insert into usuario (nombre) values ('luis'); insert into comentario (fecha, texto, usuario_id) values ( strftime('%Y-%m-%d %H-%M','now'), \"Este es un comentario de luis..\", 1 ); insert into comentario (fecha, texto, usuario_id) values ( strftime('%Y-%m-%d %H-%M','now'), \"Este es un segundo comentario de luis..\", 1 ); -- probamos que exista el usuario y dos comentarios select * from usuario; select * from comentario; -- -- en caso de ejecutar los tests, para que vuelva a funcionar -- -- necesitamos borrar el comentario ingresado en el test -- delete from comentario where texto == \"otro comentario\"; Estructura del proyecto ./ \u251c\u2500\u2500 database.db \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 unoamuchos \u2502 \u2502 \u2502 \u251c\u2500\u2500 dao \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ComentarioDAO.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ManejaConexion.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioDAO.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 dto \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ComentarioDTO.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 modelo \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 Comentario.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 Usuario.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 servicio \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ServicioComentario.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 utils \u2502 \u2502 \u2502 \u2514\u2500\u2500 Parsers.java \u2502 \u2502 \u2514\u2500\u2500 resources \u2502 \u2514\u2500\u2500 test \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2514\u2500\u2500 unoamuchos \u2502 \u2502 \u2514\u2500\u2500 servicio \u2502 \u2502 \u2514\u2500\u2500 ServicioComentarioTest.java \u2502 \u2514\u2500\u2500 resources \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2502 \u2514\u2500\u2500 maven \u2502 \u2502 \u2514\u2500\u2500 cl.lherrera \u2502 \u2502 \u2514\u2500\u2500 unoamuchos \u2502 \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2502 \u2514\u2500\u2500 pom.xml \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 unoamuchos \u2502 \u251c\u2500\u2500 dao \u2502 \u2502 \u251c\u2500\u2500 ComentarioDAO.class \u2502 \u2502 \u251c\u2500\u2500 ManejaConexion.class \u2502 \u2502 \u2514\u2500\u2500 UsuarioDAO.class \u2502 \u251c\u2500\u2500 dto \u2502 \u2502 \u2514\u2500\u2500 ComentarioDTO.class \u2502 \u251c\u2500\u2500 modelo \u2502 \u2502 \u251c\u2500\u2500 Comentario.class \u2502 \u2502 \u2514\u2500\u2500 Usuario.class \u2502 \u251c\u2500\u2500 servicio \u2502 \u2502 \u2514\u2500\u2500 ServicioComentario.class \u2502 \u2514\u2500\u2500 utils \u2502 \u2514\u2500\u2500 Parsers.class \u2514\u2500\u2500 test-classes \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 unoamuchos \u2514\u2500\u2500 servicio \u2514\u2500\u2500 ServicioComentarioTest.class 38 directories, 23 files Utilitarios Cuando se intenta ingresar una fecha Date a la base de datos, mejor cambiamos el formato antes de enviarla a java.sql.Date . Es por esto que se crea esta clase utilitaria con un s\u00f3lo m\u00e9todo. /unoamuchos/src/main/java/cl/lherrera/unoamuchos/utils/Parsers.java package cl.lherrera.unoamuchos.utils; import java.util.Date; public class Parsers { private Parsers() {} /** * Transforma un Date a un sql.date */ public static java.sql.Date toFechaDb(Date fecha){ return new java.sql.Date(fecha.getTime()); } } pom.xml /unoamuchos/pom.xml <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>cl.lherrera</groupId> <artifactId>unoamuchos</artifactId> <version>0.0.1-SNAPSHOT</version> <properties> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> </properties> <dependencies> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> <version>3.30.1</version> </dependency> <dependency> <groupId>org.mockito</groupId> <artifactId>mockito-core</artifactId> <version>2.28.2</version> <scope>test</scope> </dependency> <!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api --> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-api</artifactId> <version>5.6.0</version> <scope>test</scope> </dependency> <!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine --> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-engine</artifactId> <version>5.6.0</version> <scope>test</scope> </dependency> <!-- https://mvnrepository.com/artifact/org.junit.platform/junit-platform-launcher --> <dependency> <groupId>org.junit.platform</groupId> <artifactId>junit-platform-launcher</artifactId> <version>1.6.0</version> <scope>test</scope> </dependency> </dependencies> </project> Clase de administraci\u00f3n de la conexi\u00f3n ( Singlenton ). /unoamuchos/src/main/java/cl/lherrera/unoamuchos/dao/ManejaConexion.java package cl.lherrera.unoamuchos.dao; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; import java.util.logging.Logger; public class ManejaConexion { private static final String DB_URL = \"jdbc:sqlite:/Users/luisherrera/Desktop/TALENTO-PROS/servlets/relaciones/unoamuchos/database.db\"; private static final Logger milog = Logger.getLogger(ManejaConexion.class.getName()); private static ManejaConexion manejaConexion = new ManejaConexion(); private ManejaConexion() { if (manejaConexion != null){ //Prevent Reflection throw new IllegalStateException(\"No se puede crear una nueva instancia de ManejaConexion\"); } } public static ManejaConexion obtenerManejo() { return manejaConexion; } public Connection obtenerConexion() throws SQLException { Connection conexion = null; try { Class.forName(\"org.sqlite.JDBC\"); conexion = DriverManager.getConnection(DB_URL, \"admin\", \"1234\"); } catch (ClassNotFoundException e) { milog.severe(\"No se pudo cargar el driver.\"); milog.severe(e.getMessage()); } return conexion; } } Test Prueba dos servicios, el listar los comentarios de un usuario y almacenar un comentario en la base de datos. /unoamuchos/src/test/java/cl/lherrera/unoamuchos/servicio/ServicioComentarioTest.java package cl.lherrera.unoamuchos.servicio; import static org.junit.jupiter.api.Assertions.assertEquals; import static org.junit.jupiter.api.Assertions.assertTrue; import java.time.Instant; import java.util.Date; import java.util.List; import org.junit.jupiter.api.BeforeEach; import org.junit.jupiter.api.DisplayName; import org.junit.jupiter.api.Test; import java.util.logging.Logger; import cl.lherrera.unoamuchos.dto.ComentarioDTO; import cl.lherrera.unoamuchos.modelo.Usuario; @DisplayName(\"Prueba de los servicios de la persona\") public class ServicioComentarioTest { private static Logger logger = Logger.getLogger(ServicioComentarioTest.class.getName()); ServicioComentario servicio = new ServicioComentario(); @BeforeEach void porCada() { logger.info(\"Nuevo test___________________________________________________________________\"); } @Test @DisplayName(\"traer los comentariois de un usuario\") void comentariosUsuarios() { // obtener los comentarios de un usuario Usuario luis = new Usuario(1, \"luis\", null); // estos datos deben estar en la base de datos List<ComentarioDTO> comentarios = servicio.obtenerComentariosPorUsuario(luis); // listarlos comentarios.forEach(comentariodto -> logger.info(comentariodto.toString())); // realizar el assert assertEquals(2, comentarios.size()); } @Test @DisplayName(\"prueba de ingreso de comentario\") void ingresoDeComentario() { // se crea un comentario DTO por que viene del front ComentarioDTO dtoComentario = new ComentarioDTO(Date.from(Instant.now()), \"luis\", \"otro comentario\"); // se llama al servicio que ingresa int idComentario = servicio.ingresarComentario(dtoComentario); // listar Usuario luis = new Usuario(1, \"luis\", null); List<ComentarioDTO> comentarios = servicio.obtenerComentariosPorUsuario(luis); comentarios.forEach(comentariodto -> logger.info(comentariodto.toString())); assertTrue(idComentario > 0); } } Servicio de los comentarios /unoamuchos/src/main/java/cl/lherrera/unoamuchos/servicio/ServicioComentario.java package cl.lherrera.unoamuchos.servicio; import java.util.ArrayList; import java.util.List; import cl.lherrera.unoamuchos.dao.ComentarioDAO; import cl.lherrera.unoamuchos.dao.UsuarioDAO; import cl.lherrera.unoamuchos.dto.ComentarioDTO; import cl.lherrera.unoamuchos.modelo.Comentario; import cl.lherrera.unoamuchos.modelo.Usuario; public class ServicioComentario { private ComentarioDAO daoComentario = new ComentarioDAO(); private UsuarioDAO daoUsuario = new UsuarioDAO(); public List<ComentarioDTO> obtenerComentariosPorUsuario(Usuario usuario){ List<ComentarioDTO> dtoComentarios = new ArrayList<>(); List<Comentario> comentarios = daoComentario.obtenerComentariosPorUsuario(usuario); comentarios.forEach(comentario -> { ComentarioDTO dtoComentario = new ComentarioDTO( comentario.getFecha(), comentario.getTexto(), comentario.getUsuario().getNombre() ); dtoComentarios.add(dtoComentario); }); return dtoComentarios; } public int ingresarComentario(ComentarioDTO dtoComentario) { Usuario usuario = daoUsuario.obtenerPorNombre(dtoComentario.getNombreUsuario()); Comentario comentario = new Comentario(); comentario.setFecha(dtoComentario.getFecha()); comentario.setTexto(dtoComentario.getComentario()); comentario.setUsuario(usuario); return daoComentario.ingresar(comentario); } } DTO Esta clase almacena los datos, seg\u00fan lo necesite la capa de presentaci\u00f3n. /unoamuchos/src/main/java/cl/lherrera/unoamuchos/dto/ComentarioDTO.java package cl.lherrera.unoamuchos.dto; import java.io.Serializable; import java.util.Date; public class ComentarioDTO implements Serializable{ private static final long serialVersionUID = -5148123916338477059L; private Date fecha; private String nombreUsuario; private String comentario; public ComentarioDTO() {} public ComentarioDTO(Date fecha, String nombreUsuario, String comentario) { this.fecha = fecha; this.nombreUsuario = nombreUsuario; this.comentario = comentario; } public Date getFecha() { return fecha; } public void setFecha(Date fecha) { this.fecha = fecha; } public String getNombreUsuario() { return nombreUsuario; } public void setNombreUsuario(String nombreUsuario) { this.nombreUsuario = nombreUsuario; } public String getComentario() { return comentario; } public void setComentario(String comentario) { this.comentario = comentario; } @Override public String toString() { return \"ComentarioDTO [fecha=\" + fecha + \", nombreUsuario=\" + nombreUsuario + \", comentario=\" + comentario + \"]\"; } } DAOS Para el ejemplo, solamente un servicio es requerido por esta clase. /unoamuchos/src/main/java/cl/lherrera/unoamuchos/dao/UsuarioDAO.java package cl.lherrera.unoamuchos.dao; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.util.logging.Logger; import cl.lherrera.unoamuchos.modelo.Usuario; public class UsuarioDAO { private static Logger logger = Logger.getLogger(UsuarioDAO.class.getName()); private static ManejaConexion mc = ManejaConexion.obtenerManejo(); public Usuario obtenerPorNombre(String nombre) { Usuario usuario = new Usuario(); String sqlTxt = \"select id, nombre from usuario where nombre = '\" + nombre + \"'\"; try (Connection conexion = mc.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(sqlTxt); ResultSet rs = ps.executeQuery();) { while (rs.next()) { usuario.setId(rs.getInt(\"id\")); usuario.setNombre(rs.getString(\"nombre\")); } } catch (SQLException e) { logger.severe(sqlTxt); logger.info(e.getMessage()); } return usuario; } } Los comentarios en cambio, al evaluar en los test dos servicios de comentarios, esta implementaci\u00f3n es m\u00e1s extensa. /unoamuchos/src/main/java/cl/lherrera/unoamuchos/dao/ComentarioDAO.java package cl.lherrera.unoamuchos.dao; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.sql.Statement; import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.ArrayList; import java.util.Date; import java.util.List; import java.util.logging.Logger; import cl.lherrera.unoamuchos.modelo.Comentario; import cl.lherrera.unoamuchos.modelo.Usuario; import cl.lherrera.unoamuchos.utils.Parsers; public class ComentarioDAO { private static Logger logger = Logger.getLogger(ComentarioDAO.class.getName()); private static ManejaConexion mc = ManejaConexion.obtenerManejo(); private int retornaIdAutoincrementado(PreparedStatement ps) { int idIngresado = 0; try (ResultSet rs = ps.getGeneratedKeys();) { if (rs.next()) { idIngresado = rs.getInt(1); } } catch (SQLException e) { logger.severe(e.getMessage()); } return idIngresado; } public int ingresar(Comentario comentario) { int idIngresado = 0; String sqlQuery = \"\" + \"INSERT INTO comentario (fecha, texto, usuario_id) \" + \"VALUES (?, ?, ?)\"; try( Connection conexion = mc.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(sqlQuery, Statement.RETURN_GENERATED_KEYS); ){ // para la base de datos se va sqlelemente formateado. ps.setDate(1, Parsers.toFechaDb(comentario.getFecha())); ps.setString(2, comentario.getTexto()); ps.setInt(3, comentario.getUsuario().getId()); int filasAfectadas = ps.executeUpdate(); // para llamar a esta funci\u00f3n el ps debe estar ejecutado // o retorna cero. idIngresado = retornaIdAutoincrementado(ps); if(filasAfectadas != 1 || idIngresado == 0) throw new SQLException(\"Error al insertar registro\"); }catch (SQLException e) { logger.severe(e.getMessage()); } return idIngresado; } public List<Comentario> obtenerComentariosPorUsuario(Usuario usuario){ List<Comentario> comentarios = new ArrayList<>(); String sqlTxt = \"\" + \"select id, fecha, texto, usuario_id \" + \"from comentario \" + \"where usuario_id = \" + usuario.getId(); try( Connection conexion = mc.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(sqlTxt); ResultSet rs = ps.executeQuery(); ){ while(rs.next()) { SimpleDateFormat formato = new SimpleDateFormat(\"yyyy-MM-dd hh-mm\"); Date fecha = formato.parse(rs.getString(\"fecha\")); Comentario comentario = new Comentario( rs.getInt(\"id\"), fecha, rs.getString(\"texto\"), usuario); comentarios.add(comentario); } }catch(SQLException | ParseException e) { logger.info(e.getMessage()); } return comentarios; } } Modelo /unoamuchos/src/main/java/cl/lherrera/unoamuchos/modelo/Usuario.java package cl.lherrera.unoamuchos.modelo; import java.io.Serializable; import java.util.List; public class Usuario implements Serializable { private static final long serialVersionUID = 7144849864372688110L; private int id; private String nombre; private List<Comentario> comentarios; public Usuario(int id, String nombre, List<Comentario> comentarios) { super(); this.id = id; this.nombre = nombre; this.comentarios = comentarios; } public Usuario() {} public int getId() { return id; } public void setId(int id) { this.id = id; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } public List<Comentario> getComentarios() { return comentarios; } public void setComentarios(List<Comentario> comentarios) { this.comentarios = comentarios; } } /unoamuchos/src/main/java/cl/lherrera/unoamuchos/modelo/Comentario.java package cl.lherrera.unoamuchos.modelo; import java.io.Serializable; import java.util.Date; public class Comentario implements Serializable { private static final long serialVersionUID = 152095113347974183L; private int id; private Date fecha; private String texto; private Usuario usuario; public Comentario() {} public Comentario(int id, Date fecha, String texto, Usuario usuario) { super(); this.id = id; this.fecha = fecha; this.texto = texto; this.usuario = usuario; } public int getId() { return id; } public void setId(int id) { this.id = id; } public Date getFecha() { return fecha; } public void setFecha(Date fecha) { this.fecha = fecha; } public String getTexto() { return texto; } public void setTexto(String texto) { this.texto = texto; } public Usuario getUsuario() { return usuario; } public void setUsuario(Usuario usuario) { this.usuario = usuario; } } TODO \ud83e\udd4b En una empresa, se necesita crear un organigrama, para esto en las primeras reuniones con el cliente, se concluye que se necesitan al menos dos servicios para solucionar este problema, el primero que indique de un empleado, \u00bfqui\u00e9n es el jefe?, y \u00bfcuales son los empleados que posee un jefe?. Realizar esta soluci\u00f3n utilizando una tabla recursiva .","title":"unoAmuchos"},{"location":"ejercicios/basedatos/relaciones/unoAmuchos/#relacion-de-uno-a-muchos","text":"La relaci\u00f3n m\u00e1s com\u00fan que tendremos en un modelo de datos, aunque necesitamos conocerlas todas, esta relaci\u00f3n es la que m\u00e1s veces implementaremos. Necesitamos conocer los comentarios que realiza un usuario. adem\u00e1s de poder ingresar alg\u00fan comentario.","title":"Relaci\u00f3n de uno a muchos"},{"location":"ejercicios/basedatos/relaciones/unoAmuchos/#modelo-de-datos-sqlite","text":"","title":"Modelo de datos (SQLITE)"},{"location":"ejercicios/basedatos/relaciones/unoAmuchos/#ddl","text":"-- activamos la restricci\u00f3n de las llaves foraneas pragma foreign_keys = ON; -- se crea la tabla de usuarios CREATE table usuario ( id integer primary key autoincrement, nombre text ); -- se crea la tabla comentario CREATE table comentario ( id integer primary key autoincrement, fecha datetime, texto text, usuario_id integer not null, FOREIGN KEY(usuario_id) REFERENCES usuario(id) ON DELETE CASCADE ); -- se ingresan los datos para comenzar con las pruebas desde el sistema insert into usuario (nombre) values ('luis'); insert into comentario (fecha, texto, usuario_id) values ( strftime('%Y-%m-%d %H-%M','now'), \"Este es un comentario de luis..\", 1 ); insert into comentario (fecha, texto, usuario_id) values ( strftime('%Y-%m-%d %H-%M','now'), \"Este es un segundo comentario de luis..\", 1 ); -- probamos que exista el usuario y dos comentarios select * from usuario; select * from comentario; -- -- en caso de ejecutar los tests, para que vuelva a funcionar -- -- necesitamos borrar el comentario ingresado en el test -- delete from comentario where texto == \"otro comentario\";","title":"DDL"},{"location":"ejercicios/basedatos/relaciones/unoAmuchos/#estructura-del-proyecto","text":"./ \u251c\u2500\u2500 database.db \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 unoamuchos \u2502 \u2502 \u2502 \u251c\u2500\u2500 dao \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ComentarioDAO.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ManejaConexion.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioDAO.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 dto \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ComentarioDTO.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 modelo \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 Comentario.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 Usuario.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 servicio \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ServicioComentario.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 utils \u2502 \u2502 \u2502 \u2514\u2500\u2500 Parsers.java \u2502 \u2502 \u2514\u2500\u2500 resources \u2502 \u2514\u2500\u2500 test \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2514\u2500\u2500 unoamuchos \u2502 \u2502 \u2514\u2500\u2500 servicio \u2502 \u2502 \u2514\u2500\u2500 ServicioComentarioTest.java \u2502 \u2514\u2500\u2500 resources \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2502 \u2514\u2500\u2500 maven \u2502 \u2502 \u2514\u2500\u2500 cl.lherrera \u2502 \u2502 \u2514\u2500\u2500 unoamuchos \u2502 \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2502 \u2514\u2500\u2500 pom.xml \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 unoamuchos \u2502 \u251c\u2500\u2500 dao \u2502 \u2502 \u251c\u2500\u2500 ComentarioDAO.class \u2502 \u2502 \u251c\u2500\u2500 ManejaConexion.class \u2502 \u2502 \u2514\u2500\u2500 UsuarioDAO.class \u2502 \u251c\u2500\u2500 dto \u2502 \u2502 \u2514\u2500\u2500 ComentarioDTO.class \u2502 \u251c\u2500\u2500 modelo \u2502 \u2502 \u251c\u2500\u2500 Comentario.class \u2502 \u2502 \u2514\u2500\u2500 Usuario.class \u2502 \u251c\u2500\u2500 servicio \u2502 \u2502 \u2514\u2500\u2500 ServicioComentario.class \u2502 \u2514\u2500\u2500 utils \u2502 \u2514\u2500\u2500 Parsers.class \u2514\u2500\u2500 test-classes \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 unoamuchos \u2514\u2500\u2500 servicio \u2514\u2500\u2500 ServicioComentarioTest.class 38 directories, 23 files","title":"Estructura del proyecto"},{"location":"ejercicios/basedatos/relaciones/unoAmuchos/#utilitarios","text":"Cuando se intenta ingresar una fecha Date a la base de datos, mejor cambiamos el formato antes de enviarla a java.sql.Date . Es por esto que se crea esta clase utilitaria con un s\u00f3lo m\u00e9todo. /unoamuchos/src/main/java/cl/lherrera/unoamuchos/utils/Parsers.java package cl.lherrera.unoamuchos.utils; import java.util.Date; public class Parsers { private Parsers() {} /** * Transforma un Date a un sql.date */ public static java.sql.Date toFechaDb(Date fecha){ return new java.sql.Date(fecha.getTime()); } }","title":"Utilitarios"},{"location":"ejercicios/basedatos/relaciones/unoAmuchos/#pomxml","text":"/unoamuchos/pom.xml <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>cl.lherrera</groupId> <artifactId>unoamuchos</artifactId> <version>0.0.1-SNAPSHOT</version> <properties> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> </properties> <dependencies> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> <version>3.30.1</version> </dependency> <dependency> <groupId>org.mockito</groupId> <artifactId>mockito-core</artifactId> <version>2.28.2</version> <scope>test</scope> </dependency> <!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api --> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-api</artifactId> <version>5.6.0</version> <scope>test</scope> </dependency> <!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine --> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-engine</artifactId> <version>5.6.0</version> <scope>test</scope> </dependency> <!-- https://mvnrepository.com/artifact/org.junit.platform/junit-platform-launcher --> <dependency> <groupId>org.junit.platform</groupId> <artifactId>junit-platform-launcher</artifactId> <version>1.6.0</version> <scope>test</scope> </dependency> </dependencies> </project>","title":"pom.xml"},{"location":"ejercicios/basedatos/relaciones/unoAmuchos/#clase-de-administracion-de-la-conexion-singlenton","text":"/unoamuchos/src/main/java/cl/lherrera/unoamuchos/dao/ManejaConexion.java package cl.lherrera.unoamuchos.dao; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; import java.util.logging.Logger; public class ManejaConexion { private static final String DB_URL = \"jdbc:sqlite:/Users/luisherrera/Desktop/TALENTO-PROS/servlets/relaciones/unoamuchos/database.db\"; private static final Logger milog = Logger.getLogger(ManejaConexion.class.getName()); private static ManejaConexion manejaConexion = new ManejaConexion(); private ManejaConexion() { if (manejaConexion != null){ //Prevent Reflection throw new IllegalStateException(\"No se puede crear una nueva instancia de ManejaConexion\"); } } public static ManejaConexion obtenerManejo() { return manejaConexion; } public Connection obtenerConexion() throws SQLException { Connection conexion = null; try { Class.forName(\"org.sqlite.JDBC\"); conexion = DriverManager.getConnection(DB_URL, \"admin\", \"1234\"); } catch (ClassNotFoundException e) { milog.severe(\"No se pudo cargar el driver.\"); milog.severe(e.getMessage()); } return conexion; } }","title":"Clase de administraci\u00f3n de la conexi\u00f3n (Singlenton)."},{"location":"ejercicios/basedatos/relaciones/unoAmuchos/#test","text":"Prueba dos servicios, el listar los comentarios de un usuario y almacenar un comentario en la base de datos. /unoamuchos/src/test/java/cl/lherrera/unoamuchos/servicio/ServicioComentarioTest.java package cl.lherrera.unoamuchos.servicio; import static org.junit.jupiter.api.Assertions.assertEquals; import static org.junit.jupiter.api.Assertions.assertTrue; import java.time.Instant; import java.util.Date; import java.util.List; import org.junit.jupiter.api.BeforeEach; import org.junit.jupiter.api.DisplayName; import org.junit.jupiter.api.Test; import java.util.logging.Logger; import cl.lherrera.unoamuchos.dto.ComentarioDTO; import cl.lherrera.unoamuchos.modelo.Usuario; @DisplayName(\"Prueba de los servicios de la persona\") public class ServicioComentarioTest { private static Logger logger = Logger.getLogger(ServicioComentarioTest.class.getName()); ServicioComentario servicio = new ServicioComentario(); @BeforeEach void porCada() { logger.info(\"Nuevo test___________________________________________________________________\"); } @Test @DisplayName(\"traer los comentariois de un usuario\") void comentariosUsuarios() { // obtener los comentarios de un usuario Usuario luis = new Usuario(1, \"luis\", null); // estos datos deben estar en la base de datos List<ComentarioDTO> comentarios = servicio.obtenerComentariosPorUsuario(luis); // listarlos comentarios.forEach(comentariodto -> logger.info(comentariodto.toString())); // realizar el assert assertEquals(2, comentarios.size()); } @Test @DisplayName(\"prueba de ingreso de comentario\") void ingresoDeComentario() { // se crea un comentario DTO por que viene del front ComentarioDTO dtoComentario = new ComentarioDTO(Date.from(Instant.now()), \"luis\", \"otro comentario\"); // se llama al servicio que ingresa int idComentario = servicio.ingresarComentario(dtoComentario); // listar Usuario luis = new Usuario(1, \"luis\", null); List<ComentarioDTO> comentarios = servicio.obtenerComentariosPorUsuario(luis); comentarios.forEach(comentariodto -> logger.info(comentariodto.toString())); assertTrue(idComentario > 0); } }","title":"Test"},{"location":"ejercicios/basedatos/relaciones/unoAmuchos/#servicio-de-los-comentarios","text":"/unoamuchos/src/main/java/cl/lherrera/unoamuchos/servicio/ServicioComentario.java package cl.lherrera.unoamuchos.servicio; import java.util.ArrayList; import java.util.List; import cl.lherrera.unoamuchos.dao.ComentarioDAO; import cl.lherrera.unoamuchos.dao.UsuarioDAO; import cl.lherrera.unoamuchos.dto.ComentarioDTO; import cl.lherrera.unoamuchos.modelo.Comentario; import cl.lherrera.unoamuchos.modelo.Usuario; public class ServicioComentario { private ComentarioDAO daoComentario = new ComentarioDAO(); private UsuarioDAO daoUsuario = new UsuarioDAO(); public List<ComentarioDTO> obtenerComentariosPorUsuario(Usuario usuario){ List<ComentarioDTO> dtoComentarios = new ArrayList<>(); List<Comentario> comentarios = daoComentario.obtenerComentariosPorUsuario(usuario); comentarios.forEach(comentario -> { ComentarioDTO dtoComentario = new ComentarioDTO( comentario.getFecha(), comentario.getTexto(), comentario.getUsuario().getNombre() ); dtoComentarios.add(dtoComentario); }); return dtoComentarios; } public int ingresarComentario(ComentarioDTO dtoComentario) { Usuario usuario = daoUsuario.obtenerPorNombre(dtoComentario.getNombreUsuario()); Comentario comentario = new Comentario(); comentario.setFecha(dtoComentario.getFecha()); comentario.setTexto(dtoComentario.getComentario()); comentario.setUsuario(usuario); return daoComentario.ingresar(comentario); } }","title":"Servicio de los comentarios"},{"location":"ejercicios/basedatos/relaciones/unoAmuchos/#dto","text":"Esta clase almacena los datos, seg\u00fan lo necesite la capa de presentaci\u00f3n. /unoamuchos/src/main/java/cl/lherrera/unoamuchos/dto/ComentarioDTO.java package cl.lherrera.unoamuchos.dto; import java.io.Serializable; import java.util.Date; public class ComentarioDTO implements Serializable{ private static final long serialVersionUID = -5148123916338477059L; private Date fecha; private String nombreUsuario; private String comentario; public ComentarioDTO() {} public ComentarioDTO(Date fecha, String nombreUsuario, String comentario) { this.fecha = fecha; this.nombreUsuario = nombreUsuario; this.comentario = comentario; } public Date getFecha() { return fecha; } public void setFecha(Date fecha) { this.fecha = fecha; } public String getNombreUsuario() { return nombreUsuario; } public void setNombreUsuario(String nombreUsuario) { this.nombreUsuario = nombreUsuario; } public String getComentario() { return comentario; } public void setComentario(String comentario) { this.comentario = comentario; } @Override public String toString() { return \"ComentarioDTO [fecha=\" + fecha + \", nombreUsuario=\" + nombreUsuario + \", comentario=\" + comentario + \"]\"; } }","title":"DTO"},{"location":"ejercicios/basedatos/relaciones/unoAmuchos/#daos","text":"Para el ejemplo, solamente un servicio es requerido por esta clase. /unoamuchos/src/main/java/cl/lherrera/unoamuchos/dao/UsuarioDAO.java package cl.lherrera.unoamuchos.dao; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.util.logging.Logger; import cl.lherrera.unoamuchos.modelo.Usuario; public class UsuarioDAO { private static Logger logger = Logger.getLogger(UsuarioDAO.class.getName()); private static ManejaConexion mc = ManejaConexion.obtenerManejo(); public Usuario obtenerPorNombre(String nombre) { Usuario usuario = new Usuario(); String sqlTxt = \"select id, nombre from usuario where nombre = '\" + nombre + \"'\"; try (Connection conexion = mc.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(sqlTxt); ResultSet rs = ps.executeQuery();) { while (rs.next()) { usuario.setId(rs.getInt(\"id\")); usuario.setNombre(rs.getString(\"nombre\")); } } catch (SQLException e) { logger.severe(sqlTxt); logger.info(e.getMessage()); } return usuario; } } Los comentarios en cambio, al evaluar en los test dos servicios de comentarios, esta implementaci\u00f3n es m\u00e1s extensa. /unoamuchos/src/main/java/cl/lherrera/unoamuchos/dao/ComentarioDAO.java package cl.lherrera.unoamuchos.dao; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.sql.Statement; import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.ArrayList; import java.util.Date; import java.util.List; import java.util.logging.Logger; import cl.lherrera.unoamuchos.modelo.Comentario; import cl.lherrera.unoamuchos.modelo.Usuario; import cl.lherrera.unoamuchos.utils.Parsers; public class ComentarioDAO { private static Logger logger = Logger.getLogger(ComentarioDAO.class.getName()); private static ManejaConexion mc = ManejaConexion.obtenerManejo(); private int retornaIdAutoincrementado(PreparedStatement ps) { int idIngresado = 0; try (ResultSet rs = ps.getGeneratedKeys();) { if (rs.next()) { idIngresado = rs.getInt(1); } } catch (SQLException e) { logger.severe(e.getMessage()); } return idIngresado; } public int ingresar(Comentario comentario) { int idIngresado = 0; String sqlQuery = \"\" + \"INSERT INTO comentario (fecha, texto, usuario_id) \" + \"VALUES (?, ?, ?)\"; try( Connection conexion = mc.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(sqlQuery, Statement.RETURN_GENERATED_KEYS); ){ // para la base de datos se va sqlelemente formateado. ps.setDate(1, Parsers.toFechaDb(comentario.getFecha())); ps.setString(2, comentario.getTexto()); ps.setInt(3, comentario.getUsuario().getId()); int filasAfectadas = ps.executeUpdate(); // para llamar a esta funci\u00f3n el ps debe estar ejecutado // o retorna cero. idIngresado = retornaIdAutoincrementado(ps); if(filasAfectadas != 1 || idIngresado == 0) throw new SQLException(\"Error al insertar registro\"); }catch (SQLException e) { logger.severe(e.getMessage()); } return idIngresado; } public List<Comentario> obtenerComentariosPorUsuario(Usuario usuario){ List<Comentario> comentarios = new ArrayList<>(); String sqlTxt = \"\" + \"select id, fecha, texto, usuario_id \" + \"from comentario \" + \"where usuario_id = \" + usuario.getId(); try( Connection conexion = mc.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(sqlTxt); ResultSet rs = ps.executeQuery(); ){ while(rs.next()) { SimpleDateFormat formato = new SimpleDateFormat(\"yyyy-MM-dd hh-mm\"); Date fecha = formato.parse(rs.getString(\"fecha\")); Comentario comentario = new Comentario( rs.getInt(\"id\"), fecha, rs.getString(\"texto\"), usuario); comentarios.add(comentario); } }catch(SQLException | ParseException e) { logger.info(e.getMessage()); } return comentarios; } }","title":"DAOS"},{"location":"ejercicios/basedatos/relaciones/unoAmuchos/#modelo","text":"/unoamuchos/src/main/java/cl/lherrera/unoamuchos/modelo/Usuario.java package cl.lherrera.unoamuchos.modelo; import java.io.Serializable; import java.util.List; public class Usuario implements Serializable { private static final long serialVersionUID = 7144849864372688110L; private int id; private String nombre; private List<Comentario> comentarios; public Usuario(int id, String nombre, List<Comentario> comentarios) { super(); this.id = id; this.nombre = nombre; this.comentarios = comentarios; } public Usuario() {} public int getId() { return id; } public void setId(int id) { this.id = id; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } public List<Comentario> getComentarios() { return comentarios; } public void setComentarios(List<Comentario> comentarios) { this.comentarios = comentarios; } } /unoamuchos/src/main/java/cl/lherrera/unoamuchos/modelo/Comentario.java package cl.lherrera.unoamuchos.modelo; import java.io.Serializable; import java.util.Date; public class Comentario implements Serializable { private static final long serialVersionUID = 152095113347974183L; private int id; private Date fecha; private String texto; private Usuario usuario; public Comentario() {} public Comentario(int id, Date fecha, String texto, Usuario usuario) { super(); this.id = id; this.fecha = fecha; this.texto = texto; this.usuario = usuario; } public int getId() { return id; } public void setId(int id) { this.id = id; } public Date getFecha() { return fecha; } public void setFecha(Date fecha) { this.fecha = fecha; } public String getTexto() { return texto; } public void setTexto(String texto) { this.texto = texto; } public Usuario getUsuario() { return usuario; } public void setUsuario(Usuario usuario) { this.usuario = usuario; } }","title":"Modelo"},{"location":"ejercicios/basedatos/relaciones/unoAmuchos/#todo","text":"En una empresa, se necesita crear un organigrama, para esto en las primeras reuniones con el cliente, se concluye que se necesitan al menos dos servicios para solucionar este problema, el primero que indique de un empleado, \u00bfqui\u00e9n es el jefe?, y \u00bfcuales son los empleados que posee un jefe?. Realizar esta soluci\u00f3n utilizando una tabla recursiva .","title":"TODO \ud83e\udd4b"},{"location":"ejercicios/basedatos/relaciones/unoAuno/","text":"Relaci\u00f3n de uno a uno Esta relaci\u00f3n no es muy com\u00fan, a menos que se tengan tablas muy grandes y que haya que dividirlas para asuntos de estandarizaci\u00f3n. La primera forma en que se aborda este problema es usando la misma llave primaria en todas las tablas, as\u00ed podemos relacionar las tablas por que todas tienen el mismo id. Esto representa un problema cuando lo estamos programando, ya que insertar el mismo id en varias tablas, no es una tarea r\u00e1pida y estable desde java, adem\u00e1s nuestras llaves ser\u00e1n auto-incremental , peor a\u00fan. Por eso se usar\u00e1 una clave foranea \u00fanica, para que la relaci\u00f3n sea solo una, no nula para que sea obligatoria y si se borra la persona, que se borren los datos autom\u00e1ticamente, esto lo realizamos con un borrado en cascada. Modelo de datos ( SQLITE ) DDL Lo primero despu\u00e9s de la creaci\u00f3n de la estructura, es una demostraci\u00f3n de el comportamiento del borrado en cascada. Luego llenamos la tabla para probar la aplicaci\u00f3n. PRAGMA foreign_keys = ON DROP TABLE IF EXISTS dato_personal; DROP TABLE IF EXISTS persona; CREATE TABLE persona ( id INTEGER PRIMARY KEY AUTOINCREMENT, nombre TEXT ); CREATE TABLE dato_personal ( id integer PRIMARY KEY AUTOINCREMENT, telefono TEXT, email TEXT, persona_id INTEGER UNIQUE, FOREIGN KEY(persona_id) REFERENCES persona(id) ON DELETE CASCADE ); -- confirmamos la existencia de las tablas select * from persona; select * from dato_personal; -- ingresamos una persona y sus datos insert into persona (nombre) values (\"luis\"); insert into dato_personal (telefono, email, persona_id) values (\"54319341\", \"mail@fake.dev\", 1); -- confirmamos el ingreso de la informaci\u00f3n select * from persona; select * from dato_personal; -- ingresamos otro dato personal, y lo intentamos asignar a la misma persona -- esto deber\u00eda fallar. insert into dato_personal (telefono, email, persona_id) values (\"76764276\", \"mail2@fake.dev\", 1); -- si eliminamos la persona, su referencia debe desaparecer en cascada. -- No muy recomendable, mejor desactivar para guardar historial. delete from persona where nombre = \"luis\"; -- confirmamos datos eliminados de ambas tablas select * from persona; select * from dato_personal; -- ahora ya podemos poblar con datos para dejar la base de datos lista -- para el ejemplo. insert into persona (nombre) values (\"luis\"); insert into persona (nombre) values (\"ana\"); insert into dato_personal (telefono, email, persona_id) values (\"65657674\", \"luis@fake.dev\", 2); insert into dato_personal (telefono, email, persona_id) values (\"76764276\", \"ana@fake.dev\", 3); -- para despu\u00e9s del test. -- delete from persona where nombre = 'alejandra'; Estructura del proyecto ./ \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 unoauno \u2502 \u2502 \u2502 \u251c\u2500\u2500 dao \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 DatoPersonalDAO.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ManejaConexion.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 PersonaDAO.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 dto \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 PersonaDTO.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 modelo \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 DatoPersonal.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 Persona.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 servicios \u2502 \u2502 \u2502 \u2514\u2500\u2500 ServicioPersonas.java \u2502 \u2502 \u2514\u2500\u2500 resources \u2502 \u2514\u2500\u2500 test \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2514\u2500\u2500 unoauno \u2502 \u2502 \u2514\u2500\u2500 servicios \u2502 \u2502 \u2514\u2500\u2500 ServicioPersonasTest.java \u2502 \u2514\u2500\u2500 resources \u251c\u2500\u2500 target \u2502 \u251c\u2500\u2500 classes \u2502 \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2502 \u2502 \u2514\u2500\u2500 maven \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl.lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 unoauno \u2502 \u2502 \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2502 \u2502 \u2514\u2500\u2500 pom.xml \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2514\u2500\u2500 unoauno \u2502 \u2502 \u251c\u2500\u2500 dao \u2502 \u2502 \u2502 \u251c\u2500\u2500 DatoPersonalDAO.class \u2502 \u2502 \u2502 \u251c\u2500\u2500 ManejaConexion.class \u2502 \u2502 \u2502 \u2514\u2500\u2500 PersonaDAO.class \u2502 \u2502 \u251c\u2500\u2500 dto \u2502 \u2502 \u2502 \u2514\u2500\u2500 PersonaDTO.class \u2502 \u2502 \u251c\u2500\u2500 modelo \u2502 \u2502 \u2502 \u251c\u2500\u2500 DatoPersonal.class \u2502 \u2502 \u2502 \u2514\u2500\u2500 Persona.class \u2502 \u2502 \u2514\u2500\u2500 servicios \u2502 \u2502 \u2514\u2500\u2500 ServicioPersonas.class \u2502 \u2514\u2500\u2500 test-classes \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 unoauno \u2502 \u2514\u2500\u2500 servicios \u2502 \u2514\u2500\u2500 ServicioPersonasTest.class \u2514\u2500\u2500 unoauno.db 36 directories, 21 files pom.xml /unoauno/pom.xml <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>cl.lherrera</groupId> <artifactId>unoauno</artifactId> <version>0.0.1-SNAPSHOT</version> <dependencies> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> <version>3.30.1</version> </dependency> <dependency> <groupId>org.mockito</groupId> <artifactId>mockito-core</artifactId> <version>2.28.2</version> <scope>test</scope> </dependency> <!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api --> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-api</artifactId> <version>5.6.0</version> <scope>test</scope> </dependency> <!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine --> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-engine</artifactId> <version>5.6.0</version> <scope>test</scope> </dependency> <!-- https://mvnrepository.com/artifact/org.junit.platform/junit-platform-launcher --> <dependency> <groupId>org.junit.platform</groupId> <artifactId>junit-platform-launcher</artifactId> <version>1.6.0</version> <scope>test</scope> </dependency> </dependencies> </project> Clase de administraci\u00f3n de la conexi\u00f3n ( Singlenton ). /unoauno/src/main/java/cl/lherrera/unoauno/dao/ManejaConexion.java package cl.lherrera.unoauno.dao; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; import java.util.logging.Logger; public class ManejaConexion { private static final String DB_URL = \"jdbc:sqlite:/Users/luisherrera/Desktop/TALENTO-PROS/servlets/relaciones/unoauno/unoauno.db\"; private static final Logger milog = Logger.getLogger(ManejaConexion.class.getName()); private static ManejaConexion manejaConexion = new ManejaConexion(); private ManejaConexion() { if (manejaConexion != null){ //Prevent Reflection throw new IllegalStateException(\"No se puede crear una nueva instancia de ManejaConexion\"); } } public static ManejaConexion obtenerManejo() { return manejaConexion; } public Connection obtenerConexion() throws SQLException { Connection conexion = null; try { Class.forName(\"org.sqlite.JDBC\"); conexion = DriverManager.getConnection(DB_URL, \"admin\", \"1234\"); } catch (ClassNotFoundException e) { milog.severe(\"No se pudo cargar el driver.\"); milog.severe(e.getMessage()); } return conexion; } } Test Lo primero que haremos antes de implementar lo que viene. /unoauno/src/test/java/cl/lherrera/unoauno/servicios/ServicioPersonasTest.java package cl.lherrera.unoauno.servicios; import static org.junit.jupiter.api.Assertions.assertEquals; import java.util.List; import java.util.logging.Logger; import org.junit.jupiter.api.DisplayName; import org.junit.jupiter.api.Test; import cl.lherrera.unoauno.dto.PersonaDTO; @DisplayName(\"pruebas de servicios personas\") public class ServicioPersonasTest { Logger logger = Logger.getLogger(ServicioPersonasTest.class.getName()); ServicioPersonas servicio = new ServicioPersonas(); @Test @DisplayName(\"prueba listar personas\") void listarPersonas() { // traer las personas desde el servicio List<PersonaDTO> personas = servicio.obtenerPersonas(); // imprimirlas personas.forEach(persona -> logger.info(persona.toString())); // hacer el assert assertEquals(2, personas.size()); } @Test @DisplayName(\"probar el ingreso de la persona\") void servicioIngreso() { // simular un ingreso desde la vista PersonaDTO dtoPersona = new PersonaDTO(\"Alejandra\", \"647874334\", \"theAlexx@hotmail.com\"); // llamar al servicio de ingreso boolean ingresado = servicio.ingresarPersona(dtoPersona); // listar las personas List<PersonaDTO> personas = servicio.obtenerPersonas(); personas.forEach(persona -> logger.info(persona.toString())); // hacer el assert assertEquals(true, ingresado); } } Servicio de persona Se puede observar que el servicio se encarga de formar los datos que el negocio requiere, es como qui\u00e9n dise\u00f1a los informes para los gerentes, el servicio de personas es la entidad que contiene la l\u00f3gica que el negocio necesita, este servicio es consumidor de alguna fuente de datos, que en esta ocasi\u00f3n se encuentra dentro del mismo proyecto, pero el servicio es quien ver\u00e1 como adapta la informaci\u00f3n con las fuentes de datos que tenga a disposici\u00f3n. /unoauno/src/main/java/cl/lherrera/unoauno/servicios/ServicioPersonas.java package cl.lherrera.unoauno.servicios; import java.util.ArrayList; import java.util.List; import cl.lherrera.unoauno.dao.DatoPersonalDAO; import cl.lherrera.unoauno.dao.PersonaDAO; import cl.lherrera.unoauno.dto.PersonaDTO; import cl.lherrera.unoauno.modelo.DatoPersonal; import cl.lherrera.unoauno.modelo.Persona; public class ServicioPersonas { DatoPersonalDAO daodatospersonales = new DatoPersonalDAO(); PersonaDAO daoPersona = new PersonaDAO(); DatoPersonalDAO daoDatoPersonal = new DatoPersonalDAO(); public List<PersonaDTO> obtenerPersonas(){ List<PersonaDTO> personasDTO = new ArrayList<>(); List<DatoPersonal> datosPersonales = daodatospersonales.obtenerTodos(); datosPersonales.forEach(datoPersonal -> { PersonaDTO dtoPersona = new PersonaDTO(); dtoPersona.setNombre(datoPersonal.getPersona().getNombre()); dtoPersona.setTelefono(datoPersonal.getTelefono()); dtoPersona.setEmail(datoPersonal.getEmail()); personasDTO.add(dtoPersona); }); return personasDTO; } public boolean ingresarPersona(PersonaDTO dtoPersona) { boolean ingresado = false; Persona persona = new Persona(); DatoPersonal datosPersonal = new DatoPersonal(); // ingresar persona persona.setNombre(dtoPersona.getNombre()); int idPersona = daoPersona.ingresar(persona); // ya sabemos el id de la persona nueva y lo seteamos // para que viaje a ser insertado en sus datos personales. persona.setId(idPersona); // ingresar datos personales datosPersonal.setTelefono(dtoPersona.getTelefono()); datosPersonal.setEmail(dtoPersona.getEmail()); datosPersonal.setPersona(persona); int idDatoPersonal = daoDatoPersonal.ingresar(datosPersonal); ingresado = idPersona != 0 && idDatoPersonal != 0; return ingresado; } } DTO El presente proyecto posee una presentaci\u00f3n especial, con m\u00e1s datos que los que contiene la tabla personas, es por esta raz\u00f3n que necesitamos un DTO para que tenga los datos que necesita el negocio. En un proyecto que comienza, es bueno dejar el modelo de datos especialmente dise\u00f1ado para nuestro negocio, pero no siempre dispondremos de una fuente de datos identica a todas las entidades del negocio en nuestra aplicaci\u00f3n, por eso los DTO son buenos elementos para adaptar esta informaci\u00f3n a las vistas. cl.lherrera.unoauno.dto.PersonaDTO package cl.lherrera.unoauno.dto; import java.io.Serializable; public class PersonaDTO implements Serializable{ private static final long serialVersionUID = -9126621171518423226L; private String nombre; private String telefono; private String email; public PersonaDTO() {} public PersonaDTO(String nombre, String telefono, String email) { this.nombre = nombre; this.telefono = telefono; this.email = email; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } public String getTelefono() { return telefono; } public void setTelefono(String telefono) { this.telefono = telefono; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } @Override public String toString() { return \"PersonaDTO [nombre=\" + nombre + \", telefono=\" + telefono + \", email=\" + email + \"]\"; } } DAOS /unoauno/src/main/java/cl/lherrera/unoauno/dao/PersonaDAO.java package cl.lherrera.unoauno.dao; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.sql.Statement; import java.util.logging.Logger; import cl.lherrera.unoauno.modelo.Persona; public class PersonaDAO { private static Logger logger = Logger.getLogger(PersonaDAO.class.getName()); private static ManejaConexion mc = ManejaConexion.obtenerManejo(); public Persona obtenerPorId(int id) { Persona persona = new Persona(); String sqlTxt = \"select id, nombre from persona where id = \" + id; try( Connection conexion = mc.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(sqlTxt); ResultSet rs = ps.executeQuery(); ){ if(rs.next()) { persona.setId(rs.getInt(\"id\")); persona.setNombre(rs.getString(\"nombre\")); } }catch(SQLException e) { logger.severe(e.getMessage()); } return persona; } public int ingresar(Persona persona) { String sqlTxt = \"insert into persona (nombre) values (?)\"; int idIngresado = 0; try( Connection conexion = mc.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(sqlTxt, Statement.RETURN_GENERATED_KEYS); ){ ps.setString(1, persona.getNombre() ); int filasAfectadas = ps.executeUpdate(); ResultSet rs = ps.getGeneratedKeys(); if(rs.next()) { idIngresado = rs.getInt(1); } if(filasAfectadas == 0) { throw new SQLException(\"No se pudo ingresar el registro\"); } }catch(SQLException e) {logger.severe(e.getMessage());} return idIngresado; } } /unoauno/src/main/java/cl/lherrera/unoauno/dao/DatoPersonalDAO.java package cl.lherrera.unoauno.dao; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.sql.Statement; import java.util.ArrayList; import java.util.List; import java.util.logging.Logger; import cl.lherrera.unoauno.modelo.DatoPersonal; import cl.lherrera.unoauno.modelo.Persona; public class DatoPersonalDAO { private Logger logger = Logger.getLogger(DatoPersonalDAO.class.getName()); private static ManejaConexion manejaDB = ManejaConexion.obtenerManejo(); public List<DatoPersonal> obtenerTodos() { List<DatoPersonal> datospersonales = new ArrayList<>(); String sqlTxt = \"select id, telefono, email, persona_id from dato_personal\"; try( Connection conexion = manejaDB.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(sqlTxt); ResultSet rs = ps.executeQuery(); ){ while(rs.next()) { DatoPersonal datoPersonal = new DatoPersonal(); // llenamos la persona con el id que tenemos Persona persona = (new PersonaDAO()).obtenerPorId(rs.getInt(\"id\")); datoPersonal.setId(rs.getInt(\"id\")); datoPersonal.setTelefono(rs.getString(\"telefono\")); datoPersonal.setEmail(rs.getString(\"email\")); datoPersonal.setPersona(persona); // lo dejamos en la lista datospersonales.add(datoPersonal); } }catch(SQLException e){ logger.info(e.getMessage()); } return datospersonales; } public int ingresar(DatoPersonal datoPersonal) { String sqlTxt = \"insert into dato_personal (telefono, email, persona_id) values (?, ?, ?)\"; int idIngresado = 0; int filasAfectadas = 0; try( Connection conexion = manejaDB.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(sqlTxt, Statement.RETURN_GENERATED_KEYS); ){ ps.setString(1, datoPersonal.getTelefono()); ps.setString(2, datoPersonal.getEmail()); ps.setInt(3, datoPersonal.getPersona().getId() ); filasAfectadas = ps.executeUpdate(); ResultSet rs = ps.getGeneratedKeys(); if(rs.next()) { idIngresado = rs.getInt(1); } if(filasAfectadas == 0) { throw new SQLException(\"No se pudo ingresar el registro\"); } }catch(SQLException e) {logger.severe(e.getMessage());} return idIngresado; } } Modelo /unoauno/src/main/java/cl/lherrera/unoauno/modelo/Persona.java package cl.lherrera.unoauno.modelo; public class Persona { private int id; private String nombre; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } } /unoauno/src/main/java/cl/lherrera/unoauno/modelo/DatoPersonal.java package cl.lherrera.unoauno.modelo; public class DatoPersonal { private int id; private String telefono; private String email; private Persona persona; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getTelefono() { return telefono; } public void setTelefono(String telefono) { this.telefono = telefono; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public Persona getPersona() { return persona; } public void setPersona(Persona persona) { this.persona = persona; } } TODO Crear los dem\u00e1s servicios de CRUD, adem\u00e1s de hacerlo web.","title":"unoAuno"},{"location":"ejercicios/basedatos/relaciones/unoAuno/#relacion-de-uno-a-uno","text":"Esta relaci\u00f3n no es muy com\u00fan, a menos que se tengan tablas muy grandes y que haya que dividirlas para asuntos de estandarizaci\u00f3n. La primera forma en que se aborda este problema es usando la misma llave primaria en todas las tablas, as\u00ed podemos relacionar las tablas por que todas tienen el mismo id. Esto representa un problema cuando lo estamos programando, ya que insertar el mismo id en varias tablas, no es una tarea r\u00e1pida y estable desde java, adem\u00e1s nuestras llaves ser\u00e1n auto-incremental , peor a\u00fan. Por eso se usar\u00e1 una clave foranea \u00fanica, para que la relaci\u00f3n sea solo una, no nula para que sea obligatoria y si se borra la persona, que se borren los datos autom\u00e1ticamente, esto lo realizamos con un borrado en cascada.","title":"Relaci\u00f3n de uno a uno"},{"location":"ejercicios/basedatos/relaciones/unoAuno/#modelo-de-datos-sqlite","text":"","title":"Modelo de datos (SQLITE)"},{"location":"ejercicios/basedatos/relaciones/unoAuno/#ddl","text":"Lo primero despu\u00e9s de la creaci\u00f3n de la estructura, es una demostraci\u00f3n de el comportamiento del borrado en cascada. Luego llenamos la tabla para probar la aplicaci\u00f3n. PRAGMA foreign_keys = ON DROP TABLE IF EXISTS dato_personal; DROP TABLE IF EXISTS persona; CREATE TABLE persona ( id INTEGER PRIMARY KEY AUTOINCREMENT, nombre TEXT ); CREATE TABLE dato_personal ( id integer PRIMARY KEY AUTOINCREMENT, telefono TEXT, email TEXT, persona_id INTEGER UNIQUE, FOREIGN KEY(persona_id) REFERENCES persona(id) ON DELETE CASCADE ); -- confirmamos la existencia de las tablas select * from persona; select * from dato_personal; -- ingresamos una persona y sus datos insert into persona (nombre) values (\"luis\"); insert into dato_personal (telefono, email, persona_id) values (\"54319341\", \"mail@fake.dev\", 1); -- confirmamos el ingreso de la informaci\u00f3n select * from persona; select * from dato_personal; -- ingresamos otro dato personal, y lo intentamos asignar a la misma persona -- esto deber\u00eda fallar. insert into dato_personal (telefono, email, persona_id) values (\"76764276\", \"mail2@fake.dev\", 1); -- si eliminamos la persona, su referencia debe desaparecer en cascada. -- No muy recomendable, mejor desactivar para guardar historial. delete from persona where nombre = \"luis\"; -- confirmamos datos eliminados de ambas tablas select * from persona; select * from dato_personal; -- ahora ya podemos poblar con datos para dejar la base de datos lista -- para el ejemplo. insert into persona (nombre) values (\"luis\"); insert into persona (nombre) values (\"ana\"); insert into dato_personal (telefono, email, persona_id) values (\"65657674\", \"luis@fake.dev\", 2); insert into dato_personal (telefono, email, persona_id) values (\"76764276\", \"ana@fake.dev\", 3); -- para despu\u00e9s del test. -- delete from persona where nombre = 'alejandra';","title":"DDL"},{"location":"ejercicios/basedatos/relaciones/unoAuno/#estructura-del-proyecto","text":"./ \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 unoauno \u2502 \u2502 \u2502 \u251c\u2500\u2500 dao \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 DatoPersonalDAO.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ManejaConexion.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 PersonaDAO.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 dto \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 PersonaDTO.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 modelo \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 DatoPersonal.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 Persona.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 servicios \u2502 \u2502 \u2502 \u2514\u2500\u2500 ServicioPersonas.java \u2502 \u2502 \u2514\u2500\u2500 resources \u2502 \u2514\u2500\u2500 test \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2514\u2500\u2500 unoauno \u2502 \u2502 \u2514\u2500\u2500 servicios \u2502 \u2502 \u2514\u2500\u2500 ServicioPersonasTest.java \u2502 \u2514\u2500\u2500 resources \u251c\u2500\u2500 target \u2502 \u251c\u2500\u2500 classes \u2502 \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2502 \u2502 \u2514\u2500\u2500 maven \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl.lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 unoauno \u2502 \u2502 \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2502 \u2502 \u2514\u2500\u2500 pom.xml \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2514\u2500\u2500 unoauno \u2502 \u2502 \u251c\u2500\u2500 dao \u2502 \u2502 \u2502 \u251c\u2500\u2500 DatoPersonalDAO.class \u2502 \u2502 \u2502 \u251c\u2500\u2500 ManejaConexion.class \u2502 \u2502 \u2502 \u2514\u2500\u2500 PersonaDAO.class \u2502 \u2502 \u251c\u2500\u2500 dto \u2502 \u2502 \u2502 \u2514\u2500\u2500 PersonaDTO.class \u2502 \u2502 \u251c\u2500\u2500 modelo \u2502 \u2502 \u2502 \u251c\u2500\u2500 DatoPersonal.class \u2502 \u2502 \u2502 \u2514\u2500\u2500 Persona.class \u2502 \u2502 \u2514\u2500\u2500 servicios \u2502 \u2502 \u2514\u2500\u2500 ServicioPersonas.class \u2502 \u2514\u2500\u2500 test-classes \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 unoauno \u2502 \u2514\u2500\u2500 servicios \u2502 \u2514\u2500\u2500 ServicioPersonasTest.class \u2514\u2500\u2500 unoauno.db 36 directories, 21 files","title":"Estructura del proyecto"},{"location":"ejercicios/basedatos/relaciones/unoAuno/#pomxml","text":"/unoauno/pom.xml <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>cl.lherrera</groupId> <artifactId>unoauno</artifactId> <version>0.0.1-SNAPSHOT</version> <dependencies> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> <version>3.30.1</version> </dependency> <dependency> <groupId>org.mockito</groupId> <artifactId>mockito-core</artifactId> <version>2.28.2</version> <scope>test</scope> </dependency> <!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api --> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-api</artifactId> <version>5.6.0</version> <scope>test</scope> </dependency> <!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine --> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-engine</artifactId> <version>5.6.0</version> <scope>test</scope> </dependency> <!-- https://mvnrepository.com/artifact/org.junit.platform/junit-platform-launcher --> <dependency> <groupId>org.junit.platform</groupId> <artifactId>junit-platform-launcher</artifactId> <version>1.6.0</version> <scope>test</scope> </dependency> </dependencies> </project>","title":"pom.xml"},{"location":"ejercicios/basedatos/relaciones/unoAuno/#clase-de-administracion-de-la-conexion-singlenton","text":"/unoauno/src/main/java/cl/lherrera/unoauno/dao/ManejaConexion.java package cl.lherrera.unoauno.dao; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; import java.util.logging.Logger; public class ManejaConexion { private static final String DB_URL = \"jdbc:sqlite:/Users/luisherrera/Desktop/TALENTO-PROS/servlets/relaciones/unoauno/unoauno.db\"; private static final Logger milog = Logger.getLogger(ManejaConexion.class.getName()); private static ManejaConexion manejaConexion = new ManejaConexion(); private ManejaConexion() { if (manejaConexion != null){ //Prevent Reflection throw new IllegalStateException(\"No se puede crear una nueva instancia de ManejaConexion\"); } } public static ManejaConexion obtenerManejo() { return manejaConexion; } public Connection obtenerConexion() throws SQLException { Connection conexion = null; try { Class.forName(\"org.sqlite.JDBC\"); conexion = DriverManager.getConnection(DB_URL, \"admin\", \"1234\"); } catch (ClassNotFoundException e) { milog.severe(\"No se pudo cargar el driver.\"); milog.severe(e.getMessage()); } return conexion; } }","title":"Clase de administraci\u00f3n de la conexi\u00f3n (Singlenton)."},{"location":"ejercicios/basedatos/relaciones/unoAuno/#test","text":"Lo primero que haremos antes de implementar lo que viene. /unoauno/src/test/java/cl/lherrera/unoauno/servicios/ServicioPersonasTest.java package cl.lherrera.unoauno.servicios; import static org.junit.jupiter.api.Assertions.assertEquals; import java.util.List; import java.util.logging.Logger; import org.junit.jupiter.api.DisplayName; import org.junit.jupiter.api.Test; import cl.lherrera.unoauno.dto.PersonaDTO; @DisplayName(\"pruebas de servicios personas\") public class ServicioPersonasTest { Logger logger = Logger.getLogger(ServicioPersonasTest.class.getName()); ServicioPersonas servicio = new ServicioPersonas(); @Test @DisplayName(\"prueba listar personas\") void listarPersonas() { // traer las personas desde el servicio List<PersonaDTO> personas = servicio.obtenerPersonas(); // imprimirlas personas.forEach(persona -> logger.info(persona.toString())); // hacer el assert assertEquals(2, personas.size()); } @Test @DisplayName(\"probar el ingreso de la persona\") void servicioIngreso() { // simular un ingreso desde la vista PersonaDTO dtoPersona = new PersonaDTO(\"Alejandra\", \"647874334\", \"theAlexx@hotmail.com\"); // llamar al servicio de ingreso boolean ingresado = servicio.ingresarPersona(dtoPersona); // listar las personas List<PersonaDTO> personas = servicio.obtenerPersonas(); personas.forEach(persona -> logger.info(persona.toString())); // hacer el assert assertEquals(true, ingresado); } }","title":"Test"},{"location":"ejercicios/basedatos/relaciones/unoAuno/#servicio-de-persona","text":"Se puede observar que el servicio se encarga de formar los datos que el negocio requiere, es como qui\u00e9n dise\u00f1a los informes para los gerentes, el servicio de personas es la entidad que contiene la l\u00f3gica que el negocio necesita, este servicio es consumidor de alguna fuente de datos, que en esta ocasi\u00f3n se encuentra dentro del mismo proyecto, pero el servicio es quien ver\u00e1 como adapta la informaci\u00f3n con las fuentes de datos que tenga a disposici\u00f3n. /unoauno/src/main/java/cl/lherrera/unoauno/servicios/ServicioPersonas.java package cl.lherrera.unoauno.servicios; import java.util.ArrayList; import java.util.List; import cl.lherrera.unoauno.dao.DatoPersonalDAO; import cl.lherrera.unoauno.dao.PersonaDAO; import cl.lherrera.unoauno.dto.PersonaDTO; import cl.lherrera.unoauno.modelo.DatoPersonal; import cl.lherrera.unoauno.modelo.Persona; public class ServicioPersonas { DatoPersonalDAO daodatospersonales = new DatoPersonalDAO(); PersonaDAO daoPersona = new PersonaDAO(); DatoPersonalDAO daoDatoPersonal = new DatoPersonalDAO(); public List<PersonaDTO> obtenerPersonas(){ List<PersonaDTO> personasDTO = new ArrayList<>(); List<DatoPersonal> datosPersonales = daodatospersonales.obtenerTodos(); datosPersonales.forEach(datoPersonal -> { PersonaDTO dtoPersona = new PersonaDTO(); dtoPersona.setNombre(datoPersonal.getPersona().getNombre()); dtoPersona.setTelefono(datoPersonal.getTelefono()); dtoPersona.setEmail(datoPersonal.getEmail()); personasDTO.add(dtoPersona); }); return personasDTO; } public boolean ingresarPersona(PersonaDTO dtoPersona) { boolean ingresado = false; Persona persona = new Persona(); DatoPersonal datosPersonal = new DatoPersonal(); // ingresar persona persona.setNombre(dtoPersona.getNombre()); int idPersona = daoPersona.ingresar(persona); // ya sabemos el id de la persona nueva y lo seteamos // para que viaje a ser insertado en sus datos personales. persona.setId(idPersona); // ingresar datos personales datosPersonal.setTelefono(dtoPersona.getTelefono()); datosPersonal.setEmail(dtoPersona.getEmail()); datosPersonal.setPersona(persona); int idDatoPersonal = daoDatoPersonal.ingresar(datosPersonal); ingresado = idPersona != 0 && idDatoPersonal != 0; return ingresado; } }","title":"Servicio de persona"},{"location":"ejercicios/basedatos/relaciones/unoAuno/#dto","text":"El presente proyecto posee una presentaci\u00f3n especial, con m\u00e1s datos que los que contiene la tabla personas, es por esta raz\u00f3n que necesitamos un DTO para que tenga los datos que necesita el negocio. En un proyecto que comienza, es bueno dejar el modelo de datos especialmente dise\u00f1ado para nuestro negocio, pero no siempre dispondremos de una fuente de datos identica a todas las entidades del negocio en nuestra aplicaci\u00f3n, por eso los DTO son buenos elementos para adaptar esta informaci\u00f3n a las vistas. cl.lherrera.unoauno.dto.PersonaDTO package cl.lherrera.unoauno.dto; import java.io.Serializable; public class PersonaDTO implements Serializable{ private static final long serialVersionUID = -9126621171518423226L; private String nombre; private String telefono; private String email; public PersonaDTO() {} public PersonaDTO(String nombre, String telefono, String email) { this.nombre = nombre; this.telefono = telefono; this.email = email; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } public String getTelefono() { return telefono; } public void setTelefono(String telefono) { this.telefono = telefono; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } @Override public String toString() { return \"PersonaDTO [nombre=\" + nombre + \", telefono=\" + telefono + \", email=\" + email + \"]\"; } }","title":"DTO"},{"location":"ejercicios/basedatos/relaciones/unoAuno/#daos","text":"/unoauno/src/main/java/cl/lherrera/unoauno/dao/PersonaDAO.java package cl.lherrera.unoauno.dao; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.sql.Statement; import java.util.logging.Logger; import cl.lherrera.unoauno.modelo.Persona; public class PersonaDAO { private static Logger logger = Logger.getLogger(PersonaDAO.class.getName()); private static ManejaConexion mc = ManejaConexion.obtenerManejo(); public Persona obtenerPorId(int id) { Persona persona = new Persona(); String sqlTxt = \"select id, nombre from persona where id = \" + id; try( Connection conexion = mc.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(sqlTxt); ResultSet rs = ps.executeQuery(); ){ if(rs.next()) { persona.setId(rs.getInt(\"id\")); persona.setNombre(rs.getString(\"nombre\")); } }catch(SQLException e) { logger.severe(e.getMessage()); } return persona; } public int ingresar(Persona persona) { String sqlTxt = \"insert into persona (nombre) values (?)\"; int idIngresado = 0; try( Connection conexion = mc.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(sqlTxt, Statement.RETURN_GENERATED_KEYS); ){ ps.setString(1, persona.getNombre() ); int filasAfectadas = ps.executeUpdate(); ResultSet rs = ps.getGeneratedKeys(); if(rs.next()) { idIngresado = rs.getInt(1); } if(filasAfectadas == 0) { throw new SQLException(\"No se pudo ingresar el registro\"); } }catch(SQLException e) {logger.severe(e.getMessage());} return idIngresado; } } /unoauno/src/main/java/cl/lherrera/unoauno/dao/DatoPersonalDAO.java package cl.lherrera.unoauno.dao; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.sql.Statement; import java.util.ArrayList; import java.util.List; import java.util.logging.Logger; import cl.lherrera.unoauno.modelo.DatoPersonal; import cl.lherrera.unoauno.modelo.Persona; public class DatoPersonalDAO { private Logger logger = Logger.getLogger(DatoPersonalDAO.class.getName()); private static ManejaConexion manejaDB = ManejaConexion.obtenerManejo(); public List<DatoPersonal> obtenerTodos() { List<DatoPersonal> datospersonales = new ArrayList<>(); String sqlTxt = \"select id, telefono, email, persona_id from dato_personal\"; try( Connection conexion = manejaDB.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(sqlTxt); ResultSet rs = ps.executeQuery(); ){ while(rs.next()) { DatoPersonal datoPersonal = new DatoPersonal(); // llenamos la persona con el id que tenemos Persona persona = (new PersonaDAO()).obtenerPorId(rs.getInt(\"id\")); datoPersonal.setId(rs.getInt(\"id\")); datoPersonal.setTelefono(rs.getString(\"telefono\")); datoPersonal.setEmail(rs.getString(\"email\")); datoPersonal.setPersona(persona); // lo dejamos en la lista datospersonales.add(datoPersonal); } }catch(SQLException e){ logger.info(e.getMessage()); } return datospersonales; } public int ingresar(DatoPersonal datoPersonal) { String sqlTxt = \"insert into dato_personal (telefono, email, persona_id) values (?, ?, ?)\"; int idIngresado = 0; int filasAfectadas = 0; try( Connection conexion = manejaDB.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(sqlTxt, Statement.RETURN_GENERATED_KEYS); ){ ps.setString(1, datoPersonal.getTelefono()); ps.setString(2, datoPersonal.getEmail()); ps.setInt(3, datoPersonal.getPersona().getId() ); filasAfectadas = ps.executeUpdate(); ResultSet rs = ps.getGeneratedKeys(); if(rs.next()) { idIngresado = rs.getInt(1); } if(filasAfectadas == 0) { throw new SQLException(\"No se pudo ingresar el registro\"); } }catch(SQLException e) {logger.severe(e.getMessage());} return idIngresado; } }","title":"DAOS"},{"location":"ejercicios/basedatos/relaciones/unoAuno/#modelo","text":"/unoauno/src/main/java/cl/lherrera/unoauno/modelo/Persona.java package cl.lherrera.unoauno.modelo; public class Persona { private int id; private String nombre; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } } /unoauno/src/main/java/cl/lherrera/unoauno/modelo/DatoPersonal.java package cl.lherrera.unoauno.modelo; public class DatoPersonal { private int id; private String telefono; private String email; private Persona persona; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getTelefono() { return telefono; } public void setTelefono(String telefono) { this.telefono = telefono; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public Persona getPersona() { return persona; } public void setPersona(Persona persona) { this.persona = persona; } }","title":"Modelo"},{"location":"ejercicios/basedatos/relaciones/unoAuno/#todo","text":"Crear los dem\u00e1s servicios de CRUD, adem\u00e1s de hacerlo web.","title":"TODO"},{"location":"ejercicios/patrones/InyeccionDependencias/figuras_geometricas/","text":"Ejemplo de aplicaci\u00f3n del patr\u00f3n de dise\u00f1o: Inyecci\u00f3n de dependencias. (ID) o (DI - ingl\u00e9s). En el presente ejemplo simulamos un camino a seguir de una aplicaci\u00f3n que debemos ir fabricando en el tiempo. Primera reuni\u00f3n Se necesita un programa en Java, que solicite el valor del lado de un cuadrado y este imprima el \u00e1rea en pantalla. Se solicita realizar el trabajo lo m\u00e1s r\u00e1pido posible. \ud83d\udde1 Como soluci\u00f3n creamos una clase Principal y ponemos la l\u00f3gica que realice lo que se est\u00e1 solicitando. package cl.lherrera.id001; import java.util.Scanner; // pedir el valor del lado e imprimir el \u00e1rea de un cuadrado. public class Principal { public static void main(String[] args) { // obtener los valores necesarios Scanner sc = new Scanner(System.in); System.out.println(\"Ingrese el valor del lado del cuadrado\"); double lado = sc.nextDouble(); double area = lado * lado; System.out.println(\"El \u00e1rea del cuadrado es: \" + area); sc.close(); } } Este c\u00f3digo cumple con lo que se est\u00e1 pidiendo y est\u00e1 correcto, por lo que la tarea se da por finalizada. Segunda reuni\u00f3n Se necesita agregar que el programa, calcule adem\u00e1s el \u00e1rea de un c\u00edrculo. pudiendo el usuario elegir la figura. Una soluci\u00f3n ser\u00eda crear un men\u00fa y extraer las funcionalidades en m\u00e9todos separados para cada c\u00e1lculo. package cl.lherrera.id001; import java.util.Scanner; // pedir el valor del lado e imprimir el \u00e1rea de un cuadrado. public class Principal { private static Scanner sc = new Scanner(System.in); public static void servicioAreaCuadrado() { // obtener los valores necesarios System.out.println(\"Ingrese el valor del lado...\"); double lado = sc.nextDouble(); double area = lado * lado; System.out.println(\"El \u00e1rea del cuadrado es: \" + area); } public static void servicioAreaCirculo() { System.out.println(\"Ingrese el valor del radio...\"); double radio = sc.nextDouble(); double area = Math.PI * radio * radio; System.out.println(\"El \u00e1rea del c\u00edrculo es: \" + area); } public static void main(String[] args) { boolean seguir = true; while(seguir) { System.out.println(\"Ingrese una opci\u00f3n: \"); System.out.println(\"1 - \u00c1rea de un cuadrado.\"); System.out.println(\"2 - \u00c1rea de un c\u00edrculo.\"); System.out.println(\"3 - Salir.\"); int opcion = sc.nextInt(); switch (opcion) { case 1: servicioAreaCuadrado(); break; case 2: servicioAreaCirculo(); break; case 3: seguir = false; System.out.println(\"bye bye !!\"); break; default: System.out.println(\"Opci\u00f3n inv\u00e1lida\"); break; } } } } Vemos que se pide una nueva funcionalidad, similar a la que existe y el c\u00f3digo ha aumentado quiz\u00e1s m\u00e1s de lo que pensamos, o quiz\u00e1s la cantidad de pasos que calculamos en un principio era peque\u00f1a. Tercera reuni\u00f3n Con el tiempo se espera que las funcionalidades aumenten, por eso se quiere incluir la opci\u00f3n de obtener el \u00e1rea del tri\u00e1ngulo, es decir que esta opci\u00f3n debe ser agregada al men\u00fa. La clase principal est\u00e1 creciendo mucho, por lo que se toma la decisi\u00f3n de separar las funcionalidades en diferentes clases, lo que deja la propuesta de la siguiente forma: /id001/src/main/java/cl/lherrera/id001/main/Principal.java El main se reduce a una llamada que inicia el proceso de c\u00e1lculo. package cl.lherrera.id001.main; import cl.lherrera.id001.servicios.ServicioDeCalculo; public class Principal { public static void main(String[] args) { (new ServicioDeCalculo()).calcularArea(); } } /id001/src/main/java/cl/lherrera/id001/servicios/ServicioDeCalculo.java Clase encargada de dirigir el servicio de calculo de \u00e1rea para las diferentes figuras. package cl.lherrera.id001.servicios; import java.util.Scanner; public class ServicioDeCalculo { private static ServicioCuadrado servicioCuadrado = new ServicioCuadrado(); private static ServicioCirculo servicioCirculo = new ServicioCirculo(); private static ServicioTriangulo servicioTriangulo = new ServicioTriangulo(); private static Scanner sc = new Scanner(System.in); public void calcularArea() { boolean seguir = true; while (seguir) { System.out.println(\"Ingrese una opci\u00f3n: \"); System.out.println(\"1 - \u00c1rea de un cuadrado.\"); System.out.println(\"2 - \u00c1rea de un c\u00edrculo.\"); System.out.println(\"3 - \u00c1rea de un tri\u00e1ngulo.\"); System.out.println(\"4 - Salir\"); int opcion = sc.nextInt(); switch (opcion) { case 1: servicioCuadrado.calcularArea(); break; case 2: servicioCirculo.calcularArea(); break; case 3: servicioTriangulo.calcularArea(); break; case 4: seguir = false; System.out.println(\"bye bye !!\"); break; default: System.out.println(\"Opci\u00f3n inv\u00e1lida\"); break; } } } } /id001/src/main/java/cl/lherrera/id001/servicios/ServicioCuadrado.java package cl.lherrera.id001.servicios; import java.util.Scanner; public class ServicioCuadrado { private static Scanner sc = new Scanner(System.in); public void calcularArea() { // obtener los valores necesarios System.out.println(\"Ingrese el valor del lado...\"); double lado = sc.nextDouble(); double area = lado * lado; System.out.println(\"El \u00e1rea del cuadrado es: \" + area); } } /id001/src/main/java/cl/lherrera/id001/servicios/ServicioCirculo.java package cl.lherrera.id001.servicios; import java.util.Scanner; public class ServicioCirculo { private static Scanner sc = new Scanner(System.in); public void calcularArea() { System.out.println(\"Ingrese el valor del radio...\"); double radio = sc.nextDouble(); double area = Math.PI * radio * radio; System.out.println(\"El \u00e1rea del c\u00edrculo es: \" + area); } } /id001/src/main/java/cl/lherrera/id001/servicios/ServicioTriangulo.java package cl.lherrera.id001.servicios; import java.util.Scanner; public class ServicioTriangulo { private static Scanner sc = new Scanner(System.in); public void calcularArea() { System.out.println(\"Ingrese el valor de la base..\"); double base = sc.nextDouble(); System.out.println(\"Ingrese el valor de la altura...\"); double altura = sc.nextDouble(); double area = base * altura / 2; System.out.println(\"El \u00e1rea del tri\u00e1ngulo es : \" + area); } } De esta forma, despejamos el m\u00e9todo principal de toda responsabilidad, solamente le encargamos la tarea de ejecutar el c\u00e1lculo, entonces el m\u00e9todo principal depende del servicio de c\u00e1lculo. Vamos a invertir esta situaci\u00f3n. Aplicando el patr\u00f3n. El servicio de c\u00e1lculo ten\u00eda las siguientes responsabilidades: Interactuar con las decisiones del usuario solicitando los datos. Almacenar los datos ingresados por el usuario. Seleccionar la figura para calcular el \u00e1rea. Si una clase, posee atributos en su estado que son otros objetos que necesitan ser inmediatamente instanciados. Como en este ejemplo: // ... public class ServicioDeCalculo { private static ServicioCuadrado servicioCuadrado = new ServicioCuadrado(); private static ServicioCirculo servicioCirculo = new ServicioCirculo(); private static ServicioTriangulo servicioTriangulo = new ServicioTriangulo(); // ... Adem\u00e1s estos poseen el mismo m\u00e9todo en com\u00fan. //... public void calcularArea() { //... Entonces se produce un ambiente propicio para la aplicaci\u00f3n de este patr\u00f3n. Ya que a primera vista, el polimorfismo nos ahorrar\u00eda mucho trabajo, entre otras ventajas, esta es la que podemos reconocer m\u00e1s r\u00e1pidamente, ya que el c\u00edrculo, tri\u00e1ngulo y cuadrado son Figuras y podemos abstraer su forma con una interface . Desde fuera, asignamos polim\u00f3rficamente la figura, entonces ServicioDeCalculo no le interesar\u00e1 saber qu\u00e9 figura espec\u00edficamente est\u00e1 ejecutando, lo que realmente har\u00e1, ser\u00e1 ejecutar el m\u00e9todo que posee la interfaz, y que se ejecute, dependiendo de la forma que tome en ese momento dicha interfaz, es decir que si la figura es un cuadrado, se ejecutar\u00e1 la l\u00f3gica de c\u00e1lculo de \u00e1rea del cuadrado. En el siguiente ejemplo, hay que considerar que solamente se est\u00e1 mostrando el como desacoplamos el servicio, no se est\u00e1 justificando que con esto nuestro c\u00f3digo est\u00e9 m\u00e1s limpio, la inversi\u00f3n de dependencias resuelve problemas espec\u00edficos, el que nuestra aplicaci\u00f3n haya sido optimizada con su utilizaci\u00f3n, requiere un poco m\u00e1s de investigaci\u00f3n. En el caso de los frameworks, su utilizaci\u00f3n est\u00e1 plenamente justificada, es por eso que tenemos la sensaci\u00f3n al igual que cuando aprendimos herencia, que deber\u00edamos aplicarlo siempre que podamos; pero no debemos sobre explotar estas t\u00e9cnicas, aunque es nuestro deber entenderlas. /id001/src/main/java/cl/lherrera/id001/servicios/ServicioFigura.java Creamos la interface que contendr\u00e1 todos los tipos que sean una figura y que en calculen las \u00e1reas. package cl.lherrera.id001.servicios; public interface ServicioFigura { void calcularArea(); } /id001/src/main/java/cl/lherrera/id001/servicios/ServicioCuadrado.java package cl.lherrera.id001.servicios; import java.util.Scanner; public class ServicioCuadrado implements ServicioFigura{ private static Scanner sc = new Scanner(System.in); @Override public void calcularArea() { System.out.println(\"Ingrese el valor del lado...\"); double lado = sc.nextDouble(); double area = lado * lado; System.err.println(\"El \u00e1rea del cuadrado es: \" + area + \"\\n\"); } } /id001/src/main/java/cl/lherrera/id001/servicios/ServicioCirculo.java package cl.lherrera.id001.servicios; import java.util.Scanner; public class ServicioCirculo implements ServicioFigura { private static Scanner sc = new Scanner(System.in); public void calcularArea() { System.out.println(\"Ingrese el valor del radio...\"); double radio = sc.nextDouble(); double area = Math.PI * radio * radio; System.err.println(\"El \u00e1rea del c\u00edrculo es: \" + area + \"\\n\"); } } /id001/src/main/java/cl/lherrera/id001/servicios/ServicioTriangulo.java package cl.lherrera.id001.servicios; import java.util.Scanner; public class ServicioTriangulo implements ServicioFigura { private static Scanner sc = new Scanner(System.in); public void calcularArea() { System.out.println(\"Ingrese el valor de la base..\"); double base = sc.nextDouble(); System.out.println(\"Ingrese el valor de la altura...\"); double altura = sc.nextDouble(); double area = base * altura / 2; System.err.println(\"El \u00e1rea del tri\u00e1ngulo es : \" + area + \"\\n\"); } } /id001/src/main/java/cl/lherrera/id001/servicios/ServicioDeCalculo.java package cl.lherrera.id001.servicios; public class ServicioDeCalculo { private ServicioFigura servicio; public ServicioDeCalculo(ServicioFigura servicio) { this.servicio = servicio; } public void calcularArea() { servicio.calcularArea(); } } /id001/src/main/java/cl/lherrera/id001/main/Principal.java Ahora manejamos las dependencias que le inyectaremos al servicio desde ac\u00e1, para este ejemplo, puede ser desde cualquier lugar desde fuera que se llame al servicio, no tiene por qu\u00e9 ser llamado dese el principal. package cl.lherrera.id001.main; import java.util.Scanner; import cl.lherrera.id001.servicios.ServicioCirculo; import cl.lherrera.id001.servicios.ServicioCuadrado; import cl.lherrera.id001.servicios.ServicioDeCalculo; import cl.lherrera.id001.servicios.ServicioFigura; import cl.lherrera.id001.servicios.ServicioTriangulo; public class Principal { private static Scanner sc = new Scanner(System.in); public static void main(String[] args) { menuCalculoArea(); } public static void menuCalculoArea() { boolean seguir = true; while (seguir) { System.out.println(\"Ingrese una opci\u00f3n: \"); System.out.println(\"1 - \u00c1rea de un cuadrado.\"); System.out.println(\"2 - \u00c1rea de un c\u00edrculo.\"); System.out.println(\"3 - \u00c1rea de un tri\u00e1ngulo.\"); System.out.println(\"4 - Salir\"); int opcion = sc.nextInt(); ServicioFigura figura = null; ServicioDeCalculo calcula = null; switch (opcion) { case 1: figura = new ServicioCuadrado(); calcula = new ServicioDeCalculo(figura); calcula.calcularArea(); break; case 2: figura = new ServicioCirculo(); calcula = new ServicioDeCalculo(figura); calcula.calcularArea(); break; case 3: figura = new ServicioTriangulo(); calcula = new ServicioDeCalculo(figura); calcula.calcularArea(); break; case 4: seguir = false; System.out.println(\"bye bye !!\"); break; default: System.out.println(\"Opci\u00f3n inv\u00e1lida\"); break; } } } } Queda como ejercicio entonces, (s\u00f3lo alumnos) agregar otra figura.","title":"Ejemplo de aplicaci\u00f3n del patr\u00f3n de dise\u00f1o: Inyecci\u00f3n de dependencias. (ID) o (DI - ingl\u00e9s)."},{"location":"ejercicios/patrones/InyeccionDependencias/figuras_geometricas/#ejemplo-de-aplicacion-del-patron-de-diseno-inyeccion-de-dependencias-id-o-di-ingles","text":"En el presente ejemplo simulamos un camino a seguir de una aplicaci\u00f3n que debemos ir fabricando en el tiempo.","title":"Ejemplo de aplicaci\u00f3n del patr\u00f3n de dise\u00f1o: Inyecci\u00f3n de dependencias. (ID) o (DI - ingl\u00e9s)."},{"location":"ejercicios/patrones/InyeccionDependencias/figuras_geometricas/#primera-reunion","text":"Se necesita un programa en Java, que solicite el valor del lado de un cuadrado y este imprima el \u00e1rea en pantalla. Se solicita realizar el trabajo lo m\u00e1s r\u00e1pido posible. \ud83d\udde1 Como soluci\u00f3n creamos una clase Principal y ponemos la l\u00f3gica que realice lo que se est\u00e1 solicitando. package cl.lherrera.id001; import java.util.Scanner; // pedir el valor del lado e imprimir el \u00e1rea de un cuadrado. public class Principal { public static void main(String[] args) { // obtener los valores necesarios Scanner sc = new Scanner(System.in); System.out.println(\"Ingrese el valor del lado del cuadrado\"); double lado = sc.nextDouble(); double area = lado * lado; System.out.println(\"El \u00e1rea del cuadrado es: \" + area); sc.close(); } } Este c\u00f3digo cumple con lo que se est\u00e1 pidiendo y est\u00e1 correcto, por lo que la tarea se da por finalizada.","title":"Primera reuni\u00f3n"},{"location":"ejercicios/patrones/InyeccionDependencias/figuras_geometricas/#segunda-reunion","text":"Se necesita agregar que el programa, calcule adem\u00e1s el \u00e1rea de un c\u00edrculo. pudiendo el usuario elegir la figura. Una soluci\u00f3n ser\u00eda crear un men\u00fa y extraer las funcionalidades en m\u00e9todos separados para cada c\u00e1lculo. package cl.lherrera.id001; import java.util.Scanner; // pedir el valor del lado e imprimir el \u00e1rea de un cuadrado. public class Principal { private static Scanner sc = new Scanner(System.in); public static void servicioAreaCuadrado() { // obtener los valores necesarios System.out.println(\"Ingrese el valor del lado...\"); double lado = sc.nextDouble(); double area = lado * lado; System.out.println(\"El \u00e1rea del cuadrado es: \" + area); } public static void servicioAreaCirculo() { System.out.println(\"Ingrese el valor del radio...\"); double radio = sc.nextDouble(); double area = Math.PI * radio * radio; System.out.println(\"El \u00e1rea del c\u00edrculo es: \" + area); } public static void main(String[] args) { boolean seguir = true; while(seguir) { System.out.println(\"Ingrese una opci\u00f3n: \"); System.out.println(\"1 - \u00c1rea de un cuadrado.\"); System.out.println(\"2 - \u00c1rea de un c\u00edrculo.\"); System.out.println(\"3 - Salir.\"); int opcion = sc.nextInt(); switch (opcion) { case 1: servicioAreaCuadrado(); break; case 2: servicioAreaCirculo(); break; case 3: seguir = false; System.out.println(\"bye bye !!\"); break; default: System.out.println(\"Opci\u00f3n inv\u00e1lida\"); break; } } } } Vemos que se pide una nueva funcionalidad, similar a la que existe y el c\u00f3digo ha aumentado quiz\u00e1s m\u00e1s de lo que pensamos, o quiz\u00e1s la cantidad de pasos que calculamos en un principio era peque\u00f1a.","title":"Segunda reuni\u00f3n"},{"location":"ejercicios/patrones/InyeccionDependencias/figuras_geometricas/#tercera-reunion","text":"Con el tiempo se espera que las funcionalidades aumenten, por eso se quiere incluir la opci\u00f3n de obtener el \u00e1rea del tri\u00e1ngulo, es decir que esta opci\u00f3n debe ser agregada al men\u00fa. La clase principal est\u00e1 creciendo mucho, por lo que se toma la decisi\u00f3n de separar las funcionalidades en diferentes clases, lo que deja la propuesta de la siguiente forma: /id001/src/main/java/cl/lherrera/id001/main/Principal.java El main se reduce a una llamada que inicia el proceso de c\u00e1lculo. package cl.lherrera.id001.main; import cl.lherrera.id001.servicios.ServicioDeCalculo; public class Principal { public static void main(String[] args) { (new ServicioDeCalculo()).calcularArea(); } } /id001/src/main/java/cl/lherrera/id001/servicios/ServicioDeCalculo.java Clase encargada de dirigir el servicio de calculo de \u00e1rea para las diferentes figuras. package cl.lherrera.id001.servicios; import java.util.Scanner; public class ServicioDeCalculo { private static ServicioCuadrado servicioCuadrado = new ServicioCuadrado(); private static ServicioCirculo servicioCirculo = new ServicioCirculo(); private static ServicioTriangulo servicioTriangulo = new ServicioTriangulo(); private static Scanner sc = new Scanner(System.in); public void calcularArea() { boolean seguir = true; while (seguir) { System.out.println(\"Ingrese una opci\u00f3n: \"); System.out.println(\"1 - \u00c1rea de un cuadrado.\"); System.out.println(\"2 - \u00c1rea de un c\u00edrculo.\"); System.out.println(\"3 - \u00c1rea de un tri\u00e1ngulo.\"); System.out.println(\"4 - Salir\"); int opcion = sc.nextInt(); switch (opcion) { case 1: servicioCuadrado.calcularArea(); break; case 2: servicioCirculo.calcularArea(); break; case 3: servicioTriangulo.calcularArea(); break; case 4: seguir = false; System.out.println(\"bye bye !!\"); break; default: System.out.println(\"Opci\u00f3n inv\u00e1lida\"); break; } } } } /id001/src/main/java/cl/lherrera/id001/servicios/ServicioCuadrado.java package cl.lherrera.id001.servicios; import java.util.Scanner; public class ServicioCuadrado { private static Scanner sc = new Scanner(System.in); public void calcularArea() { // obtener los valores necesarios System.out.println(\"Ingrese el valor del lado...\"); double lado = sc.nextDouble(); double area = lado * lado; System.out.println(\"El \u00e1rea del cuadrado es: \" + area); } } /id001/src/main/java/cl/lherrera/id001/servicios/ServicioCirculo.java package cl.lherrera.id001.servicios; import java.util.Scanner; public class ServicioCirculo { private static Scanner sc = new Scanner(System.in); public void calcularArea() { System.out.println(\"Ingrese el valor del radio...\"); double radio = sc.nextDouble(); double area = Math.PI * radio * radio; System.out.println(\"El \u00e1rea del c\u00edrculo es: \" + area); } } /id001/src/main/java/cl/lherrera/id001/servicios/ServicioTriangulo.java package cl.lherrera.id001.servicios; import java.util.Scanner; public class ServicioTriangulo { private static Scanner sc = new Scanner(System.in); public void calcularArea() { System.out.println(\"Ingrese el valor de la base..\"); double base = sc.nextDouble(); System.out.println(\"Ingrese el valor de la altura...\"); double altura = sc.nextDouble(); double area = base * altura / 2; System.out.println(\"El \u00e1rea del tri\u00e1ngulo es : \" + area); } } De esta forma, despejamos el m\u00e9todo principal de toda responsabilidad, solamente le encargamos la tarea de ejecutar el c\u00e1lculo, entonces el m\u00e9todo principal depende del servicio de c\u00e1lculo. Vamos a invertir esta situaci\u00f3n.","title":"Tercera reuni\u00f3n"},{"location":"ejercicios/patrones/InyeccionDependencias/figuras_geometricas/#aplicando-el-patron","text":"El servicio de c\u00e1lculo ten\u00eda las siguientes responsabilidades: Interactuar con las decisiones del usuario solicitando los datos. Almacenar los datos ingresados por el usuario. Seleccionar la figura para calcular el \u00e1rea. Si una clase, posee atributos en su estado que son otros objetos que necesitan ser inmediatamente instanciados. Como en este ejemplo: // ... public class ServicioDeCalculo { private static ServicioCuadrado servicioCuadrado = new ServicioCuadrado(); private static ServicioCirculo servicioCirculo = new ServicioCirculo(); private static ServicioTriangulo servicioTriangulo = new ServicioTriangulo(); // ... Adem\u00e1s estos poseen el mismo m\u00e9todo en com\u00fan. //... public void calcularArea() { //... Entonces se produce un ambiente propicio para la aplicaci\u00f3n de este patr\u00f3n. Ya que a primera vista, el polimorfismo nos ahorrar\u00eda mucho trabajo, entre otras ventajas, esta es la que podemos reconocer m\u00e1s r\u00e1pidamente, ya que el c\u00edrculo, tri\u00e1ngulo y cuadrado son Figuras y podemos abstraer su forma con una interface . Desde fuera, asignamos polim\u00f3rficamente la figura, entonces ServicioDeCalculo no le interesar\u00e1 saber qu\u00e9 figura espec\u00edficamente est\u00e1 ejecutando, lo que realmente har\u00e1, ser\u00e1 ejecutar el m\u00e9todo que posee la interfaz, y que se ejecute, dependiendo de la forma que tome en ese momento dicha interfaz, es decir que si la figura es un cuadrado, se ejecutar\u00e1 la l\u00f3gica de c\u00e1lculo de \u00e1rea del cuadrado. En el siguiente ejemplo, hay que considerar que solamente se est\u00e1 mostrando el como desacoplamos el servicio, no se est\u00e1 justificando que con esto nuestro c\u00f3digo est\u00e9 m\u00e1s limpio, la inversi\u00f3n de dependencias resuelve problemas espec\u00edficos, el que nuestra aplicaci\u00f3n haya sido optimizada con su utilizaci\u00f3n, requiere un poco m\u00e1s de investigaci\u00f3n. En el caso de los frameworks, su utilizaci\u00f3n est\u00e1 plenamente justificada, es por eso que tenemos la sensaci\u00f3n al igual que cuando aprendimos herencia, que deber\u00edamos aplicarlo siempre que podamos; pero no debemos sobre explotar estas t\u00e9cnicas, aunque es nuestro deber entenderlas. /id001/src/main/java/cl/lherrera/id001/servicios/ServicioFigura.java Creamos la interface que contendr\u00e1 todos los tipos que sean una figura y que en calculen las \u00e1reas. package cl.lherrera.id001.servicios; public interface ServicioFigura { void calcularArea(); } /id001/src/main/java/cl/lherrera/id001/servicios/ServicioCuadrado.java package cl.lherrera.id001.servicios; import java.util.Scanner; public class ServicioCuadrado implements ServicioFigura{ private static Scanner sc = new Scanner(System.in); @Override public void calcularArea() { System.out.println(\"Ingrese el valor del lado...\"); double lado = sc.nextDouble(); double area = lado * lado; System.err.println(\"El \u00e1rea del cuadrado es: \" + area + \"\\n\"); } } /id001/src/main/java/cl/lherrera/id001/servicios/ServicioCirculo.java package cl.lherrera.id001.servicios; import java.util.Scanner; public class ServicioCirculo implements ServicioFigura { private static Scanner sc = new Scanner(System.in); public void calcularArea() { System.out.println(\"Ingrese el valor del radio...\"); double radio = sc.nextDouble(); double area = Math.PI * radio * radio; System.err.println(\"El \u00e1rea del c\u00edrculo es: \" + area + \"\\n\"); } } /id001/src/main/java/cl/lherrera/id001/servicios/ServicioTriangulo.java package cl.lherrera.id001.servicios; import java.util.Scanner; public class ServicioTriangulo implements ServicioFigura { private static Scanner sc = new Scanner(System.in); public void calcularArea() { System.out.println(\"Ingrese el valor de la base..\"); double base = sc.nextDouble(); System.out.println(\"Ingrese el valor de la altura...\"); double altura = sc.nextDouble(); double area = base * altura / 2; System.err.println(\"El \u00e1rea del tri\u00e1ngulo es : \" + area + \"\\n\"); } } /id001/src/main/java/cl/lherrera/id001/servicios/ServicioDeCalculo.java package cl.lherrera.id001.servicios; public class ServicioDeCalculo { private ServicioFigura servicio; public ServicioDeCalculo(ServicioFigura servicio) { this.servicio = servicio; } public void calcularArea() { servicio.calcularArea(); } } /id001/src/main/java/cl/lherrera/id001/main/Principal.java Ahora manejamos las dependencias que le inyectaremos al servicio desde ac\u00e1, para este ejemplo, puede ser desde cualquier lugar desde fuera que se llame al servicio, no tiene por qu\u00e9 ser llamado dese el principal. package cl.lherrera.id001.main; import java.util.Scanner; import cl.lherrera.id001.servicios.ServicioCirculo; import cl.lherrera.id001.servicios.ServicioCuadrado; import cl.lherrera.id001.servicios.ServicioDeCalculo; import cl.lherrera.id001.servicios.ServicioFigura; import cl.lherrera.id001.servicios.ServicioTriangulo; public class Principal { private static Scanner sc = new Scanner(System.in); public static void main(String[] args) { menuCalculoArea(); } public static void menuCalculoArea() { boolean seguir = true; while (seguir) { System.out.println(\"Ingrese una opci\u00f3n: \"); System.out.println(\"1 - \u00c1rea de un cuadrado.\"); System.out.println(\"2 - \u00c1rea de un c\u00edrculo.\"); System.out.println(\"3 - \u00c1rea de un tri\u00e1ngulo.\"); System.out.println(\"4 - Salir\"); int opcion = sc.nextInt(); ServicioFigura figura = null; ServicioDeCalculo calcula = null; switch (opcion) { case 1: figura = new ServicioCuadrado(); calcula = new ServicioDeCalculo(figura); calcula.calcularArea(); break; case 2: figura = new ServicioCirculo(); calcula = new ServicioDeCalculo(figura); calcula.calcularArea(); break; case 3: figura = new ServicioTriangulo(); calcula = new ServicioDeCalculo(figura); calcula.calcularArea(); break; case 4: seguir = false; System.out.println(\"bye bye !!\"); break; default: System.out.println(\"Opci\u00f3n inv\u00e1lida\"); break; } } } } Queda como ejercicio entonces, (s\u00f3lo alumnos) agregar otra figura.","title":"Aplicando el patr\u00f3n."},{"location":"ejercicios/patrones/InyeccionDependencias/figuras_geometricasCapas/","text":"Separando capas en ejemplo anterior. Vimos que en el ejemplo anterior, utilizamos la inyecci\u00f3n de dependencias para poder separar la responsabilidad de un servicio. El servicio es como nuestro empleado, es esta entidad la encargada de hacer lo que nuestro negocio requiere y nuestro negocio trata de obtener las \u00e1reas de nuestras figuras geom\u00e9tricas. De esto se trata su negocio y es este el rol que el servicio debe cumplir. La capa de acceso a datos estamos acostumbrados a verla en implementaciones que resuelven la recolecci\u00f3n de datos de una base de datos; pero en esta ocasi\u00f3n los tatos no vienen de una base de datos si no que vienen de el ingreso de informaci\u00f3n del usuario. Esto no importa, ya que el DAO, no est\u00e1 restringido a la recolecci\u00f3n de datos de una base de datos, si no que la implementaci\u00f3n la designamos nosotros. Es por esto que en el ejemplo incluiremos esta capa y demostramos su funcionamiento. La capa modelo es la que usaremos para guardar los datos del modelo del problema. Necesitamos calcular \u00e1reas de figuras, es por esto que cada figura ser\u00e1 un modelo. Separar las capas, nos permite entre otras cosas, poder depurar de una manera eficiente, ya que al estar separadas las responsabilidades, ante un error, sabemos qu\u00e9 archivo tocar, sin temor a realizar alg\u00fan otro cambio. Estructura: idcapas \u251c\u2500\u2500 dao \u2502 \u251c\u2500\u2500 CirculoDao.java \u2502 \u251c\u2500\u2500 CuadradoDao.java \u2502 \u2514\u2500\u2500 TrianguloDao.java \u251c\u2500\u2500 main \u2502 \u2514\u2500\u2500 Principal.java \u251c\u2500\u2500 modelo \u2502 \u251c\u2500\u2500 Circulo.java \u2502 \u251c\u2500\u2500 Cuadrado.java \u2502 \u2514\u2500\u2500 Triangulo.java \u2514\u2500\u2500 servicio \u251c\u2500\u2500 ServicioCalculo.java \u251c\u2500\u2500 ServicioCirculo.java \u251c\u2500\u2500 ServicioCuadrado.java \u251c\u2500\u2500 ServicioFigura.java \u2514\u2500\u2500 ServicioTriangulo.java Modelo modelo \u251c\u2500\u2500 Circulo.java \u251c\u2500\u2500 Cuadrado.java \u2514\u2500\u2500 Triangulo.java package cl.lherrera.idcapas.modelo; public class Circulo { private double radio; public Circulo(double radio) { this.radio = radio; } public double getRadio() { return radio; } public void setRadio(double radio) { this.radio = radio; } } package cl.lherrera.idcapas.modelo; public class Cuadrado { private double lado; public Cuadrado() {} public Cuadrado(double lado) { super(); this.lado = lado; } public double getLado() { return lado; } public void setLado(double lado) { this.lado = lado; } } package cl.lherrera.idcapas.modelo; public class Triangulo { private double base; private double altura; public Triangulo() {} public Triangulo(double base, double altura) { this.base = base; this.altura = altura; } public double getBase() { return base; } public void setBase(double base) { this.base = base; } public double getAltura() { return altura; } public void setAltura(double altura) { this.altura = altura; } } DAO dao \u251c\u2500\u2500 CirculoDao.java \u251c\u2500\u2500 CuadradoDao.java \u2514\u2500\u2500 TrianguloDao.java package cl.lherrera.idcapas.dao; import java.util.Scanner; import cl.lherrera.idcapas.modelo.Circulo; public class CirculoDao { private static Scanner sc = new Scanner(System.in); private CirculoDao() {} public static Circulo obtenerCirculo() { System.out.println(\"Ingrese el radio del c\u00edrculo\"); double radio = sc.nextDouble(); return new Circulo(radio); } } package cl.lherrera.idcapas.dao; import java.util.Scanner; import cl.lherrera.idcapas.modelo.Cuadrado; public class CuadradoDao { private static Scanner sc = new Scanner(System.in); private CuadradoDao() {} public static Cuadrado obtenerCuadrado() { System.out.println(\"Ingrese el valor del lado...\"); double lado = sc.nextDouble(); return new Cuadrado(lado); } } package cl.lherrera.idcapas.dao; import java.util.Scanner; import cl.lherrera.idcapas.modelo.Triangulo; public class TrianguloDao { private static Scanner sc = new Scanner(System.in); private TrianguloDao() {} public static Triangulo obtenerTriangulo() { System.out.println(\"Ingrese la base...\"); double base = sc.nextDouble(); System.out.println(\"Ingrese la altura...\"); double altura = sc.nextDouble(); return new Triangulo(base, altura); } } Servicio Tenemos un servicio principal por el que pasan todos los servicios que implementan uno solo y este servicio es inyectado desde fuera. servicio \u251c\u2500\u2500 ServicioCalculo.java \u251c\u2500\u2500 ServicioCirculo.java \u251c\u2500\u2500 ServicioCuadrado.java \u251c\u2500\u2500 ServicioFigura.java \u2514\u2500\u2500 ServicioTriangulo.java package cl.lherrera.idcapas.servicio; public class ServicioCalculo { ServicioFigura servicio; public ServicioCalculo(ServicioFigura servicio) { this.servicio = servicio; } // as\u00ed se le llama en el negocio public void calcularElArea() { servicio.imprimirArea(); } } package cl.lherrera.idcapas.servicio; import cl.lherrera.idcapas.dao.CirculoDao; import cl.lherrera.idcapas.modelo.Circulo; public class ServicioCirculo implements ServicioFigura{ public void imprimirArea() { Circulo circulo = CirculoDao.obtenerCirculo(); double area = obtenerArea(circulo); System.err.println(\"El \u00e1rea del c\u00edrculo es: \" + area + \"\\n\"); } private double obtenerArea(Circulo circulo) { double radio = circulo.getRadio(); return Math.PI * radio * radio; } } package cl.lherrera.idcapas.servicio; import cl.lherrera.idcapas.dao.CuadradoDao; import cl.lherrera.idcapas.modelo.Cuadrado; public class ServicioCuadrado implements ServicioFigura{ public void imprimirArea() { Cuadrado cuadrado = CuadradoDao.obtenerCuadrado(); double area = obtenerArea(cuadrado); System.err.println(\"El \u00e1rea del cuadrado es: \" + area + \"\\n\"); } private double obtenerArea(Cuadrado cuadrado) { double lado = cuadrado.getLado(); return lado * lado; } } package cl.lherrera.idcapas.servicio; public interface ServicioFigura { public void imprimirArea(); } package cl.lherrera.idcapas.servicio; import cl.lherrera.idcapas.dao.TrianguloDao; import cl.lherrera.idcapas.modelo.Triangulo; public class ServicioTriangulo implements ServicioFigura { public void imprimirArea() { Triangulo triangulo = TrianguloDao.obtenerTriangulo(); double area = obtenerArea(triangulo); System.err.println(\"El \u00e1rea del tri\u00e1ngulo es: \" + area + \"\\n\"); } public double obtenerArea(Triangulo triangulo) { double base = triangulo.getBase(); double altura = triangulo.getAltura(); return base * altura / 2; } } TODO Ya vimos como separar nuestro problema en capas, y es con esto que podemos inferir que a pesar del esfuerzo extra que result\u00f3 hacer esto, nos permite llevar una organizaci\u00f3n reconocible de la abstracci\u00f3n de un problema. La aplicaci\u00f3n de estas t\u00e9cnicas permiten tener un marco de trabajo que permita transformar el escenario de la necesidad a una soluci\u00f3n explicada al compilador en Java. Ahora podemos agregar m\u00e1s figuras... todas las que quieras. Mientras esto pasa, al igual que cuando se comienza un software, en su proceso de vida, vamos agregando funcionalidades y depende de la arquitectura que vayamos adoptando es lo productivo que seremos en el futuro. Por ejemplo ahora no es un problema el tama\u00f1o del swtich del men\u00fa, pero esto no ser\u00e1 muy legible cuando se tengan m\u00e1s figuras, entonces este y otros tipos de problemas nos ocurrir\u00e1n hagamos lo que hagamos para evitar todos los problemas de abstracciones que existen; pero al intentar usar la mejor arquitectura posible dentro del tiempo y esfuerzo, permitir\u00e1 que la aplicaci\u00f3n pueda integrar nuevas funcionalidades de manera m\u00e1s sencilla que si no se aplican estas mejoras continuas, teniendo en cuenta, en todo momento que no debemos abusar, hay que dedicar el esfuerzo justo seg\u00fan sea el contexto (tiempo, dinero, calidad) prioritario.","title":"Separando capas en ejemplo anterior."},{"location":"ejercicios/patrones/InyeccionDependencias/figuras_geometricasCapas/#separando-capas-en-ejemplo-anterior","text":"Vimos que en el ejemplo anterior, utilizamos la inyecci\u00f3n de dependencias para poder separar la responsabilidad de un servicio. El servicio es como nuestro empleado, es esta entidad la encargada de hacer lo que nuestro negocio requiere y nuestro negocio trata de obtener las \u00e1reas de nuestras figuras geom\u00e9tricas. De esto se trata su negocio y es este el rol que el servicio debe cumplir. La capa de acceso a datos estamos acostumbrados a verla en implementaciones que resuelven la recolecci\u00f3n de datos de una base de datos; pero en esta ocasi\u00f3n los tatos no vienen de una base de datos si no que vienen de el ingreso de informaci\u00f3n del usuario. Esto no importa, ya que el DAO, no est\u00e1 restringido a la recolecci\u00f3n de datos de una base de datos, si no que la implementaci\u00f3n la designamos nosotros. Es por esto que en el ejemplo incluiremos esta capa y demostramos su funcionamiento. La capa modelo es la que usaremos para guardar los datos del modelo del problema. Necesitamos calcular \u00e1reas de figuras, es por esto que cada figura ser\u00e1 un modelo. Separar las capas, nos permite entre otras cosas, poder depurar de una manera eficiente, ya que al estar separadas las responsabilidades, ante un error, sabemos qu\u00e9 archivo tocar, sin temor a realizar alg\u00fan otro cambio.","title":"Separando capas en ejemplo anterior."},{"location":"ejercicios/patrones/InyeccionDependencias/figuras_geometricasCapas/#estructura","text":"idcapas \u251c\u2500\u2500 dao \u2502 \u251c\u2500\u2500 CirculoDao.java \u2502 \u251c\u2500\u2500 CuadradoDao.java \u2502 \u2514\u2500\u2500 TrianguloDao.java \u251c\u2500\u2500 main \u2502 \u2514\u2500\u2500 Principal.java \u251c\u2500\u2500 modelo \u2502 \u251c\u2500\u2500 Circulo.java \u2502 \u251c\u2500\u2500 Cuadrado.java \u2502 \u2514\u2500\u2500 Triangulo.java \u2514\u2500\u2500 servicio \u251c\u2500\u2500 ServicioCalculo.java \u251c\u2500\u2500 ServicioCirculo.java \u251c\u2500\u2500 ServicioCuadrado.java \u251c\u2500\u2500 ServicioFigura.java \u2514\u2500\u2500 ServicioTriangulo.java","title":"Estructura:"},{"location":"ejercicios/patrones/InyeccionDependencias/figuras_geometricasCapas/#modelo","text":"modelo \u251c\u2500\u2500 Circulo.java \u251c\u2500\u2500 Cuadrado.java \u2514\u2500\u2500 Triangulo.java package cl.lherrera.idcapas.modelo; public class Circulo { private double radio; public Circulo(double radio) { this.radio = radio; } public double getRadio() { return radio; } public void setRadio(double radio) { this.radio = radio; } } package cl.lherrera.idcapas.modelo; public class Cuadrado { private double lado; public Cuadrado() {} public Cuadrado(double lado) { super(); this.lado = lado; } public double getLado() { return lado; } public void setLado(double lado) { this.lado = lado; } } package cl.lherrera.idcapas.modelo; public class Triangulo { private double base; private double altura; public Triangulo() {} public Triangulo(double base, double altura) { this.base = base; this.altura = altura; } public double getBase() { return base; } public void setBase(double base) { this.base = base; } public double getAltura() { return altura; } public void setAltura(double altura) { this.altura = altura; } }","title":"Modelo"},{"location":"ejercicios/patrones/InyeccionDependencias/figuras_geometricasCapas/#dao","text":"dao \u251c\u2500\u2500 CirculoDao.java \u251c\u2500\u2500 CuadradoDao.java \u2514\u2500\u2500 TrianguloDao.java package cl.lherrera.idcapas.dao; import java.util.Scanner; import cl.lherrera.idcapas.modelo.Circulo; public class CirculoDao { private static Scanner sc = new Scanner(System.in); private CirculoDao() {} public static Circulo obtenerCirculo() { System.out.println(\"Ingrese el radio del c\u00edrculo\"); double radio = sc.nextDouble(); return new Circulo(radio); } } package cl.lherrera.idcapas.dao; import java.util.Scanner; import cl.lherrera.idcapas.modelo.Cuadrado; public class CuadradoDao { private static Scanner sc = new Scanner(System.in); private CuadradoDao() {} public static Cuadrado obtenerCuadrado() { System.out.println(\"Ingrese el valor del lado...\"); double lado = sc.nextDouble(); return new Cuadrado(lado); } } package cl.lherrera.idcapas.dao; import java.util.Scanner; import cl.lherrera.idcapas.modelo.Triangulo; public class TrianguloDao { private static Scanner sc = new Scanner(System.in); private TrianguloDao() {} public static Triangulo obtenerTriangulo() { System.out.println(\"Ingrese la base...\"); double base = sc.nextDouble(); System.out.println(\"Ingrese la altura...\"); double altura = sc.nextDouble(); return new Triangulo(base, altura); } }","title":"DAO"},{"location":"ejercicios/patrones/InyeccionDependencias/figuras_geometricasCapas/#servicio","text":"Tenemos un servicio principal por el que pasan todos los servicios que implementan uno solo y este servicio es inyectado desde fuera. servicio \u251c\u2500\u2500 ServicioCalculo.java \u251c\u2500\u2500 ServicioCirculo.java \u251c\u2500\u2500 ServicioCuadrado.java \u251c\u2500\u2500 ServicioFigura.java \u2514\u2500\u2500 ServicioTriangulo.java package cl.lherrera.idcapas.servicio; public class ServicioCalculo { ServicioFigura servicio; public ServicioCalculo(ServicioFigura servicio) { this.servicio = servicio; } // as\u00ed se le llama en el negocio public void calcularElArea() { servicio.imprimirArea(); } } package cl.lherrera.idcapas.servicio; import cl.lherrera.idcapas.dao.CirculoDao; import cl.lherrera.idcapas.modelo.Circulo; public class ServicioCirculo implements ServicioFigura{ public void imprimirArea() { Circulo circulo = CirculoDao.obtenerCirculo(); double area = obtenerArea(circulo); System.err.println(\"El \u00e1rea del c\u00edrculo es: \" + area + \"\\n\"); } private double obtenerArea(Circulo circulo) { double radio = circulo.getRadio(); return Math.PI * radio * radio; } } package cl.lherrera.idcapas.servicio; import cl.lherrera.idcapas.dao.CuadradoDao; import cl.lherrera.idcapas.modelo.Cuadrado; public class ServicioCuadrado implements ServicioFigura{ public void imprimirArea() { Cuadrado cuadrado = CuadradoDao.obtenerCuadrado(); double area = obtenerArea(cuadrado); System.err.println(\"El \u00e1rea del cuadrado es: \" + area + \"\\n\"); } private double obtenerArea(Cuadrado cuadrado) { double lado = cuadrado.getLado(); return lado * lado; } } package cl.lherrera.idcapas.servicio; public interface ServicioFigura { public void imprimirArea(); } package cl.lherrera.idcapas.servicio; import cl.lherrera.idcapas.dao.TrianguloDao; import cl.lherrera.idcapas.modelo.Triangulo; public class ServicioTriangulo implements ServicioFigura { public void imprimirArea() { Triangulo triangulo = TrianguloDao.obtenerTriangulo(); double area = obtenerArea(triangulo); System.err.println(\"El \u00e1rea del tri\u00e1ngulo es: \" + area + \"\\n\"); } public double obtenerArea(Triangulo triangulo) { double base = triangulo.getBase(); double altura = triangulo.getAltura(); return base * altura / 2; } }","title":"Servicio"},{"location":"ejercicios/patrones/InyeccionDependencias/figuras_geometricasCapas/#todo","text":"Ya vimos como separar nuestro problema en capas, y es con esto que podemos inferir que a pesar del esfuerzo extra que result\u00f3 hacer esto, nos permite llevar una organizaci\u00f3n reconocible de la abstracci\u00f3n de un problema. La aplicaci\u00f3n de estas t\u00e9cnicas permiten tener un marco de trabajo que permita transformar el escenario de la necesidad a una soluci\u00f3n explicada al compilador en Java. Ahora podemos agregar m\u00e1s figuras... todas las que quieras. Mientras esto pasa, al igual que cuando se comienza un software, en su proceso de vida, vamos agregando funcionalidades y depende de la arquitectura que vayamos adoptando es lo productivo que seremos en el futuro. Por ejemplo ahora no es un problema el tama\u00f1o del swtich del men\u00fa, pero esto no ser\u00e1 muy legible cuando se tengan m\u00e1s figuras, entonces este y otros tipos de problemas nos ocurrir\u00e1n hagamos lo que hagamos para evitar todos los problemas de abstracciones que existen; pero al intentar usar la mejor arquitectura posible dentro del tiempo y esfuerzo, permitir\u00e1 que la aplicaci\u00f3n pueda integrar nuevas funcionalidades de manera m\u00e1s sencilla que si no se aplican estas mejoras continuas, teniendo en cuenta, en todo momento que no debemos abusar, hay que dedicar el esfuerzo justo seg\u00fan sea el contexto (tiempo, dinero, calidad) prioritario.","title":"TODO"},{"location":"ejercicios/repaso/java001/","text":"Ejercicios de Java de repaso C\u00e1lculos, implementaci\u00f3n y evoluci\u00f3n de implementaciones evolucionando en el paradigma. Basado en la primera lectura del curso. Imprimir hola mundo en java Simple, crear un programa en java que imprima por consola hola mundo. Soluci\u00f3n. Dentro del m\u00e9todo main package cl.lherrera.java001; public class Principal { public static void main(String[] args) { String saludo = \"Hola mundo\"; System.out.println(saludo); } } En un m\u00e9todo externo package cl.lherrera.java001; public class Principal { public static void main(String[] args) { saluda(); } private static void saluda() { String saludo = \"Hola mundo\"; System.out.println(saludo); } } Usando par\u00e1metros y enviando argumentos package cl.lherrera.java001; public class Principal { public static void main(String[] args) { saluda(\"Hola mundo\"); } private static void saluda(String saludo) { System.out.println(saludo); } } Usando una implementaci\u00f3n con clases Se puede realizar una implementaci\u00f3n diferente que genere el mismo resultado, por eso siempre necesitamos encontrar una soluci\u00f3n, simple que nos conforme para luego con la experiencia mejorar la calidad y simpleza de nuestras implementaciones. package cl.lherrera.java001; public class Principal { public static void main(String[] args) { Saludo saludo = new Saludo(\"Hola mundo\"); System.out.println(saludo); } } class Saludo { private String palabras; public Saludo() { } public Saludo(String palabras) { this.palabras = palabras; } public String getPalabras() { return palabras; } public void setPalabras(String palabras) { this.palabras = palabras; } @Override public String toString() { return getPalabras(); } } Usando interfaces Podemos complicar m\u00e1s la resoluci\u00f3n de este ejercicio; pero solamente si exista algo que lo justifique. package cl.lherrera.java001; public class Principal { public static void main(String[] args) { Saludo saludo = new Saludo(); saludo.saluda(); } } interface DecirHola{ default void saluda() { System.out.println(\"Hola mundo\"); } } class Saludo implements DecirHola{} Por ejemplo, si necesitamos que lo que se diga pueda ser distinto package cl.lherrera.java001; public class Principal { public static void main(String[] args) { DecirHola saludo = new Saludo(); DecirHola greeting = new Greeting(); ejecutaSaludo(saludo); // mismo m\u00e9todo, soporta diferentes tipos ejecutaSaludo(greeting); } /** * Mismo m\u00e9todo, diferentes resultados */ private static void ejecutaSaludo(DecirHola habla) { habla.saluda(); } } interface DecirHola { default void saluda() { System.out.println(\"Hola mundo\"); } } class Saludo implements DecirHola { } class Greeting implements DecirHola { @Override public void saluda() { System.out.println(\"Hello World !!\"); } } Sumar dos n\u00fameros - Scanner Implementar en Java, el siguiente Pseudoco\u0301digo . Algoritmo Suma Leer valor1 Leer Valor2 Mostrar valor1 + valor2 FinAlgoritmo Soluci\u00f3n package cl.lherrera.java001; import java.util.Scanner; public class Principal { public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.println(\"Ingresar el valor 1\"); int valorUno = sc.nextInt(); System.out.println(\"Ingresar el valor 2\"); int valorDos = sc.nextInt(); int total = valorUno + valorDos; System.out.println(\"El resultado es: \" + total); } } Sumar dos n\u00fameros Se pide dise\u00f1ar un sistema que sume dos n\u00fameros Soluci\u00f3n Sumando dos literales package cl.lherrera.java001; public class Principal { public static void main(String[] args) { System.out.println(4 + 3); } } Usando variables locales package cl.lherrera.java001; public class Principal { public static void main(String[] args) { int cuatro = 4; int tres = 3; System.out.println(cuatro + tres); } } Usando variables de instancia. package cl.lherrera.java001; public class Principal { private int cuatro = 4; private int tres = 3; public static void main(String[] args) { Principal principal = new Principal(); System.out.println(principal.cuatro + principal.tres); } } Utilizando variables est\u00e1ticas. As\u00ed no usamos una instancia package cl.lherrera.java001; public class Principal { private static int cuatro = 4; private static int tres = 3; public static void main(String[] args) { System.out.println(Principal.cuatro + Principal.tres); } } Usando un m\u00e9todo que parezca m\u00e1s natural. package cl.lherrera.java001; public class Principal { public static void main(String[] args) { Numero tres = new Numero(3); Numero cuatro = new Numero(4); System.out.println(cuatro.mas(tres)); } } class Numero { int valor; public Numero(int valor) { super(); this.valor = valor; } public int getValor() { return valor; } public void setValor(int valor) { this.valor = valor; } public int mas(Numero num) { return num.valor + this.valor; } } Dando una apariencia funcional package cl.lherrera.java001; public class Principal { public static void main(String[] args) { Numero tres = new Entero(3); Numero cuatro = new Entero(4); System.out.println(cuatro.mas(tres).mas(tres)); } } interface Numero { Numero mas(Numero numero); int getValor(); } class Entero implements Numero { private int valor; public Entero(int valor) { this.valor = valor; } public Entero() { } public int getValor() { return valor; } public void setValor(int valor) { this.valor = valor; } @Override public Numero mas(Numero numero) { return new Entero(numero.getValor() + this.valor); } @Override public String toString() { return \"Son: \" + valor; } } Lampara no funciona Implementar en Java, el siguiente diagrama de flujo Soluci\u00f3n package cl.lherrera.java001; import java.util.Scanner; public class Principal { public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.println(\"\u00bfest\u00e1 enchufada? s = si, otro caracter = no\"); if (sc.nextLine().equalsIgnoreCase(\"s\")) { System.out.println(\"\u00bffoco quemado? s = si, otro caracter = no\"); if (sc.nextLine().equalsIgnoreCase(\"s\")) { System.out.println(\"Reemplazar foco\"); } else { System.out.println(\"Comprar\"); } } else { System.out.println(\"Enchufarla\"); } } } Tri\u00e1ngulo rect\u00e1ngulo La fo\u0301rmula de Pita\u0301goras nos permite calcular el largo de la hipotenusa de un tria\u0301ngulo recta\u0301ngulo a partir de los largos de los catetos. Crearemos un programa donde el usuario introduzca los valores de ambos catetos y entreguemos como resultado el largo de la hipotenusa. Se debe implementar la formula a^2 + b^2 = h^2 donde: h : Hipotenusa a : Cateto A b : Cateto B Al determinar la ra\u00edz eliminamos el ^2 , es por eso que usamos la funci\u00f3n sqrt . Soluci\u00f3n 001 package cl.lherrera.java001; import java.util.Scanner; public class Principal { public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.println(\"Ingrese el cateto A\"); int catetoA = sc.nextInt(); System.out.println(\"Ingrese el cateto B\"); int catetoB = sc.nextInt(); float hipotenusa = (float) Math.sqrt(catetoA * catetoA + catetoB * catetoB); // retorna tipo double System.out.println(\"Hipotenusa es igual a: \" + hipotenusa); } } Soluci\u00f3n 002: Usando la librer\u00eda build-in Math . package cl.lherrera.java001; import java.util.Scanner; public class Principal { public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.println(\"Ingrese el cateto A\"); int catetoA = sc.nextInt(); System.out.println(\"Ingrese el cateto B\"); int catetoB = sc.nextInt(); float hipotenusa = (float) Math.sqrt(Math.pow(catetoA, 2) + Math.pow(catetoB, 2)); System.out.println(\"Hipotenusa es igual a: \" + hipotenusa); } } Transformar grados de Fahrenheit a Celsius La formula para transformar grados Fahrenheit a Celsius es: celsius = (fahrenheit - 32) * (5 / 9) Soluci\u00f3n package cl.lherrera.java001; import java.util.Scanner; public class Principal { public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.println(\"Ingrese los grados Fahrenheit enteros a convertir:\"); int fahrenheit = sc.nextInt(); int celcius = (fahrenheit - 32) * 5 / 9; System.out.printf(\"%d grados celcius son %d grados fahrenheit %n\", celcius, fahrenheit); } } Area de un c\u00edrculo Dado un radio, determinar el \u00e1rea de un c\u00edrculo: Soluci\u00f3n package cl.lherrera.java001; import java.util.Scanner; public class Principal { public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.println(\"Ingrese el radio del c\u00edrculo...\"); int radio = sc.nextInt(); double area = Math.PI * Math.pow(radio, 2); System.out.printf(\"el \u00e1rea del c\u00edrculo de radio %d es: %f %n\", radio, area); } } Promedio de 4 notas Implementar un programa en java que obtenga el promedio de 4 notas ingresadas por el usuario. Soluci\u00f3n package cl.lherrera.java001; import java.util.Scanner; public class Principal { public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.println(\"Ingrese la primera nota...\"); int notaUno = sc.nextInt(); System.out.println(\"Ingrese la segunda nota...\"); int notaDos = sc.nextInt(); System.out.println(\"Ingrese la tercera nota...\"); int notaTres = sc.nextInt(); System.out.println(\"Ingrese la cuarta nota...\"); int notaCuatro = sc.nextInt(); double promedio = (notaUno + notaDos + notaTres + notaCuatro) / 4; System.out.println(\"El promedio es: \" + promedio); } } Desafi\u0301o - Operaciones aritme\u0301ticas. La resistencia dentro de un circuito paralelo de calcula como: rt = 1 / ( (1/r1) + (1/rn) ) Donde: rt: es la resistencia total r1: es la resistencia 1 rn: la n-\u00e9sima resistencia. El usuario ingresa tres resistencias y el sistema entregar\u00e1 la resistencia total. Soluci\u00f3n: package cl.lherrera.java001; import java.util.Scanner; public class Principal { public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.println(\"Resistencia 1: \"); float resistencia1 = sc.nextFloat(); System.out.println(\"Resistencia 2: \"); float resistencia2 = sc.nextFloat(); System.out.println(\"Resistencia 3: \"); float resistencia3 = sc.nextFloat(); if (resistencia1 <= 0 || resistencia2 <= 0 || resistencia3 <= 0) { System.out.println(\"No se puede calcular resistencia total\"); } else { float resistenciaTotal = 1 / ((1 / resistencia1) + 1 / resistencia2 + 1 / resistencia3); System.out.printf(\"La resistencia total es de %f\", resistenciaTotal); } sc.close(); } } System.out.megaPrint: JAVA package cl.lherrera.java003; public class Principal { public static void main(String[] args) { System.out.println(\" J a v v a \"); System.out.println(\" J a a v v a a \"); System.out.println(\"J J aaaaa V V aaaaa \"); System.out.println(\" JJ a a V a a \"); } } Imprimir propiedades de java El objeto System , provee informaci\u00f3n muy \u00fatil, como lo son las propiedades. El objetivo es imprimir algunas de ellas. Salida esperada: Java Version: 1.8.0_181 Java Runtime Version: 1.8.0_181-b13 Java Home: /Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home/jre Java Class Path: /Users/luisherrera/Desktop/TALENTO-PROS/REPASO/apolleta/bin Soluci\u00f3n package cl.lherrera.java003; public class Principal { public static void main(String[] args) { System.out.println(\"\\nJava Version: \" + System.getProperty(\"java.version\")); System.out.println(\"Java Runtime Version: \" + System.getProperty(\"java.runtime.version\")); System.out.println(\"Java Home: \" + System.getProperty(\"java.home\")); System.out.println(\"Java Class Path: \" + System.getProperty(\"java.class.path\") + \"\\n\"); } }","title":"Java001"},{"location":"ejercicios/repaso/java001/#ejercicios-de-java-de-repaso","text":"C\u00e1lculos, implementaci\u00f3n y evoluci\u00f3n de implementaciones evolucionando en el paradigma. Basado en la primera lectura del curso.","title":"Ejercicios de Java de repaso"},{"location":"ejercicios/repaso/java001/#imprimir-hola-mundo-en-java","text":"Simple, crear un programa en java que imprima por consola hola mundo. Soluci\u00f3n. Dentro del m\u00e9todo main package cl.lherrera.java001; public class Principal { public static void main(String[] args) { String saludo = \"Hola mundo\"; System.out.println(saludo); } } En un m\u00e9todo externo package cl.lherrera.java001; public class Principal { public static void main(String[] args) { saluda(); } private static void saluda() { String saludo = \"Hola mundo\"; System.out.println(saludo); } } Usando par\u00e1metros y enviando argumentos package cl.lherrera.java001; public class Principal { public static void main(String[] args) { saluda(\"Hola mundo\"); } private static void saluda(String saludo) { System.out.println(saludo); } } Usando una implementaci\u00f3n con clases Se puede realizar una implementaci\u00f3n diferente que genere el mismo resultado, por eso siempre necesitamos encontrar una soluci\u00f3n, simple que nos conforme para luego con la experiencia mejorar la calidad y simpleza de nuestras implementaciones. package cl.lherrera.java001; public class Principal { public static void main(String[] args) { Saludo saludo = new Saludo(\"Hola mundo\"); System.out.println(saludo); } } class Saludo { private String palabras; public Saludo() { } public Saludo(String palabras) { this.palabras = palabras; } public String getPalabras() { return palabras; } public void setPalabras(String palabras) { this.palabras = palabras; } @Override public String toString() { return getPalabras(); } } Usando interfaces Podemos complicar m\u00e1s la resoluci\u00f3n de este ejercicio; pero solamente si exista algo que lo justifique. package cl.lherrera.java001; public class Principal { public static void main(String[] args) { Saludo saludo = new Saludo(); saludo.saluda(); } } interface DecirHola{ default void saluda() { System.out.println(\"Hola mundo\"); } } class Saludo implements DecirHola{} Por ejemplo, si necesitamos que lo que se diga pueda ser distinto package cl.lherrera.java001; public class Principal { public static void main(String[] args) { DecirHola saludo = new Saludo(); DecirHola greeting = new Greeting(); ejecutaSaludo(saludo); // mismo m\u00e9todo, soporta diferentes tipos ejecutaSaludo(greeting); } /** * Mismo m\u00e9todo, diferentes resultados */ private static void ejecutaSaludo(DecirHola habla) { habla.saluda(); } } interface DecirHola { default void saluda() { System.out.println(\"Hola mundo\"); } } class Saludo implements DecirHola { } class Greeting implements DecirHola { @Override public void saluda() { System.out.println(\"Hello World !!\"); } }","title":"Imprimir hola mundo en java"},{"location":"ejercicios/repaso/java001/#sumar-dos-numeros-scanner","text":"Implementar en Java, el siguiente Pseudoco\u0301digo . Algoritmo Suma Leer valor1 Leer Valor2 Mostrar valor1 + valor2 FinAlgoritmo Soluci\u00f3n package cl.lherrera.java001; import java.util.Scanner; public class Principal { public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.println(\"Ingresar el valor 1\"); int valorUno = sc.nextInt(); System.out.println(\"Ingresar el valor 2\"); int valorDos = sc.nextInt(); int total = valorUno + valorDos; System.out.println(\"El resultado es: \" + total); } }","title":"Sumar dos n\u00fameros - Scanner"},{"location":"ejercicios/repaso/java001/#sumar-dos-numeros","text":"Se pide dise\u00f1ar un sistema que sume dos n\u00fameros Soluci\u00f3n Sumando dos literales package cl.lherrera.java001; public class Principal { public static void main(String[] args) { System.out.println(4 + 3); } } Usando variables locales package cl.lherrera.java001; public class Principal { public static void main(String[] args) { int cuatro = 4; int tres = 3; System.out.println(cuatro + tres); } } Usando variables de instancia. package cl.lherrera.java001; public class Principal { private int cuatro = 4; private int tres = 3; public static void main(String[] args) { Principal principal = new Principal(); System.out.println(principal.cuatro + principal.tres); } } Utilizando variables est\u00e1ticas. As\u00ed no usamos una instancia package cl.lherrera.java001; public class Principal { private static int cuatro = 4; private static int tres = 3; public static void main(String[] args) { System.out.println(Principal.cuatro + Principal.tres); } } Usando un m\u00e9todo que parezca m\u00e1s natural. package cl.lherrera.java001; public class Principal { public static void main(String[] args) { Numero tres = new Numero(3); Numero cuatro = new Numero(4); System.out.println(cuatro.mas(tres)); } } class Numero { int valor; public Numero(int valor) { super(); this.valor = valor; } public int getValor() { return valor; } public void setValor(int valor) { this.valor = valor; } public int mas(Numero num) { return num.valor + this.valor; } } Dando una apariencia funcional package cl.lherrera.java001; public class Principal { public static void main(String[] args) { Numero tres = new Entero(3); Numero cuatro = new Entero(4); System.out.println(cuatro.mas(tres).mas(tres)); } } interface Numero { Numero mas(Numero numero); int getValor(); } class Entero implements Numero { private int valor; public Entero(int valor) { this.valor = valor; } public Entero() { } public int getValor() { return valor; } public void setValor(int valor) { this.valor = valor; } @Override public Numero mas(Numero numero) { return new Entero(numero.getValor() + this.valor); } @Override public String toString() { return \"Son: \" + valor; } }","title":"Sumar dos n\u00fameros"},{"location":"ejercicios/repaso/java001/#lampara-no-funciona","text":"Implementar en Java, el siguiente diagrama de flujo Soluci\u00f3n package cl.lherrera.java001; import java.util.Scanner; public class Principal { public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.println(\"\u00bfest\u00e1 enchufada? s = si, otro caracter = no\"); if (sc.nextLine().equalsIgnoreCase(\"s\")) { System.out.println(\"\u00bffoco quemado? s = si, otro caracter = no\"); if (sc.nextLine().equalsIgnoreCase(\"s\")) { System.out.println(\"Reemplazar foco\"); } else { System.out.println(\"Comprar\"); } } else { System.out.println(\"Enchufarla\"); } } }","title":"Lampara no funciona"},{"location":"ejercicios/repaso/java001/#triangulo-rectangulo","text":"La fo\u0301rmula de Pita\u0301goras nos permite calcular el largo de la hipotenusa de un tria\u0301ngulo recta\u0301ngulo a partir de los largos de los catetos. Crearemos un programa donde el usuario introduzca los valores de ambos catetos y entreguemos como resultado el largo de la hipotenusa. Se debe implementar la formula a^2 + b^2 = h^2 donde: h : Hipotenusa a : Cateto A b : Cateto B Al determinar la ra\u00edz eliminamos el ^2 , es por eso que usamos la funci\u00f3n sqrt . Soluci\u00f3n 001 package cl.lherrera.java001; import java.util.Scanner; public class Principal { public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.println(\"Ingrese el cateto A\"); int catetoA = sc.nextInt(); System.out.println(\"Ingrese el cateto B\"); int catetoB = sc.nextInt(); float hipotenusa = (float) Math.sqrt(catetoA * catetoA + catetoB * catetoB); // retorna tipo double System.out.println(\"Hipotenusa es igual a: \" + hipotenusa); } } Soluci\u00f3n 002: Usando la librer\u00eda build-in Math . package cl.lherrera.java001; import java.util.Scanner; public class Principal { public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.println(\"Ingrese el cateto A\"); int catetoA = sc.nextInt(); System.out.println(\"Ingrese el cateto B\"); int catetoB = sc.nextInt(); float hipotenusa = (float) Math.sqrt(Math.pow(catetoA, 2) + Math.pow(catetoB, 2)); System.out.println(\"Hipotenusa es igual a: \" + hipotenusa); } }","title":"Tri\u00e1ngulo rect\u00e1ngulo"},{"location":"ejercicios/repaso/java001/#transformar-grados-de-fahrenheit-a-celsius","text":"La formula para transformar grados Fahrenheit a Celsius es: celsius = (fahrenheit - 32) * (5 / 9) Soluci\u00f3n package cl.lherrera.java001; import java.util.Scanner; public class Principal { public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.println(\"Ingrese los grados Fahrenheit enteros a convertir:\"); int fahrenheit = sc.nextInt(); int celcius = (fahrenheit - 32) * 5 / 9; System.out.printf(\"%d grados celcius son %d grados fahrenheit %n\", celcius, fahrenheit); } }","title":"Transformar grados de Fahrenheit a Celsius"},{"location":"ejercicios/repaso/java001/#area-de-un-circulo","text":"Dado un radio, determinar el \u00e1rea de un c\u00edrculo: Soluci\u00f3n package cl.lherrera.java001; import java.util.Scanner; public class Principal { public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.println(\"Ingrese el radio del c\u00edrculo...\"); int radio = sc.nextInt(); double area = Math.PI * Math.pow(radio, 2); System.out.printf(\"el \u00e1rea del c\u00edrculo de radio %d es: %f %n\", radio, area); } }","title":"Area de un c\u00edrculo"},{"location":"ejercicios/repaso/java001/#promedio-de-4-notas","text":"Implementar un programa en java que obtenga el promedio de 4 notas ingresadas por el usuario. Soluci\u00f3n package cl.lherrera.java001; import java.util.Scanner; public class Principal { public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.println(\"Ingrese la primera nota...\"); int notaUno = sc.nextInt(); System.out.println(\"Ingrese la segunda nota...\"); int notaDos = sc.nextInt(); System.out.println(\"Ingrese la tercera nota...\"); int notaTres = sc.nextInt(); System.out.println(\"Ingrese la cuarta nota...\"); int notaCuatro = sc.nextInt(); double promedio = (notaUno + notaDos + notaTres + notaCuatro) / 4; System.out.println(\"El promedio es: \" + promedio); } }","title":"Promedio de 4 notas"},{"location":"ejercicios/repaso/java001/#desafio-operaciones-aritmeticas","text":"La resistencia dentro de un circuito paralelo de calcula como: rt = 1 / ( (1/r1) + (1/rn) ) Donde: rt: es la resistencia total r1: es la resistencia 1 rn: la n-\u00e9sima resistencia. El usuario ingresa tres resistencias y el sistema entregar\u00e1 la resistencia total. Soluci\u00f3n: package cl.lherrera.java001; import java.util.Scanner; public class Principal { public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.println(\"Resistencia 1: \"); float resistencia1 = sc.nextFloat(); System.out.println(\"Resistencia 2: \"); float resistencia2 = sc.nextFloat(); System.out.println(\"Resistencia 3: \"); float resistencia3 = sc.nextFloat(); if (resistencia1 <= 0 || resistencia2 <= 0 || resistencia3 <= 0) { System.out.println(\"No se puede calcular resistencia total\"); } else { float resistenciaTotal = 1 / ((1 / resistencia1) + 1 / resistencia2 + 1 / resistencia3); System.out.printf(\"La resistencia total es de %f\", resistenciaTotal); } sc.close(); } }","title":"Desafi\u0301o - Operaciones aritme\u0301ticas."},{"location":"ejercicios/repaso/java001/#systemoutmegaprintjava","text":"package cl.lherrera.java003; public class Principal { public static void main(String[] args) { System.out.println(\" J a v v a \"); System.out.println(\" J a a v v a a \"); System.out.println(\"J J aaaaa V V aaaaa \"); System.out.println(\" JJ a a V a a \"); } }","title":"System.out.megaPrint:JAVA"},{"location":"ejercicios/repaso/java001/#imprimir-propiedades-de-java","text":"El objeto System , provee informaci\u00f3n muy \u00fatil, como lo son las propiedades. El objetivo es imprimir algunas de ellas. Salida esperada: Java Version: 1.8.0_181 Java Runtime Version: 1.8.0_181-b13 Java Home: /Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home/jre Java Class Path: /Users/luisherrera/Desktop/TALENTO-PROS/REPASO/apolleta/bin Soluci\u00f3n package cl.lherrera.java003; public class Principal { public static void main(String[] args) { System.out.println(\"\\nJava Version: \" + System.getProperty(\"java.version\")); System.out.println(\"Java Runtime Version: \" + System.getProperty(\"java.runtime.version\")); System.out.println(\"Java Home: \" + System.getProperty(\"java.home\")); System.out.println(\"Java Class Path: \" + System.getProperty(\"java.class.path\") + \"\\n\"); } }","title":"Imprimir propiedades de java"},{"location":"ejercicios/repaso/java002/","text":"Ejercicios de Java de repaso 002 Condicionales, anidados, operadores. Basado en la sesi\u00f3n presencial 2 de la unidad 1 m\u00f3dulo 1 arreglo en frasem\u00e1tico . Flujo condicional b\u00e1sico Implementar el siguiente diagrama en Java. Soluci\u00f3n package cl.lherrera.java002; import java.util.Scanner; public class Principal { public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.println(\"Ingrese un valor \"); int valor = sc.nextInt(); if (valor >= 18) System.out.println(\"Es mayor de edad\"); } } Flujo condicional else Implementar el siguiente diagrama en Java. Soluci\u00f3n Hay que aplicar un else Siempre que una opci\u00f3n no pueda ser dos cosas a la vez, ir\u00e1 un else. package cl.lherrera.java001; import java.util.Scanner; public class Principal { public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.println(\"Ingrese un valor \"); int valor = sc.nextInt(); if (valor >= 18) { System.out.println(\"es mayor de edad\"); } else { System.out.println(\"es menor de edad\"); } } } Aviso de seguridad contrase\u00f1a Implementar in programa en Java que permita que un usuario ingrese una contrase\u00f1a y este valide que la contrase\u00f1a tenga un largo m\u00ednimo de de 6 caracteres de longitud. package cl.lherrera.java002; import java.util.Scanner; public class Principal { public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.println(\"Ingrese una contrase\u00f1a \"); String valor = sc.nextLine(); if (valor.length() < 6) { System.out.println(\"Contrase\u00f1a muy corta\"); } else { System.out.println(\"Contrase\u00f1a correcta\"); } sc.close(); } } El mayor de tres n\u00fameros Se necesita determinar el mayor de tres n\u00fameros ingresados por un usuario. Soluci\u00f3n 001: package cl.lherrera.java002; import java.util.Scanner; public class Principal { public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.println(\"Ingrese primer valor...\"); int valorUno = sc.nextInt(); System.out.println(\"Ingrese segundo valor...\"); int valorDos = sc.nextInt(); System.out.println(\"Ingrese tercer valor...\"); int valorTres = sc.nextInt(); int mayor = 0; if (valorUno != valorDos && valorDos != valorTres) { if (valorUno > valorDos) { if (valorUno > valorTres) { mayor = valorUno; } else { mayor = valorTres; } } else if (valorDos > valorTres) { mayor = valorDos; } else { mayor = valorTres; } System.out.println(\"El mayor es: \" + mayor); } else { System.out.println(\"Son iguales\"); } } } Soluci\u00f3n 002: usando colecciones package cl.lherrera.java002; import java.util.ArrayList; import java.util.Collections; import java.util.List; import java.util.Scanner; public class Principal { public static void main(String[] args) { List<Integer> valores = new ArrayList<>(); Scanner sc = new Scanner(System.in); System.out.println(\"Ingrese primer valor...\"); valores.add(sc.nextInt()); System.out.println(\"Ingrese segundo valor...\"); valores.add(sc.nextInt()); System.out.println(\"Ingrese tercer valor...\"); valores.add(sc.nextInt()); int mayor = Collections.max(valores); int menor = Collections.min(valores); if (mayor != menor) { System.out.println(\"El mayor es: \" + mayor); } else { System.out.println(\"Son iguales\"); } } } El Frasem\u00e1tico \ud83d\ude2c El siguiente es un programa que genera frases. Como para discursos. package cl.lherrera.java002; import java.util.Random; public class Frasematico { public static void main(String[] args) { genera(); } public static void genera() { // 1 - crear tres conjuntos de palabras para elegir. String[] listaUno = { \"La textura\", \"El tratamiento\", \"La materialidad\", \"La visualizaci\u00f3n\", \"La lectura\", \"La filosof\u00eda\", \"La idea\", \"La nitidez\", \"El ensamblaje\", \"La concatenaci\u00f3n\", \"La ambivalencia\", \"La escala\", \"La armon\u00eda\", \"El car\u00e1cter\", \"La memoria\", \"La figuraci\u00f3n\", \"La visualizaci\u00f3n\", \"La concepci\u00f3n\", \"La imbricaci\u00f3n\", \"La composici\u00f3n\", }; String[] listaDos = { \"modal\", \"pertinente\", \"lineal\", \"estructural\", \"interior\", \"tonal\", \"instrumental\", \"ambiental\", \"ideal\", \"racional\" }; String[] listaTres = { \"del edificio\", \"del entorno\", \"de la imagen\", \"de la funci\u00f3n\", \"del proyecto\", \"de la propuesta\", \"de la soluci\u00f3n\", \"del trazado\", \"de la f\u00e1brica\", \"de la fachada\", \"del material\", \"del color\", \"de la forma\" }; String[] listaCuatro = { \"manifiesta\", \"expresa\", \"exhibe\", \"proporciona\", \"propone\", \"sostiene\", \"conlleva\", \"organiza\", \"refleja\", \"ostenta\", \"descubre\", \"oculta\", \"muestra\", \"revela\" }; String[] listaCinco = { \"un espacio\", \"un volumen\", \"un aspecto\", \"un estrato\", \"una estrategia\", \"una estructura\", \"un ritmo\", \"un orden\", \"un cuerpo\", \"una frialdad\", \"un calor\", \"un impulso\" }; String[] listaSeis = { \"palpablemente\", \"perentoriamente\", \"superficialmente\", \"voluntariamente\", \"\u00edntimamente\", \"gen\u00e9ricamente\", \"espec\u00edficamente\", \"d\u00e9bilmente\", \"fuertemente\", \"evidentemente\", \"ciertamente\", \"sutilmente\", \"gradualmente\", \"intensamente\" }; String[] listaSiete = { \"complejo\", \"profundo\", \"pl\u00e1stico\", \"ef\u00edmero\", \"microsc\u00f3pico\", \"inmaterial\", \"idealista\", \"abstracto\", \"realista\", \"quim\u00e9rico\" }; // 2- obtener la cantidad de elementos que contiene cada lista. int largoUno = listaUno.length; int largoDos = listaDos.length; int largoTres = listaTres.length; int largoCuatro = listaCuatro.length; int largoCinco = listaCinco.length; int largoSeis = listaSeis.length; int largoSiete = listaSiete.length; // 3- generar n\u00fameros aleatorios hasta el largo de cada cadena Random aleatorio = new Random(); int randUno = aleatorio.nextInt(largoUno); int randDos = aleatorio.nextInt(largoDos); int randTres = aleatorio.nextInt(largoTres); int randCuatro = aleatorio.nextInt(largoCuatro); int randCinco = aleatorio.nextInt(largoCinco); int randSeis = aleatorio.nextInt(largoSeis); int randSiete = aleatorio.nextInt(largoSiete); // 4- construir la frase String frase = String.format( \"%s %s %s, %s %s %s %s\", listaUno[randUno], listaDos[randDos], listaTres[randTres], listaCuatro[randCuatro], listaCinco[randCinco], listaSeis[randSeis], listaSiete[randSiete]); // 5- Imprimir el resultado System.out.println(frase); } }","title":"Java002"},{"location":"ejercicios/repaso/java002/#ejercicios-de-java-de-repaso-002","text":"Condicionales, anidados, operadores. Basado en la sesi\u00f3n presencial 2 de la unidad 1 m\u00f3dulo 1 arreglo en frasem\u00e1tico .","title":"Ejercicios de Java de repaso 002"},{"location":"ejercicios/repaso/java002/#flujo-condicional-basico","text":"Implementar el siguiente diagrama en Java. Soluci\u00f3n package cl.lherrera.java002; import java.util.Scanner; public class Principal { public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.println(\"Ingrese un valor \"); int valor = sc.nextInt(); if (valor >= 18) System.out.println(\"Es mayor de edad\"); } }","title":"Flujo condicional b\u00e1sico"},{"location":"ejercicios/repaso/java002/#flujo-condicional-else","text":"Implementar el siguiente diagrama en Java. Soluci\u00f3n Hay que aplicar un else Siempre que una opci\u00f3n no pueda ser dos cosas a la vez, ir\u00e1 un else. package cl.lherrera.java001; import java.util.Scanner; public class Principal { public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.println(\"Ingrese un valor \"); int valor = sc.nextInt(); if (valor >= 18) { System.out.println(\"es mayor de edad\"); } else { System.out.println(\"es menor de edad\"); } } }","title":"Flujo condicional else"},{"location":"ejercicios/repaso/java002/#aviso-de-seguridad-contrasena","text":"Implementar in programa en Java que permita que un usuario ingrese una contrase\u00f1a y este valide que la contrase\u00f1a tenga un largo m\u00ednimo de de 6 caracteres de longitud. package cl.lherrera.java002; import java.util.Scanner; public class Principal { public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.println(\"Ingrese una contrase\u00f1a \"); String valor = sc.nextLine(); if (valor.length() < 6) { System.out.println(\"Contrase\u00f1a muy corta\"); } else { System.out.println(\"Contrase\u00f1a correcta\"); } sc.close(); } }","title":"Aviso de seguridad contrase\u00f1a"},{"location":"ejercicios/repaso/java002/#el-mayor-de-tres-numeros","text":"Se necesita determinar el mayor de tres n\u00fameros ingresados por un usuario. Soluci\u00f3n 001: package cl.lherrera.java002; import java.util.Scanner; public class Principal { public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.println(\"Ingrese primer valor...\"); int valorUno = sc.nextInt(); System.out.println(\"Ingrese segundo valor...\"); int valorDos = sc.nextInt(); System.out.println(\"Ingrese tercer valor...\"); int valorTres = sc.nextInt(); int mayor = 0; if (valorUno != valorDos && valorDos != valorTres) { if (valorUno > valorDos) { if (valorUno > valorTres) { mayor = valorUno; } else { mayor = valorTres; } } else if (valorDos > valorTres) { mayor = valorDos; } else { mayor = valorTres; } System.out.println(\"El mayor es: \" + mayor); } else { System.out.println(\"Son iguales\"); } } } Soluci\u00f3n 002: usando colecciones package cl.lherrera.java002; import java.util.ArrayList; import java.util.Collections; import java.util.List; import java.util.Scanner; public class Principal { public static void main(String[] args) { List<Integer> valores = new ArrayList<>(); Scanner sc = new Scanner(System.in); System.out.println(\"Ingrese primer valor...\"); valores.add(sc.nextInt()); System.out.println(\"Ingrese segundo valor...\"); valores.add(sc.nextInt()); System.out.println(\"Ingrese tercer valor...\"); valores.add(sc.nextInt()); int mayor = Collections.max(valores); int menor = Collections.min(valores); if (mayor != menor) { System.out.println(\"El mayor es: \" + mayor); } else { System.out.println(\"Son iguales\"); } } }","title":"El mayor de tres n\u00fameros"},{"location":"ejercicios/repaso/java002/#el-frasematico","text":"El siguiente es un programa que genera frases. Como para discursos. package cl.lherrera.java002; import java.util.Random; public class Frasematico { public static void main(String[] args) { genera(); } public static void genera() { // 1 - crear tres conjuntos de palabras para elegir. String[] listaUno = { \"La textura\", \"El tratamiento\", \"La materialidad\", \"La visualizaci\u00f3n\", \"La lectura\", \"La filosof\u00eda\", \"La idea\", \"La nitidez\", \"El ensamblaje\", \"La concatenaci\u00f3n\", \"La ambivalencia\", \"La escala\", \"La armon\u00eda\", \"El car\u00e1cter\", \"La memoria\", \"La figuraci\u00f3n\", \"La visualizaci\u00f3n\", \"La concepci\u00f3n\", \"La imbricaci\u00f3n\", \"La composici\u00f3n\", }; String[] listaDos = { \"modal\", \"pertinente\", \"lineal\", \"estructural\", \"interior\", \"tonal\", \"instrumental\", \"ambiental\", \"ideal\", \"racional\" }; String[] listaTres = { \"del edificio\", \"del entorno\", \"de la imagen\", \"de la funci\u00f3n\", \"del proyecto\", \"de la propuesta\", \"de la soluci\u00f3n\", \"del trazado\", \"de la f\u00e1brica\", \"de la fachada\", \"del material\", \"del color\", \"de la forma\" }; String[] listaCuatro = { \"manifiesta\", \"expresa\", \"exhibe\", \"proporciona\", \"propone\", \"sostiene\", \"conlleva\", \"organiza\", \"refleja\", \"ostenta\", \"descubre\", \"oculta\", \"muestra\", \"revela\" }; String[] listaCinco = { \"un espacio\", \"un volumen\", \"un aspecto\", \"un estrato\", \"una estrategia\", \"una estructura\", \"un ritmo\", \"un orden\", \"un cuerpo\", \"una frialdad\", \"un calor\", \"un impulso\" }; String[] listaSeis = { \"palpablemente\", \"perentoriamente\", \"superficialmente\", \"voluntariamente\", \"\u00edntimamente\", \"gen\u00e9ricamente\", \"espec\u00edficamente\", \"d\u00e9bilmente\", \"fuertemente\", \"evidentemente\", \"ciertamente\", \"sutilmente\", \"gradualmente\", \"intensamente\" }; String[] listaSiete = { \"complejo\", \"profundo\", \"pl\u00e1stico\", \"ef\u00edmero\", \"microsc\u00f3pico\", \"inmaterial\", \"idealista\", \"abstracto\", \"realista\", \"quim\u00e9rico\" }; // 2- obtener la cantidad de elementos que contiene cada lista. int largoUno = listaUno.length; int largoDos = listaDos.length; int largoTres = listaTres.length; int largoCuatro = listaCuatro.length; int largoCinco = listaCinco.length; int largoSeis = listaSeis.length; int largoSiete = listaSiete.length; // 3- generar n\u00fameros aleatorios hasta el largo de cada cadena Random aleatorio = new Random(); int randUno = aleatorio.nextInt(largoUno); int randDos = aleatorio.nextInt(largoDos); int randTres = aleatorio.nextInt(largoTres); int randCuatro = aleatorio.nextInt(largoCuatro); int randCinco = aleatorio.nextInt(largoCinco); int randSeis = aleatorio.nextInt(largoSeis); int randSiete = aleatorio.nextInt(largoSiete); // 4- construir la frase String frase = String.format( \"%s %s %s, %s %s %s %s\", listaUno[randUno], listaDos[randDos], listaTres[randTres], listaCuatro[randCuatro], listaCinco[randCinco], listaSeis[randSeis], listaSiete[randSiete]); // 5- Imprimir el resultado System.out.println(frase); } }","title":"El Frasem\u00e1tico \ud83d\ude2c"},{"location":"ejercicios/repaso/java003/","text":"Ejercicios de Java de repaso 002 No se exponen ejemplos de sobre carga. (lectura en teor\u00eda con algunos ejemplos. While, do-while, operadores or and, toCharArray, for anidado. M\u00e9todos no incluidos en la lectura, ya que hay un apartado especial en teor\u00eda. Imprimir valores Implementar un inicio de sesi\u00f3n. El usuario ingresa un usuario y contrase\u00f1a. Si las credenciales no son correctas, se imprime el aviso y se solicita el ingreso de estas, nuevamente. Si las credenciales son correctas, se imprime mensaje informativo de ingreso al sistema. Soluci\u00f3n: Uso del while. package cl.lherrera.java003; import java.util.Scanner; public class Principal { public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.println(\"Ingrese el usuario\"); String usuario = sc.nextLine(); System.out.println(\"Ingrese la contrase\u00f1a\"); String contrasenia = sc.nextLine(); while (!usuario.equals(\"lherrera\") || !contrasenia.equals(\"1234\")) { System.out.println(\"Contrase\u00f1a incorrecta\"); System.out.println(\"\\n\\n Ingrese el usuario\"); usuario = sc.nextLine(); System.out.println(\"Ingrese la contrase\u00f1a\"); contrasenia = sc.nextLine(); } System.out.println(\"Contrase\u00f1a correcta, bienvenido al sistema !!\"); } } Utilizando un do while . package cl.lherrera.java003; import java.util.Scanner; public class Principal { public static void main(String[] args) { Scanner sc = new Scanner(System.in); boolean seguir = false; do { System.out.println(\"Ingrese el usuario\"); String usuario = sc.nextLine(); System.out.println(\"Ingrese la contrase\u00f1a\"); String contrasenia = sc.nextLine(); seguir = !usuario.equals(\"lherrera\") || !contrasenia.equals(\"1234\"); if (seguir) { System.out.println(\"Contrase\u00f1a incorrecta\\n\\n\"); } } while (seguir); System.out.println(\"Contrase\u00f1a correcta, bienvenido al sistema !!\"); } } Ingresar un valor Implementar un programa en Java , que solicite el ingreso de un n\u00famero por consola, si este no est\u00e1 entre 1 y 10, lo debe solicitar nuevamente, indicando en n\u00famero ingresado en cada ocasi\u00f3n. Soluci\u00f3n: while . package cl.lherrera.java003; import java.util.Scanner; public class Principal { public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.println(\"Ingrese un valor entero\"); int valor = sc.nextInt(); while (valor < 0 || valor > 10) { System.out.println(\"El valor ingresado no est\u00e1 entre 1 y 10\"); System.out.println(\"Ingrese un valor entero\"); valor = sc.nextInt(); } System.out.printf(\"El valor %d ingresado, est\u00e1 entre 1 y 10\", valor); } } Soluci\u00f3n: do - while . package cl.lherrera.java003; import java.util.Scanner; public class Principal { public static void main(String[] args) { Scanner sc = new Scanner(System.in); boolean seguir = true; int valor = 0; do { System.out.println(\"Ingrese un valor entero entre 1 y 10\"); valor = sc.nextInt(); seguir = (valor <= 0 || valor > 10); if (seguir) System.out.println(\"El valor ingresado no est\u00e1 entre 1 y 10\"); } while (seguir); System.out.printf(\"El valor %d ingresado, est\u00e1 entre 1 y 10\", valor); } } Implementar men\u00fa Implementar en Java el siguiente diagrama. Soluci\u00f3n: package cl.lherrera.java003; import java.util.Scanner; public class Principal { public static void main(String[] args) { Scanner sc = new Scanner(System.in); String opcion = \"\"; // .equals devuelve 0 si son iguales, 1 si es mayor y -1 si es menor while (!opcion.equals(\"salir\")) { System.out.printf(\"Escoge una opci\u00f3n\\n\"); System.out.printf(\"1 -- Acci\u00f3n 1\\n\"); System.out.printf(\"2 -- Acci\u00f3n 2\\n\"); System.out.printf(\"Escribe 'salir' para terminar el programa\\n\\n\"); System.out.printf(\"Ingrese una opci\u00f3n:\"); opcion = sc.nextLine(); if (opcion.equals(\"1\")) { System.out.printf(\"Realizando acci\u00f3n 1\\n\"); } else if (opcion.equals(\"2\")) { System.out.printf(\"Realizando acci\u00f3n 2\\n\"); } else if (opcion.equals(\"salir\")) { System.out.printf(\"Saliendo...\\n\"); } else { System.out.printf(\"Opci\u00f3n inv\u00e1lida\\n\"); } } } } Refactorizaci\u00f3n de la gu\u00eda: package cl.lherrera.java003; import java.util.Scanner; public class Principal { private static final Scanner sc = new Scanner(System.in); private static void imprimeMenu() { String textoMenu = new StringBuilder(\"Escoge una opci\u00f3n\") .append(\"\\n\") .append(\"1 -- Acci\u00f3n 1\") .append(\"\\n\") .append(\"2 -- Acci\u00f3n 2\") .append(\"\\n\") .append(\"Escribe 'salir' para terminar el programa\") .append(\"\\n\") .append(\"\\n\") .append(\"Ingrese una opci\u00f3n:\") .toString(); System.out.println(textoMenu); } private static String capturaOpcion() { imprimeMenu(); return sc.nextLine(); } public static void main(String[] args) { String opcion = \"\"; // .equals devuelve 0 si son iguales, 1 si es mayor y -1 si es menor while (!opcion.equals(\"salir\")) { opcion = capturaOpcion(); if (opcion.equals(\"1\")) { System.out.println(\"Realizando acci\u00f3n 1\"); } else if (opcion.equals(\"2\")) { System.out.println(\"Realizando acci\u00f3n 2\"); } else if (opcion.equals(\"salir\")) { System.out.println(\"Saliendo...\"); } else { System.out.println(\"Opci\u00f3n inv\u00e1lida\"); } } } } Iterar 10 veces Implementar el siguiente diagrama en Java . Soluci\u00f3n usando: while package cl.lherrera.java003; public class Principal { public static void main(String[] args) { int i = 0; while (i < 10) { System.out.println(i); i++; } } } Soluci\u00f3n usando: do-while package cl.lherrera.java003; public class Principal { public static void main(String[] args) { int i = 0; do { System.out.println(i); i++; } while (i < 10); } } La bomba de tiempo Crearemos un algoritmo sencillo que realice una cuenta regresiva de 5 segundos. Contar de forma regresiva es muy similar, solo debemos comenzar desde el valor correspondiente e ir disminuyendo su valor de a uno en uno. Esta es una implementaci\u00f3n del uso de TimeUnit , que permite poner el hilo en espera el tiempo que indiquemos, esto en caso de problemas internos, puede arrojar un InterruptedException , por lo que hay que capturarlo. package cl.lherrera.java003; import java.util.concurrent.TimeUnit; public class Principal { public static void main(String[] args) { try { System.out.println(\"comenzamos...\"); TimeUnit.SECONDS.sleep(1); System.out.println(\"pas\u00f3 un segundo\"); TimeUnit.SECONDS.sleep(1); System.out.println(\"pas\u00f3 otro segundo..\"); } catch (InterruptedException e) { e.printStackTrace(); // solo para trazar el hilo Thread.currentThread().interrupt(); } } } Soluci\u00f3n: package cl.lherrera.java003; import java.util.concurrent.TimeUnit; public class Principal { public static void main(String[] args) { int i = 5; while (i > 0) { // cuando lleguemos a cero terminamos. System.out.printf(\"%d\\n\", i); i -= 1; // en cada iteraci\u00f3n descontamos 1 try { TimeUnit.SECONDS.sleep(1); } catch (InterruptedException e) { e.printStackTrace(); } } System.out.println(\"Booom!!\"); } } Sumando de 1 a 100 Realizar la suma total de los n\u00fameros del 1 al 100. 1 + 2 + 3 + ... + 100 = ? package cl.lherrera.java003; public class Principal { public static void main(String[] args) { int i = 0; int suma = 0; while (i < 100) { i++; suma += i; } System.out.println(suma); } } HTML List-Maker Implementar un programa en Java , un programa que genere la siguiente salida. Tomar en cuenta que se debe usar un ciclo. No tiempo a\u00fan para estructuras de datos. <ul> <li>Elemento 1</li> <li>Elemento 2</li> <li>Elemento 3</li> <li>Elemento 4</li> <li>Elemento 5</li> <li>Elemento 6</li> <li>Elemento 7</li> <li>Elemento 8</li> <li>Elemento 9</li> <li>Elemento 10</li> </ul> Soluci\u00f3n package cl.lherrera.java003; public class Principal { public static void main(String[] args) { StringBuilder listaHtml = new StringBuilder(); listaHtml.append(\"<ul>\"); int i = 0; int suma = 0; while (i < 10) { i++; listaHtml.append(\"\\n\\t\") .append(\"<li>Elemento \") .append(i) .append(\"</li>\"); } listaHtml.append(\"\\n\") .append(\"</ul>\"); System.out.println(listaHtml.toString()); } } Tablas de multiplicar, uso del for Hay que tener en cuenta que para saber cuando un for es bueno frente a un while , es que cuando se requiera iterar un valor que se vaya incrementando, es mejor un for por que tenemos acceso al \u00edndice auto incremental, sin tener que ir aumentando manualmente como lo har\u00edamos en un while . EL while es m\u00e1s para poder mantener un estado hasta que una condici\u00f3n lo termine. Cuando no se tiene el l\u00edmite, es decir, si es que no se conoce la cantidad de ciclos, es mejor usar un while . Mantener un estado, se refiere a por ejemplo mantener un men\u00fa en pantalla hasta que algo pase. Crear un programa en java, que permita ingresar un n\u00famero entero y se imprima su tabla de multiplicar hasta el 12 Ejemplo de salida: Ingrese un n\u00famero: 10 10 x 1 = 10 10 x 2 = 20 10 x 3 = 30 10 x 4 = 40 10 x 5 = 50 10 x 6 = 60 10 x 7 = 70 10 x 8 = 80 10 x 9 = 90 10 x 10 = 100 10 x 11 = 110 10 x 12 = 120 Soluci\u00f3n package cl.lherrera.java003; import java.util.Scanner; public class Principal { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(\"Ingrese un n\u00famero: \"); int num1 = in.nextInt(); for (int i = 0; i < 12; i++) { System.out.printf(\"%d x %d = %d%n\", num1, (i + 1), (num1 * (i + 1))); } } } Detalles de una cadena. Crear un programa en java, que permita ingresar una cadena de texto y pueda indicar lo siguiente de la mencionada cadena ingresada. Salida esperada: HINT boolean Character.isLetter(char caracter) boolean Character.isDigit(char caracter) boolean Character.isSpaceChar(char caracter) // cadena a arreglo de caracteres char[] ch = cadena.toCharArray(); Ingrese una cadena de texto hola mundo 123 La cadena es: hola mundo 123 Letras: 9 Espacios: 2 N\u00fameros: 3 Otros: 0 Soluci\u00f3n package cl.lherrera.java003; import java.util.Scanner; public class Principal { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.println(\"Ingrese una cadena de texto\"); String cadena = in.nextLine(); char[] ch = cadena.toCharArray(); int letras = 0; int espacios = 0; int numeros = 0; int otros = 0; for (int i = 0; i < cadena.length(); i++) { char pivote = ch[i]; if (Character.isLetter(pivote)) { letras++; } else if (Character.isDigit(pivote)) { numeros++; } else if (Character.isSpaceChar(pivote)) { espacios++; } else { otros++; } } System.out.println(\"La cadena es: \" + cadena); System.out.println(\"Letras: \" + letras); System.out.println(\"Espacios: \" + espacios); System.out.println(\"N\u00fameros: \" + numeros); System.out.println(\"Otros: \" + otros); } } Dibujar patr\u00f3n con for anidado. Implementar una aplicaci\u00f3n en Java , usando un for anidado, que imprima el siguiente patr\u00f3n. * ** *** **** ***** Soluci\u00f3n package cl.lherrera.java003; import java.util.Scanner; public class Principal { public static void main(String[] args) { System.out.println(\"Ingrese un valor entero positivo: \"); Scanner in = new Scanner(System.in); StringBuilder patron = new StringBuilder(); int n = in.nextInt(); // Por cada fila for (int i = 0; i < n; i++) { // escribimos asteriscos for (int j = 0; j <= i; j++) { patron.append(\"*\"); } patron.append(\"\\n\"); } System.out.println(patron.toString()); } } Listas y sub listas Html Crear un programa en Java , que sea capaz de escribir el siguiente patr\u00f3n. <ul> <ul> <li> 1.1 </li> <li> 1.2 </li> </ul> <ul> <li> 2.1 </li> <li> 2.2 </li> </ul> <ul> <li> 3.1 </li> <li> 3.2 </li> </ul> </ul> Soluci\u00f3n package cl.lherrera.java003; public class Principal { public static void main(String[] args) { StringBuilder listaHtml = new StringBuilder(); listaHtml.append(\"<ul>\").append(\"\\n\"); for (int i = 0; i < 3; i++) { listaHtml.append(\" <ul>\").append(\"\\n\"); for (int j = 0; j < 2; j++) { listaHtml.append(String.format(\" <li> %d.%d </li>\", i + 1, j + 1)) .append(\"\\n\"); } listaHtml.append(\" </ul>\").append(\"\\n\"); } listaHtml.append(\"</ul>\").append(\"\\n\"); System.out.println(listaHtml.toString()); } }","title":"Java003"},{"location":"ejercicios/repaso/java003/#ejercicios-de-java-de-repaso-002","text":"No se exponen ejemplos de sobre carga. (lectura en teor\u00eda con algunos ejemplos. While, do-while, operadores or and, toCharArray, for anidado. M\u00e9todos no incluidos en la lectura, ya que hay un apartado especial en teor\u00eda.","title":"Ejercicios de Java de repaso 002"},{"location":"ejercicios/repaso/java003/#imprimir-valores","text":"Implementar un inicio de sesi\u00f3n. El usuario ingresa un usuario y contrase\u00f1a. Si las credenciales no son correctas, se imprime el aviso y se solicita el ingreso de estas, nuevamente. Si las credenciales son correctas, se imprime mensaje informativo de ingreso al sistema. Soluci\u00f3n: Uso del while. package cl.lherrera.java003; import java.util.Scanner; public class Principal { public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.println(\"Ingrese el usuario\"); String usuario = sc.nextLine(); System.out.println(\"Ingrese la contrase\u00f1a\"); String contrasenia = sc.nextLine(); while (!usuario.equals(\"lherrera\") || !contrasenia.equals(\"1234\")) { System.out.println(\"Contrase\u00f1a incorrecta\"); System.out.println(\"\\n\\n Ingrese el usuario\"); usuario = sc.nextLine(); System.out.println(\"Ingrese la contrase\u00f1a\"); contrasenia = sc.nextLine(); } System.out.println(\"Contrase\u00f1a correcta, bienvenido al sistema !!\"); } } Utilizando un do while . package cl.lherrera.java003; import java.util.Scanner; public class Principal { public static void main(String[] args) { Scanner sc = new Scanner(System.in); boolean seguir = false; do { System.out.println(\"Ingrese el usuario\"); String usuario = sc.nextLine(); System.out.println(\"Ingrese la contrase\u00f1a\"); String contrasenia = sc.nextLine(); seguir = !usuario.equals(\"lherrera\") || !contrasenia.equals(\"1234\"); if (seguir) { System.out.println(\"Contrase\u00f1a incorrecta\\n\\n\"); } } while (seguir); System.out.println(\"Contrase\u00f1a correcta, bienvenido al sistema !!\"); } }","title":"Imprimir valores"},{"location":"ejercicios/repaso/java003/#ingresar-un-valor","text":"Implementar un programa en Java , que solicite el ingreso de un n\u00famero por consola, si este no est\u00e1 entre 1 y 10, lo debe solicitar nuevamente, indicando en n\u00famero ingresado en cada ocasi\u00f3n. Soluci\u00f3n: while . package cl.lherrera.java003; import java.util.Scanner; public class Principal { public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.println(\"Ingrese un valor entero\"); int valor = sc.nextInt(); while (valor < 0 || valor > 10) { System.out.println(\"El valor ingresado no est\u00e1 entre 1 y 10\"); System.out.println(\"Ingrese un valor entero\"); valor = sc.nextInt(); } System.out.printf(\"El valor %d ingresado, est\u00e1 entre 1 y 10\", valor); } } Soluci\u00f3n: do - while . package cl.lherrera.java003; import java.util.Scanner; public class Principal { public static void main(String[] args) { Scanner sc = new Scanner(System.in); boolean seguir = true; int valor = 0; do { System.out.println(\"Ingrese un valor entero entre 1 y 10\"); valor = sc.nextInt(); seguir = (valor <= 0 || valor > 10); if (seguir) System.out.println(\"El valor ingresado no est\u00e1 entre 1 y 10\"); } while (seguir); System.out.printf(\"El valor %d ingresado, est\u00e1 entre 1 y 10\", valor); } }","title":"Ingresar un valor"},{"location":"ejercicios/repaso/java003/#implementar-menu","text":"Implementar en Java el siguiente diagrama. Soluci\u00f3n: package cl.lherrera.java003; import java.util.Scanner; public class Principal { public static void main(String[] args) { Scanner sc = new Scanner(System.in); String opcion = \"\"; // .equals devuelve 0 si son iguales, 1 si es mayor y -1 si es menor while (!opcion.equals(\"salir\")) { System.out.printf(\"Escoge una opci\u00f3n\\n\"); System.out.printf(\"1 -- Acci\u00f3n 1\\n\"); System.out.printf(\"2 -- Acci\u00f3n 2\\n\"); System.out.printf(\"Escribe 'salir' para terminar el programa\\n\\n\"); System.out.printf(\"Ingrese una opci\u00f3n:\"); opcion = sc.nextLine(); if (opcion.equals(\"1\")) { System.out.printf(\"Realizando acci\u00f3n 1\\n\"); } else if (opcion.equals(\"2\")) { System.out.printf(\"Realizando acci\u00f3n 2\\n\"); } else if (opcion.equals(\"salir\")) { System.out.printf(\"Saliendo...\\n\"); } else { System.out.printf(\"Opci\u00f3n inv\u00e1lida\\n\"); } } } } Refactorizaci\u00f3n de la gu\u00eda: package cl.lherrera.java003; import java.util.Scanner; public class Principal { private static final Scanner sc = new Scanner(System.in); private static void imprimeMenu() { String textoMenu = new StringBuilder(\"Escoge una opci\u00f3n\") .append(\"\\n\") .append(\"1 -- Acci\u00f3n 1\") .append(\"\\n\") .append(\"2 -- Acci\u00f3n 2\") .append(\"\\n\") .append(\"Escribe 'salir' para terminar el programa\") .append(\"\\n\") .append(\"\\n\") .append(\"Ingrese una opci\u00f3n:\") .toString(); System.out.println(textoMenu); } private static String capturaOpcion() { imprimeMenu(); return sc.nextLine(); } public static void main(String[] args) { String opcion = \"\"; // .equals devuelve 0 si son iguales, 1 si es mayor y -1 si es menor while (!opcion.equals(\"salir\")) { opcion = capturaOpcion(); if (opcion.equals(\"1\")) { System.out.println(\"Realizando acci\u00f3n 1\"); } else if (opcion.equals(\"2\")) { System.out.println(\"Realizando acci\u00f3n 2\"); } else if (opcion.equals(\"salir\")) { System.out.println(\"Saliendo...\"); } else { System.out.println(\"Opci\u00f3n inv\u00e1lida\"); } } } }","title":"Implementar men\u00fa"},{"location":"ejercicios/repaso/java003/#iterar-10-veces","text":"Implementar el siguiente diagrama en Java . Soluci\u00f3n usando: while package cl.lherrera.java003; public class Principal { public static void main(String[] args) { int i = 0; while (i < 10) { System.out.println(i); i++; } } } Soluci\u00f3n usando: do-while package cl.lherrera.java003; public class Principal { public static void main(String[] args) { int i = 0; do { System.out.println(i); i++; } while (i < 10); } }","title":"Iterar 10 veces"},{"location":"ejercicios/repaso/java003/#la-bomba-de-tiempo","text":"Crearemos un algoritmo sencillo que realice una cuenta regresiva de 5 segundos. Contar de forma regresiva es muy similar, solo debemos comenzar desde el valor correspondiente e ir disminuyendo su valor de a uno en uno. Esta es una implementaci\u00f3n del uso de TimeUnit , que permite poner el hilo en espera el tiempo que indiquemos, esto en caso de problemas internos, puede arrojar un InterruptedException , por lo que hay que capturarlo. package cl.lherrera.java003; import java.util.concurrent.TimeUnit; public class Principal { public static void main(String[] args) { try { System.out.println(\"comenzamos...\"); TimeUnit.SECONDS.sleep(1); System.out.println(\"pas\u00f3 un segundo\"); TimeUnit.SECONDS.sleep(1); System.out.println(\"pas\u00f3 otro segundo..\"); } catch (InterruptedException e) { e.printStackTrace(); // solo para trazar el hilo Thread.currentThread().interrupt(); } } } Soluci\u00f3n: package cl.lherrera.java003; import java.util.concurrent.TimeUnit; public class Principal { public static void main(String[] args) { int i = 5; while (i > 0) { // cuando lleguemos a cero terminamos. System.out.printf(\"%d\\n\", i); i -= 1; // en cada iteraci\u00f3n descontamos 1 try { TimeUnit.SECONDS.sleep(1); } catch (InterruptedException e) { e.printStackTrace(); } } System.out.println(\"Booom!!\"); } }","title":"La bomba de tiempo"},{"location":"ejercicios/repaso/java003/#sumando-de-1-a-100","text":"Realizar la suma total de los n\u00fameros del 1 al 100. 1 + 2 + 3 + ... + 100 = ? package cl.lherrera.java003; public class Principal { public static void main(String[] args) { int i = 0; int suma = 0; while (i < 100) { i++; suma += i; } System.out.println(suma); } }","title":"Sumando de 1 a 100"},{"location":"ejercicios/repaso/java003/#html-list-maker","text":"Implementar un programa en Java , un programa que genere la siguiente salida. Tomar en cuenta que se debe usar un ciclo. No tiempo a\u00fan para estructuras de datos. <ul> <li>Elemento 1</li> <li>Elemento 2</li> <li>Elemento 3</li> <li>Elemento 4</li> <li>Elemento 5</li> <li>Elemento 6</li> <li>Elemento 7</li> <li>Elemento 8</li> <li>Elemento 9</li> <li>Elemento 10</li> </ul> Soluci\u00f3n package cl.lherrera.java003; public class Principal { public static void main(String[] args) { StringBuilder listaHtml = new StringBuilder(); listaHtml.append(\"<ul>\"); int i = 0; int suma = 0; while (i < 10) { i++; listaHtml.append(\"\\n\\t\") .append(\"<li>Elemento \") .append(i) .append(\"</li>\"); } listaHtml.append(\"\\n\") .append(\"</ul>\"); System.out.println(listaHtml.toString()); } }","title":"HTML List-Maker"},{"location":"ejercicios/repaso/java003/#tablas-de-multiplicar-uso-del-for","text":"Hay que tener en cuenta que para saber cuando un for es bueno frente a un while , es que cuando se requiera iterar un valor que se vaya incrementando, es mejor un for por que tenemos acceso al \u00edndice auto incremental, sin tener que ir aumentando manualmente como lo har\u00edamos en un while . EL while es m\u00e1s para poder mantener un estado hasta que una condici\u00f3n lo termine. Cuando no se tiene el l\u00edmite, es decir, si es que no se conoce la cantidad de ciclos, es mejor usar un while . Mantener un estado, se refiere a por ejemplo mantener un men\u00fa en pantalla hasta que algo pase. Crear un programa en java, que permita ingresar un n\u00famero entero y se imprima su tabla de multiplicar hasta el 12 Ejemplo de salida: Ingrese un n\u00famero: 10 10 x 1 = 10 10 x 2 = 20 10 x 3 = 30 10 x 4 = 40 10 x 5 = 50 10 x 6 = 60 10 x 7 = 70 10 x 8 = 80 10 x 9 = 90 10 x 10 = 100 10 x 11 = 110 10 x 12 = 120 Soluci\u00f3n package cl.lherrera.java003; import java.util.Scanner; public class Principal { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(\"Ingrese un n\u00famero: \"); int num1 = in.nextInt(); for (int i = 0; i < 12; i++) { System.out.printf(\"%d x %d = %d%n\", num1, (i + 1), (num1 * (i + 1))); } } }","title":"Tablas de multiplicar, uso del for"},{"location":"ejercicios/repaso/java003/#detalles-de-una-cadena","text":"Crear un programa en java, que permita ingresar una cadena de texto y pueda indicar lo siguiente de la mencionada cadena ingresada. Salida esperada: HINT boolean Character.isLetter(char caracter) boolean Character.isDigit(char caracter) boolean Character.isSpaceChar(char caracter) // cadena a arreglo de caracteres char[] ch = cadena.toCharArray(); Ingrese una cadena de texto hola mundo 123 La cadena es: hola mundo 123 Letras: 9 Espacios: 2 N\u00fameros: 3 Otros: 0 Soluci\u00f3n package cl.lherrera.java003; import java.util.Scanner; public class Principal { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.println(\"Ingrese una cadena de texto\"); String cadena = in.nextLine(); char[] ch = cadena.toCharArray(); int letras = 0; int espacios = 0; int numeros = 0; int otros = 0; for (int i = 0; i < cadena.length(); i++) { char pivote = ch[i]; if (Character.isLetter(pivote)) { letras++; } else if (Character.isDigit(pivote)) { numeros++; } else if (Character.isSpaceChar(pivote)) { espacios++; } else { otros++; } } System.out.println(\"La cadena es: \" + cadena); System.out.println(\"Letras: \" + letras); System.out.println(\"Espacios: \" + espacios); System.out.println(\"N\u00fameros: \" + numeros); System.out.println(\"Otros: \" + otros); } }","title":"Detalles de una cadena."},{"location":"ejercicios/repaso/java003/#dibujar-patron-con-for-anidado","text":"Implementar una aplicaci\u00f3n en Java , usando un for anidado, que imprima el siguiente patr\u00f3n. * ** *** **** ***** Soluci\u00f3n package cl.lherrera.java003; import java.util.Scanner; public class Principal { public static void main(String[] args) { System.out.println(\"Ingrese un valor entero positivo: \"); Scanner in = new Scanner(System.in); StringBuilder patron = new StringBuilder(); int n = in.nextInt(); // Por cada fila for (int i = 0; i < n; i++) { // escribimos asteriscos for (int j = 0; j <= i; j++) { patron.append(\"*\"); } patron.append(\"\\n\"); } System.out.println(patron.toString()); } }","title":"Dibujar patr\u00f3n con for anidado."},{"location":"ejercicios/repaso/java003/#listas-y-sub-listas-html","text":"Crear un programa en Java , que sea capaz de escribir el siguiente patr\u00f3n. <ul> <ul> <li> 1.1 </li> <li> 1.2 </li> </ul> <ul> <li> 2.1 </li> <li> 2.2 </li> </ul> <ul> <li> 3.1 </li> <li> 3.2 </li> </ul> </ul> Soluci\u00f3n package cl.lherrera.java003; public class Principal { public static void main(String[] args) { StringBuilder listaHtml = new StringBuilder(); listaHtml.append(\"<ul>\").append(\"\\n\"); for (int i = 0; i < 3; i++) { listaHtml.append(\" <ul>\").append(\"\\n\"); for (int j = 0; j < 2; j++) { listaHtml.append(String.format(\" <li> %d.%d </li>\", i + 1, j + 1)) .append(\"\\n\"); } listaHtml.append(\" </ul>\").append(\"\\n\"); } listaHtml.append(\"</ul>\").append(\"\\n\"); System.out.println(listaHtml.toString()); } }","title":"Listas y sub listas Html"},{"location":"ejercicios/repaso/java004/","text":"Ejercicios de Java de repaso 002 Declaraci\u00f3n de arreglos. Uso de ArrayList Usarlo como un arreglo. Escribir un archivo. pendiente Leer un archivo pendiente Declaraciones de arreglos Cree de todas las formas que conoce, un arreglo de String con tres marcas de autos: tesla , Alfa Romeo y ford para finalmente imprimir su contenido. Soluci\u00f3n package cl.lherrera.java003; public class Principal { public static void main(String[] args) { String marcas[] = forma001(); imprimir001(marcas); imprimir002(marcas); System.out.println(\"\\n Segunda forma \\n\"); marcas = forma002(); imprimir001(marcas); imprimir002(marcas); } private static String[] forma001() { String[] marcas = { \"Tesla\", \"Alfa Romeo\", \"Ford\" }; return marcas; } private static String[] forma002() { String[] marcas = new String[3]; marcas[0] = \"Tesla\"; marcas[1] = \"Alfa Romeo\"; marcas[2] = \"Ford\"; return marcas; } private static void imprimir001(String[] marcas) { System.out.println(\"Imprimiendo con la forma 001\"); for(String marca: marcas) System.out.println(marca); } private static void imprimir002(String[] marcas) { System.out.println(\"Imprimiendo con la forma 002\"); for(int i = 0; i < marcas.length; i++) System.out.println(marcas[i]); } } Declaraciones de ArrayList Crear una lista ArrayList con tres marcas de autos: tesla , Alfa Romeo y ford para finalmente imprimir su contenido. No usar a\u00fan stream , explicar el :: que es por que cuando el argumento se repite en el argumento de una una funci\u00f3n dada, se usa :: como az\u00facar sint\u00e1ctico. Soluci\u00f3n package cl.lherrera.java004; import java.util.ArrayList; import java.util.Iterator; public class Principal { public static void main(String[] args) { ArrayList<String> marcas = new ArrayList<>(); marcas.add(\"Tesla\"); marcas.add(\"Alfa Romeo\"); marcas.add(\"Ford\"); imprimir001(marcas); imprimir002(marcas); imprimir003(marcas); imprimir004(marcas); } private static void imprimir001(ArrayList<String> marcas) { System.out.println(\"Imprimiendo con la forma 001\"); for (String marca : marcas) System.out.println(marca); } private static void imprimir002(ArrayList<String> marcas) { System.out.println(\"Imprimiendo con la forma 002\"); for (int i = 0; i < marcas.size(); i++) System.out.println(marcas.get(i)); } private static void imprimir003(ArrayList<String> marcas) { System.out.println(\"Imprimiendo con la forma 003\"); Iterator<String> iterador = marcas.iterator(); while (iterador.hasNext()) System.out.println(iterador.next()); } private static void imprimir004(ArrayList<String> marcas) { marcas.forEach(System.out::println); } } Transformaciones de un arreglo a una lista-arreglo. Podemos usar el tipo List , que es realmente la interfaz que implementan las listas en Java , donde ArrayList es una de ellas. Probemos entonces, transformando este arreglo a una lista tipo list . Soluci\u00f3n package cl.lherrera.java004; import java.util.Arrays; import java.util.List; public class Principal { public static void main(String[] args) { String[] arreglo = { \"Tesla\", \"Alfa Romeo\", \"Ford\" }; List<String> marcas = Arrays.asList(arreglo); marcas.forEach(System.out::println); } } Si no usamos List , podemos crear una nueva instancia de ArrayList y le pasamos al constructor la lista que ser\u00e1 generada por el Arrays.aslist() . package cl.lherrera.java004; import java.util.ArrayList; import java.util.Arrays; public class Principal { public static void main(String[] args) { String[] arreglo = { \"Tesla\", \"Alfa Romeo\", \"Ford\" }; // ocupando el constructor(List ) de ArrayList ArrayList<String> marcas = new ArrayList<>(Arrays.asList(arreglo)); marcas.forEach(System.out::println); } }","title":"Java004"},{"location":"ejercicios/repaso/java004/#ejercicios-de-java-de-repaso-002","text":"Declaraci\u00f3n de arreglos. Uso de ArrayList Usarlo como un arreglo. Escribir un archivo. pendiente Leer un archivo pendiente","title":"Ejercicios de Java de repaso 002"},{"location":"ejercicios/repaso/java004/#declaraciones-de-arreglos","text":"Cree de todas las formas que conoce, un arreglo de String con tres marcas de autos: tesla , Alfa Romeo y ford para finalmente imprimir su contenido. Soluci\u00f3n package cl.lherrera.java003; public class Principal { public static void main(String[] args) { String marcas[] = forma001(); imprimir001(marcas); imprimir002(marcas); System.out.println(\"\\n Segunda forma \\n\"); marcas = forma002(); imprimir001(marcas); imprimir002(marcas); } private static String[] forma001() { String[] marcas = { \"Tesla\", \"Alfa Romeo\", \"Ford\" }; return marcas; } private static String[] forma002() { String[] marcas = new String[3]; marcas[0] = \"Tesla\"; marcas[1] = \"Alfa Romeo\"; marcas[2] = \"Ford\"; return marcas; } private static void imprimir001(String[] marcas) { System.out.println(\"Imprimiendo con la forma 001\"); for(String marca: marcas) System.out.println(marca); } private static void imprimir002(String[] marcas) { System.out.println(\"Imprimiendo con la forma 002\"); for(int i = 0; i < marcas.length; i++) System.out.println(marcas[i]); } }","title":"Declaraciones de arreglos"},{"location":"ejercicios/repaso/java004/#declaraciones-de-arraylist","text":"Crear una lista ArrayList con tres marcas de autos: tesla , Alfa Romeo y ford para finalmente imprimir su contenido. No usar a\u00fan stream , explicar el :: que es por que cuando el argumento se repite en el argumento de una una funci\u00f3n dada, se usa :: como az\u00facar sint\u00e1ctico. Soluci\u00f3n package cl.lherrera.java004; import java.util.ArrayList; import java.util.Iterator; public class Principal { public static void main(String[] args) { ArrayList<String> marcas = new ArrayList<>(); marcas.add(\"Tesla\"); marcas.add(\"Alfa Romeo\"); marcas.add(\"Ford\"); imprimir001(marcas); imprimir002(marcas); imprimir003(marcas); imprimir004(marcas); } private static void imprimir001(ArrayList<String> marcas) { System.out.println(\"Imprimiendo con la forma 001\"); for (String marca : marcas) System.out.println(marca); } private static void imprimir002(ArrayList<String> marcas) { System.out.println(\"Imprimiendo con la forma 002\"); for (int i = 0; i < marcas.size(); i++) System.out.println(marcas.get(i)); } private static void imprimir003(ArrayList<String> marcas) { System.out.println(\"Imprimiendo con la forma 003\"); Iterator<String> iterador = marcas.iterator(); while (iterador.hasNext()) System.out.println(iterador.next()); } private static void imprimir004(ArrayList<String> marcas) { marcas.forEach(System.out::println); } }","title":"Declaraciones de ArrayList"},{"location":"ejercicios/repaso/java004/#transformaciones-de-un-arreglo-a-una-lista-arreglo","text":"Podemos usar el tipo List , que es realmente la interfaz que implementan las listas en Java , donde ArrayList es una de ellas. Probemos entonces, transformando este arreglo a una lista tipo list . Soluci\u00f3n package cl.lherrera.java004; import java.util.Arrays; import java.util.List; public class Principal { public static void main(String[] args) { String[] arreglo = { \"Tesla\", \"Alfa Romeo\", \"Ford\" }; List<String> marcas = Arrays.asList(arreglo); marcas.forEach(System.out::println); } } Si no usamos List , podemos crear una nueva instancia de ArrayList y le pasamos al constructor la lista que ser\u00e1 generada por el Arrays.aslist() . package cl.lherrera.java004; import java.util.ArrayList; import java.util.Arrays; public class Principal { public static void main(String[] args) { String[] arreglo = { \"Tesla\", \"Alfa Romeo\", \"Ford\" }; // ocupando el constructor(List ) de ArrayList ArrayList<String> marcas = new ArrayList<>(Arrays.asList(arreglo)); marcas.forEach(System.out::println); } }","title":"Transformaciones de un arreglo a una lista-arreglo."},{"location":"ejercicios/repaso/clases/clase3/","text":"Clase de repaso 3 Ejemplo: Aumentar elementos: Uso de recorrido de arreglos. Ejemplo: Aumentar elementos Implementar un m\u00e9todo en Java , que reciba un arreglo de enteros y retorne un arreglo con los elementos aumentados al doble. Soluci\u00f3n package cl.lherrera.java004; import java.util.ArrayList; import java.util.Arrays; import java.util.List; public class Principal { public static void main(String[] args) { String[] numeros = {\"1\", \"2\", \"3\", \"4\"}; List<String> cadenas = Arrays.asList(numeros); System.out.println(\"Entrada: \" + cadenas); List<Integer> enteros = new ArrayList<>(); for(String cadena: cadenas) enteros.add(Integer.parseInt(cadena) * 2); System.out.println(\"Salida: \" + enteros); } } Output \u001d Entrada: [1, 2, 3, 4] Salida: [2, 4, 6, 8] Usando .map() . package cl.lherrera.java004; import java.util.Arrays; import java.util.List; import java.util.stream.Collectors; public class Principal { public static void main(String[] args) { String[] numeros = {\"1\", \"2\", \"3\", \"4\"}; List<String> cadenas = Arrays.asList(numeros); System.out.println(\"Entrada: \" + cadenas); List<Integer> enteros = cadenas.stream() .map(cadena -> (Integer.parseInt(cadena) * 2)) .collect(Collectors.toList()); System.out.println(\"Salida: \" + enteros); } }","title":"Clase3"},{"location":"ejercicios/repaso/clases/clase3/#clase-de-repaso-3","text":"Ejemplo: Aumentar elementos: Uso de recorrido de arreglos.","title":"Clase de repaso 3"},{"location":"ejercicios/repaso/clases/clase3/#ejemplo-aumentar-elementos","text":"Implementar un m\u00e9todo en Java , que reciba un arreglo de enteros y retorne un arreglo con los elementos aumentados al doble. Soluci\u00f3n package cl.lherrera.java004; import java.util.ArrayList; import java.util.Arrays; import java.util.List; public class Principal { public static void main(String[] args) { String[] numeros = {\"1\", \"2\", \"3\", \"4\"}; List<String> cadenas = Arrays.asList(numeros); System.out.println(\"Entrada: \" + cadenas); List<Integer> enteros = new ArrayList<>(); for(String cadena: cadenas) enteros.add(Integer.parseInt(cadena) * 2); System.out.println(\"Salida: \" + enteros); } } Output \u001d Entrada: [1, 2, 3, 4] Salida: [2, 4, 6, 8] Usando .map() . package cl.lherrera.java004; import java.util.Arrays; import java.util.List; import java.util.stream.Collectors; public class Principal { public static void main(String[] args) { String[] numeros = {\"1\", \"2\", \"3\", \"4\"}; List<String> cadenas = Arrays.asList(numeros); System.out.println(\"Entrada: \" + cadenas); List<Integer> enteros = cadenas.stream() .map(cadena -> (Integer.parseInt(cadena) * 2)) .collect(Collectors.toList()); System.out.println(\"Salida: \" + enteros); } }","title":"Ejemplo: Aumentar elementos"},{"location":"ejercicios/repaso/teoria/archivos/","text":"Archivos Escribir un archivo Escribir un archivo Para escribir un archivo utilizamos dos clases: java.io.FileWriter : Esta clase en su constructor, arroja una excepci\u00f3n, es por eso que cuando hacemos el new FileWriter(nombreDelArchivo) , pueden pasar muchas cosas para que este archivo pueda ser creado. Si esto ocurre, ser\u00e1 alertado con esta excepci\u00f3n, por lo que hay que controlarlo cuando la estemos utilizando las clases java.io.PrintWriter & java.io.FileWriter /** * Constructs a FileWriter object given a file name. * * @param fileName String The system-dependent filename. * @throws IOException if the named file exists but is a directory rather * than a regular file, does not exist but cannot be * created, or cannot be opened for any other reason */ public FileWriter(String fileName) throws IOException { super(new FileOutputStream(fileName)); } java.io.PrintWriter , que se encargar\u00e1 de ir agregando las lineas a nuestro archivo Debemos importar la clase IOException . para poder manejar la excepci\u00f3n lanzada por java.io.FileWriter . Ejemplo de escritura de un archivo en la ra\u00edz del proyecto: package cl.lherrera.java004; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; public class Principal { public static void main(String[] args) { FileWriter fw; try { fw = new FileWriter(\"salida.txt\"); PrintWriter pr = new PrintWriter(fw); pr.println(\"Hola mundo...\"); pr.close(); fw.close(); } catch (IOException e) { e.printStackTrace(); } } } Podemos ahorrar c\u00f3digo y problemas como que el FileWriter quede abierto y que se lance una excepci\u00f3n sin que esta sea cerrada. Para evitar este problema, es que se dise\u00f1a un try especial que contiene una especie de secci\u00f3n de atributos, donde se definir\u00e1n los objetos que, una vez terminado el try , cerrar\u00e1 las clases. Veamos el mismo ejemplo usando este try especial. Adem\u00e1s de todas las ventajas funcionales, este try , proporciona una mejor lectura del c\u00f3digo. // https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html package cl.lherrera.java004; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; public class Principal { public static void main(String[] args) { try ( FileWriter fw = new FileWriter(\"salida.txt\"); PrintWriter pr = new PrintWriter(fw);) { // cuerpo del try... pr.println(\"Hola mundo...\"); } catch (IOException e) { System.out.println(e.getMessage()); } } } Ejercicio: Autos en archivo. Crear una descripci\u00f3n de tres autos (lista, arreglo, lo que estimen conveniente). N\u00famero de puertas. Color. A\u00f1o. Marca. Escribir en un archivo llamado autos.csv , donde ir\u00e1n estas tres l\u00edneas con la informaci\u00f3n de los autos. Hay que tener en cuenta, que este archivo no se reutiliza muy com\u00fanmente, es para un env\u00edo no para almacenaje, para estas tareas usamos la base de datos. package cl.lherrera.java004; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.util.ArrayList; import java.util.List; public class Principal { public static void main(String[] args) { List<String[]> autos = new ArrayList<>(); String[] auto1 = {\"5\", \"rojo\", \"2019\", \"Tesla\"}; String[] auto2 = {\"3\", \"rojo\", \"2000\", \"Nissan\"}; String[] auto3 = {\"5\", \"azul\", \"2010\", \"Mazda\"}; autos.add(auto1); autos.add(auto2); autos.add(auto3); try ( FileWriter fw = new FileWriter(\"autos.csv\"); PrintWriter pr = new PrintWriter(fw);) { // cuerpo del try... // son datos, tratemoslos con modernidad... autos.forEach(auto -> pr.printf(\"%s,%s,%s%n\", auto[0], auto[1], auto[2]) ); System.out.println(\"Archivo generado exitosamente !!!\"); } catch (IOException e) { System.out.println(e.getMessage()); } } } Salida del archivo. 5,rojo,2019 3,rojo,2000 5,azul,2010 Leer un archivo Leamos el archivo autos.csv , generado en el ejercicio anterior. El proceso es similar a la escritura; pero, ac\u00e1 interact\u00faan dos clases; FileReader el de la excepci\u00f3n si es que no puede leer el archivo y la clase: Contenido del archivo. 5,rojo,2019 3,rojo,2000 5,azul,2010 Soluci\u00f3n package cl.lherrera.java004; import java.io.BufferedReader; import java.io.FileReader; import java.io.IOException; public class Principal { public static void main(String[] args) { try ( FileReader fr = new FileReader(\"autos.csv\"); BufferedReader br = new BufferedReader(fr);) { String lineaLeida = br.readLine(); System.out.println(\"inicio de la lectura...\"); while (lineaLeida != null) { System.out.println(lineaLeida); lineaLeida = br.readLine(); } System.out.println(\"fin de la lectura...\"); } catch (IOException e) { System.out.println(e.getMessage()); } } } Salida inicio de la lectura... 5,rojo,2019 3,rojo,2000 5,azul,2010 fin de la lectura... Ejercicio: De archivo a una lista. Implementaremos en Java , un programa que lea el archivo generado, con la capacidad de recibir m\u00e1s lineas de informaci\u00f3n. Es decir que posea la estructura del mismo archivo pero la informaci\u00f3n puede ser variada, en cuanto a cantidad de lineas. Hasta ahora, se mantiene igual que el programa anterior; pero este posee adem\u00e1s las siguientes caracter\u00edsticas. Guardar cada elemento en una lista, para poder manipular la informaci\u00f3n. Imprimir los detalles de cada autom\u00f3vil. (formato libre). Determinar el promedio de los a\u00f1os. Determinar el n\u00famero de puestas m\u00e1s frecuente. Entregar el n\u00famero de la muestra, es decir, la cantidad de elementos o filas que contiene cada linea de informaci\u00f3n. Los puntos anteriores son solamente. aplicaciones que se realizan sobre una lista, es por eso que es imperativo que se almacene. Soluci\u00f3n. package cl.lherrera.java004; import java.io.BufferedReader; import java.io.FileReader; import java.io.IOException; import java.util.ArrayList; import java.util.Collections; import java.util.List; public class Principal { public static void main(String[] args) { try ( FileReader fr = new FileReader(\"autos.csv\"); BufferedReader br = new BufferedReader(fr);) { String lineaLeida = br.readLine(); System.out.println(\"inicio de la lectura...\"); List<String[]> autos = new ArrayList<>(); // guardando los datos en una lista. while (lineaLeida != null) { autos.add(lineaLeida.split(\",\")); lineaLeida = br.readLine(); } // Imprimiendo los detalles del veh\u00edculo. System.out.println(\"Detalles de los autom\u00f3viles\"); autos.forEach(auto -> { System.out.printf(\"N\u00ba Puertas: %s, Color: %s, A\u00f1o: %s%n\", auto[0], auto[1], auto[2]); }); // Preparando para siguientes preguntas List<String> puertas = new ArrayList<>(); List<String> anios = new ArrayList<>(); // llenamos los arreglos que se le aplicar\u00e1 // las funciones de promedio y m\u00e1s frecuente. autos.forEach((auto) -> { puertas.add(auto[0]); anios.add(auto[2]); }); // imprimiendo el promedio de los a\u00f1os double promedio = anios .stream() .mapToDouble(Double::parseDouble) // es un string, hay que parserarlo .average().orElse(0.0); System.out.println(\"El promedio de los a\u00f1os es: \" + promedio); // determinando el n\u00famero de puertas m\u00e1s frecuente int frecuente = 0; for (String numPuertas : puertas) { Integer num = Collections.frequency(puertas, numPuertas); if (num > frecuente) frecuente = Integer.parseInt(numPuertas); } System.out.println(\"El n\u00famero de puertas m\u00e1s frecuente es: \" + frecuente); // determinando el n\u00famero de la muestra System.out.println(\"El tama\u00f1o de la muestra es: \" + autos.size() + \" autos\"); System.out.println(\"fin de la lectura...\"); } catch (IOException e) { System.out.println(e.getMessage()); } } } Se deja como tarea la refactorizaci\u00f3n de este ejercicio.","title":"Archivos"},{"location":"ejercicios/repaso/teoria/archivos/#archivos","text":"Escribir un archivo","title":"Archivos"},{"location":"ejercicios/repaso/teoria/archivos/#escribir-un-archivo","text":"Para escribir un archivo utilizamos dos clases: java.io.FileWriter : Esta clase en su constructor, arroja una excepci\u00f3n, es por eso que cuando hacemos el new FileWriter(nombreDelArchivo) , pueden pasar muchas cosas para que este archivo pueda ser creado. Si esto ocurre, ser\u00e1 alertado con esta excepci\u00f3n, por lo que hay que controlarlo cuando la estemos utilizando las clases java.io.PrintWriter & java.io.FileWriter /** * Constructs a FileWriter object given a file name. * * @param fileName String The system-dependent filename. * @throws IOException if the named file exists but is a directory rather * than a regular file, does not exist but cannot be * created, or cannot be opened for any other reason */ public FileWriter(String fileName) throws IOException { super(new FileOutputStream(fileName)); } java.io.PrintWriter , que se encargar\u00e1 de ir agregando las lineas a nuestro archivo Debemos importar la clase IOException . para poder manejar la excepci\u00f3n lanzada por java.io.FileWriter .","title":"Escribir un archivo"},{"location":"ejercicios/repaso/teoria/archivos/#ejemplo-de-escritura-de-un-archivo-en-la-raiz-del-proyecto","text":"package cl.lherrera.java004; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; public class Principal { public static void main(String[] args) { FileWriter fw; try { fw = new FileWriter(\"salida.txt\"); PrintWriter pr = new PrintWriter(fw); pr.println(\"Hola mundo...\"); pr.close(); fw.close(); } catch (IOException e) { e.printStackTrace(); } } } Podemos ahorrar c\u00f3digo y problemas como que el FileWriter quede abierto y que se lance una excepci\u00f3n sin que esta sea cerrada. Para evitar este problema, es que se dise\u00f1a un try especial que contiene una especie de secci\u00f3n de atributos, donde se definir\u00e1n los objetos que, una vez terminado el try , cerrar\u00e1 las clases. Veamos el mismo ejemplo usando este try especial. Adem\u00e1s de todas las ventajas funcionales, este try , proporciona una mejor lectura del c\u00f3digo. // https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html package cl.lherrera.java004; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; public class Principal { public static void main(String[] args) { try ( FileWriter fw = new FileWriter(\"salida.txt\"); PrintWriter pr = new PrintWriter(fw);) { // cuerpo del try... pr.println(\"Hola mundo...\"); } catch (IOException e) { System.out.println(e.getMessage()); } } }","title":"Ejemplo de escritura de un archivo en la ra\u00edz del proyecto:"},{"location":"ejercicios/repaso/teoria/archivos/#ejercicio-autos-en-archivo","text":"Crear una descripci\u00f3n de tres autos (lista, arreglo, lo que estimen conveniente). N\u00famero de puertas. Color. A\u00f1o. Marca. Escribir en un archivo llamado autos.csv , donde ir\u00e1n estas tres l\u00edneas con la informaci\u00f3n de los autos. Hay que tener en cuenta, que este archivo no se reutiliza muy com\u00fanmente, es para un env\u00edo no para almacenaje, para estas tareas usamos la base de datos. package cl.lherrera.java004; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.util.ArrayList; import java.util.List; public class Principal { public static void main(String[] args) { List<String[]> autos = new ArrayList<>(); String[] auto1 = {\"5\", \"rojo\", \"2019\", \"Tesla\"}; String[] auto2 = {\"3\", \"rojo\", \"2000\", \"Nissan\"}; String[] auto3 = {\"5\", \"azul\", \"2010\", \"Mazda\"}; autos.add(auto1); autos.add(auto2); autos.add(auto3); try ( FileWriter fw = new FileWriter(\"autos.csv\"); PrintWriter pr = new PrintWriter(fw);) { // cuerpo del try... // son datos, tratemoslos con modernidad... autos.forEach(auto -> pr.printf(\"%s,%s,%s%n\", auto[0], auto[1], auto[2]) ); System.out.println(\"Archivo generado exitosamente !!!\"); } catch (IOException e) { System.out.println(e.getMessage()); } } } Salida del archivo. 5,rojo,2019 3,rojo,2000 5,azul,2010","title":"Ejercicio: Autos en archivo."},{"location":"ejercicios/repaso/teoria/archivos/#leer-un-archivo","text":"Leamos el archivo autos.csv , generado en el ejercicio anterior. El proceso es similar a la escritura; pero, ac\u00e1 interact\u00faan dos clases; FileReader el de la excepci\u00f3n si es que no puede leer el archivo y la clase: Contenido del archivo. 5,rojo,2019 3,rojo,2000 5,azul,2010 Soluci\u00f3n package cl.lherrera.java004; import java.io.BufferedReader; import java.io.FileReader; import java.io.IOException; public class Principal { public static void main(String[] args) { try ( FileReader fr = new FileReader(\"autos.csv\"); BufferedReader br = new BufferedReader(fr);) { String lineaLeida = br.readLine(); System.out.println(\"inicio de la lectura...\"); while (lineaLeida != null) { System.out.println(lineaLeida); lineaLeida = br.readLine(); } System.out.println(\"fin de la lectura...\"); } catch (IOException e) { System.out.println(e.getMessage()); } } } Salida inicio de la lectura... 5,rojo,2019 3,rojo,2000 5,azul,2010 fin de la lectura...","title":"Leer un archivo"},{"location":"ejercicios/repaso/teoria/archivos/#ejercicio-de-archivo-a-una-lista","text":"Implementaremos en Java , un programa que lea el archivo generado, con la capacidad de recibir m\u00e1s lineas de informaci\u00f3n. Es decir que posea la estructura del mismo archivo pero la informaci\u00f3n puede ser variada, en cuanto a cantidad de lineas. Hasta ahora, se mantiene igual que el programa anterior; pero este posee adem\u00e1s las siguientes caracter\u00edsticas. Guardar cada elemento en una lista, para poder manipular la informaci\u00f3n. Imprimir los detalles de cada autom\u00f3vil. (formato libre). Determinar el promedio de los a\u00f1os. Determinar el n\u00famero de puestas m\u00e1s frecuente. Entregar el n\u00famero de la muestra, es decir, la cantidad de elementos o filas que contiene cada linea de informaci\u00f3n. Los puntos anteriores son solamente. aplicaciones que se realizan sobre una lista, es por eso que es imperativo que se almacene. Soluci\u00f3n. package cl.lherrera.java004; import java.io.BufferedReader; import java.io.FileReader; import java.io.IOException; import java.util.ArrayList; import java.util.Collections; import java.util.List; public class Principal { public static void main(String[] args) { try ( FileReader fr = new FileReader(\"autos.csv\"); BufferedReader br = new BufferedReader(fr);) { String lineaLeida = br.readLine(); System.out.println(\"inicio de la lectura...\"); List<String[]> autos = new ArrayList<>(); // guardando los datos en una lista. while (lineaLeida != null) { autos.add(lineaLeida.split(\",\")); lineaLeida = br.readLine(); } // Imprimiendo los detalles del veh\u00edculo. System.out.println(\"Detalles de los autom\u00f3viles\"); autos.forEach(auto -> { System.out.printf(\"N\u00ba Puertas: %s, Color: %s, A\u00f1o: %s%n\", auto[0], auto[1], auto[2]); }); // Preparando para siguientes preguntas List<String> puertas = new ArrayList<>(); List<String> anios = new ArrayList<>(); // llenamos los arreglos que se le aplicar\u00e1 // las funciones de promedio y m\u00e1s frecuente. autos.forEach((auto) -> { puertas.add(auto[0]); anios.add(auto[2]); }); // imprimiendo el promedio de los a\u00f1os double promedio = anios .stream() .mapToDouble(Double::parseDouble) // es un string, hay que parserarlo .average().orElse(0.0); System.out.println(\"El promedio de los a\u00f1os es: \" + promedio); // determinando el n\u00famero de puertas m\u00e1s frecuente int frecuente = 0; for (String numPuertas : puertas) { Integer num = Collections.frequency(puertas, numPuertas); if (num > frecuente) frecuente = Integer.parseInt(numPuertas); } System.out.println(\"El n\u00famero de puertas m\u00e1s frecuente es: \" + frecuente); // determinando el n\u00famero de la muestra System.out.println(\"El tama\u00f1o de la muestra es: \" + autos.size() + \" autos\"); System.out.println(\"fin de la lectura...\"); } catch (IOException e) { System.out.println(e.getMessage()); } } } Se deja como tarea la refactorizaci\u00f3n de este ejercicio.","title":"Ejercicio: De archivo a una lista."},{"location":"ejercicios/repaso/teoria/arraylist/","text":"ArrayList<Object> Un arrayList es una clase incluida en el paquete java.util , es una estructura de almacenamiento din\u00e1mico , a diferencia de un arreglo nativo, esta estructura puede variar el tama\u00f1o de su largo . Se muestra ArrayList , independientemente de Collections , para poder identificar las funciones m\u00e1s comunes que se utilizan para poder trabajar con arreglos de datos, ya que este tipo de listas, son din\u00e1micas, nos permiten recibir n cantidad de datos. Lo que no pasa cuando usamos arreglos nativos, ya que el largo, se decide al momento de iniciar el arreglo. Un ArrayList en java, no almacena valores contiguos en la memoria principal como lo hace un array[] , en vez de eso, guarda las referencias de los objetos que la componen . Si anteriormente vimos que los arreglos nativos, est\u00e1n compuestos por elementos que pod\u00edan ser, primitivos o no primitivos, para el caso de los ArrayList , estos solo se componen de Objetos. Cuando un objeto es creado, se le asigna una cantidad de memoria, pero esta memoria no se carga al ArrayList , esto se debe a que el ArrayList , solo guarda la referencia a ese objeto. Como no se trabaja con objetos reales, ArrayLists contiene matrices de referencias a objetos almacenados en otro lugar (un lugar en la memoria llamado heap , redunda lo anterior, mencionar en caso de ser absolutamente necesario. El Heap (Mont\u00edculo) almacena objetos y sus variables de instancia. Es un espacio de memoria din\u00e1mica que se crea al inicio de la m\u00e1quina virtual y es \u00fanico.(no tiene que ver con ArrayList , si no que con uno de los lugares de almacenamiento que posee Java ). Cuando usemos lo m\u00e9todos est\u00e1ticos, de la clase Collections , la colecci\u00f3n entregada como argumento, cambiar\u00e1. Si necesitamos preservar la colecci\u00f3n original, debemos crear una copia de ella, as\u00ed la respaldamos. (Siempre un new es algo nuevo, que bueno es ser un lenguaje que lo entienda) // as\u00ed lo respaldamos ArrayList<Integer> numerosCopia = new ArrayList<Integer>(numeros); // tambi\u00e9n puede ser de esta forma (polimorfismo) List<Integer> numerosCopia = new ArrayList<Integer>(numeros); Primitivos como objetos Wrappers . Apoyo solamente en el caso que no est\u00e9n claros los objetos del tipo envolvedor. //byte numero_1 = -128; Byte numero_1 = -128; //short numero_2 = -32768; Short numero_2 = -32768; //int numero_3 = 2147483647; Integer numero_3 = 2147483647; //long numero_4 = -9223372036854775808L; Long numero_4 = -9223372036854775808L; //float numero_5 = 3.4028235E38f; Float numero_5 = 3.4028235E38f; //double numero_6 = 1.7976931348623157E+308d; Double numero_6 = 1.7976931348623157E+308d; //char caracter = '\u0110'; Character caracter = '\u0110'; //boolean proposicion = true; Boolean proposicion = true; Principales m\u00e9todos usados en un ArrayList . lista.add(Object obj) A\u00f1ade un elemento. ArrayList<String> array_list = new ArrayList<>(); array_list.add(\"Elemento agreado\"); System.out.println(array_list); // >sout: [Elemento agreado] ADD(N, \"ELEMENTO 2\") lista.add(index, Object obj) A\u00f1ade el elemento al ArrayList en la posici\u00f3n 'index' ArrayList<String> array_list = new ArrayList<>(); array_list.add(\"Elemento agreado_1\"); array_list.add(\"Elemento agreado_2\"); array_list.add(0, \"Elemento agreado_3\"); System.out.println(array_list); // >sout: [Elemento agreado_3, Elemento agreado_1, Elemento agreado_2] lista.size() Devuelve el numero de elementos del ArrayList ArrayList<String> array_list = new ArrayList<>(); array_list.add(\"Elemento agreado_1\"); array_list.add(\"Elemento agreado_2\"); array_list.add(0, \"Elemento agreado_3\"); System.out.println(array_list.size()); // >sout: 3 lista.get(n) Devuelve el elemento que esta en la posici\u00f3n 'n' de la lista. Es el s\u00edmil de arreglo[n] . ArrayList<String> array_list = new ArrayList<>(); array_list.add(\"Elemento agreado_1\"); array_list.add(\"Elemento agreado_2\"); array_list.add(0, \"Elemento agreado_3\"); System.out.println(array_list.get(2)); // >sout: Elemento agreado_2 lista.contains(Object obj) Comprueba la existencia del elemento indicado en el ArrayList<String> array_list = new ArrayList<>(); array_list.add(\"Elemento agreado_1\"); array_list.add(\"Elemento agreado_2\"); array_list.add(0, \"Elemento agreado_3\"); System.out.println(array_list.contains(\"Elemento agreado_1\")); //>sout: true lista.indexOf(Object obj) Devuelve la posici\u00f3n de la primera ocurrencia ('Elemento') en el ArrayList. ArrayList<String> array_list = new ArrayList<>(); array_list.add(\"Elemento agreado_1\"); array_list.add(\"Elemento agreado_2\"); array_list.add(0, \"Elemento agreado_3\"); System.out.println(array_list.indexOf(\"Elemento agreado_3\")); //>sout: 0 lista.remove(int n) Borra el elemento de la posici\u00f3n n del ArrayList . ArrayList<String> array_list = new ArrayList<>(); array_list.add(\"Elemento agreado_1\"); array_list.add(\"Elemento agreado_1\"); array_list.add(\"Elemento agreado_2\"); array_list.add(0, \"Elemento agreado_3\"); array_list.remove(2); System.out.println(array_list); // >sout: [Elemento agreado_3, Elemento agreado_1, Elemento agreado_2] lista.remove(Object obj) Borra la primera ocurrencia del 'Elemento' que se le pasa como argumento. ArrayList<String> array_list = new ArrayList<>(); array_list.add(\"Elemento agreado_1\"); array_list.add(\"Elemento agreado_1\"); array_list.add(\"Elemento agreado_2\"); array_list.add(0, \"Elemento agreado_3\"); array_list.remove(\"Elemento agreado_1\"); System.out.println(array_list); // >sout: [Elemento agreado_3, Elemento agreado_1, Elemento agreado_2] lista.clear() Borra todos los elementos de ArrayList. ArrayList<String> array_list = new ArrayList<>(); array_list.add(\"Elemento agreado_1\"); array_list.add(\"Elemento agreado_1\"); array_list.add(\"Elemento agreado_2\"); array_list.add(0, \"Elemento agreado_3\"); array_list.clear(); System.out.println(array_list); // >sout: [] lista.isEmpty() Devuelve True si el ArrayList esta vac\u00edo. Sino Devuelve false . ArrayList<String> array_list = new ArrayList<>(); array_list.add(\"Elemento agreado_1\"); array_list.add(\"Elemento agreado_1\"); array_list.add(\"Elemento agreado_2\"); array_list.add(0, \"Elemento agreado_3\"); array_list.clear(); System.out.println(array_list); // >sout: [] lista.isEmpty() Transforma una lista a un arreglo primitivo. ArrayList<String> array_list = new ArrayList<>(); array_list.add(\"Elemento agreado_1\"); array_list.add(\"Elemento agreado_1\"); array_list.add(\"Elemento agreado_2\"); array_list.add(0, \"Elemento agreado_3\"); Object[] elementos = array_list.toArray(); System.out.println(elementos.length); // >sout: 4 Iterador Sirve para poder recorrer de mejor forma un ArrayList Los Iteradores tienen tres m\u00e9todos que son el hasNext() para comprobar que siguen quedando elementos en el iterador, el next() para que nos de el siguiente elemento del iterador; y el remove() que sirve para eliminar el elemento del Iterador. ArrayList<String> array_list = new ArrayList<>(); array_list.add(\"Elemento agreado_1\"); array_list.add(\"Elemento agreado_1\"); array_list.add(\"Elemento agreado_2\"); array_list.add(0, \"Elemento agreado_3\"); // Declaramos el Iterador e imprimimos los Elementos del ArrayList Iterator<string> nombreIterator = array_list.iterator(); while(nombreIterator.hasNext()){ String elemento = nombreIterator.next(); System.out.print(elemento + \" / \"); } // >sout: Elemento agreado_3 / Elemento agreado_1 / Elemento agreado_1 / Elemento agreado_2 / Clase Collections y sus m\u00e9todos est\u00e1ticos. Hay que tener cuidado al realizar estas operaciones, ya que se modifica el arreglo, no crea una copia para retornar. Esta clase posee m\u00e9todos especiales, que trabajan sobre listas. Aunque parezca que es Collections quien posee la implementaci\u00f3n de Sort es el mismo ArrayList , lo que hace Collection es ejecutar list.sort() , donde list es el argumento entregado a `Collections.sort(AC\u00c1). Entonces se concluye lo siguiente: ArrayList debe implementar el m\u00e9todo sort() , es decir que ArrayList , implementa los m\u00e9todos que componen la interfaz de List , lo que sabemos que es verdad, es decir que ArrayList , es un tipo List .\u0010 Se ejemplifica esto con el el m\u00e9todo Sort() . Pero aplica a otros, se muestra como una an\u00e9cdota de las implementaciones m\u00e1s utilizadas en el mundo, utilizando la t\u00e9cnica del polimorfismo. Como lo ser\u00eda la api collections package cl.lherrera.java004; import java.util.ArrayList; import java.util.Collections; public class Principal { public static void main(String[] args) { ArrayList<String> nombres = new ArrayList<>(); nombres.add(\"Hugo\"); nombres.add(\"Paco\"); nombres.add(\"Luis\"); //nombres.sort(null); // esto es lo que se ejecuta realmente // en este caso podemos hacerlo directo, pero es m\u00e1s seguro // hacerlo por Collections, ya que este m\u00e9todo es el dise\u00f1ado para // ejecutar lo que se deba para realizar la operaci\u00f3n que se ordene. Collections.sort(nombres); System.out.print(nombres); } } Collections.sort(colecci\u00f3n); El m\u00e9todo sort() , nos permite ordenar la lista de manera ascendente. En el caso de los Strings, los ordena comparando car\u00e1cter a car\u00e1cter. ArrayList<String> paises = new ArrayList<String>(); paises.add(\"Chile\"); paises.add(\"Argentina\"); paises.add(\"Colombia\"); paises.add(\"Per\u00fa\"); paises.add(\"Venezuela\"); Collections.sort(paises); System.out.println(paises); //[Argentina, Chile, Colombia, Per\u00fa, Venezuela] Si no queremos que ordenen en diferentes grupos las may\u00fasculas y las min\u00fasculas, debemos agregar un par\u00e1metro extra. Collections.sort(paises,String.CASE_INSENSITIVE_ORDER); Collections.reverse(colecci\u00f3n); Invierte el orden de los elementos de una colecci\u00f3n. ArrayList<String> paises = new ArrayList<String>(); paises.add(\"Chile\"); paises.add(\"Argentina\"); paises.add(\"Colombia\"); paises.add(\"Per\u00fa\"); paises.add(\"Venezuela\"); Collections.reverse(paises); System.out.println(paises); // [Venezuela, Per\u00fa, Colombia, chile, Chile, Argentina] Collections.min(numeros) , Collections.max(numeros) Determina el m\u00ednimo y m\u00e1ximo de una colecci\u00f3n. ArrayList<Integer> numeros = new ArrayList<Integer>(); numeros.add(5); numeros.add(1); numeros.add(4); numeros.add(1); numeros.add(2); numeros.add(6); System.out.println(Collections.min(numeros)); //1 System.out.println(Collections.max(numeros)); //6 Collections.frequency(coleci\u00f3n, elemento) Si queremos saber cu\u00e1ntas veces existe la ocurrencia de un elemento en el ArrayList, podemos usar el m\u00e9todo frequency() . ArrayList<Integer> numeros = new ArrayList<Integer>(); numeros.add(5); numeros.add(1); numeros.add(4); numeros.add(1); numeros.add(2); numeros.add(6); System.out.println(Collections.frequency(numeros, 1)); //2 // el elemento 1 se repite dos veces. Collections.shuffle(numeros); Intercambia \"aleatoreamente\" las posiciones de los elementos de una colecci\u00f3n. ArrayList<Integer> numeros = new ArrayList<Integer>(); numeros.add(5); numeros.add(1); numeros.add(4); numeros.add(1); numeros.add(2); numeros.add(6); Collections.shuffle(numeros); // [6, 5, 1, 4, 1, 2] // este resultado puede cambiar por que es aleatoreo. Arrays.asList() Retorna, una lista, de tama\u00f1o fijo, apoyada en un arreglo nativo dado.(Cambiando a una List retornada\u001c). Es decir, que la clase Arrays , posee un m\u00e9todo: public static <T> List<T> asList(T... a) { return new ArrayList<>(a); } Retorna un new ArrayList<>(a); pero uno interno, no nuestro ArrayList , Es por asuntos de optimizaci\u00f3n. Finalmente retorna la interfaz, que es una lista que ser\u00e1 tratada como un ArrayList de los nuestros. Es por este motivo que no se puede hacer: ArrayList<> lista = new ArrayList(Arrays.asList(...)) // y no ArrayList<> lista = (ArrayList) Arrays.asList(...) // en realidad no es un ArratList de .util es de Collections... Ejemplo package cl.lherrera.java004; import java.util.ArrayList; import java.util.Arrays; public class Principal { public static void main(String[] args) { // no usar el primitivo, para trabajar con listas de Collections // al momento de hacerlo entonces el asLis falla. // int[] numeros = {1, 2, 3, 4}; Integer[] numeros = {1, 2, 3, 4}; ArrayList<Integer> ejemplo = new ArrayList<>(Arrays.asList(numeros)); System.out.println(ejemplo); } } Y bueno, la idea que retorne una lista es que la usemos, lo que hace que que sea una implementaci\u00f3n m\u00e1s abstracta; pero m\u00e1s limpia y clara. package cl.lherrera.java004; import java.util.Arrays; import java.util.List; public class Principal { public static void main(String[] args) { Integer[] numeros = {1, 2, 3, 4}; List<Integer> ejemplo = Arrays.asList(numeros); System.out.println(ejemplo); } } Ejemplo: Transformar los datos de un arreglo. Simulando un ingreso de un usuario en una cadena, debemos pasar todos sus elementos a enteros para poder trabajarlo de mejor forma. package cl.lherrera.java004; import java.util.ArrayList; import java.util.Arrays; import java.util.List; public class Principal { public static void main(String[] args) { String[] numeros = {\"1\", \"2\", \"3\", \"4\"}; List<String> cadenas = Arrays.asList(numeros); List<Integer> enteros = new ArrayList<>(); for(String cadena: cadenas) { enteros.add(Integer.parseInt(cadena)); } System.out.println(enteros); } } Un poco m\u00e1s funcional package cl.lherrera.java004; import java.util.Arrays; import java.util.List; import java.util.stream.Collectors; public class Principal { public static void main(String[] args) { String[] numeros = {\"1\", \"2\", \"3\", \"4\"}; List<String> cadenas = Arrays.asList(numeros); List<Integer> enteros = cadenas.stream() .map(Integer::parseInt) .collect(Collectors.toList()); System.out.println(enteros); } } Ejemplo: Aumentar elementos Implementar un m\u00e9todo en Java , que reciba un arreglo de enteros y retorne un arreglo con los elementos aumentados al doble. Soluci\u00f3n package cl.lherrera.java004; import java.util.ArrayList; import java.util.Arrays; import java.util.List; public class Principal { public static void main(String[] args) { String[] numeros = {\"1\", \"2\", \"3\", \"4\"}; List<String> cadenas = Arrays.asList(numeros); System.out.println(\"Entrada: \" + cadenas); List<Integer> enteros = new ArrayList<>(); for(String cadena: cadenas) enteros.add(Integer.parseInt(cadena) * 2); System.out.println(\"Salida: \" + enteros); } } Output \u001d Entrada: [1, 2, 3, 4] Salida: [2, 4, 6, 8] Usando .map() . package cl.lherrera.java004; import java.util.Arrays; import java.util.List; import java.util.stream.Collectors; public class Principal { public static void main(String[] args) { String[] numeros = {\"1\", \"2\", \"3\", \"4\"}; List<String> cadenas = Arrays.asList(numeros); System.out.println(\"Entrada: \" + cadenas); List<Integer> enteros = cadenas.stream() .map(cadena -> (Integer.parseInt(cadena) * 2)) .collect(Collectors.toList()); System.out.println(\"Salida: \" + enteros); } } Ejemplo: De todo un poco en una lista. ( map, filter ) Transformar al doble, filtrar e imprimir cada elemento de un arreglo dado. Soluci\u00f3n package cl.lherrera.java004; import java.util.ArrayList; import java.util.Arrays; import java.util.List; public class Principal { public static void main(String[] args) { String[] numeros = { \"1\", \"2\", \"3\", \"4\" }; List<String> cadenas = Arrays.asList(numeros); System.out.println(\"Entrada: \" + cadenas); // Pasando las cadenas a enteros List<Integer> enteros = new ArrayList<>(); for (String cadena : cadenas) enteros.add(Integer.parseInt(cadena)); // Aumentando cada elemento al doble List<Integer> enterosDobles = new ArrayList<>(); for (Integer entero : enteros) enterosDobles.add(entero * 2); // filtrando los mayores a 3 List<Integer> enterosDoblesMayoresATres = new ArrayList<>(); for (Integer enteroDoble : enterosDobles) { if (enteroDoble > 3) enterosDoblesMayoresATres.add(enteroDoble); } for (Integer resultado : enterosDoblesMayoresATres) System.out.println(resultado); } } Output Entrada: [1, 2, 3, 4] 4 6 8 Usando programaci\u00f3n funcional, la raz\u00f3n por que Java 1.8, es suficiente hasta ahora. Se puede observar una mayor limpieza en el c\u00f3digo. package cl.lherrera.java004; import java.util.Arrays; import java.util.List; public class Principal { public static void main(String[] args) { String[] numeros = {\"1\", \"2\", \"3\", \"4\"}; List<String> cadenas = Arrays.asList(numeros); System.out.println(\"Entrada: \" + cadenas); cadenas.stream() .map(Integer::parseInt) .map(entero -> entero * 2) .filter(entero -> entero > 3) .forEach(System.out::println); } } Ejemplo: Sumatoria ( reduce ). Cuando trabajamos con una colecci\u00f3n de datos, que son la base de la comunicaci\u00f3n existente en la web, tenemos que, transformar, filtrar y ademas, en ocaciones, obtener resultados, como formar una palabra o la suma de todos los elementos. Tomemos el ejemplo anterior y obtengamos el resultado de la suma de todos sus elementos. Soluci\u00f3n package cl.lherrera.java004; import java.util.ArrayList; import java.util.Arrays; import java.util.List; public class Principal { public static void main(String[] args) { String[] numeros = { \"1\", \"2\", \"3\", \"4\" }; List<String> cadenas = Arrays.asList(numeros); System.out.println(\"Entrada: \" + cadenas); // Pasando las cadenas a enteros List<Integer> enteros = new ArrayList<>(); for (String cadena : cadenas) enteros.add(Integer.parseInt(cadena)); // Aumentando cada elemento al doble List<Integer> enterosDobles = new ArrayList<>(); for (Integer entero : enteros) enterosDobles.add(entero * 2); // filtrando los mayores a 3 List<Integer> enterosDoblesMayoresATres = new ArrayList<>(); for (Integer enteroDoble : enterosDobles) { if (enteroDoble > 3) enterosDoblesMayoresATres.add(enteroDoble); } int suma = 0; for (Integer resultado : enterosDoblesMayoresATres) suma += resultado; System.out.println(\"Salida: \" + enterosDoblesMayoresATres); System.out.println(suma); } } Funcionalmente, utilizando Streams().reduce((a, b) -> proceso, valorInicialAcumulador) package cl.lherrera.java004; import java.util.Arrays; import java.util.List; public class Principal { public static void main(String[] args) { String[] numeros = {\"1\", \"2\", \"3\", \"4\"}; List<String> cadenas = Arrays.asList(numeros); System.out.println(\"Entrada: \" + cadenas); cadenas.stream() .map(Integer::parseInt) .map(entero -> entero * 2) .filter(entero -> entero > 3) .reduce((a, b) -> a + b) .ifPresent(System.out::println); } } Si le damos un valor inicial al acumulador, entonces el retorno ya no ser\u00e1 un Optional si no que ser\u00e1 del tipo del valor inicial, ya que si nada le llega, al menos tendr\u00e1 el valor inicial; pero esto implica no poder ejecutar el isPresent ya que para el caso del ejemplo Integer no implementa este m\u00e9todo; pero Optional si. Veamos como ser\u00eda con un valor incializado . package cl.lherrera.java004; import java.util.Arrays; import java.util.List; public class Principal { public static void main(String[] args) { String[] numeros = {\"1\", \"2\", \"3\", \"4\"}; List<String> cadenas = Arrays.asList(numeros); System.out.println(\"Entrada: \" + cadenas); Integer suma = cadenas.stream() .map(Integer::parseInt) .map(entero -> entero * 2) .filter(entero -> entero > 3) .reduce(0, (a, b) -> a + b); System.out.println(\"suma total: \" + suma); } } Output Entrada: [1, 2, 3, 4] suma total: 18","title":"Arraylist"},{"location":"ejercicios/repaso/teoria/arraylist/#arraylistltobjectgt","text":"Un arrayList es una clase incluida en el paquete java.util , es una estructura de almacenamiento din\u00e1mico , a diferencia de un arreglo nativo, esta estructura puede variar el tama\u00f1o de su largo . Se muestra ArrayList , independientemente de Collections , para poder identificar las funciones m\u00e1s comunes que se utilizan para poder trabajar con arreglos de datos, ya que este tipo de listas, son din\u00e1micas, nos permiten recibir n cantidad de datos. Lo que no pasa cuando usamos arreglos nativos, ya que el largo, se decide al momento de iniciar el arreglo. Un ArrayList en java, no almacena valores contiguos en la memoria principal como lo hace un array[] , en vez de eso, guarda las referencias de los objetos que la componen . Si anteriormente vimos que los arreglos nativos, est\u00e1n compuestos por elementos que pod\u00edan ser, primitivos o no primitivos, para el caso de los ArrayList , estos solo se componen de Objetos. Cuando un objeto es creado, se le asigna una cantidad de memoria, pero esta memoria no se carga al ArrayList , esto se debe a que el ArrayList , solo guarda la referencia a ese objeto. Como no se trabaja con objetos reales, ArrayLists contiene matrices de referencias a objetos almacenados en otro lugar (un lugar en la memoria llamado heap , redunda lo anterior, mencionar en caso de ser absolutamente necesario. El Heap (Mont\u00edculo) almacena objetos y sus variables de instancia. Es un espacio de memoria din\u00e1mica que se crea al inicio de la m\u00e1quina virtual y es \u00fanico.(no tiene que ver con ArrayList , si no que con uno de los lugares de almacenamiento que posee Java ). Cuando usemos lo m\u00e9todos est\u00e1ticos, de la clase Collections , la colecci\u00f3n entregada como argumento, cambiar\u00e1. Si necesitamos preservar la colecci\u00f3n original, debemos crear una copia de ella, as\u00ed la respaldamos. (Siempre un new es algo nuevo, que bueno es ser un lenguaje que lo entienda) // as\u00ed lo respaldamos ArrayList<Integer> numerosCopia = new ArrayList<Integer>(numeros); // tambi\u00e9n puede ser de esta forma (polimorfismo) List<Integer> numerosCopia = new ArrayList<Integer>(numeros);","title":"ArrayList&amp;lt;Object&amp;gt;"},{"location":"ejercicios/repaso/teoria/arraylist/#primitivos-como-objetos-wrappers","text":"Apoyo solamente en el caso que no est\u00e9n claros los objetos del tipo envolvedor. //byte numero_1 = -128; Byte numero_1 = -128; //short numero_2 = -32768; Short numero_2 = -32768; //int numero_3 = 2147483647; Integer numero_3 = 2147483647; //long numero_4 = -9223372036854775808L; Long numero_4 = -9223372036854775808L; //float numero_5 = 3.4028235E38f; Float numero_5 = 3.4028235E38f; //double numero_6 = 1.7976931348623157E+308d; Double numero_6 = 1.7976931348623157E+308d; //char caracter = '\u0110'; Character caracter = '\u0110'; //boolean proposicion = true; Boolean proposicion = true;","title":"Primitivos como objetos Wrappers."},{"location":"ejercicios/repaso/teoria/arraylist/#principales-metodos-usados-en-un-arraylist","text":"","title":"Principales m\u00e9todos usados en un ArrayList."},{"location":"ejercicios/repaso/teoria/arraylist/#listaaddobject-obj","text":"A\u00f1ade un elemento. ArrayList<String> array_list = new ArrayList<>(); array_list.add(\"Elemento agreado\"); System.out.println(array_list); // >sout: [Elemento agreado] ADD(N, \"ELEMENTO 2\")","title":"lista.add(Object obj)"},{"location":"ejercicios/repaso/teoria/arraylist/#listaaddindex-object-obj","text":"A\u00f1ade el elemento al ArrayList en la posici\u00f3n 'index' ArrayList<String> array_list = new ArrayList<>(); array_list.add(\"Elemento agreado_1\"); array_list.add(\"Elemento agreado_2\"); array_list.add(0, \"Elemento agreado_3\"); System.out.println(array_list); // >sout: [Elemento agreado_3, Elemento agreado_1, Elemento agreado_2]","title":"lista.add(index, Object obj)"},{"location":"ejercicios/repaso/teoria/arraylist/#listasize","text":"Devuelve el numero de elementos del ArrayList ArrayList<String> array_list = new ArrayList<>(); array_list.add(\"Elemento agreado_1\"); array_list.add(\"Elemento agreado_2\"); array_list.add(0, \"Elemento agreado_3\"); System.out.println(array_list.size()); // >sout: 3","title":"lista.size()"},{"location":"ejercicios/repaso/teoria/arraylist/#listagetn","text":"Devuelve el elemento que esta en la posici\u00f3n 'n' de la lista. Es el s\u00edmil de arreglo[n] . ArrayList<String> array_list = new ArrayList<>(); array_list.add(\"Elemento agreado_1\"); array_list.add(\"Elemento agreado_2\"); array_list.add(0, \"Elemento agreado_3\"); System.out.println(array_list.get(2)); // >sout: Elemento agreado_2","title":"lista.get(n)"},{"location":"ejercicios/repaso/teoria/arraylist/#listacontainsobject-obj","text":"Comprueba la existencia del elemento indicado en el ArrayList<String> array_list = new ArrayList<>(); array_list.add(\"Elemento agreado_1\"); array_list.add(\"Elemento agreado_2\"); array_list.add(0, \"Elemento agreado_3\"); System.out.println(array_list.contains(\"Elemento agreado_1\")); //>sout: true","title":"lista.contains(Object obj)"},{"location":"ejercicios/repaso/teoria/arraylist/#listaindexofobject-obj","text":"Devuelve la posici\u00f3n de la primera ocurrencia ('Elemento') en el ArrayList. ArrayList<String> array_list = new ArrayList<>(); array_list.add(\"Elemento agreado_1\"); array_list.add(\"Elemento agreado_2\"); array_list.add(0, \"Elemento agreado_3\"); System.out.println(array_list.indexOf(\"Elemento agreado_3\")); //>sout: 0","title":"lista.indexOf(Object obj)"},{"location":"ejercicios/repaso/teoria/arraylist/#listaremoveint-n","text":"Borra el elemento de la posici\u00f3n n del ArrayList . ArrayList<String> array_list = new ArrayList<>(); array_list.add(\"Elemento agreado_1\"); array_list.add(\"Elemento agreado_1\"); array_list.add(\"Elemento agreado_2\"); array_list.add(0, \"Elemento agreado_3\"); array_list.remove(2); System.out.println(array_list); // >sout: [Elemento agreado_3, Elemento agreado_1, Elemento agreado_2]","title":"lista.remove(int n)"},{"location":"ejercicios/repaso/teoria/arraylist/#listaremoveobject-obj","text":"Borra la primera ocurrencia del 'Elemento' que se le pasa como argumento. ArrayList<String> array_list = new ArrayList<>(); array_list.add(\"Elemento agreado_1\"); array_list.add(\"Elemento agreado_1\"); array_list.add(\"Elemento agreado_2\"); array_list.add(0, \"Elemento agreado_3\"); array_list.remove(\"Elemento agreado_1\"); System.out.println(array_list); // >sout: [Elemento agreado_3, Elemento agreado_1, Elemento agreado_2]","title":"lista.remove(Object obj)"},{"location":"ejercicios/repaso/teoria/arraylist/#listaclear","text":"Borra todos los elementos de ArrayList. ArrayList<String> array_list = new ArrayList<>(); array_list.add(\"Elemento agreado_1\"); array_list.add(\"Elemento agreado_1\"); array_list.add(\"Elemento agreado_2\"); array_list.add(0, \"Elemento agreado_3\"); array_list.clear(); System.out.println(array_list); // >sout: []","title":"lista.clear()"},{"location":"ejercicios/repaso/teoria/arraylist/#listaisempty","text":"Devuelve True si el ArrayList esta vac\u00edo. Sino Devuelve false . ArrayList<String> array_list = new ArrayList<>(); array_list.add(\"Elemento agreado_1\"); array_list.add(\"Elemento agreado_1\"); array_list.add(\"Elemento agreado_2\"); array_list.add(0, \"Elemento agreado_3\"); array_list.clear(); System.out.println(array_list); // >sout: []","title":"lista.isEmpty()"},{"location":"ejercicios/repaso/teoria/arraylist/#listaisempty_1","text":"Transforma una lista a un arreglo primitivo. ArrayList<String> array_list = new ArrayList<>(); array_list.add(\"Elemento agreado_1\"); array_list.add(\"Elemento agreado_1\"); array_list.add(\"Elemento agreado_2\"); array_list.add(0, \"Elemento agreado_3\"); Object[] elementos = array_list.toArray(); System.out.println(elementos.length); // >sout: 4","title":"lista.isEmpty()"},{"location":"ejercicios/repaso/teoria/arraylist/#iterador","text":"Sirve para poder recorrer de mejor forma un ArrayList Los Iteradores tienen tres m\u00e9todos que son el hasNext() para comprobar que siguen quedando elementos en el iterador, el next() para que nos de el siguiente elemento del iterador; y el remove() que sirve para eliminar el elemento del Iterador. ArrayList<String> array_list = new ArrayList<>(); array_list.add(\"Elemento agreado_1\"); array_list.add(\"Elemento agreado_1\"); array_list.add(\"Elemento agreado_2\"); array_list.add(0, \"Elemento agreado_3\"); // Declaramos el Iterador e imprimimos los Elementos del ArrayList Iterator<string> nombreIterator = array_list.iterator(); while(nombreIterator.hasNext()){ String elemento = nombreIterator.next(); System.out.print(elemento + \" / \"); } // >sout: Elemento agreado_3 / Elemento agreado_1 / Elemento agreado_1 / Elemento agreado_2 /","title":"Iterador"},{"location":"ejercicios/repaso/teoria/arraylist/#clase-collections-y-sus-metodos-estaticos","text":"Hay que tener cuidado al realizar estas operaciones, ya que se modifica el arreglo, no crea una copia para retornar. Esta clase posee m\u00e9todos especiales, que trabajan sobre listas. Aunque parezca que es Collections quien posee la implementaci\u00f3n de Sort es el mismo ArrayList , lo que hace Collection es ejecutar list.sort() , donde list es el argumento entregado a `Collections.sort(AC\u00c1). Entonces se concluye lo siguiente: ArrayList debe implementar el m\u00e9todo sort() , es decir que ArrayList , implementa los m\u00e9todos que componen la interfaz de List , lo que sabemos que es verdad, es decir que ArrayList , es un tipo List .\u0010 Se ejemplifica esto con el el m\u00e9todo Sort() . Pero aplica a otros, se muestra como una an\u00e9cdota de las implementaciones m\u00e1s utilizadas en el mundo, utilizando la t\u00e9cnica del polimorfismo. Como lo ser\u00eda la api collections package cl.lherrera.java004; import java.util.ArrayList; import java.util.Collections; public class Principal { public static void main(String[] args) { ArrayList<String> nombres = new ArrayList<>(); nombres.add(\"Hugo\"); nombres.add(\"Paco\"); nombres.add(\"Luis\"); //nombres.sort(null); // esto es lo que se ejecuta realmente // en este caso podemos hacerlo directo, pero es m\u00e1s seguro // hacerlo por Collections, ya que este m\u00e9todo es el dise\u00f1ado para // ejecutar lo que se deba para realizar la operaci\u00f3n que se ordene. Collections.sort(nombres); System.out.print(nombres); } }","title":"Clase Collections y sus m\u00e9todos est\u00e1ticos."},{"location":"ejercicios/repaso/teoria/arraylist/#collectionssortcoleccion","text":"El m\u00e9todo sort() , nos permite ordenar la lista de manera ascendente. En el caso de los Strings, los ordena comparando car\u00e1cter a car\u00e1cter. ArrayList<String> paises = new ArrayList<String>(); paises.add(\"Chile\"); paises.add(\"Argentina\"); paises.add(\"Colombia\"); paises.add(\"Per\u00fa\"); paises.add(\"Venezuela\"); Collections.sort(paises); System.out.println(paises); //[Argentina, Chile, Colombia, Per\u00fa, Venezuela] Si no queremos que ordenen en diferentes grupos las may\u00fasculas y las min\u00fasculas, debemos agregar un par\u00e1metro extra. Collections.sort(paises,String.CASE_INSENSITIVE_ORDER);","title":"Collections.sort(colecci\u00f3n);"},{"location":"ejercicios/repaso/teoria/arraylist/#collectionsreversecoleccion","text":"Invierte el orden de los elementos de una colecci\u00f3n. ArrayList<String> paises = new ArrayList<String>(); paises.add(\"Chile\"); paises.add(\"Argentina\"); paises.add(\"Colombia\"); paises.add(\"Per\u00fa\"); paises.add(\"Venezuela\"); Collections.reverse(paises); System.out.println(paises); // [Venezuela, Per\u00fa, Colombia, chile, Chile, Argentina]","title":"Collections.reverse(colecci\u00f3n);"},{"location":"ejercicios/repaso/teoria/arraylist/#collectionsminnumeros-collectionsmaxnumeros","text":"Determina el m\u00ednimo y m\u00e1ximo de una colecci\u00f3n. ArrayList<Integer> numeros = new ArrayList<Integer>(); numeros.add(5); numeros.add(1); numeros.add(4); numeros.add(1); numeros.add(2); numeros.add(6); System.out.println(Collections.min(numeros)); //1 System.out.println(Collections.max(numeros)); //6","title":"Collections.min(numeros), Collections.max(numeros)"},{"location":"ejercicios/repaso/teoria/arraylist/#collectionsfrequencycolecion-elemento","text":"Si queremos saber cu\u00e1ntas veces existe la ocurrencia de un elemento en el ArrayList, podemos usar el m\u00e9todo frequency() . ArrayList<Integer> numeros = new ArrayList<Integer>(); numeros.add(5); numeros.add(1); numeros.add(4); numeros.add(1); numeros.add(2); numeros.add(6); System.out.println(Collections.frequency(numeros, 1)); //2 // el elemento 1 se repite dos veces.","title":"Collections.frequency(coleci\u00f3n, elemento)"},{"location":"ejercicios/repaso/teoria/arraylist/#collectionsshufflenumeros","text":"Intercambia \"aleatoreamente\" las posiciones de los elementos de una colecci\u00f3n. ArrayList<Integer> numeros = new ArrayList<Integer>(); numeros.add(5); numeros.add(1); numeros.add(4); numeros.add(1); numeros.add(2); numeros.add(6); Collections.shuffle(numeros); // [6, 5, 1, 4, 1, 2] // este resultado puede cambiar por que es aleatoreo.","title":"Collections.shuffle(numeros);"},{"location":"ejercicios/repaso/teoria/arraylist/#arraysaslist","text":"Retorna, una lista, de tama\u00f1o fijo, apoyada en un arreglo nativo dado.(Cambiando a una List retornada\u001c). Es decir, que la clase Arrays , posee un m\u00e9todo: public static <T> List<T> asList(T... a) { return new ArrayList<>(a); } Retorna un new ArrayList<>(a); pero uno interno, no nuestro ArrayList , Es por asuntos de optimizaci\u00f3n. Finalmente retorna la interfaz, que es una lista que ser\u00e1 tratada como un ArrayList de los nuestros. Es por este motivo que no se puede hacer: ArrayList<> lista = new ArrayList(Arrays.asList(...)) // y no ArrayList<> lista = (ArrayList) Arrays.asList(...) // en realidad no es un ArratList de .util es de Collections... Ejemplo package cl.lherrera.java004; import java.util.ArrayList; import java.util.Arrays; public class Principal { public static void main(String[] args) { // no usar el primitivo, para trabajar con listas de Collections // al momento de hacerlo entonces el asLis falla. // int[] numeros = {1, 2, 3, 4}; Integer[] numeros = {1, 2, 3, 4}; ArrayList<Integer> ejemplo = new ArrayList<>(Arrays.asList(numeros)); System.out.println(ejemplo); } } Y bueno, la idea que retorne una lista es que la usemos, lo que hace que que sea una implementaci\u00f3n m\u00e1s abstracta; pero m\u00e1s limpia y clara. package cl.lherrera.java004; import java.util.Arrays; import java.util.List; public class Principal { public static void main(String[] args) { Integer[] numeros = {1, 2, 3, 4}; List<Integer> ejemplo = Arrays.asList(numeros); System.out.println(ejemplo); } }","title":"Arrays.asList()"},{"location":"ejercicios/repaso/teoria/arraylist/#ejemplo-transformar-los-datos-de-un-arreglo","text":"Simulando un ingreso de un usuario en una cadena, debemos pasar todos sus elementos a enteros para poder trabajarlo de mejor forma. package cl.lherrera.java004; import java.util.ArrayList; import java.util.Arrays; import java.util.List; public class Principal { public static void main(String[] args) { String[] numeros = {\"1\", \"2\", \"3\", \"4\"}; List<String> cadenas = Arrays.asList(numeros); List<Integer> enteros = new ArrayList<>(); for(String cadena: cadenas) { enteros.add(Integer.parseInt(cadena)); } System.out.println(enteros); } } Un poco m\u00e1s funcional package cl.lherrera.java004; import java.util.Arrays; import java.util.List; import java.util.stream.Collectors; public class Principal { public static void main(String[] args) { String[] numeros = {\"1\", \"2\", \"3\", \"4\"}; List<String> cadenas = Arrays.asList(numeros); List<Integer> enteros = cadenas.stream() .map(Integer::parseInt) .collect(Collectors.toList()); System.out.println(enteros); } }","title":"Ejemplo: Transformar los datos de un arreglo."},{"location":"ejercicios/repaso/teoria/arraylist/#ejemplo-aumentar-elementos","text":"Implementar un m\u00e9todo en Java , que reciba un arreglo de enteros y retorne un arreglo con los elementos aumentados al doble. Soluci\u00f3n package cl.lherrera.java004; import java.util.ArrayList; import java.util.Arrays; import java.util.List; public class Principal { public static void main(String[] args) { String[] numeros = {\"1\", \"2\", \"3\", \"4\"}; List<String> cadenas = Arrays.asList(numeros); System.out.println(\"Entrada: \" + cadenas); List<Integer> enteros = new ArrayList<>(); for(String cadena: cadenas) enteros.add(Integer.parseInt(cadena) * 2); System.out.println(\"Salida: \" + enteros); } } Output \u001d Entrada: [1, 2, 3, 4] Salida: [2, 4, 6, 8] Usando .map() . package cl.lherrera.java004; import java.util.Arrays; import java.util.List; import java.util.stream.Collectors; public class Principal { public static void main(String[] args) { String[] numeros = {\"1\", \"2\", \"3\", \"4\"}; List<String> cadenas = Arrays.asList(numeros); System.out.println(\"Entrada: \" + cadenas); List<Integer> enteros = cadenas.stream() .map(cadena -> (Integer.parseInt(cadena) * 2)) .collect(Collectors.toList()); System.out.println(\"Salida: \" + enteros); } }","title":"Ejemplo: Aumentar elementos"},{"location":"ejercicios/repaso/teoria/arraylist/#ejemplo-de-todo-un-poco-en-una-lista-map-filter","text":"Transformar al doble, filtrar e imprimir cada elemento de un arreglo dado. Soluci\u00f3n package cl.lherrera.java004; import java.util.ArrayList; import java.util.Arrays; import java.util.List; public class Principal { public static void main(String[] args) { String[] numeros = { \"1\", \"2\", \"3\", \"4\" }; List<String> cadenas = Arrays.asList(numeros); System.out.println(\"Entrada: \" + cadenas); // Pasando las cadenas a enteros List<Integer> enteros = new ArrayList<>(); for (String cadena : cadenas) enteros.add(Integer.parseInt(cadena)); // Aumentando cada elemento al doble List<Integer> enterosDobles = new ArrayList<>(); for (Integer entero : enteros) enterosDobles.add(entero * 2); // filtrando los mayores a 3 List<Integer> enterosDoblesMayoresATres = new ArrayList<>(); for (Integer enteroDoble : enterosDobles) { if (enteroDoble > 3) enterosDoblesMayoresATres.add(enteroDoble); } for (Integer resultado : enterosDoblesMayoresATres) System.out.println(resultado); } } Output Entrada: [1, 2, 3, 4] 4 6 8 Usando programaci\u00f3n funcional, la raz\u00f3n por que Java 1.8, es suficiente hasta ahora. Se puede observar una mayor limpieza en el c\u00f3digo. package cl.lherrera.java004; import java.util.Arrays; import java.util.List; public class Principal { public static void main(String[] args) { String[] numeros = {\"1\", \"2\", \"3\", \"4\"}; List<String> cadenas = Arrays.asList(numeros); System.out.println(\"Entrada: \" + cadenas); cadenas.stream() .map(Integer::parseInt) .map(entero -> entero * 2) .filter(entero -> entero > 3) .forEach(System.out::println); } }","title":"Ejemplo: De todo un poco en una lista. (map, filter)"},{"location":"ejercicios/repaso/teoria/arraylist/#ejemplo-sumatoria-reduce","text":"Cuando trabajamos con una colecci\u00f3n de datos, que son la base de la comunicaci\u00f3n existente en la web, tenemos que, transformar, filtrar y ademas, en ocaciones, obtener resultados, como formar una palabra o la suma de todos los elementos. Tomemos el ejemplo anterior y obtengamos el resultado de la suma de todos sus elementos. Soluci\u00f3n package cl.lherrera.java004; import java.util.ArrayList; import java.util.Arrays; import java.util.List; public class Principal { public static void main(String[] args) { String[] numeros = { \"1\", \"2\", \"3\", \"4\" }; List<String> cadenas = Arrays.asList(numeros); System.out.println(\"Entrada: \" + cadenas); // Pasando las cadenas a enteros List<Integer> enteros = new ArrayList<>(); for (String cadena : cadenas) enteros.add(Integer.parseInt(cadena)); // Aumentando cada elemento al doble List<Integer> enterosDobles = new ArrayList<>(); for (Integer entero : enteros) enterosDobles.add(entero * 2); // filtrando los mayores a 3 List<Integer> enterosDoblesMayoresATres = new ArrayList<>(); for (Integer enteroDoble : enterosDobles) { if (enteroDoble > 3) enterosDoblesMayoresATres.add(enteroDoble); } int suma = 0; for (Integer resultado : enterosDoblesMayoresATres) suma += resultado; System.out.println(\"Salida: \" + enterosDoblesMayoresATres); System.out.println(suma); } } Funcionalmente, utilizando Streams().reduce((a, b) -> proceso, valorInicialAcumulador) package cl.lherrera.java004; import java.util.Arrays; import java.util.List; public class Principal { public static void main(String[] args) { String[] numeros = {\"1\", \"2\", \"3\", \"4\"}; List<String> cadenas = Arrays.asList(numeros); System.out.println(\"Entrada: \" + cadenas); cadenas.stream() .map(Integer::parseInt) .map(entero -> entero * 2) .filter(entero -> entero > 3) .reduce((a, b) -> a + b) .ifPresent(System.out::println); } } Si le damos un valor inicial al acumulador, entonces el retorno ya no ser\u00e1 un Optional si no que ser\u00e1 del tipo del valor inicial, ya que si nada le llega, al menos tendr\u00e1 el valor inicial; pero esto implica no poder ejecutar el isPresent ya que para el caso del ejemplo Integer no implementa este m\u00e9todo; pero Optional si. Veamos como ser\u00eda con un valor incializado . package cl.lherrera.java004; import java.util.Arrays; import java.util.List; public class Principal { public static void main(String[] args) { String[] numeros = {\"1\", \"2\", \"3\", \"4\"}; List<String> cadenas = Arrays.asList(numeros); System.out.println(\"Entrada: \" + cadenas); Integer suma = cadenas.stream() .map(Integer::parseInt) .map(entero -> entero * 2) .filter(entero -> entero > 3) .reduce(0, (a, b) -> a + b); System.out.println(\"suma total: \" + suma); } } Output Entrada: [1, 2, 3, 4] suma total: 18","title":"Ejemplo: Sumatoria (reduce)."},{"location":"ejercicios/repaso/teoria/arreglos/","text":"ARREGLOS EN JAVA 0\ufe0f\u20e3 - 1\ufe0f\u20e3 - 2\ufe0f\u20e3 - ... Un array (arreglo) en Java, es una estructura de datos que nos permite almacenar un conjunto de datos de un mismo tipo. El tama\u00f1o de los arrays \u001d se declara en un primer momento y no puede cambiar. ARREGLOS UNIDIMENSIONALES (UNA DIMENSI\u00d3N). Cuando creamos un array de nombre \u201ca\u201d y de tama\u00f1o \u201cn\u201d ( int[] a = new int[n] \u001d) estamos creando n variables que son a[0], a[1], a[2], ..., a[n-1] \u001d. Los arrays \u001d se numeran desde el elemento cero, que ser\u00eda el primer elemento, hasta el n-1 que ser\u00eda el \u00faltimo elemento. PRIMERA FORMA: DECLARACI\u00d3N Pueden ser de cualquier tipo. (Primitivos y no primitivos) Tipo_de_variable[] Nombre_del_array = new Tipo_de_variable[tama\u00f1o]; byte[] bytes = new byte[3]; short[] shorts = new short[3]; int[] ints = new int[3]; long[] longs = new long[3]; float[] floats = new float[3]; double[] doubles = new double[3]; char[] chars = new char[3]; boolean[] boleanos = new boolean[3]; String[] args = new String[3]; Integer[] integers = new Integer[3]; DecimalFormat[] decimalFormats = new DecimalFormat[3]; ASIGNACI\u00d3N DE VALORES boolean[] boleanos = new boolean[3]; // declaraci\u00f3n de array de tama\u00f1o 3 y tipo boolean. boleanos[0] = true; boleanos[1] = false; boleanos[2] = true; DECLARACI\u00d3N Y ASIGNACI\u00d3N DE VALORES boolean[] boleanos = new boolean[] {true, false, true}; SEGUNDA FORMA: DECLARACI\u00d3N Pueden ser de cualquier tipo. (Primitivos y no primitivos). Tipo_de_variable[] Nombre_del_array; byte[] bytes; short[] shorts; int[] ints; long[] longs; float[] floats; double[] doubles; char[] chars; boolean[] boleanos; String[] args; Integer[] integers; DecimalFormat[] decimalFormats; ASIGNACI\u00d3N DE VALORES boolean[] boleanos; // declaraci\u00f3n. boleanos = new boolean[3]; // asignaci\u00f3n del tama\u00f1o. boleanos[0] = true; boleanos[1] = false; boleanos[2] = true; DECLARACI\u00d3N Y ASIGNACI\u00d3N DE VALORES boolean[] boleanos = {true, false, true}; EJEMPLO: Crear un programa en java, que contenga un arreglo con tres marcas de autos y luego imprimir sus valores por consola. package ejemplos; public class Ejemplo { // M\u00e9todo principal public static void main(String[] args ) { String[] marcas = {\"Tesla\", \"Lexus\", \"Volvo\"}; System.out.println(marcas[0]); System.out.println(marcas[1]); System.out.println(marcas[2]); } } EJERCICIO: Escribir un programa en java, que contenga un arreglo con 2 n\u00fameros e imprimir su suma. package cl.lherrera.java001; public class Principal { public static void main(String[] args) { int[] numeros = { 1, 2 }; int total = 0; for (int i = 0; i < numeros.length; i++) { total += numeros[i]; } System.out.println(\"El total es: \" + total); } } RECORRER UN ARREGLO Existen mejores formas de acceder a cada elemento del arreglo utilizando el ciclo for String[] autos = {\"tesla\", \"Lexus\", \"Volvo\"}; // M\u00e9todo 1: Recorrer usando for y conociendo el largo del arreglo System.out.println(\"M\u00e9todo 1:\"); for(int i = 0; i < 3; i++){ System.out.println(autos[i]); } // M\u00e9todo 2 : Recorrer usando for y desconociendo el largo del arreglo. System.out.println(\"\\nM\u00e9todo 2:\"); for(int i = 0; i < autos.length; i++){ System.out.println(autos[i]); } // M\u00e9todo 3 (El mejor): Recorrer usando for y desconociendo el largo // del arreglo. (Foreach) System.out.println(\"\\nM\u00e9todo 3:\"); for (String auto : autos) { System.out.println(auto); } VARIABLE ARGUMENTS varargs... \u001c\ud83e\udd14 Desde la 5ta versi\u00f3n del JDK, existe la posibilidad de implementar m\u00e9todos con par\u00e1metros variables utilizando el Variable Arguments , es decir, al momento de llamar a este m\u00e9todo entregando una cantidad variable de argumentos Exist\u00eda la posibilidad de hacerlo con un arreglo, por ejemplo: public static void main(String[] args ) { //Todo el c\u00f3digo ac\u00e1 } Pero a partir de JDK 5, se puede hacer de la siguiente forma: public static void main(String ...args ) { //Todo el c\u00f3digo ac\u00e1 } Ejemplo: suma de argumentos. Crear un m\u00e9todo que reciba una cantidad de indeterminada de par\u00e1metros e imprima el resultado de la suma. package cl.lherrera.primero; public class Principal { public static void main(String[] args) { sumar(1, 2, 3, 4, 5); } public static void sumar(int... numeros) { int suma = 0; for (int i = 0; i < numeros.length; i++) { suma += numeros[i]; } System.out.print(\"La suma es: \" + suma); } } ARRAYS MULTI-DIMENSIONALES En Java es posible crear arreglos con m\u00e1s de una dimensi\u00f3n, pasando de la idea de lista, vector o matriz de una sola fila a la idea de matriz de m x n elementos, estructuras tridimensionales, tetra-dimensionales , etc. La sintaxis ser\u00e1: Tipo_de_variable[][]\u2026 [] Nombre_del_array = new Tipo_de_variable[dimensi\u00f3n1][dimensi\u00f3n2]\u2026[dimensi\u00f3nN]; int[][] matriz = new int[3][2]; O alternativamente int[][] matriz; matriz = new int[3][2]; O directo: int[][] matriz = {{1,2},{3,4},{5,6}}; //Tres columnas y dos filas. // Declaraciones. byte[][] edad = new byte[4][3]; short ][] edad = new short[4][3]; int[][] edad = new int[4][3]; long[][] edad = new long[4][3]; float[][] estatura = new float[3][2]; double[][] estatura = new double[3][2]; boolean[][] estado = new boolean[5][4]; char[][] sexo = new char[2][1]; String[][] nombre = new String[2][1]; // Asignar valores: matriz[0][0] = 1; matriz[0][1] = 2; matriz[1][0] = 3; matriz[1][1] = 4; matriz[2][0] = 5; matriz[2][1] = 6; // Directamente: int[][] matriz = {{1,2},{3,4},{5,6}}; //Tres columnas y dos filas. // Recorrer un arreglo multi-dimensional int[][] matriz = {{1,2},{3,4},{5,6}}; // tres columnas, dos filas [3][2] // M\u00e9todo 1: Conociendo exactamente el n\u00famero de filas y columnas. System.out.println(\"M\u00e9todo 1\"); for(int i = 0; i < 3; i++){ for(int j = 0; j < 2; j ++){ System.out.println(matriz[i][j]); } } // M\u00e9todo 2: Desconociendo el n\u00famero de filas y columnas. System.out.println(\"\\nM\u00e9todo 2\"); for(int i = 0; i < matriz.length; i++){ for(int j = 0; j < matriz[i].length; j ++){ System.out.println(matriz[i][j]); } } // M\u00e9todo 3: Usando un foreach System.out.println(\"\\nM\u00e9todo 3\"); for (int[] matriz1 : matriz) { // Elimina una dimensi\u00f3n for(int matriz11: matriz1){ // S\u00f3lo System.out.println(matriz11); } } EJERCICIO: Arreglo multidimensional. utilizando un arreglo multidimensional, escribir un programa en java, que imprima la siguiente informaci\u00f3n de una matriz. Java Javascript Bases de datos Hugo Pedro Victor Paco Ana Elena Mar\u00eda Juan Mar\u00eda package ejemplos; public class Ejemplo { // M\u00e9todo principal public static void main(String[] args) { String[][] nombres = { {\"Java\", \"Javascript\", \"Base de datos\"}, {\"Hugo\", \"pedro\", \"Victor\"}, {\"Paco\", \"Ana\", \"Elena\"}, {\"Mar\u00eda\", \"Ju\u00e1n\", \"Mar\u00eda\"}, }; for (int i = 0; i < nombres.length; i++) { for (int j = 0; j < nombres[i].length; j++) { if(nombres[i][j].equals(\"Javascript\")){ System.out.print(nombres[i][j] + \"\\t\"); }else{ System.out.print(nombres[i][j] + \"\\t\\t\"); } } System.out.println(\"\"); } } }","title":"Arreglos"},{"location":"ejercicios/repaso/teoria/arreglos/#arreglos-en-java-0-1-2-","text":"Un array (arreglo) en Java, es una estructura de datos que nos permite almacenar un conjunto de datos de un mismo tipo. El tama\u00f1o de los arrays \u001d se declara en un primer momento y no puede cambiar.","title":"ARREGLOS EN JAVA 0\ufe0f\u20e3 - 1\ufe0f\u20e3 - 2\ufe0f\u20e3 - ..."},{"location":"ejercicios/repaso/teoria/arreglos/#arreglos-unidimensionalesuna-dimension","text":"Cuando creamos un array de nombre \u201ca\u201d y de tama\u00f1o \u201cn\u201d ( int[] a = new int[n] \u001d) estamos creando n variables que son a[0], a[1], a[2], ..., a[n-1] \u001d. Los arrays \u001d se numeran desde el elemento cero, que ser\u00eda el primer elemento, hasta el n-1 que ser\u00eda el \u00faltimo elemento.","title":"ARREGLOS UNIDIMENSIONALES(UNA DIMENSI\u00d3N)."},{"location":"ejercicios/repaso/teoria/arreglos/#primera-forma","text":"","title":"PRIMERA FORMA:"},{"location":"ejercicios/repaso/teoria/arreglos/#declaracion","text":"Pueden ser de cualquier tipo. (Primitivos y no primitivos) Tipo_de_variable[] Nombre_del_array = new Tipo_de_variable[tama\u00f1o]; byte[] bytes = new byte[3]; short[] shorts = new short[3]; int[] ints = new int[3]; long[] longs = new long[3]; float[] floats = new float[3]; double[] doubles = new double[3]; char[] chars = new char[3]; boolean[] boleanos = new boolean[3]; String[] args = new String[3]; Integer[] integers = new Integer[3]; DecimalFormat[] decimalFormats = new DecimalFormat[3];","title":"DECLARACI\u00d3N"},{"location":"ejercicios/repaso/teoria/arreglos/#asignacion-de-valores","text":"boolean[] boleanos = new boolean[3]; // declaraci\u00f3n de array de tama\u00f1o 3 y tipo boolean. boleanos[0] = true; boleanos[1] = false; boleanos[2] = true;","title":"ASIGNACI\u00d3N DE VALORES"},{"location":"ejercicios/repaso/teoria/arreglos/#declaracion-y-asignacion-de-valores","text":"boolean[] boleanos = new boolean[] {true, false, true};","title":"DECLARACI\u00d3N Y ASIGNACI\u00d3N DE VALORES"},{"location":"ejercicios/repaso/teoria/arreglos/#segunda-forma","text":"","title":"SEGUNDA FORMA:"},{"location":"ejercicios/repaso/teoria/arreglos/#declaracion_1","text":"Pueden ser de cualquier tipo. (Primitivos y no primitivos). Tipo_de_variable[] Nombre_del_array; byte[] bytes; short[] shorts; int[] ints; long[] longs; float[] floats; double[] doubles; char[] chars; boolean[] boleanos; String[] args; Integer[] integers; DecimalFormat[] decimalFormats;","title":"DECLARACI\u00d3N"},{"location":"ejercicios/repaso/teoria/arreglos/#asignacion-de-valores_1","text":"boolean[] boleanos; // declaraci\u00f3n. boleanos = new boolean[3]; // asignaci\u00f3n del tama\u00f1o. boleanos[0] = true; boleanos[1] = false; boleanos[2] = true;","title":"ASIGNACI\u00d3N DE VALORES"},{"location":"ejercicios/repaso/teoria/arreglos/#declaracion-y-asignacion-de-valores_1","text":"boolean[] boleanos = {true, false, true};","title":"DECLARACI\u00d3N Y ASIGNACI\u00d3N DE VALORES"},{"location":"ejercicios/repaso/teoria/arreglos/#ejemplo","text":"Crear un programa en java, que contenga un arreglo con tres marcas de autos y luego imprimir sus valores por consola. package ejemplos; public class Ejemplo { // M\u00e9todo principal public static void main(String[] args ) { String[] marcas = {\"Tesla\", \"Lexus\", \"Volvo\"}; System.out.println(marcas[0]); System.out.println(marcas[1]); System.out.println(marcas[2]); } }","title":"EJEMPLO:"},{"location":"ejercicios/repaso/teoria/arreglos/#ejercicio","text":"Escribir un programa en java, que contenga un arreglo con 2 n\u00fameros e imprimir su suma. package cl.lherrera.java001; public class Principal { public static void main(String[] args) { int[] numeros = { 1, 2 }; int total = 0; for (int i = 0; i < numeros.length; i++) { total += numeros[i]; } System.out.println(\"El total es: \" + total); } }","title":"EJERCICIO:"},{"location":"ejercicios/repaso/teoria/arreglos/#recorrer-un-arreglo","text":"Existen mejores formas de acceder a cada elemento del arreglo utilizando el ciclo for String[] autos = {\"tesla\", \"Lexus\", \"Volvo\"}; // M\u00e9todo 1: Recorrer usando for y conociendo el largo del arreglo System.out.println(\"M\u00e9todo 1:\"); for(int i = 0; i < 3; i++){ System.out.println(autos[i]); } // M\u00e9todo 2 : Recorrer usando for y desconociendo el largo del arreglo. System.out.println(\"\\nM\u00e9todo 2:\"); for(int i = 0; i < autos.length; i++){ System.out.println(autos[i]); } // M\u00e9todo 3 (El mejor): Recorrer usando for y desconociendo el largo // del arreglo. (Foreach) System.out.println(\"\\nM\u00e9todo 3:\"); for (String auto : autos) { System.out.println(auto); }","title":"RECORRER UN ARREGLO"},{"location":"ejercicios/repaso/teoria/arreglos/#variable-arguments-varargs","text":"Desde la 5ta versi\u00f3n del JDK, existe la posibilidad de implementar m\u00e9todos con par\u00e1metros variables utilizando el Variable Arguments , es decir, al momento de llamar a este m\u00e9todo entregando una cantidad variable de argumentos Exist\u00eda la posibilidad de hacerlo con un arreglo, por ejemplo: public static void main(String[] args ) { //Todo el c\u00f3digo ac\u00e1 } Pero a partir de JDK 5, se puede hacer de la siguiente forma: public static void main(String ...args ) { //Todo el c\u00f3digo ac\u00e1 }","title":"VARIABLE ARGUMENTS varargs...\u001c\ud83e\udd14"},{"location":"ejercicios/repaso/teoria/arreglos/#ejemplo-suma-de-argumentos","text":"Crear un m\u00e9todo que reciba una cantidad de indeterminada de par\u00e1metros e imprima el resultado de la suma. package cl.lherrera.primero; public class Principal { public static void main(String[] args) { sumar(1, 2, 3, 4, 5); } public static void sumar(int... numeros) { int suma = 0; for (int i = 0; i < numeros.length; i++) { suma += numeros[i]; } System.out.print(\"La suma es: \" + suma); } }","title":"Ejemplo: suma de argumentos."},{"location":"ejercicios/repaso/teoria/arreglos/#arrays-multi-dimensionales","text":"En Java es posible crear arreglos con m\u00e1s de una dimensi\u00f3n, pasando de la idea de lista, vector o matriz de una sola fila a la idea de matriz de m x n elementos, estructuras tridimensionales, tetra-dimensionales , etc. La sintaxis ser\u00e1: Tipo_de_variable[][]\u2026 [] Nombre_del_array = new Tipo_de_variable[dimensi\u00f3n1][dimensi\u00f3n2]\u2026[dimensi\u00f3nN]; int[][] matriz = new int[3][2]; O alternativamente int[][] matriz; matriz = new int[3][2]; O directo: int[][] matriz = {{1,2},{3,4},{5,6}}; //Tres columnas y dos filas. // Declaraciones. byte[][] edad = new byte[4][3]; short ][] edad = new short[4][3]; int[][] edad = new int[4][3]; long[][] edad = new long[4][3]; float[][] estatura = new float[3][2]; double[][] estatura = new double[3][2]; boolean[][] estado = new boolean[5][4]; char[][] sexo = new char[2][1]; String[][] nombre = new String[2][1]; // Asignar valores: matriz[0][0] = 1; matriz[0][1] = 2; matriz[1][0] = 3; matriz[1][1] = 4; matriz[2][0] = 5; matriz[2][1] = 6; // Directamente: int[][] matriz = {{1,2},{3,4},{5,6}}; //Tres columnas y dos filas. // Recorrer un arreglo multi-dimensional int[][] matriz = {{1,2},{3,4},{5,6}}; // tres columnas, dos filas [3][2] // M\u00e9todo 1: Conociendo exactamente el n\u00famero de filas y columnas. System.out.println(\"M\u00e9todo 1\"); for(int i = 0; i < 3; i++){ for(int j = 0; j < 2; j ++){ System.out.println(matriz[i][j]); } } // M\u00e9todo 2: Desconociendo el n\u00famero de filas y columnas. System.out.println(\"\\nM\u00e9todo 2\"); for(int i = 0; i < matriz.length; i++){ for(int j = 0; j < matriz[i].length; j ++){ System.out.println(matriz[i][j]); } } // M\u00e9todo 3: Usando un foreach System.out.println(\"\\nM\u00e9todo 3\"); for (int[] matriz1 : matriz) { // Elimina una dimensi\u00f3n for(int matriz11: matriz1){ // S\u00f3lo System.out.println(matriz11); } }","title":"ARRAYS MULTI-DIMENSIONALES"},{"location":"ejercicios/repaso/teoria/arreglos/#ejercicio-arreglo-multidimensional","text":"utilizando un arreglo multidimensional, escribir un programa en java, que imprima la siguiente informaci\u00f3n de una matriz. Java Javascript Bases de datos Hugo Pedro Victor Paco Ana Elena Mar\u00eda Juan Mar\u00eda package ejemplos; public class Ejemplo { // M\u00e9todo principal public static void main(String[] args) { String[][] nombres = { {\"Java\", \"Javascript\", \"Base de datos\"}, {\"Hugo\", \"pedro\", \"Victor\"}, {\"Paco\", \"Ana\", \"Elena\"}, {\"Mar\u00eda\", \"Ju\u00e1n\", \"Mar\u00eda\"}, }; for (int i = 0; i < nombres.length; i++) { for (int j = 0; j < nombres[i].length; j++) { if(nombres[i][j].equals(\"Javascript\")){ System.out.print(nombres[i][j] + \"\\t\"); }else{ System.out.print(nombres[i][j] + \"\\t\\t\"); } } System.out.println(\"\"); } } }","title":"EJERCICIO: Arreglo multidimensional."},{"location":"ejercicios/repaso/teoria/cadenas/","text":"Strings En este documento, ir\u00e1 toda la informaci\u00f3n que pueda documentar de las cadenas de texto en java. El objetivo es que pueda servir de consulta r\u00e1pida en caso de necesitar sustento en explicaci\u00f3n de funcionamiento. Este documento no se considerar\u00e1 completo, a menos que se cierre y se indique su versi\u00f3n. M\u00e9todos: de una instancia Que sean de una instancia, quiere decir que, estos m\u00e9todos se aplican a una instancia de new String(\"foo\") o \"foo\" . Es decir que los m\u00e9todos no son est\u00e1ticos. char charAt(int index): Retorna el car\u00e1cter del \u00edndice dado, comenzando en cero. package cl.lherrera.java001; public class Principal { public static void main(String[] args) { String numeros = \"12345\"; System.out.println(numeros.charAt(0)); } } OUTPUT: 1 Ejercicio Crear un programa que cuente las repeticiones de un car\u00e1cter en una cadena. Soluci\u00f3n Para el car\u00e1cter: 123456495678295768273465479, lo recorremos y usando el m\u00e9todo, lo comparamos con el car\u00e1cter en la posici\u00f3n i , aumentando el contador. package cl.lherrera.java001; public class Principal { public static void main(String[] args) { String str = \"123456495678295768273465479\"; // initialized the counter to 0 int contador = 0; for (int i = 0; i < str.length(); i++) { if (str.charAt(i) == '2') { // char == no .equals, en el fondo char es un unicode number. // incrementamos el n\u00famero a medida que hay ocurrencias. contador++; } } System.out.println(\"El 2, se repite \" + contador + \" veces en la cadena\"); } } boolean equals(Object obj): Permite evaluar si dos cadenas poseen los mismos caracteres.\u001c Ejemplo package cl.lherrera.java001; public class Principal { public static void main(String[] args) { boolean iguales = \"foo\".equals(\"foo\"); System.out.println(iguales); } } Output true Ejercicio: Comparar la igualdad entre las cadenas luis y LuiS. package cl.lherrera.java001; public class Principal { public static void main(String[] args) { String str1 = \"luis\"; String str2 = \"LuiS\"; System.out.println(\"Son iguales: \" + str1.equals(str2)); } } Output Son iguales: false boolean equalsIgnoreCase(String string): Compara si dos cadenas poseen los mismos caracteres, ignorando la diferencia entre may\u00fasculas y min\u00fasculas. Ejemplo package cl.lherrera.java001; public class Principal { public static void main(String[] args) { String str1 = \"luis\"; String str2 = \"LuiS\"; System.out.println(\"Son iguales: \" + str1.equalsIgnoreCase(str2)); } } Output Son iguales: true int compareTo(String string): Se puede usar para ordenar por orden alfab\u00e9tico ya que: == 0 si los Strings son iguales < 0 si el primero es menor > 0 mayor que, > 0 si es mayor. Compara el valor Unicode . Es decir, la diferencia num\u00e9rica entre estos. Ejemplo package cl.lherrera.java001; public class Principal { public static void main(String[] args) { String str1 = \"a\"; String str2 = \"b\"; String str3 = \"c\"; /** * resultado -1, ya que la distancia entre a y b en unicode es 1, pero como a * est\u00e1 primero, est\u00e1 una posici\u00f3n antes en unicode por eso es -1, en caso * contrario ser\u00eda 1. */ System.out.println(\"str1 compareTo str2: \" + str1.compareTo(str2)); } } Podemos tener tambi\u00e9n la diferencia de cantidad de caracteres. package cl.lherrera.java001; public class Principal { public static void main(String[] args) { String str1 = \"a\"; String str2 = \"abcd\"; /** * Podemos ver, que literalmente, str1 tiene -3 caracteres que la segunda * cadena. * * Tambi\u00e9n podemos ver que str2 posee 3 caracteres m\u00e1s que str1 */ System.out.println(\"str1 compareTo str2: \" + str1.compareTo(str2)); System.out.println(\"str2 compareTo str1: \" + str2.compareTo(str1)); } } Salida: str1 compareTo str2: -3 str2 compareTo str1: 3 Ejercicio: Determinar el largo de una cadena, utilizando compareTo() Soluci\u00f3n: Se compara con una cadena vac\u00eda, mostrando la cantidad de caracteres de diferencia, entre ambas cadenas, lo que finalmente representar\u00e1 el largo. Ejemplo package cl.lherrera.java001; public class Principal { public static void main(String[] args) { String cadena = \"123345\"; System.out.println(\"El largo de la cadena es: \" + cadena.compareTo(\"\")); } } int compareToIgnoreCase(String string): La misma aplicaci\u00f3n anterior, pero ignora may\u00fasculas y min\u00fasculas. boolean startsWith(String prefix, int offset): Chequea si una cadena comienza con... El offset indica desde donde comenzamos a medir, partiendo que 5, significa que se saltar\u00e1 cinco espacios antes de comenzar a medir. Ejemplo // tomado de interner, no merece m\u00e1s el ejemplo package cl.lherrera.java001; public class Principal { public static void main(String[] args) { // given string String s = \"This is just a sample string\"; // checking whether the given string starts with \"This\" System.out.println(s.startsWith(\"This\")); // checking whether the given string starts with \"is\" 5 offset apply. System.out.println(s.startsWith(\"is\", 5)); } } Output true true boolean startsWith(String prefix): Lo misma funci\u00f3n anterior; pero sin el offset . boolean endsWith(String suffix) Misma funcionalidad anterior, pero en el final de la cadena, sin offset . int indexOf(int ch): Retorna el \u00edndice de la primera ocurrencia de un char , que puede ser un String de un car\u00e1cter. En el ejemplo, se puede ver que es case-sensitive \u001c y que el \u00edndice comienza en cero. Ejemplo package cl.lherrera.java001; public class Principal { public static void main(String[] args) { String letras = \"abdffFF\"; System.out.println(letras.indexOf('F')); } } Output 5 int lastIndexOf(int ch): Retorna la \u00faltima ocurrencia de un car\u00e1cter dado. \u00cdndice comienza en cero. Ejemplo package cl.lherrera.java001; public class Principal { public static void main(String[] args) { String str = \"aabbccddeeffgghh\"; System.out.println(\"\u00daltima b, en: \" + str.lastIndexOf('b')); } } Output \u00daltima b, en: 3 int lastIndexOf(int ch, int fromIndex): Al igual que el anterior; pero este m\u00e9todo comienza a buscar hasta fromIndex En la primera b, dice que la encuentra en la posici\u00f3n 1, pero por que le dijimos que buscara hasta la posici\u00f3n 1, donde ta tenemos la primera B. Ambos \u00edndices comienzan en cero. Ejemplo package cl.lherrera.java001; public class Principal { public static void main(String[] args) { String letras = \"abcdefgb\"; System.out.println(letras.lastIndexOf('b', 1)); System.out.println(letras.lastIndexOf('b')); } } Output 1 7 String substring(int beginIndex, int endIndex): Extrae una sub-cadena, indicando el principio y el fin. El principio est\u00e1 incluido, comienza en cero. El final no se incluye, el que se incluye es el car\u00e1cter anterior, comienza en cero. Su versi\u00f3n con par\u00e1metro de inicio es String substring(int beginIndex) . Que solamente indica el inicio.\u001c Ejemplo package cl.lherrera.java001; public class Principal { public static void main(String[] args) { String letras = \"0123metro9\"; // desde la posici\u00f3n 4 hasta la 8 inclu\u00edda. System.out.println(letras.substring(4, 9)); } } Output metro String replace(char oldChar, char newChar): Dada una cadena, podemos reemplazar una secuencia de caracteres, por otra. Ejemplo package cl.lherrera.java001; public class Principal { public static void main(String[] args) { String letras = \"0123metro9\"; String reemplazado = letras .replace(\"0123\", \"\") .replace(\"9\", \"\"); System.out.println(reemplazado); } } Output metro String replaceAll(char oldChar, char newChar): Igual que el anterior, pero usa Regex - Expresiones regulares. Si no queremos reemplazar todas las ocurrencias, pero la primera, usamos replaceFirst() . Ejemplo package cl.lherrera.java001; public class Principal { public static void main(String[] args) { String letras = \"0123metro9\"; String reemplazado = letras.replaceAll(\"[0-9]\", \"\"); System.out.println(reemplazado); } } Output metro String[] split(String regex, int limit): Separa una cadena de caracteres y los transforma en una cadena Permite incluir un separador y un delimitador, si el delimitador, indica el tama\u00f1o en elementos, que tendr\u00e1 el arreglo resultante. Si se quiere solamente separar por el delimitador, con el total de elementos separados, se utiliza String[] split(String regex) , que es un equivalente al delimitador igual a cero. Veamos el comportamiento de este m\u00e9todo para comprender mejor su funcionamiento. Dependiendo el delimitador, podemos ver la cantidad de elementos del arreglo, siendo el 0 el que indica sin l\u00edmite. Ejemplo package cl.lherrera.java001; public class Principal { public static void main(String[] args) { String unidas = \"m,e,t,r,o\"; System.out.println(unidas); String[] separadas0 = unidas.split(\",\", 0); String[] separadas1 = unidas.split(\",\", 1); String[] separadas2 = unidas.split(\",\", 2); String[] separadas3 = unidas.split(\",\", 3); imprimeArreglo(\"separadas0\", separadas0); imprimeArreglo(\"separadas1\", separadas1); imprimeArreglo(\"separadas2\", separadas2); imprimeArreglo(\"separadas3\", separadas3); } private static void imprimeArreglo(String nombre, String[] arreglo) { System.out.println(\"\\n\" + nombre + \"\\n\"); for (int i = 0; i < arreglo.length; i++) System.out.println(\"Elemento[\" + i + \"] = \" + arreglo[i]); } } Output m,e,t,r,o separadas0 Elemento[0] = m Elemento[1] = e Elemento[2] = t Elemento[3] = r Elemento[4] = o separadas1 Elemento[0] = m,e,t,r,o separadas2 Elemento[0] = m Elemento[1] = e,t,r,o separadas3 Elemento[0] = m Elemento[1] = e Elemento[2] = t,r,o String trim() * Retorna una cadena de texto, que omite los espacios que existan antes y despu\u00e9s de la cadena. Ejemplo package cl.lherrera.java001; public class Principal { public static void main(String[] args) { String str = new String(\" casa 600 stgo. \"); System.out.println(\"String antes trim: [\" + str + \"] - fin\"); System.out.println(\"String despu\u00e9s trim: [\" + str.trim() + \"] - fin\"); } } Output String antes trim: [ casa 600 stgo. ] - fin String despu\u00e9s trim: [casa 600 stgo.] - fin Ejercicio propuesto crear un m\u00e9todo, que valide un inicio de sesi\u00f3n, comparando las entradas, suprimiendo espacios en blanco y diferencias entre may\u00fasculas y min\u00fasculas. Soluci\u00f3n package cl.lherrera.java001; import java.util.Scanner; public class Principal { private static final String USUARIO = \"lherrera\"; private static final String PASSWORD = \"1234\"; public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.println(\"Ingrese el nombre de usuario...\"); String usuario = sc.nextLine(); System.out.println(\"Ingrese su contrase\u00f1a...\"); String password = sc.nextLine(); if (credencialesOk(usuario, password)) System.out.println(\"Credenciales correctas, bienvenido al sistema App !!\"); else System.out.println(\"Credenciales inv\u00e1lidas...\"); } private static boolean credencialesOk(String usuario, String password) { boolean usuarioOk = usuario.trim().toLowerCase().equals(USUARIO.toLowerCase()); // Esta informaci\u00f3n ser\u00e1 exacta boolean passwordOk = password.equals(PASSWORD); return usuarioOk && passwordOk; } } M\u00e9todos est\u00e1ticos public static String format(String format, Object... args) Utilizado para dar formatos en las cadenas. Ejemplo package cl.lherrera.java001; public class Principal { public static void main(String[] args) { String str = \"just a string\"; //concatenating string using format String formattedString = String.format(\"My String is %s\", str); /*formatting the value passed and concatenating at the same time * %.6f is for having 6 digits in the fractional part */ String formattedString2 = String.format(\"My String is %.6f\",12.121); System.out.println(formattedString); System.out.println(formattedString2); } } Output My String is just a string My String is 12,121000 Se puede ver que se reemplaza %s , por una cadena y %.6f , define a un flotante de 6 d\u00edgitos decimales como resultado. Existen m\u00e1s formas de formatos, que deben ser profundizados; en una pr\u00f3xima iteraci\u00f3n. public static String join(): Convierte un arreglo de los toStrings() de los objetos que tengamos en ese arreglo, incluyendo el delimitador. Soluci\u00f3n package cl.lherrera.java001; /** * Output: M,E,T,R,O * * @author luisherrera * */ public class Principal { public static void main(String[] args) { String[] letras = {\"M\", \"E\", \"T\", \"R\", \"O\"}; System.out.println(String.join(\",\", letras)); } } Otras por definir ejemplos. String concat(String str): Concatena al final del String , como el +. boolean contains(CharSequence s): Verdadero o falso si CharSequence est\u00e1 o no presente en la cadena.\u001c String toUpperCase(): Retorna una cadena en may\u00fasculas de la instancia. String toUpperCase(): Retorna una cadena en min\u00fasculas de la instancia. public boolean isEmpty(): Lo mismo que decir str.lenght() == 0 ; pero m\u00e1s directo.\u001c int length(): Retorna el largo de una cadena.\u001c byte[] getBytes(): Mostrado por que se usa para t\u00e9cnicas de cifrado y transporte, adem\u00e1s de escritura de archivos, lo que hace, es simplemente obtener los bytes de una cadena de caracteres.\u001c boolean matches(String regex) : Usado para reconocer secuencias de texto, como identificar fechas en una web. Reconoce si un patr\u00f3n de una expresi\u00f3n regular. Ejemplos sueltos por organizar package cl.lherrera.java001; public class Principal { public static void main(String[] args) { // crea una nueva instancia en el Heap String str1= new String(\"Hello\"); // todo lo dem\u00e1s en el String pool // Usando String.format String saludoFormat = String.format(\"Hola %s\", \"Luis\"); System.out.println(saludoFormat); // usando el constructor de cadenas StringBuilder saludoBuilder = new StringBuilder(\"Hola\"); saludoBuilder.append(\" \"); saludoBuilder.append(\"Luis\"); System.out.println(saludoBuilder); // ejecutado el toString // usando una concatenaci\u00f3n simple (La opci\u00f3n si no tenemos que concatenar // mucho) String simpleUno= \"Hola Luis\"; System.out.println(simpleUno); String simpleDos = \"hola\"; System.out.println(simpleDos + \" \" + \"Luis\"); } } package cl.lherrera.java001; import java.util.Arrays; import java.util.List; public class Principal { public static void main(String[] args) { String numeros = \"12345\"; String numerosCVS = \"1,2,3,4,5\"; // largo de la cadena String largo = \"El largo es: \" + numeros.length(); System.out.println(largo); // Comparando cadenas boolean sonIguales = numeros.equals(numerosCVS); System.out.println(\"Cadenas iguales: \" + sonIguales); // Reemplazo de valores String numerosCVSModifiicado = numerosCVS.replace(\",\", \"\"); boolean sonIgualesReplace = numeros.equals(numerosCVSModifiicado); System.out.println(\"Cadenas iguales: \" + sonIgualesReplace); // Convertir a una arreglo String[] arreglo = numerosCVS.split(\",\"); // lo transformamos a una lista para usar el // toString(), de este tipo e imprimimos // el contenido. List<String> lista = Arrays.asList(arreglo); System.out.println(\"Los n\u00fameros son: \" + lista); // obtener una sub cadena } }","title":"Cadenas"},{"location":"ejercicios/repaso/teoria/cadenas/#strings","text":"En este documento, ir\u00e1 toda la informaci\u00f3n que pueda documentar de las cadenas de texto en java. El objetivo es que pueda servir de consulta r\u00e1pida en caso de necesitar sustento en explicaci\u00f3n de funcionamiento. Este documento no se considerar\u00e1 completo, a menos que se cierre y se indique su versi\u00f3n.","title":"Strings"},{"location":"ejercicios/repaso/teoria/cadenas/#metodos-de-una-instancia","text":"Que sean de una instancia, quiere decir que, estos m\u00e9todos se aplican a una instancia de new String(\"foo\") o \"foo\" . Es decir que los m\u00e9todos no son est\u00e1ticos.","title":"M\u00e9todos: de una instancia"},{"location":"ejercicios/repaso/teoria/cadenas/#char-charatint-index","text":"Retorna el car\u00e1cter del \u00edndice dado, comenzando en cero. package cl.lherrera.java001; public class Principal { public static void main(String[] args) { String numeros = \"12345\"; System.out.println(numeros.charAt(0)); } } OUTPUT: 1 Ejercicio Crear un programa que cuente las repeticiones de un car\u00e1cter en una cadena. Soluci\u00f3n Para el car\u00e1cter: 123456495678295768273465479, lo recorremos y usando el m\u00e9todo, lo comparamos con el car\u00e1cter en la posici\u00f3n i , aumentando el contador. package cl.lherrera.java001; public class Principal { public static void main(String[] args) { String str = \"123456495678295768273465479\"; // initialized the counter to 0 int contador = 0; for (int i = 0; i < str.length(); i++) { if (str.charAt(i) == '2') { // char == no .equals, en el fondo char es un unicode number. // incrementamos el n\u00famero a medida que hay ocurrencias. contador++; } } System.out.println(\"El 2, se repite \" + contador + \" veces en la cadena\"); } }","title":"char charAt(int index):"},{"location":"ejercicios/repaso/teoria/cadenas/#boolean-equalsobject-obj","text":"Permite evaluar si dos cadenas poseen los mismos caracteres.\u001c Ejemplo package cl.lherrera.java001; public class Principal { public static void main(String[] args) { boolean iguales = \"foo\".equals(\"foo\"); System.out.println(iguales); } } Output true Ejercicio: Comparar la igualdad entre las cadenas luis y LuiS. package cl.lherrera.java001; public class Principal { public static void main(String[] args) { String str1 = \"luis\"; String str2 = \"LuiS\"; System.out.println(\"Son iguales: \" + str1.equals(str2)); } } Output Son iguales: false","title":"boolean equals(Object obj):"},{"location":"ejercicios/repaso/teoria/cadenas/#boolean-equalsignorecasestring-string","text":"Compara si dos cadenas poseen los mismos caracteres, ignorando la diferencia entre may\u00fasculas y min\u00fasculas. Ejemplo package cl.lherrera.java001; public class Principal { public static void main(String[] args) { String str1 = \"luis\"; String str2 = \"LuiS\"; System.out.println(\"Son iguales: \" + str1.equalsIgnoreCase(str2)); } } Output Son iguales: true","title":"boolean equalsIgnoreCase(String string):"},{"location":"ejercicios/repaso/teoria/cadenas/#int-comparetostring-string","text":"Se puede usar para ordenar por orden alfab\u00e9tico ya que: == 0 si los Strings son iguales < 0 si el primero es menor > 0 mayor que, > 0 si es mayor. Compara el valor Unicode . Es decir, la diferencia num\u00e9rica entre estos. Ejemplo package cl.lherrera.java001; public class Principal { public static void main(String[] args) { String str1 = \"a\"; String str2 = \"b\"; String str3 = \"c\"; /** * resultado -1, ya que la distancia entre a y b en unicode es 1, pero como a * est\u00e1 primero, est\u00e1 una posici\u00f3n antes en unicode por eso es -1, en caso * contrario ser\u00eda 1. */ System.out.println(\"str1 compareTo str2: \" + str1.compareTo(str2)); } } Podemos tener tambi\u00e9n la diferencia de cantidad de caracteres. package cl.lherrera.java001; public class Principal { public static void main(String[] args) { String str1 = \"a\"; String str2 = \"abcd\"; /** * Podemos ver, que literalmente, str1 tiene -3 caracteres que la segunda * cadena. * * Tambi\u00e9n podemos ver que str2 posee 3 caracteres m\u00e1s que str1 */ System.out.println(\"str1 compareTo str2: \" + str1.compareTo(str2)); System.out.println(\"str2 compareTo str1: \" + str2.compareTo(str1)); } } Salida: str1 compareTo str2: -3 str2 compareTo str1: 3 Ejercicio: Determinar el largo de una cadena, utilizando compareTo() Soluci\u00f3n: Se compara con una cadena vac\u00eda, mostrando la cantidad de caracteres de diferencia, entre ambas cadenas, lo que finalmente representar\u00e1 el largo. Ejemplo package cl.lherrera.java001; public class Principal { public static void main(String[] args) { String cadena = \"123345\"; System.out.println(\"El largo de la cadena es: \" + cadena.compareTo(\"\")); } }","title":"int compareTo(String string):"},{"location":"ejercicios/repaso/teoria/cadenas/#int-comparetoignorecasestring-string","text":"La misma aplicaci\u00f3n anterior, pero ignora may\u00fasculas y min\u00fasculas.","title":"int compareToIgnoreCase(String string):"},{"location":"ejercicios/repaso/teoria/cadenas/#boolean-startswithstring-prefix-int-offset","text":"Chequea si una cadena comienza con... El offset indica desde donde comenzamos a medir, partiendo que 5, significa que se saltar\u00e1 cinco espacios antes de comenzar a medir. Ejemplo // tomado de interner, no merece m\u00e1s el ejemplo package cl.lherrera.java001; public class Principal { public static void main(String[] args) { // given string String s = \"This is just a sample string\"; // checking whether the given string starts with \"This\" System.out.println(s.startsWith(\"This\")); // checking whether the given string starts with \"is\" 5 offset apply. System.out.println(s.startsWith(\"is\", 5)); } } Output true true","title":"boolean startsWith(String prefix, int offset):"},{"location":"ejercicios/repaso/teoria/cadenas/#boolean-startswithstring-prefix","text":"Lo misma funci\u00f3n anterior; pero sin el offset .","title":"boolean startsWith(String prefix):"},{"location":"ejercicios/repaso/teoria/cadenas/#boolean-endswithstring-suffix","text":"Misma funcionalidad anterior, pero en el final de la cadena, sin offset .","title":"boolean endsWith(String suffix)"},{"location":"ejercicios/repaso/teoria/cadenas/#int-indexofint-ch","text":"Retorna el \u00edndice de la primera ocurrencia de un char , que puede ser un String de un car\u00e1cter. En el ejemplo, se puede ver que es case-sensitive \u001c y que el \u00edndice comienza en cero. Ejemplo package cl.lherrera.java001; public class Principal { public static void main(String[] args) { String letras = \"abdffFF\"; System.out.println(letras.indexOf('F')); } } Output 5","title":"int indexOf(int ch):"},{"location":"ejercicios/repaso/teoria/cadenas/#int-lastindexofint-ch","text":"Retorna la \u00faltima ocurrencia de un car\u00e1cter dado. \u00cdndice comienza en cero. Ejemplo package cl.lherrera.java001; public class Principal { public static void main(String[] args) { String str = \"aabbccddeeffgghh\"; System.out.println(\"\u00daltima b, en: \" + str.lastIndexOf('b')); } } Output \u00daltima b, en: 3","title":"int lastIndexOf(int ch):"},{"location":"ejercicios/repaso/teoria/cadenas/#int-lastindexofint-ch-int-fromindex","text":"Al igual que el anterior; pero este m\u00e9todo comienza a buscar hasta fromIndex En la primera b, dice que la encuentra en la posici\u00f3n 1, pero por que le dijimos que buscara hasta la posici\u00f3n 1, donde ta tenemos la primera B. Ambos \u00edndices comienzan en cero. Ejemplo package cl.lherrera.java001; public class Principal { public static void main(String[] args) { String letras = \"abcdefgb\"; System.out.println(letras.lastIndexOf('b', 1)); System.out.println(letras.lastIndexOf('b')); } } Output 1 7","title":"int lastIndexOf(int ch, int fromIndex):"},{"location":"ejercicios/repaso/teoria/cadenas/#string-substringint-beginindex-int-endindex","text":"Extrae una sub-cadena, indicando el principio y el fin. El principio est\u00e1 incluido, comienza en cero. El final no se incluye, el que se incluye es el car\u00e1cter anterior, comienza en cero. Su versi\u00f3n con par\u00e1metro de inicio es String substring(int beginIndex) . Que solamente indica el inicio.\u001c Ejemplo package cl.lherrera.java001; public class Principal { public static void main(String[] args) { String letras = \"0123metro9\"; // desde la posici\u00f3n 4 hasta la 8 inclu\u00edda. System.out.println(letras.substring(4, 9)); } } Output metro","title":"String substring(int beginIndex, int endIndex):"},{"location":"ejercicios/repaso/teoria/cadenas/#string-replacechar-oldchar-char-newchar","text":"Dada una cadena, podemos reemplazar una secuencia de caracteres, por otra. Ejemplo package cl.lherrera.java001; public class Principal { public static void main(String[] args) { String letras = \"0123metro9\"; String reemplazado = letras .replace(\"0123\", \"\") .replace(\"9\", \"\"); System.out.println(reemplazado); } } Output metro","title":"String replace(char oldChar, char newChar):"},{"location":"ejercicios/repaso/teoria/cadenas/#string-replaceallchar-oldchar-char-newchar","text":"Igual que el anterior, pero usa Regex - Expresiones regulares. Si no queremos reemplazar todas las ocurrencias, pero la primera, usamos replaceFirst() . Ejemplo package cl.lherrera.java001; public class Principal { public static void main(String[] args) { String letras = \"0123metro9\"; String reemplazado = letras.replaceAll(\"[0-9]\", \"\"); System.out.println(reemplazado); } } Output metro","title":"String replaceAll(char oldChar, char newChar):"},{"location":"ejercicios/repaso/teoria/cadenas/#string-splitstring-regex-int-limit","text":"Separa una cadena de caracteres y los transforma en una cadena Permite incluir un separador y un delimitador, si el delimitador, indica el tama\u00f1o en elementos, que tendr\u00e1 el arreglo resultante. Si se quiere solamente separar por el delimitador, con el total de elementos separados, se utiliza String[] split(String regex) , que es un equivalente al delimitador igual a cero. Veamos el comportamiento de este m\u00e9todo para comprender mejor su funcionamiento. Dependiendo el delimitador, podemos ver la cantidad de elementos del arreglo, siendo el 0 el que indica sin l\u00edmite. Ejemplo package cl.lherrera.java001; public class Principal { public static void main(String[] args) { String unidas = \"m,e,t,r,o\"; System.out.println(unidas); String[] separadas0 = unidas.split(\",\", 0); String[] separadas1 = unidas.split(\",\", 1); String[] separadas2 = unidas.split(\",\", 2); String[] separadas3 = unidas.split(\",\", 3); imprimeArreglo(\"separadas0\", separadas0); imprimeArreglo(\"separadas1\", separadas1); imprimeArreglo(\"separadas2\", separadas2); imprimeArreglo(\"separadas3\", separadas3); } private static void imprimeArreglo(String nombre, String[] arreglo) { System.out.println(\"\\n\" + nombre + \"\\n\"); for (int i = 0; i < arreglo.length; i++) System.out.println(\"Elemento[\" + i + \"] = \" + arreglo[i]); } } Output m,e,t,r,o separadas0 Elemento[0] = m Elemento[1] = e Elemento[2] = t Elemento[3] = r Elemento[4] = o separadas1 Elemento[0] = m,e,t,r,o separadas2 Elemento[0] = m Elemento[1] = e,t,r,o separadas3 Elemento[0] = m Elemento[1] = e Elemento[2] = t,r,o","title":"String[] split(String regex, int limit):"},{"location":"ejercicios/repaso/teoria/cadenas/#string-trim","text":"Retorna una cadena de texto, que omite los espacios que existan antes y despu\u00e9s de la cadena. Ejemplo package cl.lherrera.java001; public class Principal { public static void main(String[] args) { String str = new String(\" casa 600 stgo. \"); System.out.println(\"String antes trim: [\" + str + \"] - fin\"); System.out.println(\"String despu\u00e9s trim: [\" + str.trim() + \"] - fin\"); } } Output String antes trim: [ casa 600 stgo. ] - fin String despu\u00e9s trim: [casa 600 stgo.] - fin Ejercicio propuesto crear un m\u00e9todo, que valide un inicio de sesi\u00f3n, comparando las entradas, suprimiendo espacios en blanco y diferencias entre may\u00fasculas y min\u00fasculas. Soluci\u00f3n package cl.lherrera.java001; import java.util.Scanner; public class Principal { private static final String USUARIO = \"lherrera\"; private static final String PASSWORD = \"1234\"; public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.println(\"Ingrese el nombre de usuario...\"); String usuario = sc.nextLine(); System.out.println(\"Ingrese su contrase\u00f1a...\"); String password = sc.nextLine(); if (credencialesOk(usuario, password)) System.out.println(\"Credenciales correctas, bienvenido al sistema App !!\"); else System.out.println(\"Credenciales inv\u00e1lidas...\"); } private static boolean credencialesOk(String usuario, String password) { boolean usuarioOk = usuario.trim().toLowerCase().equals(USUARIO.toLowerCase()); // Esta informaci\u00f3n ser\u00e1 exacta boolean passwordOk = password.equals(PASSWORD); return usuarioOk && passwordOk; } }","title":"String trim()*"},{"location":"ejercicios/repaso/teoria/cadenas/#metodos-estaticos","text":"","title":"M\u00e9todos est\u00e1ticos"},{"location":"ejercicios/repaso/teoria/cadenas/#public-static-string-formatstring-format-object-args","text":"Utilizado para dar formatos en las cadenas. Ejemplo package cl.lherrera.java001; public class Principal { public static void main(String[] args) { String str = \"just a string\"; //concatenating string using format String formattedString = String.format(\"My String is %s\", str); /*formatting the value passed and concatenating at the same time * %.6f is for having 6 digits in the fractional part */ String formattedString2 = String.format(\"My String is %.6f\",12.121); System.out.println(formattedString); System.out.println(formattedString2); } } Output My String is just a string My String is 12,121000 Se puede ver que se reemplaza %s , por una cadena y %.6f , define a un flotante de 6 d\u00edgitos decimales como resultado. Existen m\u00e1s formas de formatos, que deben ser profundizados; en una pr\u00f3xima iteraci\u00f3n.","title":"public static String format(String format, Object... args)"},{"location":"ejercicios/repaso/teoria/cadenas/#public-static-string-join","text":"Convierte un arreglo de los toStrings() de los objetos que tengamos en ese arreglo, incluyendo el delimitador. Soluci\u00f3n package cl.lherrera.java001; /** * Output: M,E,T,R,O * * @author luisherrera * */ public class Principal { public static void main(String[] args) { String[] letras = {\"M\", \"E\", \"T\", \"R\", \"O\"}; System.out.println(String.join(\",\", letras)); } }","title":"public static String join():"},{"location":"ejercicios/repaso/teoria/cadenas/#otras-por-definir-ejemplos","text":"String concat(String str): Concatena al final del String , como el +. boolean contains(CharSequence s): Verdadero o falso si CharSequence est\u00e1 o no presente en la cadena.\u001c String toUpperCase(): Retorna una cadena en may\u00fasculas de la instancia. String toUpperCase(): Retorna una cadena en min\u00fasculas de la instancia. public boolean isEmpty(): Lo mismo que decir str.lenght() == 0 ; pero m\u00e1s directo.\u001c int length(): Retorna el largo de una cadena.\u001c byte[] getBytes(): Mostrado por que se usa para t\u00e9cnicas de cifrado y transporte, adem\u00e1s de escritura de archivos, lo que hace, es simplemente obtener los bytes de una cadena de caracteres.\u001c boolean matches(String regex) : Usado para reconocer secuencias de texto, como identificar fechas en una web. Reconoce si un patr\u00f3n de una expresi\u00f3n regular.","title":"Otras por definir ejemplos."},{"location":"ejercicios/repaso/teoria/cadenas/#ejemplos-sueltos-por-organizar","text":"package cl.lherrera.java001; public class Principal { public static void main(String[] args) { // crea una nueva instancia en el Heap String str1= new String(\"Hello\"); // todo lo dem\u00e1s en el String pool // Usando String.format String saludoFormat = String.format(\"Hola %s\", \"Luis\"); System.out.println(saludoFormat); // usando el constructor de cadenas StringBuilder saludoBuilder = new StringBuilder(\"Hola\"); saludoBuilder.append(\" \"); saludoBuilder.append(\"Luis\"); System.out.println(saludoBuilder); // ejecutado el toString // usando una concatenaci\u00f3n simple (La opci\u00f3n si no tenemos que concatenar // mucho) String simpleUno= \"Hola Luis\"; System.out.println(simpleUno); String simpleDos = \"hola\"; System.out.println(simpleDos + \" \" + \"Luis\"); } } package cl.lherrera.java001; import java.util.Arrays; import java.util.List; public class Principal { public static void main(String[] args) { String numeros = \"12345\"; String numerosCVS = \"1,2,3,4,5\"; // largo de la cadena String largo = \"El largo es: \" + numeros.length(); System.out.println(largo); // Comparando cadenas boolean sonIguales = numeros.equals(numerosCVS); System.out.println(\"Cadenas iguales: \" + sonIguales); // Reemplazo de valores String numerosCVSModifiicado = numerosCVS.replace(\",\", \"\"); boolean sonIgualesReplace = numeros.equals(numerosCVSModifiicado); System.out.println(\"Cadenas iguales: \" + sonIgualesReplace); // Convertir a una arreglo String[] arreglo = numerosCVS.split(\",\"); // lo transformamos a una lista para usar el // toString(), de este tipo e imprimimos // el contenido. List<String> lista = Arrays.asList(arreglo); System.out.println(\"Los n\u00fameros son: \" + lista); // obtener una sub cadena } }","title":"Ejemplos sueltos por organizar"},{"location":"ejercicios/repaso/teoria/ciclos/","text":"Ciclos Un bucle o ciclo (loop): Es un proceso, sistema o estructura circular, la cual termina donde comienza y viceversa. Revisaremos tres tipos de ciclos en java: El ciclo for. El ciclo while. El ciclo do while. CICLO FOR El ciclo for se compone de tres secciones: La primera secci\u00f3n se ejecuta solamente cuando el ciclo entra por primera vez. La segunda secci\u00f3n es \"el guardi\u00e1n de la puerta\", si devuelve true, ejecutamos las instrucciones en el bucle, si devuelve false, salimos del bucle. Se ejecuta justo despu\u00e9s de la primera secci\u00f3n por primera vez, luego cada vez que se completa el ciclo y se ejecuta la tercera secci\u00f3n. La tercera secci\u00f3n es la declaraci\u00f3n final que se ejecutar\u00e1 cada vez que se ejecute el bucle. Es donde se incrementa o decrementa el valor declarado en la primera secci\u00f3n. for (desde; condici\u00f3n de salida; incremento) { bloque de c\u00f3digo } for (int i = 0; i < 3; i++) {} FUNCIONAMIENTO \u2699\ufe0f for (int i = 0; i < 3; i++) { // dentro del loop } // veamos que es lo que pasa. int i = 0; i < 3 // 0 < 3 = true // dentro del loop i++ // i es ahora 1 i < 3 // 1 < 3 = true // dentro del loop i++ // i es ahora 2 i < 3 // 2 < 3 = true // dentro del loop i++ // i es ahora 3 i < 3 // 3 < 3 = false // bucle finalizado... __ EJEMPLO: . Escribir una aplicaci\u00f3n en java, que imprima los pares e impares en dos listas, dado un entero positivo entregado por el usuario. package ejemplos; import java.util.Scanner; public class Ejemplo { // M\u00e9todo principal public static void main(String[] args ) { Scanner leer = new Scanner(System.in); System.out.println(\"Ingrece un n\u00famero\"); int numero = leer.nextInt(); String lista_par = \"[\"; String lista_impar = \"[\"; for(int i = 0; i < numero; i++){ if(i % 2 == 0){ lista_par += \" \" + Integer.toString(i); }else{ lista_impar += \" \" + Integer.toString(i); } } lista_par += \" ]\"; lista_impar += \" ]\"; System.out.println(lista_par); System.out.println(lista_impar); } } CICLO WHILE La condici\u00f3n se ejecutar\u00e1 por primera vez al ingresar y cada vez que se realice el ciclo. Si devuelve falso, el bucle no se ejecutar\u00e1. while (condici\u00f3n de salida) { bloque de c\u00f3digo } while (salir == true) {} EJEMPLO : Listas pares e impares.__ Escribir una aplicaci\u00f3n en java, que imprima los pares e impares en dos listas, dado un entero positivo entregado por el usuario. package ejemplos; import java.util.Scanner; public class Ejemplo { // M\u00e9todo principal public static void main(String[] args ) { Scanner leer = new Scanner(System.in); System.out.println(\"Ingrece un n\u00famero\"); int numero = leer.nextInt(); String lista_par = \"[\"; String lista_impar = \"[\"; int contador = 0; while(contador < numero){ if(contador % 2 == 0){ lista_par += \" \" + Integer.toString(contador); }else{ lista_impar += \" \" + Integer.toString(contador); } contador++; } lista_par += \" ]\"; lista_impar += \" ]\"; System.out.println(lista_par); System.out.println(lista_impar); } } CICLO DO WHILE El ciclo while ejecutar\u00e1 su bloque al menos una vez, para luego comprobar si la condici\u00f3n de salida se cumple, si no se cumple, el ciclo se termina. do { // todo el bloque de c\u00f3digo ac\u00e1. } while(condition); EJEMPLO: Escribir una aplicaci\u00f3n en java que simule un inicio de sesi\u00f3n. Bienvenido al sistema Ingrese su usuario dsfd Ingrese su contrase\u00f1a sdfsd Credenciales inv\u00e1lidas Ingrese su usuario lherrera Ingrese su contrase\u00f1a 1234 Credenciales OK! package cl.lherrera.primero; import java.util.Scanner; public class Principal { public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.println(\"Bienvenido al sistema\"); boolean autenticado = false; String usuario = \"lherrera\"; String contrasenia = \"1234\"; String usuarioIngresado = \"\"; String contraseniaIngresada = \"\"; do { System.out.println(\"Ingrese su usuario\"); usuarioIngresado = sc.nextLine(); System.out.println(\"Ingrese su contrase\u00f1a\"); contraseniaIngresada = sc.nextLine(); boolean usuarioOk = usuarioIngresado.equals(usuario); boolean contraseniaOk = contraseniaIngresada.equals(contrasenia); if (usuarioOk && contraseniaOk) { autenticado = true; } else { System.out.println(\"Credenciales inv\u00e1lidas\\n\\n\"); } } while (!autenticado); System.out.println(\"Credenciales OK!\"); } } BREAK && CONTINUE Estas dos palabras clave nos ayudan a controlar el bucle desde dentro. BREAK; HAR\u00c1 QUE EL BUCLE SE DETENGA E IR\u00c1 INMEDIATAMENTE A LA SIGUIENTE DECLARACI\u00d3N DESPU\u00c9S DEL BUCLE: int i; for (i = 0; i < 5; i++) { if (i >= 2) { break; } System.out.println(\"Entr\u00f3\"); } System.out.println(i); // Output: // Entr\u00f3 // Entr\u00f3 // 2 CONTINUE; DETENDR\u00c1 LA ITERACI\u00d3N ACTUAL Y SE MOVER\u00c1 A LA SIGUIENTE. TENGA EN CUENTA QUE DENTRO DE UN BUCLE FOR, TODAV\u00cdA SE EJECUTAR\u00c1 LA TERCERA SECCI\u00d3N(I++). int i; for (i = 0; i < 5; i++) { if (i >= 3) { break; } System.out.println(\"Antes para i = \" + i); if (i >= 1) { continue; } System.out.println(\"Desp\u00e9s para i = \" + i); } System.out.println(i); /* output: Antes para i = 0 Desp\u00e9s para i = 0 Antes para i = 1 Antes para i = 2 3 */","title":"Ciclos"},{"location":"ejercicios/repaso/teoria/ciclos/#ciclos","text":"Un bucle o ciclo (loop): Es un proceso, sistema o estructura circular, la cual termina donde comienza y viceversa. Revisaremos tres tipos de ciclos en java: El ciclo for. El ciclo while. El ciclo do while.","title":"Ciclos"},{"location":"ejercicios/repaso/teoria/ciclos/#ciclo-for","text":"El ciclo for se compone de tres secciones: La primera secci\u00f3n se ejecuta solamente cuando el ciclo entra por primera vez. La segunda secci\u00f3n es \"el guardi\u00e1n de la puerta\", si devuelve true, ejecutamos las instrucciones en el bucle, si devuelve false, salimos del bucle. Se ejecuta justo despu\u00e9s de la primera secci\u00f3n por primera vez, luego cada vez que se completa el ciclo y se ejecuta la tercera secci\u00f3n. La tercera secci\u00f3n es la declaraci\u00f3n final que se ejecutar\u00e1 cada vez que se ejecute el bucle. Es donde se incrementa o decrementa el valor declarado en la primera secci\u00f3n. for (desde; condici\u00f3n de salida; incremento) { bloque de c\u00f3digo } for (int i = 0; i < 3; i++) {}","title":"CICLO FOR"},{"location":"ejercicios/repaso/teoria/ciclos/#funcionamiento","text":"for (int i = 0; i < 3; i++) { // dentro del loop } // veamos que es lo que pasa. int i = 0; i < 3 // 0 < 3 = true // dentro del loop i++ // i es ahora 1 i < 3 // 1 < 3 = true // dentro del loop i++ // i es ahora 2 i < 3 // 2 < 3 = true // dentro del loop i++ // i es ahora 3 i < 3 // 3 < 3 = false // bucle finalizado...","title":"FUNCIONAMIENTO \u2699\ufe0f"},{"location":"ejercicios/repaso/teoria/ciclos/#__ejemplo","text":"Escribir una aplicaci\u00f3n en java, que imprima los pares e impares en dos listas, dado un entero positivo entregado por el usuario. package ejemplos; import java.util.Scanner; public class Ejemplo { // M\u00e9todo principal public static void main(String[] args ) { Scanner leer = new Scanner(System.in); System.out.println(\"Ingrece un n\u00famero\"); int numero = leer.nextInt(); String lista_par = \"[\"; String lista_impar = \"[\"; for(int i = 0; i < numero; i++){ if(i % 2 == 0){ lista_par += \" \" + Integer.toString(i); }else{ lista_impar += \" \" + Integer.toString(i); } } lista_par += \" ]\"; lista_impar += \" ]\"; System.out.println(lista_par); System.out.println(lista_impar); } }","title":"__EJEMPLO:."},{"location":"ejercicios/repaso/teoria/ciclos/#ciclo-while","text":"La condici\u00f3n se ejecutar\u00e1 por primera vez al ingresar y cada vez que se realice el ciclo. Si devuelve falso, el bucle no se ejecutar\u00e1. while (condici\u00f3n de salida) { bloque de c\u00f3digo } while (salir == true) {}","title":"CICLO WHILE"},{"location":"ejercicios/repaso/teoria/ciclos/#ejemplo-listas-pares-e-impares__","text":"Escribir una aplicaci\u00f3n en java, que imprima los pares e impares en dos listas, dado un entero positivo entregado por el usuario. package ejemplos; import java.util.Scanner; public class Ejemplo { // M\u00e9todo principal public static void main(String[] args ) { Scanner leer = new Scanner(System.in); System.out.println(\"Ingrece un n\u00famero\"); int numero = leer.nextInt(); String lista_par = \"[\"; String lista_impar = \"[\"; int contador = 0; while(contador < numero){ if(contador % 2 == 0){ lista_par += \" \" + Integer.toString(contador); }else{ lista_impar += \" \" + Integer.toString(contador); } contador++; } lista_par += \" ]\"; lista_impar += \" ]\"; System.out.println(lista_par); System.out.println(lista_impar); } }","title":"EJEMPLO: Listas pares e impares.__"},{"location":"ejercicios/repaso/teoria/ciclos/#ciclo-do-while","text":"El ciclo while ejecutar\u00e1 su bloque al menos una vez, para luego comprobar si la condici\u00f3n de salida se cumple, si no se cumple, el ciclo se termina. do { // todo el bloque de c\u00f3digo ac\u00e1. } while(condition);","title":"CICLO DO WHILE"},{"location":"ejercicios/repaso/teoria/ciclos/#ejemplo","text":"Escribir una aplicaci\u00f3n en java que simule un inicio de sesi\u00f3n. Bienvenido al sistema Ingrese su usuario dsfd Ingrese su contrase\u00f1a sdfsd Credenciales inv\u00e1lidas Ingrese su usuario lherrera Ingrese su contrase\u00f1a 1234 Credenciales OK! package cl.lherrera.primero; import java.util.Scanner; public class Principal { public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.println(\"Bienvenido al sistema\"); boolean autenticado = false; String usuario = \"lherrera\"; String contrasenia = \"1234\"; String usuarioIngresado = \"\"; String contraseniaIngresada = \"\"; do { System.out.println(\"Ingrese su usuario\"); usuarioIngresado = sc.nextLine(); System.out.println(\"Ingrese su contrase\u00f1a\"); contraseniaIngresada = sc.nextLine(); boolean usuarioOk = usuarioIngresado.equals(usuario); boolean contraseniaOk = contraseniaIngresada.equals(contrasenia); if (usuarioOk && contraseniaOk) { autenticado = true; } else { System.out.println(\"Credenciales inv\u00e1lidas\\n\\n\"); } } while (!autenticado); System.out.println(\"Credenciales OK!\"); } }","title":"EJEMPLO:"},{"location":"ejercicios/repaso/teoria/ciclos/#break-continue","text":"Estas dos palabras clave nos ayudan a controlar el bucle desde dentro. BREAK; HAR\u00c1 QUE EL BUCLE SE DETENGA E IR\u00c1 INMEDIATAMENTE A LA SIGUIENTE DECLARACI\u00d3N DESPU\u00c9S DEL BUCLE: int i; for (i = 0; i < 5; i++) { if (i >= 2) { break; } System.out.println(\"Entr\u00f3\"); } System.out.println(i); // Output: // Entr\u00f3 // Entr\u00f3 // 2 CONTINUE; DETENDR\u00c1 LA ITERACI\u00d3N ACTUAL Y SE MOVER\u00c1 A LA SIGUIENTE. TENGA EN CUENTA QUE DENTRO DE UN BUCLE FOR, TODAV\u00cdA SE EJECUTAR\u00c1 LA TERCERA SECCI\u00d3N(I++). int i; for (i = 0; i < 5; i++) { if (i >= 3) { break; } System.out.println(\"Antes para i = \" + i); if (i >= 1) { continue; } System.out.println(\"Desp\u00e9s para i = \" + i); } System.out.println(i); /* output: Antes para i = 0 Desp\u00e9s para i = 0 Antes para i = 1 Antes para i = 2 3 */","title":"BREAK &amp;&amp; CONTINUE"},{"location":"ejercicios/repaso/teoria/comentarios/","text":"Comentarios Los comentarios no son considerados en la compilaci\u00f3n. /** * comentarios de la clase o paquete como el author. */ package cl.lherrera.java001; public class Principal { /** * Comentarios para Javadocs * @param args */ public static void main(String[] args) { // comentario /** * Cmentario en varias * l\u00edneas... */ System.out.println(\"Hola mundo !!!\"); } }","title":"Comentarios"},{"location":"ejercicios/repaso/teoria/comentarios/#comentarios","text":"Los comentarios no son considerados en la compilaci\u00f3n. /** * comentarios de la clase o paquete como el author. */ package cl.lherrera.java001; public class Principal { /** * Comentarios para Javadocs * @param args */ public static void main(String[] args) { // comentario /** * Cmentario en varias * l\u00edneas... */ System.out.println(\"Hola mundo !!!\"); } }","title":"Comentarios"},{"location":"ejercicios/repaso/teoria/condicionales%20copy/","text":"Condicionales Manejo de condicionales en java, basado en el material del curso de los 1000 programadores para Chile. --- Ramificaci\u00f3n condicional En Java, una prueba if es b\u00e1sicamente la misma que la prueba booleana en un ciclo while, excepto que en lugar de decir \"mientras todav\u00eda hay cerveza ...\", dir\u00e1, \"si todav\u00eda hay cerveza ...\" package cl.lherrera.java002; public class Principal { public static void main(String[] args) { int x = 3; if (x == 3) { System.out.println(\"x debe ser 3\"); } System.out.println(\"Esto se ejecuta, sin importar el valor de x\"); } } Podemos agregar otra cosa (else) , para que podamos decir algo como: \"Si todav\u00eda hay cerveza, siga codificando, de lo contrario (else) obtenga m\u00e1s cerveza y luego contin\u00fae ...\" package cl.lherrera.java002; public class Principal { public static void main(String[] args) { int x = 3; if (x == 3) { System.out.println(\"x debe ser 3\"); }else { System.out.println(\"x no es 3\"); } System.out.println(\"Esto se ejecuta, sin importar el valor de x\"); } } --- Operadores booleanos int a = 4; int b = 5; boolean result; result = a < b; // true result = a > b; // false result = a <= 4; // true result = b >= 6; // false result = a == b; // false result = a != b; // true result = a > b || a < b; // true result = 3 < a && a < 6; // true result = !result; // false // Algunas cosas de la clase String: String a = new String(\"Wow\"); String b = new String(\"Wow\"); String sameA = a; boolean r1 = a == b; // Falso, ya que a y b no son el mismo objeto. boolean r2 = a.equals(b); // Verdadero, Utilizamos el m\u00e9todo de la clase string para comparar. boolean r3 = a == sameA; // Verdadero, ya que a y sameA son el mismo objeto. Condicional if // Sentencia simple. if (var_1 == var_2) { // Si var_1 es igual a var_2, hagamos algo genial!! \ud83d\ude0e } // Sentencia anidada if (var_1 == var_2) { // Si var_1 es igual a var_2, hagamos algo genial!! \ud83d\ude0e }else if(var_2 == var_3){ // var_1 no fue igual a var_2 \ud83d\ude1e, // pero var_1 es igual a var_3, hagamos algo genial!! \ud83d\ude0e }else{ // Nada fue verdad ... \ud83d\ude1e, pero hagamos algo genial!! \ud83d\ude0e } /* Podemos seguir anidando cuantas condiciones necesitemos. El else es opcional. Hay que evitar inicializar las variables dentro del if */ // Otra forma de escribir los if (El operador ternario). (No se recomienda). int a = 4; int result = a == 4 ? 1 : 8; // Es lo mismo que hacer el siguiente c\u00f3digo: int a = 4; int result; if (a == 4) { result = 1; } else { result = 8; } // No se recomienda ya que es complejo de leer CONDICIONAL SWITCH // El switch, eval\u00faa el resultado de una variable. int month = 8; String monthString; switch (month) { case 1: monthString = \"January\"; break; case 2: monthString = \"February\"; break; case 3: monthString = \"March\"; break; case 4: monthString = \"April\"; break; case 5: monthString = \"May\"; break; case 6: monthString = \"June\"; break; case 7: monthString = \"July\"; break; case 8: monthString = \"August\"; break; case 9: monthString = \"September\"; break; case 10: monthString = \"October\"; break; case 11: monthString = \"November\"; break; case 12: monthString = \"December\"; break; default: monthString = \"Invalid month\"; break; } // Ejemplo 2. String month = \"january\"; int monthNumber = 0; switch (month.toLowerCase()) { case \"january\": monthNumber = 1; break; case \"february\": monthNumber = 2; break; case \"march\": monthNumber = 3; break; case \"april\": monthNumber = 4; break; case \"may\": monthNumber = 5; break; case \"june\": monthNumber = 6; break; case \"july\": monthNumber = 7; break; case \"august\": monthNumber = 8; break; case \"september\": monthNumber = 9; break; case \"october\": monthNumber = 10; break; case \"november\": monthNumber = 11; break; case \"december\": monthNumber = 12; break; default: monthNumber = 0; break; }","title":"Condicionales copy"},{"location":"ejercicios/repaso/teoria/condicionales%20copy/#condicionales","text":"Manejo de condicionales en java, basado en el material del curso de los 1000 programadores para Chile. ---","title":"Condicionales"},{"location":"ejercicios/repaso/teoria/condicionales%20copy/#ramificacion-condicional","text":"En Java, una prueba if es b\u00e1sicamente la misma que la prueba booleana en un ciclo while, excepto que en lugar de decir \"mientras todav\u00eda hay cerveza ...\", dir\u00e1, \"si todav\u00eda hay cerveza ...\" package cl.lherrera.java002; public class Principal { public static void main(String[] args) { int x = 3; if (x == 3) { System.out.println(\"x debe ser 3\"); } System.out.println(\"Esto se ejecuta, sin importar el valor de x\"); } } Podemos agregar otra cosa (else) , para que podamos decir algo como: \"Si todav\u00eda hay cerveza, siga codificando, de lo contrario (else) obtenga m\u00e1s cerveza y luego contin\u00fae ...\" package cl.lherrera.java002; public class Principal { public static void main(String[] args) { int x = 3; if (x == 3) { System.out.println(\"x debe ser 3\"); }else { System.out.println(\"x no es 3\"); } System.out.println(\"Esto se ejecuta, sin importar el valor de x\"); } } ---","title":"Ramificaci\u00f3n condicional"},{"location":"ejercicios/repaso/teoria/condicionales%20copy/#operadores-booleanos","text":"int a = 4; int b = 5; boolean result; result = a < b; // true result = a > b; // false result = a <= 4; // true result = b >= 6; // false result = a == b; // false result = a != b; // true result = a > b || a < b; // true result = 3 < a && a < 6; // true result = !result; // false // Algunas cosas de la clase String: String a = new String(\"Wow\"); String b = new String(\"Wow\"); String sameA = a; boolean r1 = a == b; // Falso, ya que a y b no son el mismo objeto. boolean r2 = a.equals(b); // Verdadero, Utilizamos el m\u00e9todo de la clase string para comparar. boolean r3 = a == sameA; // Verdadero, ya que a y sameA son el mismo objeto.","title":"Operadores booleanos"},{"location":"ejercicios/repaso/teoria/condicionales%20copy/#condicional-if","text":"// Sentencia simple. if (var_1 == var_2) { // Si var_1 es igual a var_2, hagamos algo genial!! \ud83d\ude0e } // Sentencia anidada if (var_1 == var_2) { // Si var_1 es igual a var_2, hagamos algo genial!! \ud83d\ude0e }else if(var_2 == var_3){ // var_1 no fue igual a var_2 \ud83d\ude1e, // pero var_1 es igual a var_3, hagamos algo genial!! \ud83d\ude0e }else{ // Nada fue verdad ... \ud83d\ude1e, pero hagamos algo genial!! \ud83d\ude0e } /* Podemos seguir anidando cuantas condiciones necesitemos. El else es opcional. Hay que evitar inicializar las variables dentro del if */ // Otra forma de escribir los if (El operador ternario). (No se recomienda). int a = 4; int result = a == 4 ? 1 : 8; // Es lo mismo que hacer el siguiente c\u00f3digo: int a = 4; int result; if (a == 4) { result = 1; } else { result = 8; } // No se recomienda ya que es complejo de leer","title":"Condicional if"},{"location":"ejercicios/repaso/teoria/condicionales%20copy/#condicional-switch","text":"// El switch, eval\u00faa el resultado de una variable. int month = 8; String monthString; switch (month) { case 1: monthString = \"January\"; break; case 2: monthString = \"February\"; break; case 3: monthString = \"March\"; break; case 4: monthString = \"April\"; break; case 5: monthString = \"May\"; break; case 6: monthString = \"June\"; break; case 7: monthString = \"July\"; break; case 8: monthString = \"August\"; break; case 9: monthString = \"September\"; break; case 10: monthString = \"October\"; break; case 11: monthString = \"November\"; break; case 12: monthString = \"December\"; break; default: monthString = \"Invalid month\"; break; } // Ejemplo 2. String month = \"january\"; int monthNumber = 0; switch (month.toLowerCase()) { case \"january\": monthNumber = 1; break; case \"february\": monthNumber = 2; break; case \"march\": monthNumber = 3; break; case \"april\": monthNumber = 4; break; case \"may\": monthNumber = 5; break; case \"june\": monthNumber = 6; break; case \"july\": monthNumber = 7; break; case \"august\": monthNumber = 8; break; case \"september\": monthNumber = 9; break; case \"october\": monthNumber = 10; break; case \"november\": monthNumber = 11; break; case \"december\": monthNumber = 12; break; default: monthNumber = 0; break; }","title":"CONDICIONAL SWITCH"},{"location":"ejercicios/repaso/teoria/condicionales/","text":"Condicionales Manejo de condicionales en java, basado en el material del curso de los 1000 programadores para Chile. --- Ramificaci\u00f3n condicional En Java, una prueba if es b\u00e1sicamente la misma que la prueba booleana en un ciclo while, excepto que en lugar de decir \"mientras todav\u00eda hay cerveza ...\", dir\u00e1, \"si todav\u00eda hay cerveza ...\" package cl.lherrera.java002; public class Principal { public static void main(String[] args) { int x = 3; if (x == 3) { System.out.println(\"x debe ser 3\"); } System.out.println(\"Esto se ejecuta, sin importar el valor de x\"); } } Podemos agregar otra cosa (else) , para que podamos decir algo diferente if (x == 10) { System.out.print(\"x must be 10\"); } else { System.out.print(\"x isn't 10\"); } if ((x < 3) & (name.equals(\"Dirk\"))) { System.out.println(\"Gently\"); } System.out.print(\"this line runs no matter what\"); --- Operadores booleanos int a = 4; int b = 5; boolean result; result = a < b; // true result = a > b; // false result = a <= 4; // true result = b >= 6; // false result = a == b; // false result = a != b; // true result = a > b || a < b; // true result = 3 < a && a < 6; // true result = !result; // false // Algunas cosas de la clase String: String a = new String(\"Wow\"); String b = new String(\"Wow\"); String sameA = a; boolean r1 = a == b; // Falso, ya que a y b no son el mismo objeto. boolean r2 = a.equals(b); // Verdadero, Utilizamos el m\u00e9todo de la clase string para comparar. boolean r3 = a == sameA; // Verdadero, ya que a y sameA son el mismo objeto. Condicional if // Sentencia simple. if (var_1 == var_2) { // Si var_1 es igual a var_2, hagamos algo genial!! \ud83d\ude0e } // Sentencia anidada if (var_1 == var_2) { // Si var_1 es igual a var_2, hagamos algo genial!! \ud83d\ude0e }else if(var_2 == var_3){ // var_1 no fue igual a var_2 \ud83d\ude1e, // pero var_1 es igual a var_3, hagamos algo genial!! \ud83d\ude0e }else{ // Nada fue verdad ... \ud83d\ude1e, pero hagamos algo genial!! \ud83d\ude0e } /* Podemos seguir anidando cuantas condiciones necesitemos. El else es opcional. Hay que evitar inicializar las variables dentro del if */ // Otra forma de escribir los if (El operador ternario). (No se recomienda). int a = 4; int result = a == 4 ? 1 : 8; // Es lo mismo que hacer el siguiente c\u00f3digo: int a = 4; int result; if (a == 4) { result = 1; } else { result = 8; } // No se recomienda ya que es complejo de leer CONDICIONAL SWITCH // El switch, eval\u00faa el resultado de una variable. int month = 8; String monthString; switch (month) { case 1: monthString = \"January\"; break; case 2: monthString = \"February\"; break; case 3: monthString = \"March\"; break; case 4: monthString = \"April\"; break; case 5: monthString = \"May\"; break; case 6: monthString = \"June\"; break; case 7: monthString = \"July\"; break; case 8: monthString = \"August\"; break; case 9: monthString = \"September\"; break; case 10: monthString = \"October\"; break; case 11: monthString = \"November\"; break; case 12: monthString = \"December\"; break; default: monthString = \"Invalid month\"; break; } // Ejemplo 2. String month = \"january\"; int monthNumber = 0; switch (month.toLowerCase()) { case \"january\": monthNumber = 1; break; case \"february\": monthNumber = 2; break; case \"march\": monthNumber = 3; break; case \"april\": monthNumber = 4; break; case \"may\": monthNumber = 5; break; case \"june\": monthNumber = 6; break; case \"july\": monthNumber = 7; break; case \"august\": monthNumber = 8; break; case \"september\": monthNumber = 9; break; case \"october\": monthNumber = 10; break; case \"november\": monthNumber = 11; break; case \"december\": monthNumber = 12; break; default: monthNumber = 0; break; }","title":"Condicionales"},{"location":"ejercicios/repaso/teoria/condicionales/#condicionales","text":"Manejo de condicionales en java, basado en el material del curso de los 1000 programadores para Chile. ---","title":"Condicionales"},{"location":"ejercicios/repaso/teoria/condicionales/#ramificacion-condicional","text":"En Java, una prueba if es b\u00e1sicamente la misma que la prueba booleana en un ciclo while, excepto que en lugar de decir \"mientras todav\u00eda hay cerveza ...\", dir\u00e1, \"si todav\u00eda hay cerveza ...\" package cl.lherrera.java002; public class Principal { public static void main(String[] args) { int x = 3; if (x == 3) { System.out.println(\"x debe ser 3\"); } System.out.println(\"Esto se ejecuta, sin importar el valor de x\"); } } Podemos agregar otra cosa (else) , para que podamos decir algo diferente if (x == 10) { System.out.print(\"x must be 10\"); } else { System.out.print(\"x isn't 10\"); } if ((x < 3) & (name.equals(\"Dirk\"))) { System.out.println(\"Gently\"); } System.out.print(\"this line runs no matter what\"); ---","title":"Ramificaci\u00f3n condicional"},{"location":"ejercicios/repaso/teoria/condicionales/#operadores-booleanos","text":"int a = 4; int b = 5; boolean result; result = a < b; // true result = a > b; // false result = a <= 4; // true result = b >= 6; // false result = a == b; // false result = a != b; // true result = a > b || a < b; // true result = 3 < a && a < 6; // true result = !result; // false // Algunas cosas de la clase String: String a = new String(\"Wow\"); String b = new String(\"Wow\"); String sameA = a; boolean r1 = a == b; // Falso, ya que a y b no son el mismo objeto. boolean r2 = a.equals(b); // Verdadero, Utilizamos el m\u00e9todo de la clase string para comparar. boolean r3 = a == sameA; // Verdadero, ya que a y sameA son el mismo objeto.","title":"Operadores booleanos"},{"location":"ejercicios/repaso/teoria/condicionales/#condicional-if","text":"// Sentencia simple. if (var_1 == var_2) { // Si var_1 es igual a var_2, hagamos algo genial!! \ud83d\ude0e } // Sentencia anidada if (var_1 == var_2) { // Si var_1 es igual a var_2, hagamos algo genial!! \ud83d\ude0e }else if(var_2 == var_3){ // var_1 no fue igual a var_2 \ud83d\ude1e, // pero var_1 es igual a var_3, hagamos algo genial!! \ud83d\ude0e }else{ // Nada fue verdad ... \ud83d\ude1e, pero hagamos algo genial!! \ud83d\ude0e } /* Podemos seguir anidando cuantas condiciones necesitemos. El else es opcional. Hay que evitar inicializar las variables dentro del if */ // Otra forma de escribir los if (El operador ternario). (No se recomienda). int a = 4; int result = a == 4 ? 1 : 8; // Es lo mismo que hacer el siguiente c\u00f3digo: int a = 4; int result; if (a == 4) { result = 1; } else { result = 8; } // No se recomienda ya que es complejo de leer","title":"Condicional if"},{"location":"ejercicios/repaso/teoria/condicionales/#condicional-switch","text":"// El switch, eval\u00faa el resultado de una variable. int month = 8; String monthString; switch (month) { case 1: monthString = \"January\"; break; case 2: monthString = \"February\"; break; case 3: monthString = \"March\"; break; case 4: monthString = \"April\"; break; case 5: monthString = \"May\"; break; case 6: monthString = \"June\"; break; case 7: monthString = \"July\"; break; case 8: monthString = \"August\"; break; case 9: monthString = \"September\"; break; case 10: monthString = \"October\"; break; case 11: monthString = \"November\"; break; case 12: monthString = \"December\"; break; default: monthString = \"Invalid month\"; break; } // Ejemplo 2. String month = \"january\"; int monthNumber = 0; switch (month.toLowerCase()) { case \"january\": monthNumber = 1; break; case \"february\": monthNumber = 2; break; case \"march\": monthNumber = 3; break; case \"april\": monthNumber = 4; break; case \"may\": monthNumber = 5; break; case \"june\": monthNumber = 6; break; case \"july\": monthNumber = 7; break; case \"august\": monthNumber = 8; break; case \"september\": monthNumber = 9; break; case \"october\": monthNumber = 10; break; case \"november\": monthNumber = 11; break; case \"december\": monthNumber = 12; break; default: monthNumber = 0; break; }","title":"CONDICIONAL SWITCH"},{"location":"ejercicios/repaso/teoria/metodos/","text":"M\u00e9todos Explicar los retornos, obligatorios, explicar nombres como get , is , set ... Explicar el alcance de las variables. Explicar el constructor. Explicar el main. Para todo lo que hay que explicar, no hay ejemplos dedicados. Explicar Static . (Ejemplo incluido), complementar despu\u00e9s con la explicaci\u00f3n de las clases. Algunas reglas. El tipo de retorno en un m\u00e9todo jam\u00e1s se omite ( s\u00f3lo el constructor no lo lleva ). Los nombres de los m\u00e9todos siguen las mismas reglas que los nombres de las variables. La excepciones que arroja el m\u00e9todo pueden ser m\u00e1s de una, separadas con comas. Solo se permite un varargs... por m\u00e9todo y este debe ser el \u00faltimo en la lista de par\u00e1metros. Si no ponemos el modificador de acceso (private, protected, public) en un m\u00e9todo, este no queda p\u00fablico, lo que sucede realmente es que queda en una especie de privado para el paquete default , si importamos el paquete donde est\u00e1 este m\u00e9todo sin el modificador, no podr\u00e1 ser usado desde ese paquete externo. Solo podr\u00eda comportarse como p\u00fablico dentro del paquete al que pertenece la clase que lo contiene. Llamar a m\u00e9todos est\u00e1ticos de alguna instancia, puede provocar algunas confusiones como por ejemplo, la l\u00ednea 8 seguir\u00e1 imprimiendo lo que retorne count() \u001d, esto se debe a que para el compilador una vez que ya sabe que k.count() es por ejemplo 3, lo guarda como un valor, aunque k ahora apunte a null . 5: Koala k = new Koala(); 6: System.out.println(k.count()); // k es un Koala 7: k = null; 8: System.out.println(k.count()); Para el siguiente caso. Koala.count = 4; Koala koala1 = new Koala(); Koala koala2 = new Koala(); koala1.count = 6; koala2.count = 5; System.out.println(Koala.count); // la respuesta es 5, esto se debe a que todas estas instancias apuntan s\u00f3lo a un valor est\u00e1tico, son todos el mismo. Si existe una s\u00faper clase, esta se inicializa primero. Est\u00e1ticos en el orden que vayan apareciendo en el archivo. Variables de instancia e inicializadores {...} seg\u00fan vayan apareciendo en el archivo. El constructor se sobrecarga como cualquier m\u00e9todo. Constructor Chaining \u001c Constructor Chaining o encadenamiento de constructores, es la t\u00e9cnica, en la que cuando hay una sobrescritura de un constructor, este puede llamar a otro constructor usando this . Sobre carga de m\u00e9todos Una clase puede tener varios m\u00e9todos, con el mismo nombre. Esto es conocido como sobrecarga. Dos varargs , producen ambig\u00fcedad, Integers... && int... nums . A diferencia de que si lo hacemos con un argumento simple Integer a o int a , si no es un varargs.. args no produce ambig\u00fcedad . Existen dos maneras de sobrecargar un m\u00e9todo. Cambiando el n\u00famero de argumentos. Cambiando el tipo de dato de los argumentos. No es posible hacerlo cambiando el tipo de retorno para evitar ambig\u00fcedades. Ejemplo: package cl.lherrera.java003; public class Principal { public static void main(String[] args) { procesa(); procesa(1); procesa(1, 2, 3); procesa(\"1\"); } private static void procesa() { System.out.println(\"Ejecutando: private static void procesa()\"); } private static void procesa(int a) { System.out.println(\"Ejecutando: private static void procesa(int a)\"); } private static void procesa(int... a) { System.out.println(\"Ejecutando: private static void procesa(int... a)\"); } private static void procesa(String a) { System.out.println(\"Ejecutando: private static void procesa(String a)\"); } } Salida Ejecutando: private static void procesa() Ejecutando: private static void procesa(int a) Ejecutando: private static void procesa(int... a) Ejecutando: private static void procesa(String a) Promoci\u00f3n de una sobrecarga con n\u00fameros. El siguiente cuadro, muestra como manejar\u00e1 Java , la promoci\u00f3n de los n\u00fameros en el caso que se entreguen argumentos num\u00e9ricos a un m\u00e9todo sobrecargado. Posibles caminos. (respetando el orden, ya que esto no se especificado en la imagen, es por esto que se muestra el siguiente resumen). char -> int -> long -> double -> float -> double -> double byte -> short -> int -> long -> double -> float -> double -> double Muestra En el siguiente fragmento se expone un ejemplo, pero se puede ir probando comentando m\u00e9todos y viendo como se comporta la respuesta para poder practicar \ud83e\udd4b. package cl.lherrera.java003; public class Principal { public static void main(String[] args) { int a = 3; hacer(a); } public static void hacer(byte a) { System.out.println(\"Ejecutando m\u00e9todo: public static void hacer(byte bait)\"); } public static void hacer(short a) { System.out.println(\"Ejecutando m\u00e9todo: public static void hacer(short corto)\"); } public static void hacer(int a) { System.out.println(\"Ejecutando m\u00e9todo: public static void hacer(int a)\"); } public static void hacer(long a) { System.out.println(\"Ejecutando m\u00e9todo: public static void hacer(long a)\"); } public static void hacer(float a) { System.out.println(\"Ejecutando m\u00e9todo: public static void hacer(long a)\"); } public static void hacer(double a) { System.out.println(\"Ejecutando m\u00e9todo: public static void hacer(double a)\"); } public static void hacer(char a) { System.out.println(\"Ejecutando m\u00e9todo: public static void hacer(char a)\"); } } Ejecutando m\u00e9todo: public static void hacer(int a) // estos m\u00e9todos son una v\u00e1lida sobrescritura. public void fly(int numMiles) { } public void fly(short numFeet) { } public boolean fly() { return false; } void fly(int numMiles, short numFeet) { } public void fly(short numFeet, int numMiles) throws Exception { } La sobrescritura no permite la exacta(exactos tipos) lista de par\u00e1metros, incluyendo wrappers , es decir que no se permite m\u00e1s de un varargs... aunque sea uno primitivo y el otro envolvedor, ya que en tiempo de ejecuci\u00f3n tendremos una excepci\u00f3n de ambig\u00fcedad. En la sobrescritura, los vargars... se consideran arrays[] para efectos de identificar el tipo de variable. En la sobrescritura, el valor primitivo ser\u00e1 buscado primero, luego busca a su par envolvedor, luego el wrapper . La siguiente tabla muestra la jerarqu\u00eda en la b\u00fasqueda del m\u00e9todo id\u00f3neo que java intentar\u00e1 ejecutar en la sobrescritura. Casos para estudiar y concluir La variable a , que hace referencia a un literal 3 , intenta byte, short, int, long, float, double ; pero ninguno de estos est\u00e1 en la lista, por lo tanto seguir\u00e1 con su WRAPPER que es Byte ; pero este tampoco est\u00e1, en su lugar tenemos un int... que es el vargars y se ejecuta. Si cambiamos byte a int veremos que se ejecuta el wrapper y no el varags... . package cl.lherrera.java003; public class Principal { public static void main(String[] args) { // int a = 3; byte a = 3; hacer(a); } // public static void hacer(double a) { // System.out.println(\"Ejecutando m\u00e9todo: public static void hacer(double a)\"); // } public static void hacer(Integer a) { System.out.println(\"Ejecutando m\u00e9todo: public static void hacer(Integer a)\"); } public static void hacer(int... a) { System.out.println(\"Ejecutando m\u00e9todo: public static void hacer(int... a)\"); } } Output Ejecutando m\u00e9todo: public static void hacer(int... a)","title":"Metodos"},{"location":"ejercicios/repaso/teoria/metodos/#metodos","text":"Explicar los retornos, obligatorios, explicar nombres como get , is , set ... Explicar el alcance de las variables. Explicar el constructor. Explicar el main. Para todo lo que hay que explicar, no hay ejemplos dedicados. Explicar Static . (Ejemplo incluido), complementar despu\u00e9s con la explicaci\u00f3n de las clases.","title":"M\u00e9todos"},{"location":"ejercicios/repaso/teoria/metodos/#algunas-reglas","text":"El tipo de retorno en un m\u00e9todo jam\u00e1s se omite ( s\u00f3lo el constructor no lo lleva ). Los nombres de los m\u00e9todos siguen las mismas reglas que los nombres de las variables. La excepciones que arroja el m\u00e9todo pueden ser m\u00e1s de una, separadas con comas. Solo se permite un varargs... por m\u00e9todo y este debe ser el \u00faltimo en la lista de par\u00e1metros. Si no ponemos el modificador de acceso (private, protected, public) en un m\u00e9todo, este no queda p\u00fablico, lo que sucede realmente es que queda en una especie de privado para el paquete default , si importamos el paquete donde est\u00e1 este m\u00e9todo sin el modificador, no podr\u00e1 ser usado desde ese paquete externo. Solo podr\u00eda comportarse como p\u00fablico dentro del paquete al que pertenece la clase que lo contiene. Llamar a m\u00e9todos est\u00e1ticos de alguna instancia, puede provocar algunas confusiones como por ejemplo, la l\u00ednea 8 seguir\u00e1 imprimiendo lo que retorne count() \u001d, esto se debe a que para el compilador una vez que ya sabe que k.count() es por ejemplo 3, lo guarda como un valor, aunque k ahora apunte a null . 5: Koala k = new Koala(); 6: System.out.println(k.count()); // k es un Koala 7: k = null; 8: System.out.println(k.count()); Para el siguiente caso. Koala.count = 4; Koala koala1 = new Koala(); Koala koala2 = new Koala(); koala1.count = 6; koala2.count = 5; System.out.println(Koala.count); // la respuesta es 5, esto se debe a que todas estas instancias apuntan s\u00f3lo a un valor est\u00e1tico, son todos el mismo. Si existe una s\u00faper clase, esta se inicializa primero. Est\u00e1ticos en el orden que vayan apareciendo en el archivo. Variables de instancia e inicializadores {...} seg\u00fan vayan apareciendo en el archivo. El constructor se sobrecarga como cualquier m\u00e9todo.","title":"Algunas reglas."},{"location":"ejercicios/repaso/teoria/metodos/#constructor-chaining","text":"Constructor Chaining o encadenamiento de constructores, es la t\u00e9cnica, en la que cuando hay una sobrescritura de un constructor, este puede llamar a otro constructor usando this .","title":"Constructor Chaining"},{"location":"ejercicios/repaso/teoria/metodos/#sobre-carga-de-metodos","text":"Una clase puede tener varios m\u00e9todos, con el mismo nombre. Esto es conocido como sobrecarga. Dos varargs , producen ambig\u00fcedad, Integers... && int... nums . A diferencia de que si lo hacemos con un argumento simple Integer a o int a , si no es un varargs.. args no produce ambig\u00fcedad . Existen dos maneras de sobrecargar un m\u00e9todo. Cambiando el n\u00famero de argumentos. Cambiando el tipo de dato de los argumentos. No es posible hacerlo cambiando el tipo de retorno para evitar ambig\u00fcedades. Ejemplo: package cl.lherrera.java003; public class Principal { public static void main(String[] args) { procesa(); procesa(1); procesa(1, 2, 3); procesa(\"1\"); } private static void procesa() { System.out.println(\"Ejecutando: private static void procesa()\"); } private static void procesa(int a) { System.out.println(\"Ejecutando: private static void procesa(int a)\"); } private static void procesa(int... a) { System.out.println(\"Ejecutando: private static void procesa(int... a)\"); } private static void procesa(String a) { System.out.println(\"Ejecutando: private static void procesa(String a)\"); } } Salida Ejecutando: private static void procesa() Ejecutando: private static void procesa(int a) Ejecutando: private static void procesa(int... a) Ejecutando: private static void procesa(String a)","title":"Sobre carga de m\u00e9todos"},{"location":"ejercicios/repaso/teoria/metodos/#promocion-de-una-sobrecarga-con-numeros","text":"El siguiente cuadro, muestra como manejar\u00e1 Java , la promoci\u00f3n de los n\u00fameros en el caso que se entreguen argumentos num\u00e9ricos a un m\u00e9todo sobrecargado. Posibles caminos. (respetando el orden, ya que esto no se especificado en la imagen, es por esto que se muestra el siguiente resumen). char -> int -> long -> double -> float -> double -> double byte -> short -> int -> long -> double -> float -> double -> double Muestra En el siguiente fragmento se expone un ejemplo, pero se puede ir probando comentando m\u00e9todos y viendo como se comporta la respuesta para poder practicar \ud83e\udd4b. package cl.lherrera.java003; public class Principal { public static void main(String[] args) { int a = 3; hacer(a); } public static void hacer(byte a) { System.out.println(\"Ejecutando m\u00e9todo: public static void hacer(byte bait)\"); } public static void hacer(short a) { System.out.println(\"Ejecutando m\u00e9todo: public static void hacer(short corto)\"); } public static void hacer(int a) { System.out.println(\"Ejecutando m\u00e9todo: public static void hacer(int a)\"); } public static void hacer(long a) { System.out.println(\"Ejecutando m\u00e9todo: public static void hacer(long a)\"); } public static void hacer(float a) { System.out.println(\"Ejecutando m\u00e9todo: public static void hacer(long a)\"); } public static void hacer(double a) { System.out.println(\"Ejecutando m\u00e9todo: public static void hacer(double a)\"); } public static void hacer(char a) { System.out.println(\"Ejecutando m\u00e9todo: public static void hacer(char a)\"); } } Ejecutando m\u00e9todo: public static void hacer(int a) // estos m\u00e9todos son una v\u00e1lida sobrescritura. public void fly(int numMiles) { } public void fly(short numFeet) { } public boolean fly() { return false; } void fly(int numMiles, short numFeet) { } public void fly(short numFeet, int numMiles) throws Exception { } La sobrescritura no permite la exacta(exactos tipos) lista de par\u00e1metros, incluyendo wrappers , es decir que no se permite m\u00e1s de un varargs... aunque sea uno primitivo y el otro envolvedor, ya que en tiempo de ejecuci\u00f3n tendremos una excepci\u00f3n de ambig\u00fcedad. En la sobrescritura, los vargars... se consideran arrays[] para efectos de identificar el tipo de variable. En la sobrescritura, el valor primitivo ser\u00e1 buscado primero, luego busca a su par envolvedor, luego el wrapper . La siguiente tabla muestra la jerarqu\u00eda en la b\u00fasqueda del m\u00e9todo id\u00f3neo que java intentar\u00e1 ejecutar en la sobrescritura. Casos para estudiar y concluir La variable a , que hace referencia a un literal 3 , intenta byte, short, int, long, float, double ; pero ninguno de estos est\u00e1 en la lista, por lo tanto seguir\u00e1 con su WRAPPER que es Byte ; pero este tampoco est\u00e1, en su lugar tenemos un int... que es el vargars y se ejecuta. Si cambiamos byte a int veremos que se ejecuta el wrapper y no el varags... . package cl.lherrera.java003; public class Principal { public static void main(String[] args) { // int a = 3; byte a = 3; hacer(a); } // public static void hacer(double a) { // System.out.println(\"Ejecutando m\u00e9todo: public static void hacer(double a)\"); // } public static void hacer(Integer a) { System.out.println(\"Ejecutando m\u00e9todo: public static void hacer(Integer a)\"); } public static void hacer(int... a) { System.out.println(\"Ejecutando m\u00e9todo: public static void hacer(int... a)\"); } } Output Ejecutando m\u00e9todo: public static void hacer(int... a)","title":"Promoci\u00f3n de una sobrecarga con n\u00fameros."},{"location":"ejercicios/repaso/teoria/poo/herencia/","text":"Ejercicio: Colaboradores de Aplaplac Se necesita un programa que liste a los trabajadores de una instituci\u00f3n. En esta instituci\u00f3n trabajan tres tipos de trabajadores: Desarrolladores, Directores y Administrativos. Cada uno de estos trabajadores posee una manera de calcular su salario: Los directores ganan 10 veces el sueldo m\u00ednimo. Los desarrolladores ganan el resultado de las horas de desarrollo por el precio por hora m\u00e1s el sueldo m\u00ednimo; Los administrativos ganan el resultado de los a\u00f1os de servicio por nivel del cargo por sueldo m\u00ednimo; Se debe crear una clase padre llamada Trabajador , que contenga el atributo nombre y un m\u00e9todo obtenerSalario() que retorne el salario m\u00ednimo. Adicionalmente generar el constructor con el campo nombre, los setters & getters & toString() . Crear las clases que hereden de Trabajador . Administrativo \u001d: A\u00f1os de servicio, nivel de cargo (de 1 a 4). Desarrollador : Horas de desarrollo, precio por hora. Director : Departamento Todos estas clases reescriben el m\u00e9todo obtenerSalario() , utilizando los criterios mostrados anteriormente. En la clase principal, tendremos un men\u00fa que capture un entero. Seg\u00fan la opci\u00f3n ingresada se deben mostrar ordenados por salario o por nombre. Una vez dise\u00f1ada la estructura, hay que instanciar los siguientes objetos: Desarrollador fullStack = new Desarrollador(\"Mar\u00eda\", 20, 56000); Desarrollador backend = new Desarrollador(\"Hector\", 10, 43000); Director directorTI = new Director(\"Benito\", \"tecnolog\u00edas de informaci\u00f3n\"); Administrativo secretario = new Administrativo(\"Antonio\", 7, 2); Simulaci\u00f3n de comportamiento de la aplicaci\u00f3n. (Orden por nombre). Bienvenido al sistema___ - Ingrese una opci\u00f3n - 1: Ordenar por salario - 2: Ordenar por nombre 2 Listado por nombre Trabajador Nombre: Antonio Salario: 4487000 Trabajador Nombre: Benito Salario: 3205000 Trabajador Nombre: Hector Salario: 750500 Trabajador Nombre: Mar\u00eda Salario: 1440500","title":"Home"},{"location":"ejercicios/repaso/teoria/poo/herencia/#ejercicio-colaboradores-de-aplaplac","text":"Se necesita un programa que liste a los trabajadores de una instituci\u00f3n. En esta instituci\u00f3n trabajan tres tipos de trabajadores: Desarrolladores, Directores y Administrativos. Cada uno de estos trabajadores posee una manera de calcular su salario: Los directores ganan 10 veces el sueldo m\u00ednimo. Los desarrolladores ganan el resultado de las horas de desarrollo por el precio por hora m\u00e1s el sueldo m\u00ednimo; Los administrativos ganan el resultado de los a\u00f1os de servicio por nivel del cargo por sueldo m\u00ednimo; Se debe crear una clase padre llamada Trabajador , que contenga el atributo nombre y un m\u00e9todo obtenerSalario() que retorne el salario m\u00ednimo. Adicionalmente generar el constructor con el campo nombre, los setters & getters & toString() . Crear las clases que hereden de Trabajador . Administrativo \u001d: A\u00f1os de servicio, nivel de cargo (de 1 a 4). Desarrollador : Horas de desarrollo, precio por hora. Director : Departamento Todos estas clases reescriben el m\u00e9todo obtenerSalario() , utilizando los criterios mostrados anteriormente. En la clase principal, tendremos un men\u00fa que capture un entero. Seg\u00fan la opci\u00f3n ingresada se deben mostrar ordenados por salario o por nombre. Una vez dise\u00f1ada la estructura, hay que instanciar los siguientes objetos: Desarrollador fullStack = new Desarrollador(\"Mar\u00eda\", 20, 56000); Desarrollador backend = new Desarrollador(\"Hector\", 10, 43000); Director directorTI = new Director(\"Benito\", \"tecnolog\u00edas de informaci\u00f3n\"); Administrativo secretario = new Administrativo(\"Antonio\", 7, 2); Simulaci\u00f3n de comportamiento de la aplicaci\u00f3n. (Orden por nombre). Bienvenido al sistema___ - Ingrese una opci\u00f3n - 1: Ordenar por salario - 2: Ordenar por nombre 2 Listado por nombre Trabajador Nombre: Antonio Salario: 4487000 Trabajador Nombre: Benito Salario: 3205000 Trabajador Nombre: Hector Salario: 750500 Trabajador Nombre: Mar\u00eda Salario: 1440500","title":"Ejercicio: Colaboradores de Aplaplac"},{"location":"ejercicios/repaso/teoria/poo/introduccion/","text":"Programaci\u00f3n orientada a objetos 001 Tenemos que diferenciar entre lo que la clase sabe y lo que la clase hace . La clase, es la definici\u00f3n de un tipo , de la cual podemos instanciar objetos para poder utilizar sus servicios . Definen, la estructura de sus objetos. Es decir que todos los objetos de la misma clase, podr\u00e1n almacenar el mismo tipo de informaci\u00f3n y tendr\u00e1n la misma capacidad para manipularla . Una clase creada por nosotros , es la definici\u00f3n de un nuevo tipo de dato que puede o no ser compatible con otro tipo de dato . Para configurar esta compatibilidad, existen t\u00e9cnicas como el polimorfismo. Una clase en java est\u00e1 formada por: Atributos : (o campos/propiedades) Almacenan alg\u00fan tipo de informaci\u00f3n del objeto. Definen su estado. Constructor(es) : M\u00e9todo que se utiliza para inicializar un objeto. M\u00e9todos : Son utilizados para modificar o consultar el estado de un objeto . Equivalentes a las funciones o procedimientos de otros lenguajes. En Java solo hay dos excepciones al uso de objetos ( primitivos y arreglos ), adem\u00e1s de estos podemos utilizar variables primitivas como int \u001d, boolean \u001d, etc. y arrays \u001d como int[] \u001d, boolean[] \u001d, etc.. En Java, todo es un objeto Un programa es un mont\u00f3n de objetos que se dicen entre s\u00ed, lo que tienen que hacer envi\u00e1ndose mensajes . Cada objeto tiene su propia memoria formada por otros objetos . Todo objeto tiene un tipo asociado. Todos los objeto de un tipo particular, pueden recibir los mismos mensajes. (polimorfismo) . Todo objeto tiene una interfaz (sus m\u00e9todos p\u00fablicos) . Composici\u00f3n de clases v/s Herencia (composici\u00f3n siempre se pueda). Relaci\u00f3n es un v/s es como un . Se supone que cuando creemos una herencia, se supone que esta clase hija no posee m\u00e9todos nuevos. M\u00e9todos que no sean especificados en la clase padre pero que est\u00e9n en la clase hija, limita el polimorfismo, a menos que estos m\u00e9todos extras sean implementaciones de una interfaz u otro tipo que pueda ejecutar estos m\u00e9todos sin tener que crear una instancia dir\u00e9ctamente la clase. Cuando se aplica el polimorfismo, el compilador sabr\u00e1 en tiempo de ejecuci\u00f3n, el m\u00e9todo que ejecutar\u00e1. ya que es en este momento cuando se sabe qu\u00e9 clase es la que se ha cargado. ( Upcasting \u001d: Tratar un objeto derivado como un tipo base List<String> nombres = new ArrayList<>() ). Estructurar o definir un nuevo tipo de dato - creaci\u00f3n de una clase. Ejemplo: Representaci\u00f3n de una fecha Primera parte: Estructurar clases, sobrescribir m\u00e9todos heredados. Instanciar e imprimir. Creamos una clase, Fecha (may\u00fascula para las clases), Esta clase tendr\u00e1 tres atributos: dia , mes , anio . Fecha.java package cl.lherrera.primero; public class Fecha { private String dia; private String mes; private String anio; } Principal.java package cl.lherrera.primero; public class Principal { public static void main(String[] args) { Fecha fecha = new Fecha(); System.out.println(fecha.dia); } } Exception in thread \"main\" java.lang.Error: Unresolved compilation problem: The field Fecha.dia is not visible at cl.lherrera.primero.Principal.main(Principal.java:8) Vemos que no se puede acceder a los atributos directamente desde otra clase, ya que posee un modificador de acceso llamado private , significa que puede ser accedido desde su clase y desde ning\u00fan otro lugar. Para poder modificar el estado de la clase, cuando son privadas (deber\u00eda ser casi siempre), se necesita hacer mediante m\u00e9todos . setters & getters Agregamos los setters & getters , primero para poder asignar los valores, y luego para poder obtenerlos. Fecha.java // ... public String getDia() { return dia; } public void setDia(String dia) { this.dia = dia; } public String getMes() { return mes; } public void setMes(String mes) { this.mes = mes; } public String getAnio() { return anio; } public void setAnio(String anio) { this.anio = anio; } } Principal.java package cl.lherrera.primero; public class Principal { public static void main(String[] args) { Fecha fecha = new Fecha(); System.out.println(fecha.getDia()); } } Podemos asignar los valores, despu\u00e9s de crear la clase. Adem\u00e1s podemos imprimir la fecha en un formato de mejor comprensi\u00f3n humana. package cl.lherrera.primero; public class Principal { public static void main(String[] args) { Fecha fecha = new Fecha(); fecha.setDia(\"05\"); fecha.setMes(\"06\"); fecha.setAnio(\"2020\"); System.out.printf( \"%s/%s/%s\", fecha.getDia(), fecha.getMes(), fecha.getAnio() ); } } constructor Para poder tener la opci\u00f3n de construir la clase al momento de instanciar, debemos crear un m\u00e9todo especial, llamado constructor . Este permite personalizar el estado de un objeto al momento de crear su instancia. Fecha.java //... public Fecha(String dia, String mes, String anio) { this.dia = dia; this.mes = mes; this.anio = anio; } //... Principal.java El constructor permite asignar el estado de una clase al momento de su instancia. package cl.lherrera.primero; public class Principal { public static void main(String[] args) { Fecha fecha = new Fecha(\"05\", \"06\", \"2020\"); System.out.printf( \"%s/%s/%s\", fecha.getDia(), fecha.getMes(), fecha.getAnio() ); } } toString() Podemos personalizar la forma de imprimir la representaci\u00f3n de la informaci\u00f3n que presentar\u00e1. Este es el m\u00e9todo que se ejecuta cuando utilizamos System.ou.println(obj.toString); Este m\u00e9todo sobrescribe el m\u00e9todo entregado por Object . Fecha.java //... @Override public String toString() { return String.format( \"%s/%s/%s\", this.getDia(), this.getMes(), this.getAnio() ); } //... Principal.java package cl.lherrera.primero; public class Principal { public static void main(String[] args) { Fecha fecha = new Fecha(\"05\", \"06\", \"2020\"); System.out.println(fecha); } } equals(Object obj) & hashCode() Java define si un objeto es igual a otro utilizando estos dos m\u00e9todos, el primero en ejecutarse es hashCode() , que ejecuta una comparaci\u00f3n muy r\u00e1pida que nosotros definamos que retorne un tipo de objeto ,hashCode() , para saber si vale o no la pena ejecutar el equals(Object obj) y finalmente saber si los objetos son iguales o no. Podemos seguir sobre escribiendo m\u00e9todos de Object , como el m\u00e9todo equals . Una de las clases de java.util , realiza esta sobrescritura, estamos hablando de la clase String . El objetivo de este m\u00e9todo, es que as\u00ed como un n\u00famero es igual a otro si tienen el mismo valor, para el caso de las clases no se puede concluir a priori, si dos objetos son representativamente iguales. Es decir que cuando creamos una clase, podemos programar un m\u00e9todo que indique si dos objetos creados a partir de esa clase son iguales o no. //... @Override public int hashCode() { return dia.hashCode(); } @Override public boolean equals(Object obj) { String este = this.toString(); String ese = \"\"; if(obj != null) ese = obj.toString(); return este.equals(ese); } //... Repaso de lo visto Toda clase hereda (directa o indirectamente) de la clase Object . Los m\u00e9todos (como toString ) de la clase Object . son comunes a todas las clases. \"Sobrescribir\", significa reescribir el cuerpo de un m\u00e9todo que estamos heredando, sin modificar su encabezado(par\u00e1metros) ni su prototipo(modificadores). Los objetos comienzan a ser utilizados luego de ejecutada su instancia, donde el constructor se encarga de iniciar su estado, si no proporcionamos el constructor, Java nos proporciona uno vac\u00edo por defecto. En el caso en que se cree cualquier tipo de constructor, el constructor por defecto desaparece, si necesitamos un constructor vac\u00edo, este debe ser implementado. Resultado final Principal.java package cl.lherrera.primero; public class Principal { public static void main(String[] args) { Fecha fecha = new Fecha(\"05\", \"06\", \"2020\"); Fecha fecha2 = new Fecha(\"05\", \"06\", \"2020\"); System.out.println(fecha.equals(fecha2)); } } Fecha.java package cl.lherrera.primero; public class Fecha { private String dia; private String mes; private String anio; public Fecha(String dia, String mes, String anio) { this.dia = dia; this.mes = mes; this.anio = anio; } public String getDia() { return dia; } public void setDia(String dia) { this.dia = dia; } public String getMes() { return mes; } public void setMes(String mes) { this.mes = mes; } public String getAnio() { return anio; } public void setAnio(String anio) { this.anio = anio; } @Override public int hashCode() { return dia.hashCode(); } @Override public boolean equals(Object obj) { String este = this.toString(); String ese = \"\"; if (obj != null) ese = obj.toString(); return este.equals(ese); } @Override public String toString() { return String.format( \"%s/%s/%s\", this.getDia(), this.getMes(), this.getAnio()); } } Nomenclaturas Nombres de clases con inicial may\u00fascula. CamelCase . Nombres de m\u00e9todos, \u00eddem anterior; pero no comienzan con may\u00fasculas, adem\u00e1s de entregar en su nombre una descripci\u00f3n muy corta de lo que realiza el m\u00e9todo, como sumar(int a, int b) , podemos saber que suma dos n\u00fameros. Nombres de atributos: Comienzan con min\u00fascula y CamelCase . Constantes son todas may\u00fasculas. Estructura de creaci\u00f3n de una clase Una clase se crea dentro de una unidad de compilaci\u00f3n, es decir un archivo .class , Dentro de esta unidad de compilaci\u00f3n, debe existir una clase p\u00fablica con el mismo nombre de la unidad de compilaci\u00f3n. Adicionalmente, podemos definir m\u00e1s tipos; pero estos no pueden llevar public . Al compilar, esta unidad de compilaci\u00f3n, se crean unidades tantas unidades de salida, dependiendo de los tipos que posea esta unidad de compilaci\u00f3n. Las clases son agrupadas en paquetes, por este motivo, al principio de este fichero se debe indicar el paquete al que pertenecer\u00e1 esta clase. Por ejemplo: package ejemplos, si necesitamos clases de otros paquetes podemos agregar luego los import. ejemplo; import java.util.Scanner; Estructura de declaraci\u00f3n: class <clase> { //declaraci\u00f3n de atributos [visibilidad] [modificadores] <tipo> <atributo> [= valor]; ... //declaraci\u00f3n de constructor public <clase>(<argumentos>) { <instrucciones>; } //declaraci\u00f3n de m\u00e9todos [visibilidad] [modificadores] <tipo> <m\u00e9todo>(<argumentos>) { <instrucciones>; } ... } [visibilidad] = public, protected o private [modificadores] = final, static y abstract Ejercicio: Clase Veh\u00edculo Vehiculo . Crear un nuevo tipo de dato (o clase) que represente un Veh\u00edculo, que posea los siguientes atributos: C\u00f3digo de motor. Marca. N\u00famero de puertas. A\u00f1o de fabricaci\u00f3n. precio. Implementar los atributos (correctamente encapsulados). Crear un constructor que inicie los valores de esta clase, es decir, que defina un estado inicial. Implementar los setters & getters . Sobrescribir los m\u00e9todos equals(Object obj) & hashCode() Pensar en qu\u00e9 har\u00eda que dos veh\u00edculos sean iguales. O utilizar las propuestas del IDE. Sobrescribir el m\u00e9todo toString() , para que entregue un resultado como el que se presenta a continuaci\u00f3n: Veh\u00edculo: Nissan, 5 puertas, a\u00f1o 2018, $ 7.350.000 Se debe respetar la estructura del mensaje , may\u00fasculas y min\u00fascula, espacios, etc... Implementar la instancia de 4 objetos de este tipo y realizar las siguientes operaciones: Imprimir el detalle de cada Veh\u00edculo creado. Imprimir el promedio de a\u00f1o de estos cuatro veh\u00edculos. Crear otra instancia que contenga un mismo estado y compararla con alguna otra instancia que decidamos igual, adem\u00e1s de compararla con una que no es igual. Los resultados deben ser apreciablemente aceptables, Es decir, que cumplan con la igualdad que le asignamos y que esta igualdad sea reconocida. Soluci\u00f3n Vehiculo.java El equals(Object obj) & hashCode() , lo podemos hacer autom\u00e1ticamente, con eclipse, utilizando los atributos para realizar la comparaci\u00f3n que decidamos. package cl.lherrera.primero; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.List; public class Vehiculo { private String numeroMotor; private String marca; private Integer numeroPuertas; private Integer anioFabricacion; private Integer precio; public Vehiculo(String numeroMotor, String marca, int numeroPuertas, int anioFabricacion, int precio) { this.numeroMotor = numeroMotor; this.marca = marca; this.numeroPuertas = numeroPuertas; this.anioFabricacion = anioFabricacion; this.precio = precio; } private static String formateaPrecio(int precio) { String[] arregloDigitos = Integer.toString(precio).split(\"\"); // para poder agregar o remover, ya que asList retorna un tipo especial de lista // que posee las reglas de un arreglo. List<String> digitos = Arrays.asList(arregloDigitos); List<String> resultado = new ArrayList<>(digitos); Collections.reverse(resultado); int veces = 1; int largo = digitos.size(); for (int i = 0; i < largo; i++) { if (veces > 2 && digitos.size() > 3 && (i + 1) < largo) { resultado.add((i + 1), \".\"); largo++; veces = 0; } else { veces++; } } Collections.reverse(resultado); return resultado.stream().reduce(\"\", (a, b) -> a + b); } private String formateaMarca(String marca) { return marca.substring(0, 1).toUpperCase() + marca.substring(1).toLowerCase(); } @Override public String toString() { return \"Veh\u00edculo: \" + formateaMarca(marca) + \", \" + Integer.toString(numeroPuertas) + \" puertas, \" + \"a\u00f1o \" + Integer.toString(anioFabricacion) + \", \" + \"$ \" + formateaPrecio(precio); } @Override public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((numeroMotor == null) ? 0 : numeroMotor.hashCode()); return result; } @Override public boolean equals(Object obj) { if (this == obj) return true; if (obj == null) return false; if (getClass() != obj.getClass()) return false; Vehiculo other = (Vehiculo) obj; if (numeroMotor == null) { if (other.numeroMotor != null) return false; } else if (!numeroMotor.equals(other.numeroMotor)) return false; return true; } public String getNumeroMotor() { return numeroMotor; } public void setNumeroMotor(String numeroMotor) { this.numeroMotor = numeroMotor; } public String getMarca() { return marca; } public void setMarca(String marca) { this.marca = marca; } public int getNumeroPuertas() { return numeroPuertas; } public void setNumeroPuertas(int numeroPuertas) { this.numeroPuertas = numeroPuertas; } public int getAnioFabricacion() { return anioFabricacion; } public void setAnioFabricacion(int anioFabricacion) { this.anioFabricacion = anioFabricacion; } public int getPrecio() { return precio; } public void setPrecio(int precio) { this.precio = precio; } } Principal.java package cl.lherrera.primero; import java.util.ArrayList; import java.util.List; public class Principal { public static void main(String[] args) { Vehiculo nissan = new Vehiculo(\"9879804375\", \"nissan\", 5, 2018, 7350000); Vehiculo toyota = new Vehiculo(\"9873459844\", \"toyota\", 5, 2015, 4000000); Vehiculo mazda = new Vehiculo(\"0987324584\", \"mazda\", 3, 2020, 10000000); Vehiculo lexus = new Vehiculo(\"9873425987\", \"lexus\", 3, 2014, 17500000); System.out.println(nissan); System.out.println(toyota); System.out.println(mazda); System.out.println(lexus); // promedio de a\u00f1os List<Integer> anios = new ArrayList<>(); anios.add(nissan.getAnioFabricacion()); anios.add(toyota.getAnioFabricacion()); anios.add(mazda.getAnioFabricacion()); anios.add(lexus.getAnioFabricacion()); System.out.print(\"A\u00f1o promedio: \"); anios.stream() .mapToInt(x -> x) .average() .ifPresent(x -> System.out.println((int) x)); // comparando veh\u00edculos Vehiculo otroNissan = new Vehiculo(\"9879804375\", \"nissan\", 5, 2018, 7350000); System.out.println( \"nissan es igual a OtroNissan: \" + nissan.equals(otroNissan)); System.out.println( \"nissan es igual a mazda: \" + nissan.equals(mazda)); } } Sobrecarga de m\u00e9todos. Ya que no existen par\u00e1metros que sean opcionales, lo que que realizan lenguajes como php & pyhon entre otros. La forma de solventar atributos opcionales, es programar otro m\u00e9todo con el mismo tipo de retorno; pero con distintos tipos de par\u00e1metros, distinta cantidad de par\u00e1metros y tipo de retorno. Ejemplo: Parseador El siguiente ejemplo, imprime representaciones de transformaciones que pueda realizar un m\u00e9todo parse , que, dependiendo de lo que se le env\u00ede, ser\u00e1 el que ser\u00e1 ejecutado. Parseador Al exponer, tratar de ir de m\u00e9todo en m\u00e9todo entre el principal, y esta clase. package cl.lherrera; import java.util.Arrays; import java.util.List; public class Parseador { public String parse(int a) { return Integer.toString(a); } public int parse(String a) { return Integer.parseInt(a); } public String parse(boolean a) { return (a) ? \"true\" : \"false\"; } public String parse(int a, int b) { List<Integer> numeros = Arrays.asList(a, b); return numeros.toString(); } public String parse(String a, String b) { // List<String> numeros = Arrays.asList(a, b); return numeros.toString(); } } Principal.java package cl.lherrera; public class Principal { public static void main(String[] args) { Parseador parseador = new Parseador(); // public String parse(int a) String numTxt = parseador.parse(3); System.out.println(\"Clase numTxt: \" + numTxt.getClass().getSimpleName()); System.out.println(\"Valor numTxt: \" + numTxt); // public int parse(String a) Integer num = parseador.parse(\"3\"); // para poder hacer el getClass. System.out.println(\"Clase num: \" + num.getClass().getSimpleName()); System.out.println(\"Valor num: \" + num); // public String parse(boolean a) String bool = parseador.parse(true); // para poder hacer el getClass. System.out.println(\"Clase bool: \" + bool.getClass().getSimpleName()); System.out.println(\"Valor bool: \" + bool); // public String parse(int a, int b) String enteros = parseador.parse(1, 89); System.out.println(\"Clase enteros: \" + enteros.getClass().getSimpleName()); System.out.println(\"Valor enteros: \" + enteros); // public String parse(int a, int b) String enterosTxt = parseador.parse(\"7\", \"9\"); System.out.println(\"Clase enterosTxt: \" + enterosTxt.getClass().getSimpleName()); System.out.println(\"Valor enterosTxt: \" + enterosTxt); } } Ejercicio: Sumador Implementar una clase en Java llamada Sumador , esta clase posee un servicio llamado aplicar() , este entrega un entero con el resultado de una suma. Este m\u00e9todo siempre retornar\u00e1 un entero. Debe ser capaz de realizar la suma dado los siguientes argumentos: Una cantidad variable enteros. Una cantidad variable de cadenas de texto, que represente cada una un n\u00famero (no se manejan excepciones). Un arreglo primitivo de enteros. Un lista de enteros List<Integer> . Soluci\u00f3n Sumador.java package cl.lherrera; import java.util.ArrayList; import java.util.Collections; import java.util.List; public class Principal { public static void main(String[] args) { Sumador suma = new Sumador(); // t1 int total = suma.aplicar(1, 2, 3, 4, 5, 6); System.out.println(\"t1: \" + total); // t2 total = suma.aplicar(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"); System.out.println(\"t2: \" + total); // t3 total = suma.aplicar(new int[] {1, 2, 3, 4, 5, 6}); System.out.println(\"t3: \" + total); // t4 List<Integer> enteros = new ArrayList<>(); Collections.addAll(enteros, 1, 2, 3, 4, 5, 6); total = suma.aplicar(enteros); System.out.println(\"t4: \" + total); } } Principal.java package cl.lherrera; import java.util.ArrayList; import java.util.List; public class Sumador { /** * Este m\u00e9todo tiene problemas con el autoboxing que se produce a nivel de * m\u00e1quina virtual ya que pasa de int[] a Integer en tiempo de ejecuci\u00f3n no lo * realiza el runtime. Es por todo esto que se deben hacer est\u00e1s * transformaciones. Por eso es que no se usa para esta ocaci\u00f3n Arrays.asList(), * por que el autobox se produce en tiempo de ejecuci\u00f3n */ public int aplicar(int... a) { List<Integer> intList = new ArrayList<>(); for (Integer entero : a) intList.add(entero); return intList.stream().reduce(0, (x, y) -> x + y); } /** * Ya que lo que viene es una serie de n\u00fameros representados por cadenas, estos * se deben mapear a enteros, y como solamente los vamos a sumar usamos reduce */ public int aplicar(String... a) { List<String> intList = new ArrayList<>(); for (String entero : a) intList.add(entero); // si solamente usamos un map, no podemos aplicar un .sum(). return intList.stream().mapToInt(Integer::parseInt).sum(); } /* * ac\u00e1 ya nos llega la lista por par\u00e1metro, lo que significa que no hay * necesidad de transformaciones, lo que s\u00ed, mapToint, es necesario para * ejecutar sum, por lo que simplemente, le pasamos x -> x donde dejamos el * valor tal y como est\u00e1. Parece redundante; pero es necesario, si vamos a * aplicar funciones matem\u00e1ticas */ public int aplicar(List<Integer> a) { return a.stream().mapToInt(x -> x).sum(); } } Sobrecarga de constructor. Como el constructor es un m\u00e9todo m\u00e1s, solamente que cumple un rol especifico, retornar una instancia de la clase a la que pertenece. Es posible entonces sobrecargarla. Ejemplo: Pel\u00edcula. Dar la capacidad a una clase llamada Pelicula , para que pueda ser inicializada con atributos y adem\u00e1s si es que estos no son facilitados. Los atributos que posee ser\u00e1n: t\u00edtulo & duraci\u00f3n Pelicula.java Sobrecargamos el constructor para que pueda manejar el hecho que se construya sin argumentos. package cl.lherrera; public class Pelicula { private String titulo; private int duracion; public Pelicula() { this.titulo = \"No especificado\"; this.duracion = 0; } public Pelicula(String titulo, int duracion) { this.titulo = titulo; this.duracion = duracion; } @Override public String toString() { return \"Pelicula [titulo=\" + titulo + \", duracion=\" + duracion + \"]\"; } } Principal.java package cl.lherrera; public class Principal { public static void main(String[] args) { // P1 Pelicula pelicula1 = new Pelicula(); System.out.println(\"P1: \" + pelicula1); // P2 Pelicula pelicula2 = new Pelicula(\"El ciempi\u00e9s humano\", 82); System.out.println(\"P1: \" + pelicula2); } } Salida P1: Pelicula [titulo=No especificado, duracion=0] P1: Pelicula [titulo=El ciempi\u00e9s humano, duracion=82] Ejercicio: Usuario y rol Crear una clase que represente a un usuario, que posea tres atributos: rol : Representado con dos posibles valores: ROL_ADMIN ROL_USER username : Representa el nombre de usuario. password : Representa la contrase\u00f1a de un usuario. Llevar\u00e1 tres constructores: Uno vac\u00edo, que cree por defecto {admin, admin, ROL_USER} Uno que reciba el usuario y contrase\u00f1a y cree el siguiente valor por defecto {ROL_USER} Uno que reciba el usuario, contrase\u00f1a y un boolean que en caso de ser true indique el rol ROL_ADMIN y en caso de ser false indicar el rol ROL_USER Debe contener un m\u00e9todo que solamente ejecute su contenido si es un administrador: En caso de serlo imprimir: \"Bienvenido Administrador\". En caso de no serlo imprimir: \"Permisos insuficientes\" En la clase principal, creamos una instancia para cada constructor y ejecutamos el m\u00e9todo con las restricciones para comprobar su funcionamiento. Soluci\u00f3n Usuario.java package cl.lherrera; public class Usuario { private String rol; private String username; private String password; private static final String ADMIN = \"ROL_ADMIN\"; private static final String USER = \"ROL_USER\"; public Usuario() { this.username = \"admin\"; this.password = \"admin\"; this.rol = USER; } public Usuario(String username, String password) { this.username = username; this.password = password; this.rol = USER; } public Usuario(String username, String password, boolean isAdmin) { this.username = username; this.password = password; this.rol = (isAdmin) ? ADMIN : USER; } public void administraSistema() { if (this.rol.equals(ADMIN)) System.out.println(\"Bienvenido Administrador\"); else System.out.println(\"Permisos insuficientes\"); } @Override public String toString() { return \"Usuario [rol=\" + rol + \", username=\" + username + \", password=\" + password + \"]\"; } } Principal.java package cl.lherrera; public class Principal { public static void main(String[] args) { Usuario usuario1 = new Usuario(); Usuario usuario2 = new Usuario(\"lherrera\", \"1234\"); Usuario usuario3 = new Usuario(\"lherrera\", \"1234\", true); System.out.println(usuario1); System.out.println(usuario2); System.out.println(usuario3); usuario1.administraSistema(); usuario2.administraSistema(); usuario3.administraSistema(); } } Modificador static Si un atributo o m\u00e9todo posee este modificador, significa que le pertenece a la clase y no a una instancia. Es decir que lo guarda en el lugar donde se guarda la informaci\u00f3n de la clase, no en el heap . Demostraci\u00f3n Solo expositivo, muestra como es el funcionamiento de los est\u00e1ticos. El siguiente ejemplo, muestra, como se comporta un atributo y un m\u00e9todo est\u00e1tico. Persona.java package cl.lherrera; public class Persona { public static int conteo; public static void metodoEstatico() { System.out.println(\"El conteo lleva: \" + conteo); } } Principal.java package cl.lherrera; public class Principal { public static void main(String[] args) { Persona.conteo = 4; Persona persona1 = new Persona(); Persona persona2 = new Persona(); Persona.conteo = 6; Persona.conteo = 5; System.out.println(Persona.conteo); System.out.println(persona1.conteo); System.out.println(persona2.conteo); Persona.metodoEstatico(); persona1.metodoEstatico(); persona2.metodoEstatico(); // no importa que instanciemos y asignemos valorea desde otras instancias // el valor static, se queda est\u00e1tico en la misma clase, // al igual que sus m\u00e9todos. } } Importaci\u00f3n de est\u00e1ticos. Los valores est\u00e1ticos pueden ser importados independientemente de su clase. Es decir que si en una clase tenemos un atributo o m\u00e9todo est\u00e1tico, lo podemos llamar sin la necesidad de escribir el nombre de la clase cada vez que queramos utilizarla si realizamos un static import Principal.java Utilizando el ejemplo anterior, realizamos los siguientes cambios y probamos si podemos llamar directamente la llamada al atributo y m\u00e9todo est\u00e1tico. package cl.lherrera; import static cl.lherrera.Persona.conteo; import static cl.lherrera.Persona.metodoEstatico; public class Principal { public static void main(String[] args) { conteo = 4; System.out.println(conteo); metodoEstatico(); // se eliminan todas las referencias a Persona } } Constructor privado. Este tipo de constructor, realiza la tarea de evitar que se cree una instancia de una clase, ya que posee miembros (atributos y m\u00e9todos) est\u00e1ticos, entonces con ello evitamos confusiones como las vistas en el primer ejemplo, donde utilizamos miembros est\u00e1ticos desde una instancia, lo que no debe ser posible. Persona.java package cl.lherrera; public class Persona { // esto evita que se pueda crear una instancia private Persona() {} public static int conteo; public static void metodoEstatico() { System.out.println(\"El conteo lleva: \" + conteo); } } Principal.java package cl.lherrera; import static cl.lherrera.Persona.conteo; import static cl.lherrera.Persona.metodoEstatico; public class Principal { public static void main(String[] args) { conteo = 4; System.out.println(conteo); metodoEstatico(); Persona persona = new Persona(); // se eliminan todas las referencias a Persona } } Salida Exception in thread \"main\" java.lang.Error: Unresolved compilation problem: The constructor Persona() is not visible at cl.lherrera.Principal.main(Principal.java:13) Ejemplo: Clase utilitaria Muchas veces, el contexto empresarial, influye en las transformaciones que deba presentar la informaci\u00f3n que obtengamos. Podr\u00edamos por ejemplo, crear un m\u00e9todo llamado imprime, que muestre por consola lo que le sea entregado en una cadena de texto. Implementar dos clases, estas ser\u00e1n utilitarias, compuesta \u00fanicamente por miembros est\u00e1ticos, las clases son: . Clase utilitaria Dia con: 7 atributos est\u00e1ticos finales, siguiendo la siguiente estructura: public static final String LUNES = \"El d\u00eda seleccionado es el lunes\"; Clase utilitaria FechaFormat Esta clase, contiene un m\u00e9todo llamado consultaDia(int numDia) , este debe retornar, dependiendo el n\u00famero que se le asigne, la respuesta correspondiente basada en la clase Dia . Ejemplo: La llamada a consultaDia(1) , debe retornar: El d\u00eda seleccionado es el lunes Las llamadas de realizar\u00e1n desde el main. Las pruebas ser\u00e1n para cada d\u00eda de la semana. Se debe controlar que las clases no puedan ser instanciadas, adem\u00e1s de realizar una correcta importaci\u00f3n est\u00e1tica. Soluci\u00f3n Dia.java package cl.lherrera; public class Dia { private Dia() { } public static final String LUNES = \"El d\u00eda seleccionado es el lunes\"; public static final String MARTES = \"El d\u00eda seleccionado es el martes\"; public static final String MIERCOLES = \"El d\u00eda seleccionado es el mi\u00e9rcoles\"; public static final String JUEVES = \"El d\u00eda seleccionado es el jueves\"; public static final String VIERNES = \"El d\u00eda seleccionado es el viernes\"; public static final String SABADO = \"El d\u00eda seleccionado es el s\u00e1bado\"; public static final String DOMINGO = \"El d\u00eda seleccionado es el domingo\"; } FechaFormat.java package cl.lherrera; // o importar: import static cl.lherrera.Dia.*; import static cl.lherrera.Dia.LUNES; import static cl.lherrera.Dia.MARTES; import static cl.lherrera.Dia.MIERCOLES; import static cl.lherrera.Dia.JUEVES; import static cl.lherrera.Dia.VIERNES; import static cl.lherrera.Dia.SABADO; import static cl.lherrera.Dia.DOMINGO; public class FechaFormat { private FechaFormat() {} public static void consultaDia(int numDia){ switch (numDia) { case 1: System.out.println(LUNES); break; case 2: System.out.println(MARTES); break; case 3: System.out.println(MIERCOLES); break; case 4: System.out.println(JUEVES); break; case 5: System.out.println(VIERNES); break; case 6: System.out.println(SABADO); break; case 7: System.out.println(DOMINGO); break; default: System.out.println(\"c\u00f3digo incorrecto\"); break; } } } Principal.java \u001c package cl.lherrera; import static cl.lherrera.FechaFormat.consultaDia; public class Principal { public static void main(String[] args) { consultaDia(1); } }","title":"__Programaci\u00f3n orientada a objetos 001__"},{"location":"ejercicios/repaso/teoria/poo/introduccion/#programacion-orientada-a-objetos-001","text":"Tenemos que diferenciar entre lo que la clase sabe y lo que la clase hace . La clase, es la definici\u00f3n de un tipo , de la cual podemos instanciar objetos para poder utilizar sus servicios . Definen, la estructura de sus objetos. Es decir que todos los objetos de la misma clase, podr\u00e1n almacenar el mismo tipo de informaci\u00f3n y tendr\u00e1n la misma capacidad para manipularla . Una clase creada por nosotros , es la definici\u00f3n de un nuevo tipo de dato que puede o no ser compatible con otro tipo de dato . Para configurar esta compatibilidad, existen t\u00e9cnicas como el polimorfismo. Una clase en java est\u00e1 formada por: Atributos : (o campos/propiedades) Almacenan alg\u00fan tipo de informaci\u00f3n del objeto. Definen su estado. Constructor(es) : M\u00e9todo que se utiliza para inicializar un objeto. M\u00e9todos : Son utilizados para modificar o consultar el estado de un objeto . Equivalentes a las funciones o procedimientos de otros lenguajes. En Java solo hay dos excepciones al uso de objetos ( primitivos y arreglos ), adem\u00e1s de estos podemos utilizar variables primitivas como int \u001d, boolean \u001d, etc. y arrays \u001d como int[] \u001d, boolean[] \u001d, etc.. En Java, todo es un objeto Un programa es un mont\u00f3n de objetos que se dicen entre s\u00ed, lo que tienen que hacer envi\u00e1ndose mensajes . Cada objeto tiene su propia memoria formada por otros objetos . Todo objeto tiene un tipo asociado. Todos los objeto de un tipo particular, pueden recibir los mismos mensajes. (polimorfismo) . Todo objeto tiene una interfaz (sus m\u00e9todos p\u00fablicos) . Composici\u00f3n de clases v/s Herencia (composici\u00f3n siempre se pueda). Relaci\u00f3n es un v/s es como un . Se supone que cuando creemos una herencia, se supone que esta clase hija no posee m\u00e9todos nuevos. M\u00e9todos que no sean especificados en la clase padre pero que est\u00e9n en la clase hija, limita el polimorfismo, a menos que estos m\u00e9todos extras sean implementaciones de una interfaz u otro tipo que pueda ejecutar estos m\u00e9todos sin tener que crear una instancia dir\u00e9ctamente la clase. Cuando se aplica el polimorfismo, el compilador sabr\u00e1 en tiempo de ejecuci\u00f3n, el m\u00e9todo que ejecutar\u00e1. ya que es en este momento cuando se sabe qu\u00e9 clase es la que se ha cargado. ( Upcasting \u001d: Tratar un objeto derivado como un tipo base List<String> nombres = new ArrayList<>() ).","title":"Programaci\u00f3n orientada a objetos 001"},{"location":"ejercicios/repaso/teoria/poo/introduccion/#estructurar-o-definir-un-nuevo-tipo-de-dato-creacion-de-una-clase","text":"","title":"Estructurar o definir un nuevo tipo de dato - creaci\u00f3n de una clase."},{"location":"ejercicios/repaso/teoria/poo/introduccion/#ejemplo-representacion-de-una-fecha","text":"Primera parte: Estructurar clases, sobrescribir m\u00e9todos heredados. Instanciar e imprimir. Creamos una clase, Fecha (may\u00fascula para las clases), Esta clase tendr\u00e1 tres atributos: dia , mes , anio . Fecha.java package cl.lherrera.primero; public class Fecha { private String dia; private String mes; private String anio; } Principal.java package cl.lherrera.primero; public class Principal { public static void main(String[] args) { Fecha fecha = new Fecha(); System.out.println(fecha.dia); } } Exception in thread \"main\" java.lang.Error: Unresolved compilation problem: The field Fecha.dia is not visible at cl.lherrera.primero.Principal.main(Principal.java:8) Vemos que no se puede acceder a los atributos directamente desde otra clase, ya que posee un modificador de acceso llamado private , significa que puede ser accedido desde su clase y desde ning\u00fan otro lugar. Para poder modificar el estado de la clase, cuando son privadas (deber\u00eda ser casi siempre), se necesita hacer mediante m\u00e9todos .","title":"Ejemplo: Representaci\u00f3n de una fecha"},{"location":"ejercicios/repaso/teoria/poo/introduccion/#setters-amp-getters","text":"Agregamos los setters & getters , primero para poder asignar los valores, y luego para poder obtenerlos. Fecha.java // ... public String getDia() { return dia; } public void setDia(String dia) { this.dia = dia; } public String getMes() { return mes; } public void setMes(String mes) { this.mes = mes; } public String getAnio() { return anio; } public void setAnio(String anio) { this.anio = anio; } } Principal.java package cl.lherrera.primero; public class Principal { public static void main(String[] args) { Fecha fecha = new Fecha(); System.out.println(fecha.getDia()); } } Podemos asignar los valores, despu\u00e9s de crear la clase. Adem\u00e1s podemos imprimir la fecha en un formato de mejor comprensi\u00f3n humana. package cl.lherrera.primero; public class Principal { public static void main(String[] args) { Fecha fecha = new Fecha(); fecha.setDia(\"05\"); fecha.setMes(\"06\"); fecha.setAnio(\"2020\"); System.out.printf( \"%s/%s/%s\", fecha.getDia(), fecha.getMes(), fecha.getAnio() ); } }","title":"setters &amp;amp; getters"},{"location":"ejercicios/repaso/teoria/poo/introduccion/#constructor","text":"Para poder tener la opci\u00f3n de construir la clase al momento de instanciar, debemos crear un m\u00e9todo especial, llamado constructor . Este permite personalizar el estado de un objeto al momento de crear su instancia. Fecha.java //... public Fecha(String dia, String mes, String anio) { this.dia = dia; this.mes = mes; this.anio = anio; } //... Principal.java El constructor permite asignar el estado de una clase al momento de su instancia. package cl.lherrera.primero; public class Principal { public static void main(String[] args) { Fecha fecha = new Fecha(\"05\", \"06\", \"2020\"); System.out.printf( \"%s/%s/%s\", fecha.getDia(), fecha.getMes(), fecha.getAnio() ); } }","title":"constructor"},{"location":"ejercicios/repaso/teoria/poo/introduccion/#tostring","text":"Podemos personalizar la forma de imprimir la representaci\u00f3n de la informaci\u00f3n que presentar\u00e1. Este es el m\u00e9todo que se ejecuta cuando utilizamos System.ou.println(obj.toString); Este m\u00e9todo sobrescribe el m\u00e9todo entregado por Object . Fecha.java //... @Override public String toString() { return String.format( \"%s/%s/%s\", this.getDia(), this.getMes(), this.getAnio() ); } //... Principal.java package cl.lherrera.primero; public class Principal { public static void main(String[] args) { Fecha fecha = new Fecha(\"05\", \"06\", \"2020\"); System.out.println(fecha); } }","title":"toString()"},{"location":"ejercicios/repaso/teoria/poo/introduccion/#equalsobject-obj-amp-hashcode","text":"Java define si un objeto es igual a otro utilizando estos dos m\u00e9todos, el primero en ejecutarse es hashCode() , que ejecuta una comparaci\u00f3n muy r\u00e1pida que nosotros definamos que retorne un tipo de objeto ,hashCode() , para saber si vale o no la pena ejecutar el equals(Object obj) y finalmente saber si los objetos son iguales o no. Podemos seguir sobre escribiendo m\u00e9todos de Object , como el m\u00e9todo equals . Una de las clases de java.util , realiza esta sobrescritura, estamos hablando de la clase String . El objetivo de este m\u00e9todo, es que as\u00ed como un n\u00famero es igual a otro si tienen el mismo valor, para el caso de las clases no se puede concluir a priori, si dos objetos son representativamente iguales. Es decir que cuando creamos una clase, podemos programar un m\u00e9todo que indique si dos objetos creados a partir de esa clase son iguales o no. //... @Override public int hashCode() { return dia.hashCode(); } @Override public boolean equals(Object obj) { String este = this.toString(); String ese = \"\"; if(obj != null) ese = obj.toString(); return este.equals(ese); } //...","title":"equals(Object obj) &amp;amp; hashCode()"},{"location":"ejercicios/repaso/teoria/poo/introduccion/#repaso-de-lo-visto","text":"Toda clase hereda (directa o indirectamente) de la clase Object . Los m\u00e9todos (como toString ) de la clase Object . son comunes a todas las clases. \"Sobrescribir\", significa reescribir el cuerpo de un m\u00e9todo que estamos heredando, sin modificar su encabezado(par\u00e1metros) ni su prototipo(modificadores). Los objetos comienzan a ser utilizados luego de ejecutada su instancia, donde el constructor se encarga de iniciar su estado, si no proporcionamos el constructor, Java nos proporciona uno vac\u00edo por defecto. En el caso en que se cree cualquier tipo de constructor, el constructor por defecto desaparece, si necesitamos un constructor vac\u00edo, este debe ser implementado.","title":"Repaso de lo visto"},{"location":"ejercicios/repaso/teoria/poo/introduccion/#resultado-final","text":"Principal.java package cl.lherrera.primero; public class Principal { public static void main(String[] args) { Fecha fecha = new Fecha(\"05\", \"06\", \"2020\"); Fecha fecha2 = new Fecha(\"05\", \"06\", \"2020\"); System.out.println(fecha.equals(fecha2)); } } Fecha.java package cl.lherrera.primero; public class Fecha { private String dia; private String mes; private String anio; public Fecha(String dia, String mes, String anio) { this.dia = dia; this.mes = mes; this.anio = anio; } public String getDia() { return dia; } public void setDia(String dia) { this.dia = dia; } public String getMes() { return mes; } public void setMes(String mes) { this.mes = mes; } public String getAnio() { return anio; } public void setAnio(String anio) { this.anio = anio; } @Override public int hashCode() { return dia.hashCode(); } @Override public boolean equals(Object obj) { String este = this.toString(); String ese = \"\"; if (obj != null) ese = obj.toString(); return este.equals(ese); } @Override public String toString() { return String.format( \"%s/%s/%s\", this.getDia(), this.getMes(), this.getAnio()); } }","title":"Resultado final"},{"location":"ejercicios/repaso/teoria/poo/introduccion/#nomenclaturas","text":"Nombres de clases con inicial may\u00fascula. CamelCase . Nombres de m\u00e9todos, \u00eddem anterior; pero no comienzan con may\u00fasculas, adem\u00e1s de entregar en su nombre una descripci\u00f3n muy corta de lo que realiza el m\u00e9todo, como sumar(int a, int b) , podemos saber que suma dos n\u00fameros. Nombres de atributos: Comienzan con min\u00fascula y CamelCase . Constantes son todas may\u00fasculas.","title":"Nomenclaturas"},{"location":"ejercicios/repaso/teoria/poo/introduccion/#estructura-de-creacion-de-una-clase","text":"Una clase se crea dentro de una unidad de compilaci\u00f3n, es decir un archivo .class , Dentro de esta unidad de compilaci\u00f3n, debe existir una clase p\u00fablica con el mismo nombre de la unidad de compilaci\u00f3n. Adicionalmente, podemos definir m\u00e1s tipos; pero estos no pueden llevar public . Al compilar, esta unidad de compilaci\u00f3n, se crean unidades tantas unidades de salida, dependiendo de los tipos que posea esta unidad de compilaci\u00f3n. Las clases son agrupadas en paquetes, por este motivo, al principio de este fichero se debe indicar el paquete al que pertenecer\u00e1 esta clase. Por ejemplo: package ejemplos, si necesitamos clases de otros paquetes podemos agregar luego los import. ejemplo; import java.util.Scanner; Estructura de declaraci\u00f3n: class <clase> { //declaraci\u00f3n de atributos [visibilidad] [modificadores] <tipo> <atributo> [= valor]; ... //declaraci\u00f3n de constructor public <clase>(<argumentos>) { <instrucciones>; } //declaraci\u00f3n de m\u00e9todos [visibilidad] [modificadores] <tipo> <m\u00e9todo>(<argumentos>) { <instrucciones>; } ... } [visibilidad] = public, protected o private [modificadores] = final, static y abstract","title":"Estructura de creaci\u00f3n de una clase"},{"location":"ejercicios/repaso/teoria/poo/introduccion/#ejercicio-clase-vehiculo-vehiculo","text":"Crear un nuevo tipo de dato (o clase) que represente un Veh\u00edculo, que posea los siguientes atributos: C\u00f3digo de motor. Marca. N\u00famero de puertas. A\u00f1o de fabricaci\u00f3n. precio. Implementar los atributos (correctamente encapsulados). Crear un constructor que inicie los valores de esta clase, es decir, que defina un estado inicial. Implementar los setters & getters . Sobrescribir los m\u00e9todos equals(Object obj) & hashCode() Pensar en qu\u00e9 har\u00eda que dos veh\u00edculos sean iguales. O utilizar las propuestas del IDE. Sobrescribir el m\u00e9todo toString() , para que entregue un resultado como el que se presenta a continuaci\u00f3n: Veh\u00edculo: Nissan, 5 puertas, a\u00f1o 2018, $ 7.350.000 Se debe respetar la estructura del mensaje , may\u00fasculas y min\u00fascula, espacios, etc... Implementar la instancia de 4 objetos de este tipo y realizar las siguientes operaciones: Imprimir el detalle de cada Veh\u00edculo creado. Imprimir el promedio de a\u00f1o de estos cuatro veh\u00edculos. Crear otra instancia que contenga un mismo estado y compararla con alguna otra instancia que decidamos igual, adem\u00e1s de compararla con una que no es igual. Los resultados deben ser apreciablemente aceptables, Es decir, que cumplan con la igualdad que le asignamos y que esta igualdad sea reconocida. Soluci\u00f3n Vehiculo.java El equals(Object obj) & hashCode() , lo podemos hacer autom\u00e1ticamente, con eclipse, utilizando los atributos para realizar la comparaci\u00f3n que decidamos. package cl.lherrera.primero; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.List; public class Vehiculo { private String numeroMotor; private String marca; private Integer numeroPuertas; private Integer anioFabricacion; private Integer precio; public Vehiculo(String numeroMotor, String marca, int numeroPuertas, int anioFabricacion, int precio) { this.numeroMotor = numeroMotor; this.marca = marca; this.numeroPuertas = numeroPuertas; this.anioFabricacion = anioFabricacion; this.precio = precio; } private static String formateaPrecio(int precio) { String[] arregloDigitos = Integer.toString(precio).split(\"\"); // para poder agregar o remover, ya que asList retorna un tipo especial de lista // que posee las reglas de un arreglo. List<String> digitos = Arrays.asList(arregloDigitos); List<String> resultado = new ArrayList<>(digitos); Collections.reverse(resultado); int veces = 1; int largo = digitos.size(); for (int i = 0; i < largo; i++) { if (veces > 2 && digitos.size() > 3 && (i + 1) < largo) { resultado.add((i + 1), \".\"); largo++; veces = 0; } else { veces++; } } Collections.reverse(resultado); return resultado.stream().reduce(\"\", (a, b) -> a + b); } private String formateaMarca(String marca) { return marca.substring(0, 1).toUpperCase() + marca.substring(1).toLowerCase(); } @Override public String toString() { return \"Veh\u00edculo: \" + formateaMarca(marca) + \", \" + Integer.toString(numeroPuertas) + \" puertas, \" + \"a\u00f1o \" + Integer.toString(anioFabricacion) + \", \" + \"$ \" + formateaPrecio(precio); } @Override public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((numeroMotor == null) ? 0 : numeroMotor.hashCode()); return result; } @Override public boolean equals(Object obj) { if (this == obj) return true; if (obj == null) return false; if (getClass() != obj.getClass()) return false; Vehiculo other = (Vehiculo) obj; if (numeroMotor == null) { if (other.numeroMotor != null) return false; } else if (!numeroMotor.equals(other.numeroMotor)) return false; return true; } public String getNumeroMotor() { return numeroMotor; } public void setNumeroMotor(String numeroMotor) { this.numeroMotor = numeroMotor; } public String getMarca() { return marca; } public void setMarca(String marca) { this.marca = marca; } public int getNumeroPuertas() { return numeroPuertas; } public void setNumeroPuertas(int numeroPuertas) { this.numeroPuertas = numeroPuertas; } public int getAnioFabricacion() { return anioFabricacion; } public void setAnioFabricacion(int anioFabricacion) { this.anioFabricacion = anioFabricacion; } public int getPrecio() { return precio; } public void setPrecio(int precio) { this.precio = precio; } } Principal.java package cl.lherrera.primero; import java.util.ArrayList; import java.util.List; public class Principal { public static void main(String[] args) { Vehiculo nissan = new Vehiculo(\"9879804375\", \"nissan\", 5, 2018, 7350000); Vehiculo toyota = new Vehiculo(\"9873459844\", \"toyota\", 5, 2015, 4000000); Vehiculo mazda = new Vehiculo(\"0987324584\", \"mazda\", 3, 2020, 10000000); Vehiculo lexus = new Vehiculo(\"9873425987\", \"lexus\", 3, 2014, 17500000); System.out.println(nissan); System.out.println(toyota); System.out.println(mazda); System.out.println(lexus); // promedio de a\u00f1os List<Integer> anios = new ArrayList<>(); anios.add(nissan.getAnioFabricacion()); anios.add(toyota.getAnioFabricacion()); anios.add(mazda.getAnioFabricacion()); anios.add(lexus.getAnioFabricacion()); System.out.print(\"A\u00f1o promedio: \"); anios.stream() .mapToInt(x -> x) .average() .ifPresent(x -> System.out.println((int) x)); // comparando veh\u00edculos Vehiculo otroNissan = new Vehiculo(\"9879804375\", \"nissan\", 5, 2018, 7350000); System.out.println( \"nissan es igual a OtroNissan: \" + nissan.equals(otroNissan)); System.out.println( \"nissan es igual a mazda: \" + nissan.equals(mazda)); } }","title":"Ejercicio: Clase Veh\u00edculo Vehiculo."},{"location":"ejercicios/repaso/teoria/poo/introduccion/#sobrecarga-de-metodos","text":"Ya que no existen par\u00e1metros que sean opcionales, lo que que realizan lenguajes como php & pyhon entre otros. La forma de solventar atributos opcionales, es programar otro m\u00e9todo con el mismo tipo de retorno; pero con distintos tipos de par\u00e1metros, distinta cantidad de par\u00e1metros y tipo de retorno.","title":"Sobrecarga de m\u00e9todos."},{"location":"ejercicios/repaso/teoria/poo/introduccion/#ejemplo-parseador","text":"El siguiente ejemplo, imprime representaciones de transformaciones que pueda realizar un m\u00e9todo parse , que, dependiendo de lo que se le env\u00ede, ser\u00e1 el que ser\u00e1 ejecutado. Parseador Al exponer, tratar de ir de m\u00e9todo en m\u00e9todo entre el principal, y esta clase. package cl.lherrera; import java.util.Arrays; import java.util.List; public class Parseador { public String parse(int a) { return Integer.toString(a); } public int parse(String a) { return Integer.parseInt(a); } public String parse(boolean a) { return (a) ? \"true\" : \"false\"; } public String parse(int a, int b) { List<Integer> numeros = Arrays.asList(a, b); return numeros.toString(); } public String parse(String a, String b) { // List<String> numeros = Arrays.asList(a, b); return numeros.toString(); } } Principal.java package cl.lherrera; public class Principal { public static void main(String[] args) { Parseador parseador = new Parseador(); // public String parse(int a) String numTxt = parseador.parse(3); System.out.println(\"Clase numTxt: \" + numTxt.getClass().getSimpleName()); System.out.println(\"Valor numTxt: \" + numTxt); // public int parse(String a) Integer num = parseador.parse(\"3\"); // para poder hacer el getClass. System.out.println(\"Clase num: \" + num.getClass().getSimpleName()); System.out.println(\"Valor num: \" + num); // public String parse(boolean a) String bool = parseador.parse(true); // para poder hacer el getClass. System.out.println(\"Clase bool: \" + bool.getClass().getSimpleName()); System.out.println(\"Valor bool: \" + bool); // public String parse(int a, int b) String enteros = parseador.parse(1, 89); System.out.println(\"Clase enteros: \" + enteros.getClass().getSimpleName()); System.out.println(\"Valor enteros: \" + enteros); // public String parse(int a, int b) String enterosTxt = parseador.parse(\"7\", \"9\"); System.out.println(\"Clase enterosTxt: \" + enterosTxt.getClass().getSimpleName()); System.out.println(\"Valor enterosTxt: \" + enterosTxt); } }","title":"Ejemplo: Parseador"},{"location":"ejercicios/repaso/teoria/poo/introduccion/#ejercicio-sumador","text":"Implementar una clase en Java llamada Sumador , esta clase posee un servicio llamado aplicar() , este entrega un entero con el resultado de una suma. Este m\u00e9todo siempre retornar\u00e1 un entero. Debe ser capaz de realizar la suma dado los siguientes argumentos: Una cantidad variable enteros. Una cantidad variable de cadenas de texto, que represente cada una un n\u00famero (no se manejan excepciones). Un arreglo primitivo de enteros. Un lista de enteros List<Integer> . Soluci\u00f3n Sumador.java package cl.lherrera; import java.util.ArrayList; import java.util.Collections; import java.util.List; public class Principal { public static void main(String[] args) { Sumador suma = new Sumador(); // t1 int total = suma.aplicar(1, 2, 3, 4, 5, 6); System.out.println(\"t1: \" + total); // t2 total = suma.aplicar(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"); System.out.println(\"t2: \" + total); // t3 total = suma.aplicar(new int[] {1, 2, 3, 4, 5, 6}); System.out.println(\"t3: \" + total); // t4 List<Integer> enteros = new ArrayList<>(); Collections.addAll(enteros, 1, 2, 3, 4, 5, 6); total = suma.aplicar(enteros); System.out.println(\"t4: \" + total); } } Principal.java package cl.lherrera; import java.util.ArrayList; import java.util.List; public class Sumador { /** * Este m\u00e9todo tiene problemas con el autoboxing que se produce a nivel de * m\u00e1quina virtual ya que pasa de int[] a Integer en tiempo de ejecuci\u00f3n no lo * realiza el runtime. Es por todo esto que se deben hacer est\u00e1s * transformaciones. Por eso es que no se usa para esta ocaci\u00f3n Arrays.asList(), * por que el autobox se produce en tiempo de ejecuci\u00f3n */ public int aplicar(int... a) { List<Integer> intList = new ArrayList<>(); for (Integer entero : a) intList.add(entero); return intList.stream().reduce(0, (x, y) -> x + y); } /** * Ya que lo que viene es una serie de n\u00fameros representados por cadenas, estos * se deben mapear a enteros, y como solamente los vamos a sumar usamos reduce */ public int aplicar(String... a) { List<String> intList = new ArrayList<>(); for (String entero : a) intList.add(entero); // si solamente usamos un map, no podemos aplicar un .sum(). return intList.stream().mapToInt(Integer::parseInt).sum(); } /* * ac\u00e1 ya nos llega la lista por par\u00e1metro, lo que significa que no hay * necesidad de transformaciones, lo que s\u00ed, mapToint, es necesario para * ejecutar sum, por lo que simplemente, le pasamos x -> x donde dejamos el * valor tal y como est\u00e1. Parece redundante; pero es necesario, si vamos a * aplicar funciones matem\u00e1ticas */ public int aplicar(List<Integer> a) { return a.stream().mapToInt(x -> x).sum(); } }","title":"Ejercicio: Sumador"},{"location":"ejercicios/repaso/teoria/poo/introduccion/#sobrecarga-de-constructor","text":"Como el constructor es un m\u00e9todo m\u00e1s, solamente que cumple un rol especifico, retornar una instancia de la clase a la que pertenece. Es posible entonces sobrecargarla.","title":"Sobrecarga de constructor."},{"location":"ejercicios/repaso/teoria/poo/introduccion/#ejemplo-pelicula","text":"Dar la capacidad a una clase llamada Pelicula , para que pueda ser inicializada con atributos y adem\u00e1s si es que estos no son facilitados. Los atributos que posee ser\u00e1n: t\u00edtulo & duraci\u00f3n Pelicula.java Sobrecargamos el constructor para que pueda manejar el hecho que se construya sin argumentos. package cl.lherrera; public class Pelicula { private String titulo; private int duracion; public Pelicula() { this.titulo = \"No especificado\"; this.duracion = 0; } public Pelicula(String titulo, int duracion) { this.titulo = titulo; this.duracion = duracion; } @Override public String toString() { return \"Pelicula [titulo=\" + titulo + \", duracion=\" + duracion + \"]\"; } } Principal.java package cl.lherrera; public class Principal { public static void main(String[] args) { // P1 Pelicula pelicula1 = new Pelicula(); System.out.println(\"P1: \" + pelicula1); // P2 Pelicula pelicula2 = new Pelicula(\"El ciempi\u00e9s humano\", 82); System.out.println(\"P1: \" + pelicula2); } } Salida P1: Pelicula [titulo=No especificado, duracion=0] P1: Pelicula [titulo=El ciempi\u00e9s humano, duracion=82]","title":"Ejemplo: Pel\u00edcula."},{"location":"ejercicios/repaso/teoria/poo/introduccion/#ejercicio-usuario-y-rol","text":"Crear una clase que represente a un usuario, que posea tres atributos: rol : Representado con dos posibles valores: ROL_ADMIN ROL_USER username : Representa el nombre de usuario. password : Representa la contrase\u00f1a de un usuario. Llevar\u00e1 tres constructores: Uno vac\u00edo, que cree por defecto {admin, admin, ROL_USER} Uno que reciba el usuario y contrase\u00f1a y cree el siguiente valor por defecto {ROL_USER} Uno que reciba el usuario, contrase\u00f1a y un boolean que en caso de ser true indique el rol ROL_ADMIN y en caso de ser false indicar el rol ROL_USER Debe contener un m\u00e9todo que solamente ejecute su contenido si es un administrador: En caso de serlo imprimir: \"Bienvenido Administrador\". En caso de no serlo imprimir: \"Permisos insuficientes\" En la clase principal, creamos una instancia para cada constructor y ejecutamos el m\u00e9todo con las restricciones para comprobar su funcionamiento. Soluci\u00f3n Usuario.java package cl.lherrera; public class Usuario { private String rol; private String username; private String password; private static final String ADMIN = \"ROL_ADMIN\"; private static final String USER = \"ROL_USER\"; public Usuario() { this.username = \"admin\"; this.password = \"admin\"; this.rol = USER; } public Usuario(String username, String password) { this.username = username; this.password = password; this.rol = USER; } public Usuario(String username, String password, boolean isAdmin) { this.username = username; this.password = password; this.rol = (isAdmin) ? ADMIN : USER; } public void administraSistema() { if (this.rol.equals(ADMIN)) System.out.println(\"Bienvenido Administrador\"); else System.out.println(\"Permisos insuficientes\"); } @Override public String toString() { return \"Usuario [rol=\" + rol + \", username=\" + username + \", password=\" + password + \"]\"; } } Principal.java package cl.lherrera; public class Principal { public static void main(String[] args) { Usuario usuario1 = new Usuario(); Usuario usuario2 = new Usuario(\"lherrera\", \"1234\"); Usuario usuario3 = new Usuario(\"lherrera\", \"1234\", true); System.out.println(usuario1); System.out.println(usuario2); System.out.println(usuario3); usuario1.administraSistema(); usuario2.administraSistema(); usuario3.administraSistema(); } }","title":"Ejercicio: Usuario y rol"},{"location":"ejercicios/repaso/teoria/poo/introduccion/#modificador-static","text":"Si un atributo o m\u00e9todo posee este modificador, significa que le pertenece a la clase y no a una instancia. Es decir que lo guarda en el lugar donde se guarda la informaci\u00f3n de la clase, no en el heap .","title":"Modificador static"},{"location":"ejercicios/repaso/teoria/poo/introduccion/#demostracion","text":"Solo expositivo, muestra como es el funcionamiento de los est\u00e1ticos. El siguiente ejemplo, muestra, como se comporta un atributo y un m\u00e9todo est\u00e1tico. Persona.java package cl.lherrera; public class Persona { public static int conteo; public static void metodoEstatico() { System.out.println(\"El conteo lleva: \" + conteo); } } Principal.java package cl.lherrera; public class Principal { public static void main(String[] args) { Persona.conteo = 4; Persona persona1 = new Persona(); Persona persona2 = new Persona(); Persona.conteo = 6; Persona.conteo = 5; System.out.println(Persona.conteo); System.out.println(persona1.conteo); System.out.println(persona2.conteo); Persona.metodoEstatico(); persona1.metodoEstatico(); persona2.metodoEstatico(); // no importa que instanciemos y asignemos valorea desde otras instancias // el valor static, se queda est\u00e1tico en la misma clase, // al igual que sus m\u00e9todos. } }","title":"Demostraci\u00f3n"},{"location":"ejercicios/repaso/teoria/poo/introduccion/#importacion-de-estaticos","text":"Los valores est\u00e1ticos pueden ser importados independientemente de su clase. Es decir que si en una clase tenemos un atributo o m\u00e9todo est\u00e1tico, lo podemos llamar sin la necesidad de escribir el nombre de la clase cada vez que queramos utilizarla si realizamos un static import Principal.java Utilizando el ejemplo anterior, realizamos los siguientes cambios y probamos si podemos llamar directamente la llamada al atributo y m\u00e9todo est\u00e1tico. package cl.lherrera; import static cl.lherrera.Persona.conteo; import static cl.lherrera.Persona.metodoEstatico; public class Principal { public static void main(String[] args) { conteo = 4; System.out.println(conteo); metodoEstatico(); // se eliminan todas las referencias a Persona } }","title":"Importaci\u00f3n de est\u00e1ticos."},{"location":"ejercicios/repaso/teoria/poo/introduccion/#constructor-privado","text":"Este tipo de constructor, realiza la tarea de evitar que se cree una instancia de una clase, ya que posee miembros (atributos y m\u00e9todos) est\u00e1ticos, entonces con ello evitamos confusiones como las vistas en el primer ejemplo, donde utilizamos miembros est\u00e1ticos desde una instancia, lo que no debe ser posible. Persona.java package cl.lherrera; public class Persona { // esto evita que se pueda crear una instancia private Persona() {} public static int conteo; public static void metodoEstatico() { System.out.println(\"El conteo lleva: \" + conteo); } } Principal.java package cl.lherrera; import static cl.lherrera.Persona.conteo; import static cl.lherrera.Persona.metodoEstatico; public class Principal { public static void main(String[] args) { conteo = 4; System.out.println(conteo); metodoEstatico(); Persona persona = new Persona(); // se eliminan todas las referencias a Persona } } Salida Exception in thread \"main\" java.lang.Error: Unresolved compilation problem: The constructor Persona() is not visible at cl.lherrera.Principal.main(Principal.java:13)","title":"Constructor privado."},{"location":"ejercicios/repaso/teoria/poo/introduccion/#ejemplo-clase-utilitaria","text":"Muchas veces, el contexto empresarial, influye en las transformaciones que deba presentar la informaci\u00f3n que obtengamos. Podr\u00edamos por ejemplo, crear un m\u00e9todo llamado imprime, que muestre por consola lo que le sea entregado en una cadena de texto. Implementar dos clases, estas ser\u00e1n utilitarias, compuesta \u00fanicamente por miembros est\u00e1ticos, las clases son: . Clase utilitaria Dia con: 7 atributos est\u00e1ticos finales, siguiendo la siguiente estructura: public static final String LUNES = \"El d\u00eda seleccionado es el lunes\"; Clase utilitaria FechaFormat Esta clase, contiene un m\u00e9todo llamado consultaDia(int numDia) , este debe retornar, dependiendo el n\u00famero que se le asigne, la respuesta correspondiente basada en la clase Dia . Ejemplo: La llamada a consultaDia(1) , debe retornar: El d\u00eda seleccionado es el lunes Las llamadas de realizar\u00e1n desde el main. Las pruebas ser\u00e1n para cada d\u00eda de la semana. Se debe controlar que las clases no puedan ser instanciadas, adem\u00e1s de realizar una correcta importaci\u00f3n est\u00e1tica. Soluci\u00f3n Dia.java package cl.lherrera; public class Dia { private Dia() { } public static final String LUNES = \"El d\u00eda seleccionado es el lunes\"; public static final String MARTES = \"El d\u00eda seleccionado es el martes\"; public static final String MIERCOLES = \"El d\u00eda seleccionado es el mi\u00e9rcoles\"; public static final String JUEVES = \"El d\u00eda seleccionado es el jueves\"; public static final String VIERNES = \"El d\u00eda seleccionado es el viernes\"; public static final String SABADO = \"El d\u00eda seleccionado es el s\u00e1bado\"; public static final String DOMINGO = \"El d\u00eda seleccionado es el domingo\"; } FechaFormat.java package cl.lherrera; // o importar: import static cl.lherrera.Dia.*; import static cl.lherrera.Dia.LUNES; import static cl.lherrera.Dia.MARTES; import static cl.lherrera.Dia.MIERCOLES; import static cl.lherrera.Dia.JUEVES; import static cl.lherrera.Dia.VIERNES; import static cl.lherrera.Dia.SABADO; import static cl.lherrera.Dia.DOMINGO; public class FechaFormat { private FechaFormat() {} public static void consultaDia(int numDia){ switch (numDia) { case 1: System.out.println(LUNES); break; case 2: System.out.println(MARTES); break; case 3: System.out.println(MIERCOLES); break; case 4: System.out.println(JUEVES); break; case 5: System.out.println(VIERNES); break; case 6: System.out.println(SABADO); break; case 7: System.out.println(DOMINGO); break; default: System.out.println(\"c\u00f3digo incorrecto\"); break; } } } Principal.java \u001c package cl.lherrera; import static cl.lherrera.FechaFormat.consultaDia; public class Principal { public static void main(String[] args) { consultaDia(1); } }","title":"Ejemplo: Clase utilitaria"},{"location":"ejercicios/servlets/cicloVida/","text":"Ciclo de vida de un Servlet Ejemplo para exponer que un servlet posee un ciclo de vida. package cl.lherrera.ciclovida; import java.io.IOException; import java.util.logging.Logger; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; @WebServlet(\"/\") public class MiServlet extends HttpServlet{ private static final long serialVersionUID = 1658113032288631062L; private static Logger miloger = Logger.getLogger(MiServlet.class.getName()); private String saludo; @Override public void init() throws ServletException { this.saludo = \"Hola mundo\"; miloger.info(\"Servlet iniciado...\"); } @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp){ resp.setContentType(\"text/html\"); try { resp.getWriter().println(\"<h1>\" + saludo + \"</h1>\"); } catch (IOException e) { miloger.severe(e.getMessage()); } miloger.info(\"Servlet ejecutado...\"); } @Override public void destroy() { // This method is only called once all threads within the servlet's // service method have exited or after a timeout period has passed. // no lo veremos ejecutarse mientras tanto. miloger.info(\"Servlet destru\u00eddo...\"); } }","title":"Ciclo de vida de un Servlet"},{"location":"ejercicios/servlets/cicloVida/#ciclo-de-vida-de-un-servlet","text":"Ejemplo para exponer que un servlet posee un ciclo de vida. package cl.lherrera.ciclovida; import java.io.IOException; import java.util.logging.Logger; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; @WebServlet(\"/\") public class MiServlet extends HttpServlet{ private static final long serialVersionUID = 1658113032288631062L; private static Logger miloger = Logger.getLogger(MiServlet.class.getName()); private String saludo; @Override public void init() throws ServletException { this.saludo = \"Hola mundo\"; miloger.info(\"Servlet iniciado...\"); } @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp){ resp.setContentType(\"text/html\"); try { resp.getWriter().println(\"<h1>\" + saludo + \"</h1>\"); } catch (IOException e) { miloger.severe(e.getMessage()); } miloger.info(\"Servlet ejecutado...\"); } @Override public void destroy() { // This method is only called once all threads within the servlet's // service method have exited or after a timeout period has passed. // no lo veremos ejecutarse mientras tanto. miloger.info(\"Servlet destru\u00eddo...\"); } }","title":"Ciclo de vida de un Servlet"},{"location":"ejercicios/servlets/saluda/","text":"Saluda en la web Dise\u00f1e una aplicaci\u00f3n en Java, que sea capaz de imprimir Hola Mundo en un navegador web. Soluci\u00f3n 1 Se puede realizar un Dynamic web project con un .jsp Estructura \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u251c\u2500\u2500 WEB-INF \u2502 \u2502 \u2514\u2500\u2500 lib \u2502 \u2514\u2500\u2500 index.jsp \u251c\u2500\u2500 build \u2502 \u2514\u2500\u2500 classes \u2514\u2500\u2500 src WebContent/index.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Insert title here</title> </head> <body> Hola mundo </body> </html> Soluci\u00f3n 2 Se puede realizar con un servlet. Estructura \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 WEB-INF \u2502 \u2514\u2500\u2500 lib \u2514\u2500\u2500 src \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 servlets \u2514\u2500\u2500 Saludo.java src/cl/lherrera/servlets/Saludo.java package cl.lherrera.servlets; import java.io.IOException; import java.io.PrintWriter; import java.util.logging.Logger; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; @WebServlet(\"/\") public class Saludo extends HttpServlet{ private static final long serialVersionUID = 4846706137180238153L; Logger milog = Logger.getLogger(Saludo.class.getName()); @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { // obtenemos el escribidor de la respuesta y lo // modificamos desde ac\u00e1. Es m\u00e9todo // es el que escribe en la // respuesta que se // entregar\u00e1. try { PrintWriter pw = resp.getWriter(); pw.println(\"<h1>Hola mundo</h1>\"); } catch (IOException e) { milog.severe(e.getMessage()); } } } Soluci\u00f3n 3 Solamente para exponer, los servlets se pueden comunicar entre ellos. Estructura: \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 WEB-INF \u2502 \u2514\u2500\u2500 lib \u2514\u2500\u2500 src \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 servlets \u251c\u2500\u2500 ProcesaSaludo.java \u2514\u2500\u2500 Saludo.java src/cl/lherrera/servlets/Saludo.java package cl.lherrera.servlets; import java.io.IOException; import java.util.logging.Logger; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; @WebServlet(\"/\") public class Saludo extends HttpServlet{ private static final long serialVersionUID = 4846706137180238153L; private static Logger milog = Logger.getLogger(Saludo.class.getName()); @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { try { req.getServletContext().getRequestDispatcher(\"/procesa\").forward(req, resp); } catch (ServletException | IOException e) { milog.severe(e.getMessage()); } } } src/cl/lherrera/servlets/ProcesaSaludo.java package cl.lherrera.servlets; import java.io.IOException; import java.io.PrintWriter; import java.util.logging.Logger; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; @WebServlet(\"/procesa\") public class ProcesaSaludo extends HttpServlet{ private static final long serialVersionUID = 2160177863364950188L; Logger milog = Logger.getLogger(ProcesaSaludo.class.getName()); @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { try { PrintWriter pw = resp.getWriter(); pw.println(\"<h1>Hola mundo</h1>\"); } catch (IOException e) { milog.severe(e.getMessage()); } } } Soluci\u00f3n 4 Podemos utilizar un Descriptor de despliegue (deployment descriptor \"DD\"). web.xml . Este descriptor nos ayuda a controlar una mayor personalizaci\u00f3n, aunque con este sencillo ejemplo no veremos todo su poder, nos ayudar\u00e1 a enrutar nuestros servlets. Estructura \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 WEB-INF \u2502 \u251c\u2500\u2500 lib \u2502 \u2514\u2500\u2500 web.xml \u2514\u2500\u2500 src \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 servlets \u251c\u2500\u2500 ProcesaSaludo.java \u2514\u2500\u2500 Saludo.java WebContent/WEB-INF/web.xml <web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\" version=\"3.1\"> <servlet> <servlet-name>saludame</servlet-name> <servlet-class>cl.lherrera.servlets.Saludo</servlet-class> </servlet> <servlet-mapping> <servlet-name>saludame</servlet-name> <url-pattern>/*</url-pattern> </servlet-mapping> <servlet> <servlet-name>imprime</servlet-name> <servlet-class>cl.lherrera.servlets.ProcesaSaludo</servlet-class> </servlet> <servlet-mapping> <servlet-name>imprime</servlet-name> <url-pattern>/procesa</url-pattern> </servlet-mapping> </web-app> src/cl/lherrera/servlets/Saludo.java package cl.lherrera.servlets; import java.io.IOException; import java.util.logging.Logger; import javax.servlet.ServletException; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; public class Saludo extends HttpServlet{ private static final long serialVersionUID = 4846706137180238153L; private static Logger milog = Logger.getLogger(Saludo.class.getName()); @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { try { req.getServletContext().getRequestDispatcher(\"/procesa\").forward(req, resp); } catch (ServletException | IOException e) { milog.severe(e.getMessage()); } } } src/cl/lherrera/servlets/ProcesaSaludo.java package cl.lherrera.servlets; import java.io.IOException; import java.io.PrintWriter; import java.util.logging.Logger; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; public class ProcesaSaludo extends HttpServlet{ private static final long serialVersionUID = 2160177863364950188L; Logger milog = Logger.getLogger(ProcesaSaludo.class.getName()); @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { try { PrintWriter pw = resp.getWriter(); pw.println(\"<h1>Hola mundo</h1>\"); } catch (IOException e) { milog.severe(e.getMessage()); } } } Soluci\u00f3n 5 Se utilizan los atributos del request , enviados desde el servlet (no debemos llamarlo index.jsp , su hacemos eso, el servidor cargar\u00e1 primero este archivo). Estructura: \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u251c\u2500\u2500 WEB-INF \u2502 \u2502 \u251c\u2500\u2500 lib \u2502 \u2502 \u2514\u2500\u2500 web.xml \u2502 \u2514\u2500\u2500 saluda.jsp \u2514\u2500\u2500 src \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 servlets \u2514\u2500\u2500 Saludo.java WebContent/WEB-INF/web.xml <web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\" version=\"3.1\"> <servlet> <servlet-name>saludame</servlet-name> <servlet-class>cl.lherrera.servlets.Saludo</servlet-class> </servlet> <servlet-mapping> <servlet-name>saludame</servlet-name> <url-pattern>/</url-pattern> </servlet-mapping> </web-app> src/cl/lherrera/servlets/Saludo.java package cl.lherrera.servlets; import java.io.IOException; import java.util.logging.Logger; import javax.servlet.ServletException; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; public class Saludo extends HttpServlet{ private static final long serialVersionUID = 4846706137180238153L; private static Logger milog = Logger.getLogger(Saludo.class.getName()); @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { req.setAttribute(\"saludo\", \"Hola mundo\"); try { req.getRequestDispatcher(\"saluda.jsp\").forward(req, resp); } catch (ServletException | IOException e) { milog.severe(e.getMessage()); } } } WebContent/saluda.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>saludo</title> </head> <body> <% String saludo = (String)request.getAttribute(\"saludo\"); %> <h1><%=saludo%></h1> </body> </html>","title":"Saluda en la web"},{"location":"ejercicios/servlets/saluda/#saluda-en-la-web","text":"Dise\u00f1e una aplicaci\u00f3n en Java, que sea capaz de imprimir Hola Mundo en un navegador web.","title":"Saluda en la web"},{"location":"ejercicios/servlets/saluda/#solucion-1","text":"Se puede realizar un Dynamic web project con un .jsp Estructura \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u251c\u2500\u2500 WEB-INF \u2502 \u2502 \u2514\u2500\u2500 lib \u2502 \u2514\u2500\u2500 index.jsp \u251c\u2500\u2500 build \u2502 \u2514\u2500\u2500 classes \u2514\u2500\u2500 src WebContent/index.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Insert title here</title> </head> <body> Hola mundo </body> </html>","title":"Soluci\u00f3n 1"},{"location":"ejercicios/servlets/saluda/#solucion-2","text":"Se puede realizar con un servlet. Estructura \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 WEB-INF \u2502 \u2514\u2500\u2500 lib \u2514\u2500\u2500 src \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 servlets \u2514\u2500\u2500 Saludo.java src/cl/lherrera/servlets/Saludo.java package cl.lherrera.servlets; import java.io.IOException; import java.io.PrintWriter; import java.util.logging.Logger; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; @WebServlet(\"/\") public class Saludo extends HttpServlet{ private static final long serialVersionUID = 4846706137180238153L; Logger milog = Logger.getLogger(Saludo.class.getName()); @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { // obtenemos el escribidor de la respuesta y lo // modificamos desde ac\u00e1. Es m\u00e9todo // es el que escribe en la // respuesta que se // entregar\u00e1. try { PrintWriter pw = resp.getWriter(); pw.println(\"<h1>Hola mundo</h1>\"); } catch (IOException e) { milog.severe(e.getMessage()); } } }","title":"Soluci\u00f3n 2"},{"location":"ejercicios/servlets/saluda/#solucion-3","text":"Solamente para exponer, los servlets se pueden comunicar entre ellos. Estructura: \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 WEB-INF \u2502 \u2514\u2500\u2500 lib \u2514\u2500\u2500 src \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 servlets \u251c\u2500\u2500 ProcesaSaludo.java \u2514\u2500\u2500 Saludo.java src/cl/lherrera/servlets/Saludo.java package cl.lherrera.servlets; import java.io.IOException; import java.util.logging.Logger; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; @WebServlet(\"/\") public class Saludo extends HttpServlet{ private static final long serialVersionUID = 4846706137180238153L; private static Logger milog = Logger.getLogger(Saludo.class.getName()); @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { try { req.getServletContext().getRequestDispatcher(\"/procesa\").forward(req, resp); } catch (ServletException | IOException e) { milog.severe(e.getMessage()); } } } src/cl/lherrera/servlets/ProcesaSaludo.java package cl.lherrera.servlets; import java.io.IOException; import java.io.PrintWriter; import java.util.logging.Logger; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; @WebServlet(\"/procesa\") public class ProcesaSaludo extends HttpServlet{ private static final long serialVersionUID = 2160177863364950188L; Logger milog = Logger.getLogger(ProcesaSaludo.class.getName()); @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { try { PrintWriter pw = resp.getWriter(); pw.println(\"<h1>Hola mundo</h1>\"); } catch (IOException e) { milog.severe(e.getMessage()); } } }","title":"Soluci\u00f3n 3"},{"location":"ejercicios/servlets/saluda/#solucion-4","text":"Podemos utilizar un Descriptor de despliegue (deployment descriptor \"DD\"). web.xml . Este descriptor nos ayuda a controlar una mayor personalizaci\u00f3n, aunque con este sencillo ejemplo no veremos todo su poder, nos ayudar\u00e1 a enrutar nuestros servlets. Estructura \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 WEB-INF \u2502 \u251c\u2500\u2500 lib \u2502 \u2514\u2500\u2500 web.xml \u2514\u2500\u2500 src \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 servlets \u251c\u2500\u2500 ProcesaSaludo.java \u2514\u2500\u2500 Saludo.java WebContent/WEB-INF/web.xml <web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\" version=\"3.1\"> <servlet> <servlet-name>saludame</servlet-name> <servlet-class>cl.lherrera.servlets.Saludo</servlet-class> </servlet> <servlet-mapping> <servlet-name>saludame</servlet-name> <url-pattern>/*</url-pattern> </servlet-mapping> <servlet> <servlet-name>imprime</servlet-name> <servlet-class>cl.lherrera.servlets.ProcesaSaludo</servlet-class> </servlet> <servlet-mapping> <servlet-name>imprime</servlet-name> <url-pattern>/procesa</url-pattern> </servlet-mapping> </web-app> src/cl/lherrera/servlets/Saludo.java package cl.lherrera.servlets; import java.io.IOException; import java.util.logging.Logger; import javax.servlet.ServletException; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; public class Saludo extends HttpServlet{ private static final long serialVersionUID = 4846706137180238153L; private static Logger milog = Logger.getLogger(Saludo.class.getName()); @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { try { req.getServletContext().getRequestDispatcher(\"/procesa\").forward(req, resp); } catch (ServletException | IOException e) { milog.severe(e.getMessage()); } } } src/cl/lherrera/servlets/ProcesaSaludo.java package cl.lherrera.servlets; import java.io.IOException; import java.io.PrintWriter; import java.util.logging.Logger; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; public class ProcesaSaludo extends HttpServlet{ private static final long serialVersionUID = 2160177863364950188L; Logger milog = Logger.getLogger(ProcesaSaludo.class.getName()); @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { try { PrintWriter pw = resp.getWriter(); pw.println(\"<h1>Hola mundo</h1>\"); } catch (IOException e) { milog.severe(e.getMessage()); } } }","title":"Soluci\u00f3n 4"},{"location":"ejercicios/servlets/saluda/#solucion-5","text":"Se utilizan los atributos del request , enviados desde el servlet (no debemos llamarlo index.jsp , su hacemos eso, el servidor cargar\u00e1 primero este archivo). Estructura: \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u251c\u2500\u2500 WEB-INF \u2502 \u2502 \u251c\u2500\u2500 lib \u2502 \u2502 \u2514\u2500\u2500 web.xml \u2502 \u2514\u2500\u2500 saluda.jsp \u2514\u2500\u2500 src \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 servlets \u2514\u2500\u2500 Saludo.java WebContent/WEB-INF/web.xml <web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\" version=\"3.1\"> <servlet> <servlet-name>saludame</servlet-name> <servlet-class>cl.lherrera.servlets.Saludo</servlet-class> </servlet> <servlet-mapping> <servlet-name>saludame</servlet-name> <url-pattern>/</url-pattern> </servlet-mapping> </web-app> src/cl/lherrera/servlets/Saludo.java package cl.lherrera.servlets; import java.io.IOException; import java.util.logging.Logger; import javax.servlet.ServletException; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; public class Saludo extends HttpServlet{ private static final long serialVersionUID = 4846706137180238153L; private static Logger milog = Logger.getLogger(Saludo.class.getName()); @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { req.setAttribute(\"saludo\", \"Hola mundo\"); try { req.getRequestDispatcher(\"saluda.jsp\").forward(req, resp); } catch (ServletException | IOException e) { milog.severe(e.getMessage()); } } } WebContent/saluda.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>saludo</title> </head> <body> <% String saludo = (String)request.getAttribute(\"saludo\"); %> <h1><%=saludo%></h1> </body> </html>","title":"Soluci\u00f3n 5"},{"location":"ejercicios/servlets/jdbc/jstlsqltag/","text":"JSTL - SQL-TAG El siguiente es un ejemplo, de la utilizaci\u00f3n del tag sql perteneciente a la librer\u00eda jstl . Para esto se necesita una base de datos en sqlite. DDL: basedatos.db , el siguiente c\u00f3digo, ya debe estar cargado en la base de datos. Creamos un archivo en el ra\u00edz del proyecto con .bd , luego desde dbeaver lo abrimos y seteamos el usuario y contrase\u00f1a en la primera conexi\u00f3n, no es necesario hacer nada extra para iniciar la base de datos. -- /Users/luisherrera/Desktop/TALENTO-PROS/servlets/sqljstl/basedatos.db CREATE TABLE usuario ( id INTEGER PRIMARY KEY AUTOINCREMENT, usuario TEXT, contrasenia TEXT ); INSERT INTO usuario (usuario, contrasenia) VALUES (\"lherrera\", \"1234\"); INSERT INTO usuario (usuario, contrasenia) VALUES (\"admin\", \"admin\"); SELECT * FROM usuario; Estructura del proyecto. ./ \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u251c\u2500\u2500 WEB-INF \u2502 \u2502 \u2514\u2500\u2500 lib \u2502 \u2514\u2500\u2500 index.jsp \u251c\u2500\u2500 basedatos.db \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2514\u2500\u2500 resources \u2502 \u2514\u2500\u2500 test \u2502 \u251c\u2500\u2500 java \u2502 \u2514\u2500\u2500 resources \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u2514\u2500\u2500 META-INF \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 maven \u2502 \u2514\u2500\u2500 cl.lherrera \u2502 \u2514\u2500\u2500 sqljstl \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2514\u2500\u2500 pom.xml \u2514\u2500\u2500 test-classes 18 directories, 7 files Indicamos a maven las librer\u00edas a descargar. /sqljstl/pom.xml <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>cl.lherrera</groupId> <artifactId>sqljstl</artifactId> <version>0.0.1-SNAPSHOT</version> <dependencies> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> <version>3.30.1</version> </dependency> <!-- https://mvnrepository.com/artifact/org.glassfish.web/jstl-impl --> <dependency> <groupId>org.glassfish.web</groupId> <artifactId>jstl-impl</artifactId> <version>1.2</version> </dependency> <!-- https://mvnrepository.com/artifact/javax.servlet.jsp.jstl/jstl-api --> <dependency> <groupId>javax.servlet.jsp.jstl</groupId> <artifactId>jstl-api</artifactId> <version>1.2</version> </dependency> <!-- https://mvnrepository.com/artifact/jstl/jstl --> <dependency> <groupId>jstl</groupId> <artifactId>jstl</artifactId> <version>1.2</version> </dependency> </dependencies> </project> /sqljstl/WebContent/index.jsp Con esta vista, no necesitamos un servlet, aunque un jsp es en el fondo un servlet. Pero por decirlo de alguna forma, no necesitas un controlador, para poder conecctarnos a una base de datos. <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%> <%@ taglib uri=\"http://java.sun.com/jsp/jstl/sql\" prefix=\"sql\" %> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Insert title here</title> </head> <body> <h1>Demostraci\u00f3n sql tag</h1> <sql:setDataSource var=\"myDS\" driver=\"org.sqlite.JDBC\" url=\"jdbc:sqlite:/Users/luisherrera/Desktop/TALENTO-PROS/servlets/sqljstl/basedatos.db\" user=\"admin\" password=\"1234\"/> <sql:query dataSource=\"${myDS}\" var=\"usuarios\"> SELECT * FROM usuario; </sql:query> <table border=\"1\"> <c:forEach var=\"row\" items=\"${usuarios.rows}\"> <tr> <td><c:out value=\"${row.id}\"/></td> <td><c:out value=\"${row.usuario}\"/></td> <td><c:out value=\"${row.contrasenia}\"/></td> </tr> </c:forEach> </table> </body> </html> No olvidar que esta t\u00e9cnica est\u00e1 orientada a generar prototipos, no hay que abusar. Hay que recordar que maven no incluye las librer\u00edas a: /sqljstl/WebContent/WEB-INF/lib , por lo que hay que agregar las librerias de maven en el deploy de las propiedades del proyecto. Salida en c\u00f3digo fuente: <!DOCTYPE html><html><head><meta charset=\"UTF-8\"><title>Insert title here</title></head><body><h1>Demostraci\u00f3n sql tag</h1> <table border=\"1\"> <tr> <td>1</td><td>lherrera</td><td>1234</td></tr><tr> <td>2</td><td>admin</td><td>admin</td></tr></table></body></html>","title":"JSTL - SQL-TAG"},{"location":"ejercicios/servlets/jdbc/jstlsqltag/#jstl-sql-tag","text":"El siguiente es un ejemplo, de la utilizaci\u00f3n del tag sql perteneciente a la librer\u00eda jstl . Para esto se necesita una base de datos en sqlite. DDL: basedatos.db , el siguiente c\u00f3digo, ya debe estar cargado en la base de datos. Creamos un archivo en el ra\u00edz del proyecto con .bd , luego desde dbeaver lo abrimos y seteamos el usuario y contrase\u00f1a en la primera conexi\u00f3n, no es necesario hacer nada extra para iniciar la base de datos. -- /Users/luisherrera/Desktop/TALENTO-PROS/servlets/sqljstl/basedatos.db CREATE TABLE usuario ( id INTEGER PRIMARY KEY AUTOINCREMENT, usuario TEXT, contrasenia TEXT ); INSERT INTO usuario (usuario, contrasenia) VALUES (\"lherrera\", \"1234\"); INSERT INTO usuario (usuario, contrasenia) VALUES (\"admin\", \"admin\"); SELECT * FROM usuario; Estructura del proyecto. ./ \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u251c\u2500\u2500 WEB-INF \u2502 \u2502 \u2514\u2500\u2500 lib \u2502 \u2514\u2500\u2500 index.jsp \u251c\u2500\u2500 basedatos.db \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2514\u2500\u2500 resources \u2502 \u2514\u2500\u2500 test \u2502 \u251c\u2500\u2500 java \u2502 \u2514\u2500\u2500 resources \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u2514\u2500\u2500 META-INF \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 maven \u2502 \u2514\u2500\u2500 cl.lherrera \u2502 \u2514\u2500\u2500 sqljstl \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2514\u2500\u2500 pom.xml \u2514\u2500\u2500 test-classes 18 directories, 7 files Indicamos a maven las librer\u00edas a descargar. /sqljstl/pom.xml <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>cl.lherrera</groupId> <artifactId>sqljstl</artifactId> <version>0.0.1-SNAPSHOT</version> <dependencies> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> <version>3.30.1</version> </dependency> <!-- https://mvnrepository.com/artifact/org.glassfish.web/jstl-impl --> <dependency> <groupId>org.glassfish.web</groupId> <artifactId>jstl-impl</artifactId> <version>1.2</version> </dependency> <!-- https://mvnrepository.com/artifact/javax.servlet.jsp.jstl/jstl-api --> <dependency> <groupId>javax.servlet.jsp.jstl</groupId> <artifactId>jstl-api</artifactId> <version>1.2</version> </dependency> <!-- https://mvnrepository.com/artifact/jstl/jstl --> <dependency> <groupId>jstl</groupId> <artifactId>jstl</artifactId> <version>1.2</version> </dependency> </dependencies> </project> /sqljstl/WebContent/index.jsp Con esta vista, no necesitamos un servlet, aunque un jsp es en el fondo un servlet. Pero por decirlo de alguna forma, no necesitas un controlador, para poder conecctarnos a una base de datos. <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%> <%@ taglib uri=\"http://java.sun.com/jsp/jstl/sql\" prefix=\"sql\" %> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Insert title here</title> </head> <body> <h1>Demostraci\u00f3n sql tag</h1> <sql:setDataSource var=\"myDS\" driver=\"org.sqlite.JDBC\" url=\"jdbc:sqlite:/Users/luisherrera/Desktop/TALENTO-PROS/servlets/sqljstl/basedatos.db\" user=\"admin\" password=\"1234\"/> <sql:query dataSource=\"${myDS}\" var=\"usuarios\"> SELECT * FROM usuario; </sql:query> <table border=\"1\"> <c:forEach var=\"row\" items=\"${usuarios.rows}\"> <tr> <td><c:out value=\"${row.id}\"/></td> <td><c:out value=\"${row.usuario}\"/></td> <td><c:out value=\"${row.contrasenia}\"/></td> </tr> </c:forEach> </table> </body> </html> No olvidar que esta t\u00e9cnica est\u00e1 orientada a generar prototipos, no hay que abusar. Hay que recordar que maven no incluye las librer\u00edas a: /sqljstl/WebContent/WEB-INF/lib , por lo que hay que agregar las librerias de maven en el deploy de las propiedades del proyecto. Salida en c\u00f3digo fuente: <!DOCTYPE html><html><head><meta charset=\"UTF-8\"><title>Insert title here</title></head><body><h1>Demostraci\u00f3n sql tag</h1> <table border=\"1\"> <tr> <td>1</td><td>lherrera</td><td>1234</td></tr><tr> <td>2</td><td>admin</td><td>admin</td></tr></table></body></html>","title":"JSTL - SQL-TAG"},{"location":"ejercicios/servlets/jdbc/poolconexion/","text":"Pool de conexiones. Usando esta t\u00e9cnica: + Ganamos cantidad de conexiones activas, es decir podemos definir la cantidad de conexiones que m\u00e1ximas que controlar\u00eda nuestro servidor Apache Tomcat . Ganamos seguridad al configurar la conexi\u00f3n desde el mismo servidor. Este concepto se basa en hacer que no exista solamente una conexi\u00f3n con nuestro apache, es una configuraci\u00f3n que se debe realizar en paralelo con el servidor. Tomemos un proyecto mvc. Se debe tener presente que para los proyectos que posean un archivo que maneja la conexi\u00f3n, el cambio en Java es solamente en mencionado archivo. veamos antes de comenzar cual es este cambio. comparaci\u00f3n en la implementaci\u00f3n Versi\u00f3n de la conexi\u00f3n anterior sin pool. public Connection obtenerConexion() throws SQLException { Connection conexion = null; try { Class.forName(\"org.sqlite.JDBC\"); conexion = DriverManager.getConnection( \"jdbc:sqlite:/Users/luisherrera/Desktop/TALENTO-PROS/bases/base001.db\", \"admin\", \"1234\" ); } catch (ClassNotFoundException e) { logger.severe(\"No se pudo cargar el driver.\"); logger.severe(e.getMessage()); } return conexion; } Versi\u00f3n de la conexi\u00f3n usando pool public Connection obtenerConexion() throws SQLException { Connection conexion = null; try { InitialContext contextoInicial = new InitialContext(); DataSource ds = (DataSource) contextoInicial.lookup(\"java:comp/env/jdbc/mydb\"); conexion = ds.getConnection(); } catch (NamingException e) { milog.severe(\"No se pudo obtener conexi\u00f3n del pool\"); milog.severe(e.getMessage()); } return conexion; } Inicio del ejemplo SQLITE El primer paso es configurar el archivo context.xml , que se encuentra en el Server que tenemos en eclipse. Es ac\u00e1 donde ir\u00e1 la configuraci\u00f3n de la conexi\u00f3n, es decir, el nombre de usuario, el driver y los dem\u00e1s par\u00e1metros que acostumbramos a tener por ejemplo en la clase que nos entrega la conexi\u00f3n. El contenido es el siguiente: Referencia de los par\u00e1metros: https://tomcat.apache.org/tomcat-7.0-doc/jdbc-pool.html <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --><!-- The contents of this file will be loaded for each web application --><Context> <!-- Default set of monitored resources. If one of these changes, the --> <!-- web application will be reloaded. --> <WatchedResource>WEB-INF/web.xml</WatchedResource> <WatchedResource>WEB-INF/tomcat-web.xml</WatchedResource> <WatchedResource>${catalina.base}/conf/web.xml</WatchedResource> <!-- esto es lo que se a\u00f1ade --> <Resource name=\"jdbc/mydb\" auth=\"Container\" type=\"javax.sql.DataSource\" maxActive=\"100\" maxIdle=\"30\" maxWait=\"10000\" username=\"admin\" password=\"1234\" driverClassName=\"org.sqlite.JDBC\" url=\"jdbc:sqlite:/Users/luisherrera/Desktop/TALENTO-PROS/bases/base001.db\" /> <!-- esto es lo que se a\u00f1ade #--> <!-- Uncomment this to disable session persistence across Tomcat restarts --> <!-- <Manager pathname=\"\" /> --> </Context> /poolcon/pom.xml Debemos importar el driver de SQLITE <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>cl.lherrera</groupId> <artifactId>poolcon</artifactId> <version>0.0.1-SNAPSHOT</version> <dependencies> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> <version>3.30.1</version> </dependency> </dependencies> </project> /poolcon/WebContent/WEB-INF/web.xml hay que indicar en el descriptor la configuraci\u00f3n del pool <?xml version=\"1.0\" encoding=\"UTF-8\"?> <web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\" id=\"WebApp_ID\" version=\"4.0\"> <display-name>poolcon</display-name> <welcome-file-list> <welcome-file>index.html</welcome-file> <welcome-file>index.htm</welcome-file> <welcome-file>index.jsp</welcome-file> <welcome-file>default.html</welcome-file> <welcome-file>default.htm</welcome-file> <welcome-file>default.jsp</welcome-file> </welcome-file-list> <resource-ref> <description>Mi pool de conexiones</description> <res-ref-name>jdbc/mydb</res-ref-name> <res-type>javax.sql.DataSource</res-type> <res-auth>Container</res-auth> </resource-ref> </web-app> /poolcon/src/main/java/cl/lherrera/dao/ManejaConexion.java java:comp va por defecto /jdbc/mydb es el nombre del Resource que indicamos en context.xml . package cl.lherrera.dao; import java.sql.Connection; import java.sql.SQLException; import java.util.logging.Logger; import javax.naming.InitialContext; import javax.naming.NamingException; import javax.sql.DataSource; public class ManejaConexion { private static final Logger milog = Logger.getLogger(ManejaConexion.class.getName()); private static ManejaConexion manejaConexion = new ManejaConexion(); private ManejaConexion() { if (manejaConexion != null){ //Prevent Reflection throw new IllegalStateException(\"No se puede crear una nueva instancia de ManejaConexion\"); } } public static ManejaConexion obtenerManejo() { return manejaConexion; } public Connection obtenerConexion() throws SQLException { Connection conexion = null; try { InitialContext contextoInicial = new InitialContext(); DataSource ds = (DataSource) contextoInicial.lookup(\"java:comp/env/jdbc/mydb\"); conexion = ds.getConnection(); } catch (NamingException e) { milog.severe(\"No se pudo obtener conexi\u00f3n del pool\"); milog.severe(e.getMessage()); } return conexion; } } Hasta ac\u00e1 ya est\u00e1 configurado el proyecto, lo siguiente es para poder probar su funcionamiento. /poolcon/src/main/java/cl/lherrera/dao/PersonaDAO.java package cl.lherrera.dao; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.util.ArrayList; import java.util.List; import java.util.logging.Logger; import cl.lherrera.modelo.Persona; public class PersonaDAO { private static final ManejaConexion manejaConexion = ManejaConexion.obtenerManejo(); private static Logger milog = Logger.getLogger(PersonaDAO.class.getName()); public List<Persona> obtenerTodos(){ List<Persona> personas = new ArrayList<>(); try( Connection conexion = manejaConexion.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(\"SELECT id, nombre FROM persona\"); ResultSet rs = ps.executeQuery(); ){ while(rs.next()) { personas.add(new Persona(rs.getInt(\"id\"), rs.getString(\"nombre\"))); } }catch (SQLException e) { milog.severe(e.getMessage()); } return personas; } } /poolcon/src/main/java/cl/lherrera/modelo/Persona.java package cl.lherrera.modelo; public class Persona { private Integer id; private String nombre; public Persona() {} public Persona(Integer id, String nombre) { this.id = id; this.nombre = nombre; } public Persona(String nombre) { this.nombre = nombre; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } @Override public String toString() { return \"Persona [id=\" + id + \", nombre=\" + nombre + \"]\"; } } /poolcon/src/main/java/cl/lherrera/servlets/IniciaMantenedor.java Un servlet, con la finalidad de de probar el sistema, los resultados se imprimen por consola, si es que la base de datos posee informaci\u00f3n. package cl.lherrera.servlets; import java.util.logging.Logger; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import cl.lherrera.dao.PersonaDAO; @WebServlet(name = \"Mantenedor de Personas\", urlPatterns = \"/mantenedor\") public class IniciaMantenedor extends HttpServlet{ private static final Logger logger = Logger.getLogger(IniciaMantenedor.class.getName()); private static PersonaDAO daoPersona = new PersonaDAO(); private static final long serialVersionUID = -4282664097471786333L; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { daoPersona.obtenerTodos().forEach(persona -> System.out.println(persona.getNombre())); logger.info(\"procesoTerminado\"); } } Para probar: http://localhost:8080/poolcon/mantenedor","title":"Pool de conexiones."},{"location":"ejercicios/servlets/jdbc/poolconexion/#pool-de-conexiones","text":"Usando esta t\u00e9cnica: + Ganamos cantidad de conexiones activas, es decir podemos definir la cantidad de conexiones que m\u00e1ximas que controlar\u00eda nuestro servidor Apache Tomcat . Ganamos seguridad al configurar la conexi\u00f3n desde el mismo servidor. Este concepto se basa en hacer que no exista solamente una conexi\u00f3n con nuestro apache, es una configuraci\u00f3n que se debe realizar en paralelo con el servidor. Tomemos un proyecto mvc. Se debe tener presente que para los proyectos que posean un archivo que maneja la conexi\u00f3n, el cambio en Java es solamente en mencionado archivo. veamos antes de comenzar cual es este cambio.","title":"Pool de conexiones."},{"location":"ejercicios/servlets/jdbc/poolconexion/#comparacion-en-la-implementacion","text":"Versi\u00f3n de la conexi\u00f3n anterior sin pool. public Connection obtenerConexion() throws SQLException { Connection conexion = null; try { Class.forName(\"org.sqlite.JDBC\"); conexion = DriverManager.getConnection( \"jdbc:sqlite:/Users/luisherrera/Desktop/TALENTO-PROS/bases/base001.db\", \"admin\", \"1234\" ); } catch (ClassNotFoundException e) { logger.severe(\"No se pudo cargar el driver.\"); logger.severe(e.getMessage()); } return conexion; } Versi\u00f3n de la conexi\u00f3n usando pool public Connection obtenerConexion() throws SQLException { Connection conexion = null; try { InitialContext contextoInicial = new InitialContext(); DataSource ds = (DataSource) contextoInicial.lookup(\"java:comp/env/jdbc/mydb\"); conexion = ds.getConnection(); } catch (NamingException e) { milog.severe(\"No se pudo obtener conexi\u00f3n del pool\"); milog.severe(e.getMessage()); } return conexion; }","title":"comparaci\u00f3n en la implementaci\u00f3n"},{"location":"ejercicios/servlets/jdbc/poolconexion/#inicio-del-ejemplo-sqlite","text":"El primer paso es configurar el archivo context.xml , que se encuentra en el Server que tenemos en eclipse. Es ac\u00e1 donde ir\u00e1 la configuraci\u00f3n de la conexi\u00f3n, es decir, el nombre de usuario, el driver y los dem\u00e1s par\u00e1metros que acostumbramos a tener por ejemplo en la clase que nos entrega la conexi\u00f3n. El contenido es el siguiente: Referencia de los par\u00e1metros: https://tomcat.apache.org/tomcat-7.0-doc/jdbc-pool.html <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --><!-- The contents of this file will be loaded for each web application --><Context> <!-- Default set of monitored resources. If one of these changes, the --> <!-- web application will be reloaded. --> <WatchedResource>WEB-INF/web.xml</WatchedResource> <WatchedResource>WEB-INF/tomcat-web.xml</WatchedResource> <WatchedResource>${catalina.base}/conf/web.xml</WatchedResource> <!-- esto es lo que se a\u00f1ade --> <Resource name=\"jdbc/mydb\" auth=\"Container\" type=\"javax.sql.DataSource\" maxActive=\"100\" maxIdle=\"30\" maxWait=\"10000\" username=\"admin\" password=\"1234\" driverClassName=\"org.sqlite.JDBC\" url=\"jdbc:sqlite:/Users/luisherrera/Desktop/TALENTO-PROS/bases/base001.db\" /> <!-- esto es lo que se a\u00f1ade #--> <!-- Uncomment this to disable session persistence across Tomcat restarts --> <!-- <Manager pathname=\"\" /> --> </Context> /poolcon/pom.xml Debemos importar el driver de SQLITE <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>cl.lherrera</groupId> <artifactId>poolcon</artifactId> <version>0.0.1-SNAPSHOT</version> <dependencies> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> <version>3.30.1</version> </dependency> </dependencies> </project> /poolcon/WebContent/WEB-INF/web.xml hay que indicar en el descriptor la configuraci\u00f3n del pool <?xml version=\"1.0\" encoding=\"UTF-8\"?> <web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\" id=\"WebApp_ID\" version=\"4.0\"> <display-name>poolcon</display-name> <welcome-file-list> <welcome-file>index.html</welcome-file> <welcome-file>index.htm</welcome-file> <welcome-file>index.jsp</welcome-file> <welcome-file>default.html</welcome-file> <welcome-file>default.htm</welcome-file> <welcome-file>default.jsp</welcome-file> </welcome-file-list> <resource-ref> <description>Mi pool de conexiones</description> <res-ref-name>jdbc/mydb</res-ref-name> <res-type>javax.sql.DataSource</res-type> <res-auth>Container</res-auth> </resource-ref> </web-app> /poolcon/src/main/java/cl/lherrera/dao/ManejaConexion.java java:comp va por defecto /jdbc/mydb es el nombre del Resource que indicamos en context.xml . package cl.lherrera.dao; import java.sql.Connection; import java.sql.SQLException; import java.util.logging.Logger; import javax.naming.InitialContext; import javax.naming.NamingException; import javax.sql.DataSource; public class ManejaConexion { private static final Logger milog = Logger.getLogger(ManejaConexion.class.getName()); private static ManejaConexion manejaConexion = new ManejaConexion(); private ManejaConexion() { if (manejaConexion != null){ //Prevent Reflection throw new IllegalStateException(\"No se puede crear una nueva instancia de ManejaConexion\"); } } public static ManejaConexion obtenerManejo() { return manejaConexion; } public Connection obtenerConexion() throws SQLException { Connection conexion = null; try { InitialContext contextoInicial = new InitialContext(); DataSource ds = (DataSource) contextoInicial.lookup(\"java:comp/env/jdbc/mydb\"); conexion = ds.getConnection(); } catch (NamingException e) { milog.severe(\"No se pudo obtener conexi\u00f3n del pool\"); milog.severe(e.getMessage()); } return conexion; } } Hasta ac\u00e1 ya est\u00e1 configurado el proyecto, lo siguiente es para poder probar su funcionamiento. /poolcon/src/main/java/cl/lherrera/dao/PersonaDAO.java package cl.lherrera.dao; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.util.ArrayList; import java.util.List; import java.util.logging.Logger; import cl.lherrera.modelo.Persona; public class PersonaDAO { private static final ManejaConexion manejaConexion = ManejaConexion.obtenerManejo(); private static Logger milog = Logger.getLogger(PersonaDAO.class.getName()); public List<Persona> obtenerTodos(){ List<Persona> personas = new ArrayList<>(); try( Connection conexion = manejaConexion.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(\"SELECT id, nombre FROM persona\"); ResultSet rs = ps.executeQuery(); ){ while(rs.next()) { personas.add(new Persona(rs.getInt(\"id\"), rs.getString(\"nombre\"))); } }catch (SQLException e) { milog.severe(e.getMessage()); } return personas; } } /poolcon/src/main/java/cl/lherrera/modelo/Persona.java package cl.lherrera.modelo; public class Persona { private Integer id; private String nombre; public Persona() {} public Persona(Integer id, String nombre) { this.id = id; this.nombre = nombre; } public Persona(String nombre) { this.nombre = nombre; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } @Override public String toString() { return \"Persona [id=\" + id + \", nombre=\" + nombre + \"]\"; } } /poolcon/src/main/java/cl/lherrera/servlets/IniciaMantenedor.java Un servlet, con la finalidad de de probar el sistema, los resultados se imprimen por consola, si es que la base de datos posee informaci\u00f3n. package cl.lherrera.servlets; import java.util.logging.Logger; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import cl.lherrera.dao.PersonaDAO; @WebServlet(name = \"Mantenedor de Personas\", urlPatterns = \"/mantenedor\") public class IniciaMantenedor extends HttpServlet{ private static final Logger logger = Logger.getLogger(IniciaMantenedor.class.getName()); private static PersonaDAO daoPersona = new PersonaDAO(); private static final long serialVersionUID = -4282664097471786333L; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { daoPersona.obtenerTodos().forEach(persona -> System.out.println(persona.getNombre())); logger.info(\"procesoTerminado\"); } } Para probar: http://localhost:8080/poolcon/mantenedor","title":"Inicio del ejemplo SQLITE"},{"location":"ejercicios/servlets/jdbc/sqlite/","text":"Connexi\u00f3n JDBC - SQLITE Se asume que se tiene un cliente SQLITE como DBEaber, adem\u00e1s de un archivo .bd o .sqlite. Ejemplo 1: Consulta. Usemos SQLITE, para conectar una app de java. Lo primero es disponer de una base de datos con una tabla personas hecha y un dato ingresado. DDL -- creamos la tabla persona. CREATE TABLE persona ( id INTEGER PRIMARY KEY AUTOINCREMENT, nombre TEXT ); -- agregamos un registro en la tabla. INSERT INTO persona (nombre) values ('luis'); -- Comprobamos que exista un registro SELECT id, nombre FROM persona; El objetivo es poder consultar este dato desde un programa en Java. Para resolver lo del Driver, creamos este proyecto como un proyecto Maven. Estructura: \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u251c\u2500\u2500 main \u251c\u2500\u2500 java \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 jdbc \u2514\u2500\u2500 sqlite \u2514\u2500\u2500 Principal.java /sqlite/pom.xml <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>cl.lherrera.jdbc</groupId> <artifactId>sqlite</artifactId> <version>0.0.1-SNAPSHOT</version> <dependencies> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> <version>3.30.1</version> </dependency> </dependencies> </project> cl.lherrera.jdbc.sqlite.Principal package cl.lherrera.jdbc.sqlite; import java.sql.Connection; import java.sql.DriverManager; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.util.logging.Logger; public class Principal { // direcci\u00f3n en la que se encuentra el archivo de la base de datos. private static final String DATABASE_FILE_PATH = \"/Users/luisherrera/Desktop/TALENTO-PROS/bases/base001.db\"; // url de la base de datos, necesaria para la conexi\u00f3n. private static final String DB_URL = \"jdbc:sqlite:\" + DATABASE_FILE_PATH; // logger private static Logger milog = Logger.getLogger(Principal.class.getName()); public static void main(String[] args) { milog.info(\"Inicio de la aplicaci\u00f3n\"); try { // cargamos el driver. (deja disponible la clase org.sqlite.JDBC en esta instancia) Class.forName(\"org.sqlite.JDBC\"); // se crea la conexi\u00f3n a la base de datos. try ( Connection conexion = DriverManager.getConnection(DB_URL, \"admin\", \"1234\"); PreparedStatement ps = conexion.prepareStatement(\"SELECT id, nombre FROM persona\"); ResultSet rs = ps.executeQuery(); ){ while(rs.next()) { milog.info(\"ID: \" + rs.getString(\"id\")); milog.info(\"NOMBRE: \" + rs.getString(\"nombre\")); } } catch (SQLException e) { milog.severe(\"no se pudo establecer conexi\u00f3n con la base de datos\"); milog.severe(e.getMessage()); } } catch (ClassNotFoundException e) { milog.severe(\"la clase no ha podido ser encontrada\"); milog.severe(e.getMessage()); } } } Ejemplo 2: agregar un registro y consulta. Al c\u00f3digo anterior, agregamos la funcionalidad para poder ingresar un nuevo registro. Estructura: \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u251c\u2500\u2500 main \u251c\u2500\u2500 java \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 jdbc \u2514\u2500\u2500 sqlite \u2514\u2500\u2500 Principal.java /sqlite/pom.xml <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>cl.lherrera.jdbc</groupId> <artifactId>sqlite</artifactId> <version>0.0.1-SNAPSHOT</version> <dependencies> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> <version>3.30.1</version> </dependency> </dependencies> </project> cl.lherrera.jdbc.sqlite.Principal package cl.lherrera.jdbc.sqlite; import java.sql.Connection; import java.sql.DriverManager; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.util.logging.Logger; public class Principal { // direcci\u00f3n en la que se encuentra el archivo de la base de datos. private static final String DATABASE_FILE_PATH = \"/Users/luisherrera/Desktop/TALENTO-PROS/bases/base001.db\"; // url de la base de datos, necesaria para la conexi\u00f3n. private static final String DB_URL = \"jdbc:sqlite:\" + DATABASE_FILE_PATH; // logger private static Logger milog = Logger.getLogger(Principal.class.getName()); public static void main(String[] args) { milog.info(\"Inicio de la aplicaci\u00f3n\"); try { // cargamos el driver. (deja disponible la clase org.sqlite.JDBC en esta instancia) Class.forName(\"org.sqlite.JDBC\"); // insertamos el valor try ( Connection conexion = DriverManager.getConnection(DB_URL, \"admin\", \"1234\"); // consulta a la tabla PreparedStatement ps = conexion.prepareStatement(\"INSERT INTO persona (nombre) values ('pedro')\"); ){ int columnasAfectadas = ps.executeUpdate(); if(columnasAfectadas != 1) milog.severe(\"no se pudo ingresar ning\u00fan registro\"); } catch (SQLException e) { milog.severe(\"no se pudo establecer conexi\u00f3n con la base de datos\"); milog.severe(e.getMessage()); } // Lo consultamos try ( Connection conexion = DriverManager.getConnection(DB_URL, \"admin\", \"1234\"); // consulta a la tabla PreparedStatement ps = conexion.prepareStatement(\"SELECT id, nombre FROM persona\"); ResultSet rs = ps.executeQuery(); ){ while(rs.next()) { milog.info(\"ID: \" + rs.getString(\"id\")); milog.info(\"NOMBRE: \" + rs.getString(\"nombre\")); } } catch (SQLException e) { milog.severe(\"no se pudo establecer conexi\u00f3n con la base de datos\"); milog.severe(e.getMessage()); } } catch (ClassNotFoundException e) { milog.severe(\"la clase no ha podido ser encontrada\"); milog.severe(e.getMessage()); } } } Se puede ver que por cada consulta agregamos un try , esto se debe a que por cada consulta, la conexi\u00f3n debe volver a cerrar, es por eso que debe ir en try(/*ac\u00e1*/) . No se debe mezclar con la consulta ya que la conexi\u00f3n ejecutar\u00e1 ambas tareas por separado. Ejercicio 3: Otra forma de form\u00e1to sql-text. Al momento de crear una consulta, posiblemente se deba ingresar alg\u00fan valor variable, esto es com\u00fan al momento de ingresar informaci\u00f3n. PreparedStatement posee la capacidad de asignar valores despu\u00e9s indicar el texto de una consulta, es similar a S\u001dtring.format . Estructura: \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u251c\u2500\u2500 main \u251c\u2500\u2500 java \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 jdbc \u2514\u2500\u2500 sqlite \u2514\u2500\u2500 Principal.java /sqlite/pom.xml <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>cl.lherrera.jdbc</groupId> <artifactId>sqlite</artifactId> <version>0.0.1-SNAPSHOT</version> <dependencies> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> <version>3.30.1</version> </dependency> </dependencies> </project> cl.lherrera.jdbc.sqlite.Principal package cl.lherrera.jdbc.sqlite; import java.sql.Connection; import java.sql.DriverManager; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.util.logging.Logger; public class Principal { // direcci\u00f3n en la que se encuentra el archivo de la base de datos. private static final String DATABASE_FILE_PATH = \"/Users/luisherrera/Desktop/TALENTO-PROS/bases/base001.db\"; // url de la base de datos, necesaria para la conexi\u00f3n. private static final String DB_URL = \"jdbc:sqlite:\" + DATABASE_FILE_PATH; // logger private static Logger milog = Logger.getLogger(Principal.class.getName()); public static void main(String[] args) { milog.info(\"Inicio de la aplicaci\u00f3n\"); try { // cargamos el driver. (deja disponible la clase org.sqlite.JDBC en esta instancia) Class.forName(\"org.sqlite.JDBC\"); // insertamos el valor try ( Connection conexion = DriverManager.getConnection(DB_URL, \"admin\", \"1234\"); // \ud83d\udc40 \ud83d\udc40 \ud83d\udc40 \ud83d\udc40 \ud83d\udc40 \ud83d\udc40 // los signos de interrogaci\u00f3n, ser\u00e1n reemplazados con // ps.setString(1, \"ju\u00e1n\");, se puede ver que // el index comienza en 1. PreparedStatement ps = conexion.prepareStatement(\"INSERT INTO persona (nombre) values (?)\"); ){ // completamos la consulta, 1 es el primer signo ?. En este caso hay s\u00f3lo uno. ps.setString(1, \"ju\u00e1n\"); // contin\u00faa la ejecuci\u00f3n int columnasAfectadas = ps.executeUpdate(); if(columnasAfectadas != 1) milog.severe(\"no se pudo ingresar ning\u00fan registro\"); } catch (SQLException e) { milog.severe(\"no se pudo establecer conexi\u00f3n con la base de datos\"); milog.severe(e.getMessage()); } try ( // necesitan cerrar luego de ejecutar. Connection conexion = DriverManager.getConnection(DB_URL, \"admin\", \"1234\"); // \ud83d\udc40 \ud83d\udc40 \ud83d\udc40 \ud83d\udc40 \ud83d\udc40 \ud83d\udc40 \ud83d\udc40 PreparedStatement ps = conexion.prepareStatement(\"SELECT id, nombre FROM persona WHERE id = ?\"); ){ // pero esto no ps.setInt(1, 1); try( // rs, s\u00ed necesita cerrar, es por esto que necesita otro try(). ResultSet rs = ps.executeQuery(); ){ while(rs.next()) { milog.info(\"ID: \" + rs.getString(\"id\")); milog.info(\"NOMBRE: \" + rs.getString(\"nombre\")); } }catch (SQLException e) { milog.severe(e.getMessage()); } } catch (SQLException e) { milog.severe(\"no se pudo establecer conexi\u00f3n con la base de datos\"); milog.severe(e.getMessage()); } } catch (ClassNotFoundException e) { milog.severe(\"la clase no ha podido ser encontrada\"); milog.severe(e.getMessage()); } } } Ejercicio 4: Clase conexi\u00f3n (Singlet\u00f3n). Cuando ejecutamos consultas a una base de datos desde Java, abrimos una conexi\u00f3n para ejecutar la consulta y luego debemos cerrarla, para que otra instancia (ptra forma de llamar a un usuario en alg\u00fan lugar usando la app \ud83d\udc7e), pueda utilizar la base de datos, ya que el n\u00famero de conexiones que ofrece el servidor de base de datos es limitado, aproximadamente (200) simultaneas (Ahora se entiende el por qu\u00e9 de las colas para comprar entradas online). Es por este motivo que optimizar el cierre de las conexiones cuando no la estemos utilizando es primordial. Si creamos una clase conexi\u00f3n y por error, se crea m\u00e1s de una instancia, porducimos una conexi\u00f3n por instancia y esto no es bueno cuando hablamos de aplicaciones con muchos usuarios. Esta producci\u00f3n de instancias debe ser controlada, as\u00edgnando un m\u00e1ximo de 1 instancia por usuario conectado. De esto se encarga el patr\u00f3n Singlet\u00f3n. Estructura (maven) \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u251c\u2500\u2500 main \u251c\u2500\u2500 java \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 jdbc \u2514\u2500\u2500 sqlite \u251c\u2500\u2500 ManejaConexion.java \u2514\u2500\u2500 Principal.java /sqlite/pom.xml <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>cl.lherrera.jdbc</groupId> <artifactId>sqlite</artifactId> <version>0.0.1-SNAPSHOT</version> <dependencies> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> <version>3.30.1</version> </dependency> </dependencies> </project> /sqlite/src/main/java/cl/lherrera/jdbc/sqlite/ManejaConexion.java (Singleton pattern \ud83e\udd4b) package cl.lherrera.jdbc.sqlite; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; import java.util.logging.Logger; public class ManejaConexion { private static final String DATABASE_FILE_PATH = \"/Users/luisherrera/Desktop/TALENTO-PROS/bases/base001.db\"; private static final String DB_URL = \"jdbc:sqlite:\" + DATABASE_FILE_PATH; private static final Logger milog = Logger.getLogger(ManejaConexion.class.getName()); // variable de instancia para controlar s\u00f3lo una. private static ManejaConexion manejaConexion; // \u00fanica forma de instanciar esta clase es desde el interior. private ManejaConexion() {} /** * M\u00e9todo est\u00e1tico, para poder acceder sin una instancia, as\u00ed controlamos * internamente que no se cree una nueva instancia si esta existe. * @return */ public static ManejaConexion obtenerManejo() { if(manejaConexion != null) { return manejaConexion; }else { return new ManejaConexion(); } } /** * Obtiene una conexi\u00f3n, esta arroja la excepci\u00f3n, para poder desde donde sea llamada * usar el try(), con ello poder crear una conexi\u00f3n por consulta y luego * la cerrar\u00e1. * * @return * @throws SQLException */ public Connection obtenerConexion() throws SQLException { Connection conexion = null; try { Class.forName(\"org.sqlite.JDBC\"); conexion = DriverManager.getConnection(DB_URL, \"admin\", \"1234\"); } catch (ClassNotFoundException e) { milog.severe(\"No se pudo cargar el driver.\"); milog.severe(e.getMessage()); } return conexion; } } /sqlite/src/main/java/cl/lherrera/jdbc/sqlite/Principal.java package cl.lherrera.jdbc.sqlite; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.util.logging.Logger; public class Principal { private static final ManejaConexion manejaConexion = ManejaConexion.obtenerManejo(); private static Logger milog = Logger.getLogger(Principal.class.getName()); public static void main(String[] args) { milog.info(\"Inicio de la aplicaci\u00f3n\"); // ingreso de dato try( Connection conexion = manejaConexion.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(\"INSERT INTO persona (nombre) values (?)\"); ){ ps.setString(1, \"ana\"); int columnasAfectadas = ps.executeUpdate(); if(columnasAfectadas != 1) throw new SQLException(\"Error al insertar registro\"); }catch (SQLException e) { milog.severe(e.getMessage()); } // ejecuta el select try( Connection conexion = manejaConexion.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(\"SELECT id, nombre FROM persona WHERE id = 1\"); ResultSet rs = ps.executeQuery(); ){ while(rs.next()) { milog.info(\"ID: \" + rs.getString(\"id\")); milog.info(\"NOMBRE: \" + rs.getString(\"nombre\")); } }catch (SQLException e) { milog.severe(e.getMessage()); } } } Ejercicio 5: Uso de un DTO. Java es un lenguaje que cumple muy bien con lo que determina el paradigma de orientaci\u00f3n a objetos, entonces hay que sacar provecho de esto. Estructura: ./ \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u251c\u2500\u2500 java | \u2514\u2500\u2500 cl | \u2514\u2500\u2500 lherrera | \u2514\u2500\u2500 jdbc | \u2514\u2500\u2500 sqlite | \u251c\u2500\u2500 ManejaConexion.java | \u251c\u2500\u2500 Persona.java | \u2514\u2500\u2500 Principal.java /sqlite/pom.xml <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>cl.lherrera.jdbc</groupId> <artifactId>sqlite</artifactId> <version>0.0.1-SNAPSHOT</version> <dependencies> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> <version>3.30.1</version> </dependency> </dependencies> </project> /sqlite/src/main/java/cl/lherrera/jdbc/sqlite/ManejaConexion.java (Singleton pattern \ud83e\udd4b) package cl.lherrera.jdbc.sqlite; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; import java.util.logging.Logger; public class ManejaConexion { private static final String DATABASE_FILE_PATH = \"/Users/luisherrera/Desktop/TALENTO-PROS/bases/base001.db\"; private static final String DB_URL = \"jdbc:sqlite:\" + DATABASE_FILE_PATH; private static final Logger milog = Logger.getLogger(ManejaConexion.class.getName()); // variable de instancia para controlar s\u00f3lo una. private static ManejaConexion manejaConexion; // \u00fanica forma de instanciar esta clase es desde el interior. private ManejaConexion() {} /** * M\u00e9todo est\u00e1tico, para poder acceder sin una instancia, as\u00ed controlamos * internamente que no se cree una nueva instancia si esta existe. * @return */ public static ManejaConexion obtenerManejo() { if(manejaConexion != null) { return manejaConexion; }else { return new ManejaConexion(); } } /** * Obtiene una conexi\u00f3n, esta arroja la excepci\u00f3n, para poder desde donde sea llamada * usar el try(), con ello poder crear una conexi\u00f3n por consulta y luego * la cerrar\u00e1. * * @return * @throws SQLException */ public Connection obtenerConexion() throws SQLException { Connection conexion = null; try { Class.forName(\"org.sqlite.JDBC\"); conexion = DriverManager.getConnection(DB_URL, \"admin\", \"1234\"); } catch (ClassNotFoundException e) { milog.severe(\"No se pudo cargar el driver.\"); milog.severe(e.getMessage()); } return conexion; } } /sqlite/src/main/java/cl/lherrera/jdbc/sqlite/Persona.java package cl.lherrera.jdbc.sqlite; public class Persona { private Integer id; private String nombre; public Persona() {} public Persona(Integer id, String nombre) { this.id = id; this.nombre = nombre; } public Persona(String nombre) { this.nombre = nombre; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } @Override public String toString() { return \"Persona [id=\" + id + \", nombre=\" + nombre + \"]\"; } } /sqlite/src/main/java/cl/lherrera/jdbc/sqlite/Principal.java package cl.lherrera.jdbc.sqlite; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.util.ArrayList; import java.util.List; import java.util.logging.Logger; public class Principal { private static final ManejaConexion manejaConexion = ManejaConexion.obtenerManejo(); private static Logger milog = Logger.getLogger(Principal.class.getName()); public static void main(String[] args) { milog.info(\"Inicio de la aplicaci\u00f3n\"); // ingreso de dato try( Connection conexion = manejaConexion.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(\"INSERT INTO persona (nombre) values (?)\"); ){ Persona persona = new Persona(\"Carla\"); ps.setString(1, persona.getNombre()); int columnasAfectadas = ps.executeUpdate(); if(columnasAfectadas != 1) throw new SQLException(\"Error al insertar registro\"); }catch (SQLException e) { milog.severe(e.getMessage()); } // ejecuta el select try( Connection conexion = manejaConexion.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(\"SELECT id, nombre FROM persona\"); ResultSet rs = ps.executeQuery(); ){ List<Persona> personas = new ArrayList<>(); while(rs.next()) { personas.add(new Persona(rs.getInt(\"id\"), rs.getString(\"nombre\"))); } // imprimimos los resultados for(Persona per: personas) milog.info(per.toString()); }catch (SQLException e) { milog.severe(e.getMessage()); } } } Ejercicio 6: separando en capas (modelos, daos, utils) Separamos en capas, cada una con alguna responsabilidad en particular. La idea es implementar un funcionamiento separado en tres capas, en una el modelo, la vista y el controlador; aunque MVC es enfocado a aplicaci\u00f3nes de escritorio, se supone que MVC es casi una jerga e indica que tenemos tres capas; lo que podemos ver en el ejemplo es que las capas encargadas de los datos no podemos asignarlo solamente al modelo, ya que este necesita conectar y realizar tareas, por tanto el modelo para el caso de los proyectos en java, se divide en nuevas capas, en este caso los Daos (proporcionan el acceso m\u00e1s com\u00fan, como obtener todos) y el mismo modelo, sin contar el Singlet\u00f3n conector. Estructura: \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u251c\u2500\u2500 java \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 jdbc \u2502 \u2514\u2500\u2500 sqlite \u2502 \u251c\u2500\u2500 ManejaConexion.java \u2502 \u251c\u2500\u2500 Principal.java \u2502 \u251c\u2500\u2500 daos \u2502 \u2502 \u2514\u2500\u2500 PersonaDAO.java \u2502 \u2514\u2500\u2500 modelos \u2502 \u2514\u2500\u2500 Persona.java /sqlite/pom.xml <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>cl.lherrera.jdbc</groupId> <artifactId>sqlite</artifactId> <version>0.0.1-SNAPSHOT</version> <dependencies> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> <version>3.30.1</version> </dependency> </dependencies> </project> /sqlite/src/main/java/cl/lherrera/jdbc/sqlite/ManejaConexion.java package cl.lherrera.jdbc.sqlite.utils; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; import java.util.Properties; import java.util.logging.Logger; public class ManejaConexion { // cargamos las propiedades del proyecto private static Propiedades propiedades = Propiedades.obtenerPropiedades(); private static Properties props = propiedades.getProps(); private static final String DB_URL = \"jdbc:sqlite:\" + props.getProperty(\"file_path\"); private static final Logger milog = MiLog.obtenerLog(); private static ManejaConexion manejaConexion = new ManejaConexion(); private ManejaConexion() { if (manejaConexion != null){ //Prevent Reflection throw new IllegalStateException(\"No se puede crear una nueva instancia de ManejaConexion\"); } } /** * M\u00e9todo est\u00e1tico, para poder acceder sin una instancia, as\u00ed controlamos * internamente que no se cree una nueva instancia si esta existe. * */ public static ManejaConexion obtenerManejo() { return manejaConexion; } /** * Obtiene una conexi\u00f3n. * * @return Una conexi\u00f3n abierta, esto es importante ya que esta conexi\u00f3n debe ser cerrada. * @throws <i>SQLException</i>, al no controlar la exception ac\u00e1, obligamos * a tener que utilizar un {@code try()}, as\u00ed cada vez que lo ocupemos * estar\u00e1 dentro del try especial y nos aseguramos que la conexi\u00f3n * cierre. Pero esta caracter\u00edstica, se encuentra vulnerable al * desarrollador si ocupa o no {@code try(){}catch(){}}. */ public Connection obtenerConexion() throws SQLException { Connection conexion = null; try { Class.forName(\"org.sqlite.JDBC\"); conexion = DriverManager.getConnection( DB_URL, props.getProperty(\"usuario\"), props.getProperty(\"contrasenia\") ); } catch (ClassNotFoundException e) { milog.severe(\"No se pudo cargar el driver.\"); milog.severe(e.getMessage()); } return conexion; } } /sqlite/src/main/java/cl/lherrera/jdbc/sqlite/modelos/Persona.java package cl.lherrera.jdbc.sqlite.modelos; public class Persona { private Integer id; private String nombre; public Persona() {} public Persona(Integer id, String nombre) { this.id = id; this.nombre = nombre; } public Persona(String nombre) { this.nombre = nombre; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } @Override public String toString() { return \"Persona [id=\" + id + \", nombre=\" + nombre + \"]\"; } } /sqlite/src/main/java/cl/lherrera/jdbc/sqlite/daos/PersonaDAO.java package cl.lherrera.jdbc.sqlite.daos; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.util.ArrayList; import java.util.List; import java.util.logging.Logger; import cl.lherrera.jdbc.sqlite.ManejaConexion; import cl.lherrera.jdbc.sqlite.modelos.Persona; public class PersonaDAO { private static final ManejaConexion manejaConexion = ManejaConexion.obtenerManejo(); private static Logger milog = Logger.getLogger(PersonaDAO.class.getName()); /** * M\u00e9todo encargado de agregar una persona a la * base de datos. */ public int ingresar(Persona persona) { String letra; int filasAfectadas = 0; try( Connection conexion = manejaConexion.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(\"INSERT INTO persona (nombre) values (?)\"); ){ ps.setString(1, persona.getNombre()); filasAfectadas = ps.executeUpdate(); if(filasAfectadas != 1) throw new SQLException(\"Error al insertar registro\"); }catch (SQLException e) { milog.severe(e.getMessage()); } return filasAfectadas; } /** * M\u00e9todo encargado de retornar una lista de todas las personas * que est\u00e9n en la base de datos. * * @return {@code List} lista poblada con las personas encontradas * en la base de datos. */ public List<Persona> obtenerTodos(){ List<Persona> personas = new ArrayList<>(); try( Connection conexion = manejaConexion.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(\"SELECT id, nombre FROM persona\"); ResultSet rs = ps.executeQuery(); ){ while(rs.next()) { personas.add(new Persona(rs.getInt(\"id\"), rs.getString(\"nombre\"))); } }catch (SQLException e) { milog.severe(e.getMessage()); } return personas; } } /sqlite/src/main/java/cl/lherrera/jdbc/sqlite/Principal.java package cl.lherrera.jdbc.sqlite; import java.util.logging.Logger; import cl.lherrera.jdbc.sqlite.daos.PersonaDAO; import cl.lherrera.jdbc.sqlite.modelos.Persona; public class Principal { private static final ManejaConexion manejaConexion = ManejaConexion.obtenerManejo(); private static Logger milog = Logger.getLogger(Principal.class.getName()); public static void main(String[] args) { milog.info(\"Inicio de la aplicaci\u00f3n\"); PersonaDAO personaDao = new PersonaDAO(); // ingreso de dato Persona persona = new Persona(\"Camilo\"); personaDao.ingresar(persona); // ejecuta el select for(Persona per: personaDao.obtenerTodos()) milog.info(per.toString()); } } Ejercicio 7: aplicaci\u00f3n mantenedora de informaci\u00f3n. Con lo ejercitado, podemos entonces crear una aplicaci\u00f3n que mantenga los datos de la base de datos de la tabla persona. Se desacopla el funcionamiento creando un archivo de propiedades, que servir\u00e1 para direfenciar por ejemplo las propiedases del servidor y las del ambiente de desarrollo. Esto se debe a que en servidor, posee su propio archivo de propiedades, entonces posee sus propias credenciales de conexi\u00f3n o una url de los logs propias. Estructura ./ \u251c\u2500\u2500 logs \u2502 \u251c\u2500\u2500 2020_03_29.log \u2502 \u2514\u2500\u2500 2020_03_29.log.lck \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 propiedades \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u251c\u2500\u2500 java \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 jdbc \u2502 \u2514\u2500\u2500 sqlite \u2502 \u251c\u2500\u2500 app \u2502 \u2502 \u2514\u2500\u2500 Principal.java \u2502 \u251c\u2500\u2500 controlador \u2502 \u2502 \u2514\u2500\u2500 PersonaControlador.java \u2502 \u251c\u2500\u2500 dao \u2502 \u2502 \u2514\u2500\u2500 PersonaDAO.java \u2502 \u251c\u2500\u2500 modelo \u2502 \u2502 \u2514\u2500\u2500 Persona.java \u2502 \u251c\u2500\u2500 utils \u2502 \u2502 \u251c\u2500\u2500 ManejaConexion.java \u2502 \u2502 \u251c\u2500\u2500 MiLog.java \u2502 \u2502 \u251c\u2500\u2500 Propiedades.java \u2502 \u2502 \u2514\u2500\u2500 administradorDeAplicacion.java \u2502 \u2514\u2500\u2500 vista \u2502 \u251c\u2500\u2500 Accion.java \u2502 \u2514\u2500\u2500 Dibuja.java Para esta aplicaci\u00f3n se definen tres clases del tipo Singlet\u00f3n, esto con la finalidad de hacer que cada una de estas clases posea una \u00fanica instancia. Esto es necesario ya que estas clases no pueden tener m\u00e1s de una instancia, por que o cran un \u00fanico archivo o se necesita una sola informaci\u00f3n de ellos. Con esto nos aseguramos que sea la misma instancia de cada una de las siguientes clases para toda la aplicaci\u00f3n. /sqlite/src/main/java/cl/lherrera/jdbc/sqlite/utils/MiLog.java package cl.lherrera.jdbc.sqlite.utils; import java.io.File; import java.io.IOException; import java.text.SimpleDateFormat; import java.util.Date; import java.util.Properties; import java.util.logging.FileHandler; import java.util.logging.Logger; import java.util.logging.SimpleFormatter; public class MiLog { private Propiedades propiedades = Propiedades.obtenerPropiedades(); private Properties props = propiedades.getProps(); private static Logger logger = Logger.getLogger(MiLog.class.getName()); // cramos la instancia desde el inicio, ya que llamando a un m\u00e9todo // se corre el riesgo que m\u00e1s de un hilo crea que milog // es null hasta que se ejecute el m\u00e9todo que crea // la instancia. private static MiLog milog = new MiLog(); private MiLog() { if (milog != null){ //Prevent Reflection throw new IllegalStateException(\"No se puede crear una nueva instancia de Milog\"); } this.inicializaArchivo(); } private void inicializaArchivo() { SimpleDateFormat formatoSimple = new SimpleDateFormat(\"yyyy_MM_dd\"); String fecha = formatoSimple.format(new Date()); try { String directorioLogs = props.getProperty(\"directorioLogs\"); boolean existeElDirectorio = verificaExistenciaDirecctorio(directorioLogs); if(existeElDirectorio) { String direccionArchivo = directorioLogs + fecha + \".log\"; FileHandler fh = new FileHandler(direccionArchivo); logger.addHandler(fh); SimpleFormatter formatter = new SimpleFormatter(); fh.setFormatter(formatter); } else { throw new IOException(\"No se pudo crear el directorio: \" + directorioLogs); } } catch (SecurityException | IOException e) { logger.severe(e.getMessage()); } } /** * Toma la ruta y la intenta crear en caso que no exista */ private boolean verificaExistenciaDirecctorio(String directorioLogs) { boolean existe = false; File manejoDirectorio = new File(directorioLogs); if(manejoDirectorio.exists()) { existe = true; }else { existe = manejoDirectorio.mkdir(); } return existe; } public static Logger obtenerLog() { return logger; } } /sqlite/src/main/java/cl/lherrera/jdbc/sqlite/utils/administradorDeAplicacion.java package cl.lherrera.jdbc.sqlite.utils; import java.util.logging.Logger; import cl.lherrera.jdbc.sqlite.controlador.PersonaControlador; public class administradorDeAplicacion { private static Logger milog = MiLog.obtenerLog(); private PersonaControlador controladorPersona = new PersonaControlador(); private boolean seguirEjecutando = true; private static administradorDeAplicacion aplicacion = new administradorDeAplicacion(); private administradorDeAplicacion() { if (aplicacion != null){ //Prevent Reflection throw new IllegalStateException(\"No se puede crear una nueva instancia de AplicacionControlador\"); } } /** * Acceso a la instancia desde el exterior * */ public static administradorDeAplicacion obtenerEjecucion() { return aplicacion; } /** * se encarga de finalizar la aplicaci\u00f3n, para esto cambia * el valor de la variable est\u00e1tica que posee el while * principal. * */ public void terminarAplicacion() { seguirEjecutando = false; } /** * M\u00e9todo principal, es el que mantiene la aplicaci\u00f3n ejecutando el men\u00fa. */ public void iniciaApp() { milog.info(\"Aplicaci\u00f3n iniciada.\"); while(seguirEjecutando) { controladorPersona.iniciaMantenedor(); } milog.info(\"Aplicaci\u00f3n finalizada.\"); } } /sqlite/src/main/java/cl/lherrera/jdbc/sqlite/utils/Propiedades.java package cl.lherrera.jdbc.sqlite.utils; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.IOException; import java.util.Properties; import java.util.logging.Logger; public class Propiedades { private Properties props; private static Logger milog = MiLog.obtenerLog(); private static Propiedades propiedades = new Propiedades(); private Propiedades() { if (propiedades != null){ //Prevent Reflection throw new IllegalStateException(\"No se puede crear una nueva instancia de Propiedades\"); } this.iniciaProps(); } public static Propiedades obtenerPropiedades() { return propiedades; } private void iniciaProps() { try { props = new Properties(); props.load(new FileInputStream(\"propiedades\")); } catch (FileNotFoundException e) { milog.severe(\"El archivo no se ha encontrado\"); milog.severe(e.getMessage()); } catch (IOException e) { milog.severe(e.getMessage()); } } public Properties getProps() { return props; } } /sqlite/src/main/java/cl/lherrera/jdbc/sqlite/utils/ManejaConexion.java package cl.lherrera.jdbc.sqlite.utils; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; import java.util.Properties; import java.util.logging.Logger; public class ManejaConexion { // cargamos las propiedades del proyecto private static Propiedades propiedades = Propiedades.obtenerPropiedades(); private static Properties props = propiedades.getProps(); private static final String DB_URL = \"jdbc:sqlite:\" + props.getProperty(\"file_path\"); private static final Logger milog = MiLog.obtenerLog(); private static ManejaConexion manejaConexion = new ManejaConexion(); private ManejaConexion() { if (manejaConexion != null){ //Prevent Reflection throw new IllegalStateException(\"No se puede crear una nueva instancia de ManejaConexion\"); } } /** * M\u00e9todo est\u00e1tico, para poder acceder sin una instancia, as\u00ed controlamos * internamente que no se cree una nueva instancia si esta existe. * */ public static ManejaConexion obtenerManejo() { return new ManejaConexion(); } /** * Obtiene una conexi\u00f3n. * * @return Una conexi\u00f3n abierta, esto es importante ya que esta conexi\u00f3n debe ser cerrada. * @throws <i>SQLException</i>, al no controlar la exception ac\u00e1, obligamos * a tener que utilizar un {@code try()}, as\u00ed cada vez que lo ocupemos * estar\u00e1 dentro del try especial y nos aseguramos que la conexi\u00f3n * cierre. Pero esta caracter\u00edstica, se encuentra vulnerable al * desarrollador si ocupa o no {@code try(){}catch(){}}. */ public Connection obtenerConexion() throws SQLException { Connection conexion = null; try { Class.forName(\"org.sqlite.JDBC\"); conexion = DriverManager.getConnection( DB_URL, props.getProperty(\"usuario\"), props.getProperty(\"contrasenia\") ); } catch (ClassNotFoundException e) { milog.severe(\"No se pudo cargar el driver.\"); milog.severe(e.getMessage()); } return conexion; } } El modelo est\u00e1 compuesto, por una sola clase, que se encargar\u00e1 de servir para almacenar los datos de las personas. /sqlite/src/main/java/cl/lherrera/jdbc/sqlite/modelo/Persona.java package cl.lherrera.jdbc.sqlite.modelo; public class Persona { private Integer id; private String nombre; public Persona() {} public Persona(Integer id, String nombre) { this.id = id; this.nombre = nombre; } public Persona(String nombre) { this.nombre = nombre; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } @Override public String toString() { return \"Persona [id=\" + id + \", nombre=\" + nombre + \"]\"; } } Necesitamos una clase que realice las consultas m\u00e1s recurrentes sin poner propiedades de negocio en ella, como por ejemplo traer a todas las personas, pero si quisieramos agregar por ejemplo un nombre con especial form\u00e1to no le corresponde al DAO, el DAO solo realiza consultas, lo dem\u00e1s se tratar\u00eda en un paquete especial de servicios; pero para este ejemplo no es necesario. /sqlite/src/main/java/cl/lherrera/jdbc/sqlite/dao/PersonaDAO.java package cl.lherrera.jdbc.sqlite.dao; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.util.ArrayList; import java.util.List; import java.util.logging.Logger; import cl.lherrera.jdbc.sqlite.modelo.Persona; import cl.lherrera.jdbc.sqlite.utils.ManejaConexion; import cl.lherrera.jdbc.sqlite.utils.MiLog; public class PersonaDAO { private static final ManejaConexion manejaConexion = ManejaConexion.obtenerManejo(); private static Logger milog = MiLog.obtenerLog(); /** * M\u00e9todo encargado de agregar una persona a la * base de datos. */ public int ingresar(Persona persona) { int filasAfectadas = 0; try( Connection conexion = manejaConexion.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(\"INSERT INTO persona (nombre) values (?)\"); ){ ps.setString(1, persona.getNombre()); filasAfectadas = ps.executeUpdate(); if(filasAfectadas != 1) throw new SQLException(\"Error al insertar registro\"); }catch (SQLException e) { milog.severe(e.getMessage()); } return filasAfectadas; } /** * M\u00e9todo encargado de retornar una lista de todas las personas * que est\u00e9n en la base de datos. * * @return {@code List} lista poblada con las personas encontradas * en la base de datos. */ public List<Persona> obtenerTodos(){ List<Persona> personas = new ArrayList<>(); try( Connection conexion = manejaConexion.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(\"SELECT id, nombre FROM persona\"); ResultSet rs = ps.executeQuery(); ){ while(rs.next()) { personas.add(new Persona(rs.getInt(\"id\"), rs.getString(\"nombre\"))); } }catch (SQLException e) { milog.severe(e.getMessage()); } return personas; } public Persona buscarPorId(int id) { Persona persona = new Persona(); try( Connection conexion = manejaConexion.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(\"SELECT id, nombre FROM persona where id = \" + id ); ResultSet rs = ps.executeQuery(); ){ if(rs.next()) { persona.setNombre(rs.getString(\"nombre\")); persona.setId(rs.getInt(\"id\")); }else { throw new SQLException(\"No se encuentra el registro en la base de datos\"); } }catch (SQLException e) { milog.severe(e.getMessage()); } return persona; } public void actualizar(int id, Persona persona) { try( Connection conexion = manejaConexion.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(\"UPDATE persona SET nombre = ? WHERE id = ?\"); ){ ps.setString(1, persona.getNombre()); ps.setInt(2, id); int filasAfectadas = ps.executeUpdate(); if(filasAfectadas <= 0) throw new SQLException(\"No se actualiz\u00f3 ning\u00fan registro\"); }catch(SQLException e) { milog.severe(\"Error al actualizar\"); milog.severe(e.getMessage()); } } public void eliminar(int id) { try( Connection conexion = manejaConexion.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(\"DELETE FROM persona WHERE id = ?\"); ){ ps.setInt(1, id); int filasAfectadas = ps.executeUpdate(); if(filasAfectadas <= 0) throw new SQLException(\"No se elimin\u00f3 ning\u00fan registro\"); }catch(SQLException e) { milog.severe(\"Error al eliminar\"); milog.severe(e.getMessage()); } } } Cuando se requiera que se realice una acci\u00f3n que involucre la interacci\u00f3n entre la vista y la base de datos, tendremos a nuestro encargado. El controlador. /sqlite/src/main/java/cl/lherrera/jdbc/sqlite/controlador/PersonaControlador.java package cl.lherrera.jdbc.sqlite.controlador; import java.util.List; import cl.lherrera.jdbc.sqlite.dao.PersonaDAO; import cl.lherrera.jdbc.sqlite.modelo.Persona; import cl.lherrera.jdbc.sqlite.utils.administradorDeAplicacion; import cl.lherrera.jdbc.sqlite.vista.Accion; import cl.lherrera.jdbc.sqlite.vista.Dibuja; public class PersonaControlador { private final PersonaDAO daopersona = new PersonaDAO(); private static final int LISTAR = 1; private static final int INGRESAR = 2; private static final int ACTUALIZAR = 3; private static final int ELIMINAR = 4; public void procesoIngresar() { Persona persona = new Persona(Accion.solicitaNombre()); daopersona.ingresar(persona); Accion.avisoAccionRealizada(); } public void procesoListar() { List<Persona> personas = daopersona.obtenerTodos(); Dibuja.listarTodos(personas); Accion.avisoAccionRealizada(); } public void procesoActualizar() { int id = Accion.solicitaId(); Persona persona = daopersona.buscarPorId(id); Dibuja.muestraDetallePersona(persona); int opcion = Accion.retornaOpcionEntera(); if(opcion == 1) { String nombre = Accion.solicitaNombre(); persona.setNombre(nombre); daopersona.actualizar(id, persona); } Accion.avisoAccionRealizada(); } public void procesoEliminar() { int id = Accion.solicitaId(); Persona persona = daopersona.buscarPorId(id); Dibuja.muestraDetallePersona(persona); int opcion = Accion.retornaOpcionEntera(); if(opcion == 1) daopersona.eliminar(id); Accion.avisoAccionRealizada(); } public void iniciaMantenedor() { Dibuja.principal(); int opcion = Accion.retornaOpcionEntera(); switch (opcion) { case LISTAR: procesoListar(); break; case INGRESAR: procesoIngresar(); break; case ACTUALIZAR: procesoActualizar(); break; case ELIMINAR: procesoEliminar(); break; default: Accion.finalizaAccion(); administradorDeAplicacion aplicacion = administradorDeAplicacion.obtenerEjecucion(); aplicacion.terminarAplicacion(); } } } La parte visual ser\u00e1 representada por salidas de consola, la siguiente capa, ser\u00e1 la encargada de la representaci\u00f3n de los datos para el usuario y sus interacciones. /sqlite/src/main/java/cl/lherrera/jdbc/sqlite/vista/Dibuja.java package cl.lherrera.jdbc.sqlite.vista; import java.util.List; import cl.lherrera.jdbc.sqlite.modelo.Persona; public class Dibuja { public static void solicitaNombre() { System.out.println(\"Ingrese el nombre de la persona\"); } public static void solicitaId() { System.out.println(\"Ingrese el id de la persona\"); } public static void principal() { limpiarPantalla(); String texto = \"\" + \"Men\u00fa principal \\n\\n\" + \"1 - Listar personas\\n\" + \"2 - Ingresar persona\\n\" + \"3 - Actuaizar persona\\n\" + \"4 - Eliminar persona\\n\" + \"5 - Salir\\n\"; System.out.println(texto); } public static void muestraDetallePersona(Persona persona) { System.out.println(\"Persona a ejecutar acci\u00f3n:\"); System.out.println(\"--------------------------\"); System.out.println(\"- id: \" + persona.getId()); System.out.println(\"- nombre: \" + persona.getNombre()); System.out.println(\"--------------------------\"); System.out.println(\"Desea ejecutar: 1-Si, 2-No\"); } public static void listarTodos(List<Persona> personas) { System.out.println(\"Lista de personas:\"); personas.forEach(System.out::println); } public static void confirmaSegir() { System.out.println(\"\\n\\nAcci\u00f3n realizada para continuar presione 'ENTER'...\"); } private static void limpiarPantalla() { for(int i = 0; i < 10; i ++) { System.out.println(\"\\n\"); } } } /sqlite/src/main/java/cl/lherrera/jdbc/sqlite/vista/Accion.java package cl.lherrera.jdbc.sqlite.vista; import java.util.Scanner; /** * Clase encargada de gestionar las acciones del usuario. * Todos sus m\u00e9todos son est\u00e1ticos. * @author luisherrera * */ public class Accion { private static final Scanner SCAN = new Scanner(System.in); private Accion() {} public static int retornaOpcionEntera() { return Integer.parseInt(SCAN.nextLine()); } public static void avisoAccionRealizada() { Dibuja.confirmaSegir(); SCAN.nextLine(); } public static String retornaOpcion() { return SCAN.nextLine(); } public static int solicitaId() { Dibuja.solicitaId(); return retornaOpcionEntera(); } public static String solicitaNombre() { Dibuja.solicitaNombre(); return retornaOpcion(); } public static void finalizaAccion() { SCAN.close(); } } /sqlite/propiedades # datos de conexi\u00f3n file_path=/Users/luisherrera/Desktop/TALENTO-PROS/bases/base001.db usuario=admin contrasenia=1234 directorioLogs=/Users/luisherrera/Desktop/TALENTO-PROS/servlets/sqlite/logs/ /sqlite/pom.xml <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>cl.lherrera.jdbc</groupId> <artifactId>sqlite</artifactId> <version>0.0.1-SNAPSHOT</version> <dependencies> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> <version>3.30.1</version> </dependency> </dependencies> </project> Ejercicio 8: A LA WEB \ud83d\udc7e \ud83e\udd4b Es momento de fusionar el conocimiento entre servlets y bases de datos, para poder interactuar con un usuario, pero ahora no desde la consola si no que ahora desde la web. El objetivo es el mismo, un mantenedor de personas, lo que antes hicimos en el escritorio, ahora lo realizaremos en la web. El dise\u00f1o se enfoca en el backend, por lo que el Html del ejercicio es muy b\u00e1sico y es una buena forma de una vez terminado el ejercicio, poder mejorar la presentaci\u00f3n y validaciones. Lo primero que necesitamos es crear un proyecto Maven o podemos continuar con el que dejamos hasta ahora, ya que est\u00e1 en maven, pero hay que ir a los facets y cambiarlo a un dynamic web module 4.0, luego agregar maven dependencies, java 8, agregar el servidor y todo lo necesario para que funcione en un entorno web. Estructura: En esta estructura, se puede ver que una vez que el proyecto completo compila, lleva las propiedades al target. se puede ver en config/ . Con esto escondemos las propiedades del uso p\u00fablico y al agregarlo al git ignore, se tomar\u00e1 el de producci\u00f3n, sin tener que realizar alguna tarea manual, como lo ser\u00eda cambiar el directorio absoluto de las propiedades, ya que esto no es autom\u00e1tico. ./ \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u251c\u2500\u2500 WEB-INF \u2502 \u2502 \u251c\u2500\u2500 lib \u2502 \u2502 \u2514\u2500\u2500 propiedades.properties \u2502 \u251c\u2500\u2500 index.jsp \u2502 \u2514\u2500\u2500 mantenedor.jsp \u251c\u2500\u2500 logs \u2502 \u251c\u2500\u2500 2020_03_30.log \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u251c\u2500\u2500 cl \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 webpersonas \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 dao \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 PersonaDAO.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 modelo \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 Persona.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 servlets \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ActualizarPersona.java \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 EliminaPersona.java \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 IngresarPersona.java \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 IniciaMantenedor.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 utils \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ManejaConexion.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 MiLog.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 Propiedades.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 config \u2502 \u2502 \u2502 \u2514\u2500\u2500 propiedades.properties \u2502 \u2502 \u2514\u2500\u2500 resources \u2502 \u2514\u2500\u2500 test \u2502 \u251c\u2500\u2500 java \u2502 \u2514\u2500\u2500 resources \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2502 \u2514\u2500\u2500 maven \u2502 \u2502 \u2514\u2500\u2500 cl.lherrera \u2502 \u2502 \u2514\u2500\u2500 webpersonas \u2502 \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2502 \u2514\u2500\u2500 pom.xml \u2502 \u251c\u2500\u2500 cl \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2514\u2500\u2500 webpersonas \u2502 \u2502 \u251c\u2500\u2500 dao \u2502 \u2502 \u2502 \u2514\u2500\u2500 PersonaDAO.class \u2502 \u2502 \u251c\u2500\u2500 modelo \u2502 \u2502 \u2502 \u2514\u2500\u2500 Persona.class \u2502 \u2502 \u251c\u2500\u2500 servlets \u2502 \u2502 \u2502 \u251c\u2500\u2500 ActualizarPersona.class \u2502 \u2502 \u2502 \u251c\u2500\u2500 EliminaPersona.class \u2502 \u2502 \u2502 \u251c\u2500\u2500 IngresarPersona.class \u2502 \u2502 \u2502 \u2514\u2500\u2500 IniciaMantenedor.class \u2502 \u2502 \u2514\u2500\u2500 utils \u2502 \u2502 \u251c\u2500\u2500 ManejaConexion.class \u2502 \u2502 \u251c\u2500\u2500 MiLog.class \u2502 \u2502 \u2514\u2500\u2500 Propiedades.class \u2502 \u2514\u2500\u2500 config \u2502 \u2514\u2500\u2500 propiedades.properties \u2514\u2500\u2500 test-classes 35 directories, 32 files /webpersonas/pom.xml <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>cl.lherrera</groupId> <artifactId>webpersonas</artifactId> <version>0.0.1-SNAPSHOT</version> <dependencies> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> <version>3.30.1</version> </dependency> </dependencies> </project> Definamos nuestro archivo de propiedades, para que este sea compilado y puesto en un lugar en que el servidor lo encuentre, lo dejamos en un paquete, as\u00ed cuando se ejecute el build, se mover\u00e1 a un contexto del servidor, de otra forma, deber\u00edamos poner el path absoluto; pero esto trae problemas cuando pasamos a producci\u00f3n, donde las rutas abasolutas, no son iguales a las de nuestra m\u00e1quina y el archivo de propiedades, necesariamente debe ser indicado en el c\u00f3digo y esta es una forma muy limpia de hacerlo si estamos trabajando sin framwork. /webpersonas/src/main/java/config/propiedades.properties # datos de conexi\u00f3n file_path=/Users/luisherrera/Desktop/TALENTO-PROS/bases/base001.db usuario=admin contrasenia=1234 directorioLogs=/Users/luisherrera/Desktop/TALENTO-PROS/servlets/webpersonas/logs/ Ahora queda definir las clases utilitarias que usaremos para este proyecto, la gran sorpresa es que reutilizaremos mucho de nuestra app pasada, ya que al ser un desarrollo en capas, es posible modificar completamente alguna de ellas, sin necesidad de afectar la estructura de otras, que auque parezca extra\u00f1o, no tocaremos su implimentaci\u00f3n y nos enfocaremos en desarrollar la interacci\u00f3n web. (Singleton) /webpersonas/src/main/java/cl/lherrera/webpersonas/utils/Propiedades.java package cl.lherrera.webpersonas.utils; import java.io.FileNotFoundException; import java.io.IOException; import java.io.InputStream; import java.util.Properties; import java.util.logging.Logger; public class Propiedades { private Properties props; private static Logger milog = MiLog.obtenerLog(); private static Propiedades propiedades = new Propiedades(); InputStream streamDeBytes = this.getClass().getResourceAsStream(\"/config/propiedades.properties\"); private Propiedades() { if (propiedades != null){ //Prevent Reflection throw new IllegalStateException(\"No se puede crear una nueva instancia de Propiedades\"); } this.iniciaProps(); } public static Propiedades obtenerPropiedades() { return propiedades; } private void iniciaProps() { try { props = new Properties(); props.load(streamDeBytes); } catch (FileNotFoundException e) { milog.severe(\"El archivo:, no se ha encontrado\"); milog.severe(e.getMessage()); } catch (IOException e) { milog.severe(e.getMessage()); } } public Properties getProps() { return props; } } Hay que recordar, que la conexi\u00f3n utiliza un driver que es externo a las librer\u00edas de java, para que fincione, debe estar cargado el driver en el proyecto, pero adiciional a esto, si no se trabaja con maven, estas librer\u00edas deben ir en WEB-INF/libs. Para no tener este problema con un proyecto maven, no hay que olvidar agregar las librer\u00edas de maven al deploy assembly adem\u00e1s del proyecto, para que el servidor cuente tambi\u00e9n con estos drivers extras que estamos utilizando. (si lo hicimos mal, notaremos un error en la carga del driver en Class.forName(\"org.sqlite.JDBC\"); ). (Singleton) /webpersonas/src/main/java/cl/lherrera/webpersonas/utils/ManejaConexion.java package cl.lherrera.webpersonas.utils; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; import java.util.Properties; import java.util.logging.Logger; public class ManejaConexion { // cargamos las propiedades del proyecto private static Propiedades propiedades = Propiedades.obtenerPropiedades(); private static Properties props = propiedades.getProps(); private static final String DB_URL = \"jdbc:sqlite:\" + props.getProperty(\"file_path\"); private static final Logger milog = MiLog.obtenerLog(); private static ManejaConexion manejaConexion = new ManejaConexion(); private ManejaConexion() { if (manejaConexion != null){ //Prevent Reflection throw new IllegalStateException(\"No se puede crear una nueva instancia de ManejaConexion\"); } } /** * M\u00e9todo est\u00e1tico, para poder acceder sin una instancia, as\u00ed controlamos * internamente que no se cree una nueva instancia si esta existe. * */ public static ManejaConexion obtenerManejo() { return manejaConexion; } /** * Obtiene una conexi\u00f3n. * * @return Una conexi\u00f3n abierta, esto es importante ya que esta conexi\u00f3n debe ser cerrada. * @throws <i>SQLException</i>, al no controlar la exception ac\u00e1, obligamos * a tener que utilizar un {@code try()}, as\u00ed cada vez que lo ocupemos * estar\u00e1 dentro del try especial y nos aseguramos que la conexi\u00f3n * cierre. Pero esta caracter\u00edstica, se encuentra vulnerable al * desarrollador si ocupa o no {@code try(){}catch(){}}. */ public Connection obtenerConexion() throws SQLException { Connection conexion = null; try { Class.forName(\"org.sqlite.JDBC\"); conexion = DriverManager.getConnection( DB_URL, props.getProperty(\"usuario\"), props.getProperty(\"contrasenia\") ); } catch (ClassNotFoundException e) { milog.severe(\"No se pudo cargar el driver.\"); milog.severe(e.getMessage()); } return conexion; } } (Singleton) /webpersonas/src/main/java/cl/lherrera/webpersonas/utils/MiLog.java package cl.lherrera.webpersonas.utils; import java.io.File; import java.io.IOException; import java.text.SimpleDateFormat; import java.util.Date; import java.util.Properties; import java.util.logging.FileHandler; import java.util.logging.Logger; import java.util.logging.SimpleFormatter; public class MiLog { private Propiedades propiedades = Propiedades.obtenerPropiedades(); private Properties props = propiedades.getProps(); private static Logger logger = Logger.getLogger(MiLog.class.getName()); // cramos la instancia desde el inicio, ya que llamando a un m\u00e9todo // se corre el riesgo que m\u00e1s de un hilo crea que milog // es null hasta que se ejecute el m\u00e9todo que crea // la instancia. private static MiLog milog = new MiLog(); private MiLog() { if (milog != null){ //Prevent Reflection throw new IllegalStateException(\"No se puede crear una nueva instancia de Milog\"); } this.inicializaArchivo(); } private void inicializaArchivo() { SimpleDateFormat formatoSimple = new SimpleDateFormat(\"yyyy_MM_dd\"); String fecha = formatoSimple.format(new Date()); try { String directorioLogs = props.getProperty(\"directorioLogs\"); boolean existeElDirectorio = verificaExistenciaDirecctorio(directorioLogs); if(existeElDirectorio) { String direccionArchivo = directorioLogs + fecha + \".log\"; FileHandler fh = new FileHandler(direccionArchivo); logger.addHandler(fh); SimpleFormatter formatter = new SimpleFormatter(); fh.setFormatter(formatter); } else { throw new IOException(\"No se pudo crear el directorio: \" + directorioLogs); } } catch (SecurityException | IOException e) { logger.severe(e.getMessage()); } } /** * Toma la ruta y la intenta crear en caso que no exista */ private boolean verificaExistenciaDirecctorio(String directorioLogs) { boolean existe = false; File manejoDirectorio = new File(directorioLogs); if(manejoDirectorio.exists()) { existe = true; }else { existe = manejoDirectorio.mkdir(); } return existe; } public static Logger obtenerLog() { return logger; } } Usamos el mismo DTO o modelo. /webpersonas/src/main/java/cl/lherrera/webpersonas/modelo/Persona.java package cl.lherrera.webpersonas.modelo; public class Persona { private Integer id; private String nombre; public Persona() {} public Persona(Integer id, String nombre) { this.id = id; this.nombre = nombre; } public Persona(String nombre) { this.nombre = nombre; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } @Override public String toString() { return \"Persona [id=\" + id + \", nombre=\" + nombre + \"]\"; } } Usamos el mismo DAO /webpersonas/src/main/java/cl/lherrera/webpersonas/dao/PersonaDAO.java package cl.lherrera.webpersonas.dao; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.util.ArrayList; import java.util.List; import java.util.logging.Logger; import cl.lherrera.webpersonas.modelo.Persona; import cl.lherrera.webpersonas.utils.ManejaConexion; import cl.lherrera.webpersonas.utils.MiLog; public class PersonaDAO { private static final ManejaConexion manejaConexion = ManejaConexion.obtenerManejo(); private static Logger milog = MiLog.obtenerLog(); /** * M\u00e9todo encargado de agregar una persona a la * base de datos. */ public int ingresar(Persona persona) { int filasAfectadas = 0; try( Connection conexion = manejaConexion.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(\"INSERT INTO persona (nombre) values (?)\"); ){ ps.setString(1, persona.getNombre()); filasAfectadas = ps.executeUpdate(); if(filasAfectadas != 1) throw new SQLException(\"Error al insertar registro\"); }catch (SQLException e) { milog.severe(e.getMessage()); } return filasAfectadas; } /** * M\u00e9todo encargado de retornar una lista de todas las personas * que est\u00e9n en la base de datos. * * @return {@code List} lista poblada con las personas encontradas * en la base de datos. */ public List<Persona> obtenerTodos(){ List<Persona> personas = new ArrayList<>(); try( Connection conexion = manejaConexion.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(\"SELECT id, nombre FROM persona\"); ResultSet rs = ps.executeQuery(); ){ while(rs.next()) { personas.add(new Persona(rs.getInt(\"id\"), rs.getString(\"nombre\"))); } }catch (SQLException e) { milog.severe(e.getMessage()); } return personas; } public Persona buscarPorId(int id) { Persona persona = new Persona(); try( Connection conexion = manejaConexion.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(\"SELECT id, nombre FROM persona where id = \" + id ); ResultSet rs = ps.executeQuery(); ){ if(rs.next()) { persona.setNombre(rs.getString(\"nombre\")); persona.setId(rs.getInt(\"id\")); }else { throw new SQLException(\"No se encuentra el registro en la base de datos\"); } }catch (SQLException e) { milog.severe(e.getMessage()); } return persona; } public void actualizar(int id, Persona persona) { try( Connection conexion = manejaConexion.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(\"UPDATE persona SET nombre = ? WHERE id = ?\"); ){ ps.setString(1, persona.getNombre()); ps.setInt(2, id); int filasAfectadas = ps.executeUpdate(); if(filasAfectadas <= 0) throw new SQLException(\"No se actualiz\u00f3 ning\u00fan registro\"); }catch(SQLException e) { milog.severe(\"Error al actualizar\"); milog.severe(e.getMessage()); } } public void eliminar(int id) { try( Connection conexion = manejaConexion.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(\"DELETE FROM persona WHERE id = ?\"); ){ ps.setInt(1, id); int filasAfectadas = ps.executeUpdate(); if(filasAfectadas <= 0) throw new SQLException(\"No se elimin\u00f3 ning\u00fan registro\"); }catch(SQLException e) { milog.severe(\"Error al eliminar\"); milog.severe(e.getMessage()); } } } Las vistas necesarias: /webpersonas/WebContent/index.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Inicio</title> </head> <body> <h1>Inicio del sistema</h1> <a href=\"mantenedor\">Inicia el mantenedor</a> </body> </html> /webpersonas/WebContent/mantenedor.jsp Basado en scriptles, esta vista contiene todas las funcionalidades necesarias para realizar todas las tareas para mantener la informaci\u00f3n de la tabla personas. <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@ page import=\"java.util.List\"%> <%@ page import=\"cl.lherrera.webpersonas.modelo.Persona\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Ingreso de personas</title> <style> .formularios { float: left; width: 345px; border-right: 1px solid black; } .listaPersonas { float: right; width: 349px; } .contenedor { width: 700px; } </style> </head> <body> <% // variables del request String disabledInsert = (String) request.getAttribute(\"insertForm\"); String disabledUpdate = (String) request.getAttribute(\"updateForm\"); String disabledDelete = (String) request.getAttribute(\"deleteForm\"); List<Persona> personas = (List<Persona>) request.getAttribute(\"personas\"); Object nombreO = request.getAttribute(\"nombre\"); String nombre = (nombreO != null)? (String) nombreO : \"\" ; Object elNombreO = request.getAttribute(\"elNombre\");String elNombre = (elNombreO != null)? (String) elNombreO : \"\" ; String personaId = (String) request.getAttribute(\"id\"); %> <div class=\"contenedor\"> <hr /> <div class=\"formularios\"> <!-- ingresar --> <form action=\"ingresar\" method=\"post\"> <fieldset> <legend>Ingrese una nueva persona</legend> <label for=\"nombre\">Nombre</label> <input type=\"text\" name=\"nombre\" <%=disabledInsert%> /> <button type=\"submit\" <%=disabledInsert %>>Ingresar</button> </fieldset> </form> <hr /> <hr /> <!-- ingresar #--> <!-- actualizar --> <form action=\"actualizar\" method=\"post\"> <fieldset> <input type=\"hidden\" name=\"id\" value=\"<%=personaId %>\" /> <legend>Actualizar persona</legend> <label for=\"nombre\">Nombre</label> <input type=\"text\" name=\"nombre\" id=\"nombre\" value=\"<%=nombre %>\" <%=disabledUpdate %> /> <button type=\"submit\" <%=disabledUpdate %> >Actualizar</button> </fieldset> </form> <hr /> <hr /> <!-- actualizar #--> <!-- eliminar --> <form action=\"eliminar\" method=\"post\"> <fieldset> <input type=\"hidden\" name=\"id\" value=\"<%=personaId %>\" /> <legend>Eliminar a la persona</legend> <label for=\"nombre\">Nombre</label> <input type=\"text\" name=\"elNombre\" id=\"elNombre\" value=\"<%=elNombre %>\" disabled /> <button type=\"submit\" <%=disabledDelete %>>Eliminar</button> </fieldset> </form> <hr /> <hr /> <!-- eliminar #--> </div> <!-- Listar personas --> <div class=\"listaPersonas\"> <h3>Lista de personas</h3> <table style=\"width: 350px; border: 1px solid;\"> <caption>Tabla de informaci\u00f3n</caption> <thead> <tr> <th>ID</th> <th>NOMBRE</th> <th>ACCION</th> </tr> </thead> <tbody> <%if(personas.size() <= 0) {%> <tr> <td>Sin datos...</td> </tr> <%}else { %> <%for(Persona persona: personas) {%> <tr> <td><%=persona.getId() %></td> <td><%=persona.getNombre() %></td> <td> <a href=\"actualizar?id=<%=persona.getId()%>&nombre=<%=persona.getNombre()%>\" >actualizar</a> | <a href=\"eliminar?id=<%=persona.getId()%>&elNombre=<%=persona.getNombre()%>\" >Eliminar</a> </td> </tr> <%}%> <%} %> </tbody> </table> </div> <!-- Listar personas #--> </div> </body> </html> Finalmente el paquete que contendr\u00e1 la l\u00f3gica que maneja el servidor, donde cada petici\u00f3n URL ser\u00e1 trabajada, es la capa que ejecuta el rol de controlador, ya que realiza la interacci\u00f3n entre la vista (web) y los datos. (Por ahora todo ser\u00e1 get y post) /webpersonas/src/main/java/cl/lherrera/webpersonas/servlets/IniciaMantenedor.java package cl.lherrera.webpersonas.servlets; import java.io.IOException; import java.util.List; import java.util.logging.Logger; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import cl.lherrera.webpersonas.dao.PersonaDAO; import cl.lherrera.webpersonas.modelo.Persona; import cl.lherrera.webpersonas.utils.MiLog; @WebServlet(name = \"Mantenedor de Personas\", urlPatterns = \"/mantenedor\") public class IniciaMantenedor extends HttpServlet{ private static final Logger logger = MiLog.obtenerLog(); private static PersonaDAO daoPersona = new PersonaDAO(); private static final long serialVersionUID = -4282664097471786333L; /** * Procesa el request por referencia, modifica el mismo objeto req * este objeto, ir\u00e1 al jsp para all\u00ed finalizar la entrega del * response. */ private void procesaGetRequest(HttpServletRequest req) { // se llena la lista para la tabla List<Persona> personas = daoPersona.obtenerTodos(); req.setAttribute(\"personas\", personas); // usado para bloquear elementos del formulario req.setAttribute(\"insertForm\", \"\"); req.setAttribute(\"updateForm\", \"disabled\"); req.setAttribute(\"deleteForm\", \"disabled\"); } @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { procesaGetRequest(req); try { req.getRequestDispatcher(\"mantenedor.jsp\").forward(req, resp); } catch (ServletException | IOException e) { logger.severe(e.getMessage()); } } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp){ // cuando un doPost solicita la carga mediante un forward... doGet(req, resp); } } /webpersonas/src/main/java/cl/lherrera/webpersonas/servlets/IngresarPersona.java package cl.lherrera.webpersonas.servlets; import java.io.IOException; import java.util.logging.Logger; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import cl.lherrera.webpersonas.dao.PersonaDAO; import cl.lherrera.webpersonas.modelo.Persona; import cl.lherrera.webpersonas.utils.MiLog; @WebServlet(name = \"IIngresar Persona\", urlPatterns = \"/ingresar\") public class IngresarPersona extends HttpServlet{ private static final Logger logger = MiLog.obtenerLog(); private static final long serialVersionUID = 6755151974107090793L; private static PersonaDAO daoPersona = new PersonaDAO(); private void procesaGetRequest(HttpServletRequest req) { if(req.getParameter(\"nombre\") != null) { String nombre = req.getParameter(\"nombre\"); daoPersona.ingresar(new Persona(nombre) ); }else { logger.warning(\"El request no posee los datos necesarios\"); } } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) { procesaGetRequest(req); try { // el servlet que escucha esta url, se encarga de dejar el jsp // en un estado consistente inicial. req.getRequestDispatcher(\"mantenedor\").forward(req, resp); } catch (ServletException | IOException e) { logger.severe(e.getMessage()); } } } /webpersonas/src/main/java/cl/lherrera/webpersonas/servlets/ActualizarPersona.java package cl.lherrera.webpersonas.servlets; import java.io.IOException; import java.util.List; import java.util.logging.Logger; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import cl.lherrera.webpersonas.dao.PersonaDAO; import cl.lherrera.webpersonas.modelo.Persona; import cl.lherrera.webpersonas.utils.MiLog; @WebServlet(name = \"Actualizar Persona\", urlPatterns = \"/actualizar\") public class ActualizarPersona extends HttpServlet{ private static final Logger logger = MiLog.obtenerLog(); private static final long serialVersionUID = 6755151974107090793L; private static PersonaDAO daoPersona = new PersonaDAO(); private void procesaGetRequest(HttpServletRequest req) { List<Persona> personas = daoPersona.obtenerTodos(); req.setAttribute(\"personas\", personas); // bloqueo de formularios req.setAttribute(\"insertForm\", \"disabled\"); req.setAttribute(\"updateForm\", \"\"); req.setAttribute(\"deleteForm\", \"disabled\"); // par\u00e1metros para el formulario req.setAttribute(\"id\", req.getParameter(\"id\") ); req.setAttribute(\"nombre\", req.getParameter(\"nombre\") ); } private void procesaPostRequest(HttpServletRequest req) { if(req.getParameter(\"id\") != null) { int idPersona = Integer.parseInt(req.getParameter(\"id\")); String nombrePersona = req.getParameter(\"nombre\"); Persona persona = new Persona(nombrePersona); daoPersona.actualizar(idPersona, persona); }else { logger.warning(\"El request no posee los datos necesarios\"); } } @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { procesaGetRequest(req); try { req.getRequestDispatcher(\"mantenedor.jsp\").forward(req, resp); } catch (ServletException | IOException e) { logger.severe(e.getMessage()); } } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) { procesaPostRequest(req); try { // no llamamos directo al jsp. si no que al servlet que carga // la ventana inicial req.getRequestDispatcher(\"mantenedor\").forward(req, resp); } catch (ServletException | IOException e) { logger.severe(e.getMessage()); } } } /webpersonas/src/main/java/cl/lherrera/webpersonas/servlets/EliminaPersona.java package cl.lherrera.webpersonas.servlets; import java.io.IOException; import java.util.List; import java.util.logging.Logger; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import cl.lherrera.webpersonas.dao.PersonaDAO; import cl.lherrera.webpersonas.modelo.Persona; import cl.lherrera.webpersonas.utils.MiLog; @WebServlet(name = \"Eliminar Persona\", urlPatterns = \"/eliminar\") public class EliminaPersona extends HttpServlet{ private static final Logger logger = MiLog.obtenerLog(); private static final long serialVersionUID = 6755151974107090793L; private static PersonaDAO daoPersona = new PersonaDAO(); private void procesaGetRequest(HttpServletRequest req) { List<Persona> personas = daoPersona.obtenerTodos(); req.setAttribute(\"personas\", personas); // bloqueo de formularios req.setAttribute(\"insertForm\", \"disabled\"); req.setAttribute(\"updateForm\", \"disabled\"); req.setAttribute(\"deleteForm\", \"\"); // datos de los valores del formulario if(req.getParameter(\"id\") != null && req.getParameter(\"elNombre\") != null) { req.setAttribute(\"id\", req.getParameter(\"id\") ); req.setAttribute(\"elNombre\", req.getParameter(\"elNombre\") ); }else { logger.warning(\"El request no posee los datos necesarios\"); } } private void procesaPostRequest(HttpServletRequest req) { if(req.getParameter(\"id\") != null) { int personaId = Integer.parseInt(req.getParameter(\"id\") ); daoPersona.eliminar(personaId ); }else { logger.warning(\"El request no posee los datos necesarios\"); } } @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { procesaGetRequest(req); try { req.getRequestDispatcher(\"mantenedor.jsp\").forward(req, resp); } catch (ServletException | IOException e) { logger.severe(e.getMessage()); } } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) { procesaPostRequest(req); try { req.getRequestDispatcher(\"mantenedor\").forward(req, resp); } catch (ServletException | IOException e) { logger.severe(e.getMessage()); } } } De esta manera tendremos nuestro proyecto terminado, solamente falta implementarlo y observar los resultados. \ud83d\udc68\ud83c\udffb\u200d\ud83c\udfeb\ud83d\udc4d\ud83c\udffc.","title":"Connexi\u00f3n JDBC - SQLITE"},{"location":"ejercicios/servlets/jdbc/sqlite/#connexion-jdbc-sqlite","text":"Se asume que se tiene un cliente SQLITE como DBEaber, adem\u00e1s de un archivo .bd o .sqlite.","title":"Connexi\u00f3n JDBC - SQLITE"},{"location":"ejercicios/servlets/jdbc/sqlite/#ejemplo-1-consulta","text":"Usemos SQLITE, para conectar una app de java. Lo primero es disponer de una base de datos con una tabla personas hecha y un dato ingresado.","title":"Ejemplo 1: Consulta."},{"location":"ejercicios/servlets/jdbc/sqlite/#ddl","text":"-- creamos la tabla persona. CREATE TABLE persona ( id INTEGER PRIMARY KEY AUTOINCREMENT, nombre TEXT ); -- agregamos un registro en la tabla. INSERT INTO persona (nombre) values ('luis'); -- Comprobamos que exista un registro SELECT id, nombre FROM persona; El objetivo es poder consultar este dato desde un programa en Java. Para resolver lo del Driver, creamos este proyecto como un proyecto Maven. Estructura: \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u251c\u2500\u2500 main \u251c\u2500\u2500 java \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 jdbc \u2514\u2500\u2500 sqlite \u2514\u2500\u2500 Principal.java /sqlite/pom.xml <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>cl.lherrera.jdbc</groupId> <artifactId>sqlite</artifactId> <version>0.0.1-SNAPSHOT</version> <dependencies> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> <version>3.30.1</version> </dependency> </dependencies> </project> cl.lherrera.jdbc.sqlite.Principal package cl.lherrera.jdbc.sqlite; import java.sql.Connection; import java.sql.DriverManager; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.util.logging.Logger; public class Principal { // direcci\u00f3n en la que se encuentra el archivo de la base de datos. private static final String DATABASE_FILE_PATH = \"/Users/luisherrera/Desktop/TALENTO-PROS/bases/base001.db\"; // url de la base de datos, necesaria para la conexi\u00f3n. private static final String DB_URL = \"jdbc:sqlite:\" + DATABASE_FILE_PATH; // logger private static Logger milog = Logger.getLogger(Principal.class.getName()); public static void main(String[] args) { milog.info(\"Inicio de la aplicaci\u00f3n\"); try { // cargamos el driver. (deja disponible la clase org.sqlite.JDBC en esta instancia) Class.forName(\"org.sqlite.JDBC\"); // se crea la conexi\u00f3n a la base de datos. try ( Connection conexion = DriverManager.getConnection(DB_URL, \"admin\", \"1234\"); PreparedStatement ps = conexion.prepareStatement(\"SELECT id, nombre FROM persona\"); ResultSet rs = ps.executeQuery(); ){ while(rs.next()) { milog.info(\"ID: \" + rs.getString(\"id\")); milog.info(\"NOMBRE: \" + rs.getString(\"nombre\")); } } catch (SQLException e) { milog.severe(\"no se pudo establecer conexi\u00f3n con la base de datos\"); milog.severe(e.getMessage()); } } catch (ClassNotFoundException e) { milog.severe(\"la clase no ha podido ser encontrada\"); milog.severe(e.getMessage()); } } }","title":"DDL"},{"location":"ejercicios/servlets/jdbc/sqlite/#ejemplo-2-agregar-un-registro-y-consulta","text":"Al c\u00f3digo anterior, agregamos la funcionalidad para poder ingresar un nuevo registro. Estructura: \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u251c\u2500\u2500 main \u251c\u2500\u2500 java \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 jdbc \u2514\u2500\u2500 sqlite \u2514\u2500\u2500 Principal.java /sqlite/pom.xml <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>cl.lherrera.jdbc</groupId> <artifactId>sqlite</artifactId> <version>0.0.1-SNAPSHOT</version> <dependencies> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> <version>3.30.1</version> </dependency> </dependencies> </project> cl.lherrera.jdbc.sqlite.Principal package cl.lherrera.jdbc.sqlite; import java.sql.Connection; import java.sql.DriverManager; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.util.logging.Logger; public class Principal { // direcci\u00f3n en la que se encuentra el archivo de la base de datos. private static final String DATABASE_FILE_PATH = \"/Users/luisherrera/Desktop/TALENTO-PROS/bases/base001.db\"; // url de la base de datos, necesaria para la conexi\u00f3n. private static final String DB_URL = \"jdbc:sqlite:\" + DATABASE_FILE_PATH; // logger private static Logger milog = Logger.getLogger(Principal.class.getName()); public static void main(String[] args) { milog.info(\"Inicio de la aplicaci\u00f3n\"); try { // cargamos el driver. (deja disponible la clase org.sqlite.JDBC en esta instancia) Class.forName(\"org.sqlite.JDBC\"); // insertamos el valor try ( Connection conexion = DriverManager.getConnection(DB_URL, \"admin\", \"1234\"); // consulta a la tabla PreparedStatement ps = conexion.prepareStatement(\"INSERT INTO persona (nombre) values ('pedro')\"); ){ int columnasAfectadas = ps.executeUpdate(); if(columnasAfectadas != 1) milog.severe(\"no se pudo ingresar ning\u00fan registro\"); } catch (SQLException e) { milog.severe(\"no se pudo establecer conexi\u00f3n con la base de datos\"); milog.severe(e.getMessage()); } // Lo consultamos try ( Connection conexion = DriverManager.getConnection(DB_URL, \"admin\", \"1234\"); // consulta a la tabla PreparedStatement ps = conexion.prepareStatement(\"SELECT id, nombre FROM persona\"); ResultSet rs = ps.executeQuery(); ){ while(rs.next()) { milog.info(\"ID: \" + rs.getString(\"id\")); milog.info(\"NOMBRE: \" + rs.getString(\"nombre\")); } } catch (SQLException e) { milog.severe(\"no se pudo establecer conexi\u00f3n con la base de datos\"); milog.severe(e.getMessage()); } } catch (ClassNotFoundException e) { milog.severe(\"la clase no ha podido ser encontrada\"); milog.severe(e.getMessage()); } } } Se puede ver que por cada consulta agregamos un try , esto se debe a que por cada consulta, la conexi\u00f3n debe volver a cerrar, es por eso que debe ir en try(/*ac\u00e1*/) . No se debe mezclar con la consulta ya que la conexi\u00f3n ejecutar\u00e1 ambas tareas por separado.","title":"Ejemplo 2: agregar un registro y consulta."},{"location":"ejercicios/servlets/jdbc/sqlite/#ejercicio-3-otra-forma-de-formato-sql-text","text":"Al momento de crear una consulta, posiblemente se deba ingresar alg\u00fan valor variable, esto es com\u00fan al momento de ingresar informaci\u00f3n. PreparedStatement posee la capacidad de asignar valores despu\u00e9s indicar el texto de una consulta, es similar a S\u001dtring.format . Estructura: \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u251c\u2500\u2500 main \u251c\u2500\u2500 java \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 jdbc \u2514\u2500\u2500 sqlite \u2514\u2500\u2500 Principal.java /sqlite/pom.xml <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>cl.lherrera.jdbc</groupId> <artifactId>sqlite</artifactId> <version>0.0.1-SNAPSHOT</version> <dependencies> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> <version>3.30.1</version> </dependency> </dependencies> </project> cl.lherrera.jdbc.sqlite.Principal package cl.lherrera.jdbc.sqlite; import java.sql.Connection; import java.sql.DriverManager; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.util.logging.Logger; public class Principal { // direcci\u00f3n en la que se encuentra el archivo de la base de datos. private static final String DATABASE_FILE_PATH = \"/Users/luisherrera/Desktop/TALENTO-PROS/bases/base001.db\"; // url de la base de datos, necesaria para la conexi\u00f3n. private static final String DB_URL = \"jdbc:sqlite:\" + DATABASE_FILE_PATH; // logger private static Logger milog = Logger.getLogger(Principal.class.getName()); public static void main(String[] args) { milog.info(\"Inicio de la aplicaci\u00f3n\"); try { // cargamos el driver. (deja disponible la clase org.sqlite.JDBC en esta instancia) Class.forName(\"org.sqlite.JDBC\"); // insertamos el valor try ( Connection conexion = DriverManager.getConnection(DB_URL, \"admin\", \"1234\"); // \ud83d\udc40 \ud83d\udc40 \ud83d\udc40 \ud83d\udc40 \ud83d\udc40 \ud83d\udc40 // los signos de interrogaci\u00f3n, ser\u00e1n reemplazados con // ps.setString(1, \"ju\u00e1n\");, se puede ver que // el index comienza en 1. PreparedStatement ps = conexion.prepareStatement(\"INSERT INTO persona (nombre) values (?)\"); ){ // completamos la consulta, 1 es el primer signo ?. En este caso hay s\u00f3lo uno. ps.setString(1, \"ju\u00e1n\"); // contin\u00faa la ejecuci\u00f3n int columnasAfectadas = ps.executeUpdate(); if(columnasAfectadas != 1) milog.severe(\"no se pudo ingresar ning\u00fan registro\"); } catch (SQLException e) { milog.severe(\"no se pudo establecer conexi\u00f3n con la base de datos\"); milog.severe(e.getMessage()); } try ( // necesitan cerrar luego de ejecutar. Connection conexion = DriverManager.getConnection(DB_URL, \"admin\", \"1234\"); // \ud83d\udc40 \ud83d\udc40 \ud83d\udc40 \ud83d\udc40 \ud83d\udc40 \ud83d\udc40 \ud83d\udc40 PreparedStatement ps = conexion.prepareStatement(\"SELECT id, nombre FROM persona WHERE id = ?\"); ){ // pero esto no ps.setInt(1, 1); try( // rs, s\u00ed necesita cerrar, es por esto que necesita otro try(). ResultSet rs = ps.executeQuery(); ){ while(rs.next()) { milog.info(\"ID: \" + rs.getString(\"id\")); milog.info(\"NOMBRE: \" + rs.getString(\"nombre\")); } }catch (SQLException e) { milog.severe(e.getMessage()); } } catch (SQLException e) { milog.severe(\"no se pudo establecer conexi\u00f3n con la base de datos\"); milog.severe(e.getMessage()); } } catch (ClassNotFoundException e) { milog.severe(\"la clase no ha podido ser encontrada\"); milog.severe(e.getMessage()); } } }","title":"Ejercicio 3: Otra forma de form\u00e1to sql-text."},{"location":"ejercicios/servlets/jdbc/sqlite/#ejercicio-4-clase-conexion-singleton","text":"Cuando ejecutamos consultas a una base de datos desde Java, abrimos una conexi\u00f3n para ejecutar la consulta y luego debemos cerrarla, para que otra instancia (ptra forma de llamar a un usuario en alg\u00fan lugar usando la app \ud83d\udc7e), pueda utilizar la base de datos, ya que el n\u00famero de conexiones que ofrece el servidor de base de datos es limitado, aproximadamente (200) simultaneas (Ahora se entiende el por qu\u00e9 de las colas para comprar entradas online). Es por este motivo que optimizar el cierre de las conexiones cuando no la estemos utilizando es primordial. Si creamos una clase conexi\u00f3n y por error, se crea m\u00e1s de una instancia, porducimos una conexi\u00f3n por instancia y esto no es bueno cuando hablamos de aplicaciones con muchos usuarios. Esta producci\u00f3n de instancias debe ser controlada, as\u00edgnando un m\u00e1ximo de 1 instancia por usuario conectado. De esto se encarga el patr\u00f3n Singlet\u00f3n. Estructura (maven) \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u251c\u2500\u2500 main \u251c\u2500\u2500 java \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 jdbc \u2514\u2500\u2500 sqlite \u251c\u2500\u2500 ManejaConexion.java \u2514\u2500\u2500 Principal.java /sqlite/pom.xml <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>cl.lherrera.jdbc</groupId> <artifactId>sqlite</artifactId> <version>0.0.1-SNAPSHOT</version> <dependencies> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> <version>3.30.1</version> </dependency> </dependencies> </project> /sqlite/src/main/java/cl/lherrera/jdbc/sqlite/ManejaConexion.java (Singleton pattern \ud83e\udd4b) package cl.lherrera.jdbc.sqlite; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; import java.util.logging.Logger; public class ManejaConexion { private static final String DATABASE_FILE_PATH = \"/Users/luisherrera/Desktop/TALENTO-PROS/bases/base001.db\"; private static final String DB_URL = \"jdbc:sqlite:\" + DATABASE_FILE_PATH; private static final Logger milog = Logger.getLogger(ManejaConexion.class.getName()); // variable de instancia para controlar s\u00f3lo una. private static ManejaConexion manejaConexion; // \u00fanica forma de instanciar esta clase es desde el interior. private ManejaConexion() {} /** * M\u00e9todo est\u00e1tico, para poder acceder sin una instancia, as\u00ed controlamos * internamente que no se cree una nueva instancia si esta existe. * @return */ public static ManejaConexion obtenerManejo() { if(manejaConexion != null) { return manejaConexion; }else { return new ManejaConexion(); } } /** * Obtiene una conexi\u00f3n, esta arroja la excepci\u00f3n, para poder desde donde sea llamada * usar el try(), con ello poder crear una conexi\u00f3n por consulta y luego * la cerrar\u00e1. * * @return * @throws SQLException */ public Connection obtenerConexion() throws SQLException { Connection conexion = null; try { Class.forName(\"org.sqlite.JDBC\"); conexion = DriverManager.getConnection(DB_URL, \"admin\", \"1234\"); } catch (ClassNotFoundException e) { milog.severe(\"No se pudo cargar el driver.\"); milog.severe(e.getMessage()); } return conexion; } } /sqlite/src/main/java/cl/lherrera/jdbc/sqlite/Principal.java package cl.lherrera.jdbc.sqlite; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.util.logging.Logger; public class Principal { private static final ManejaConexion manejaConexion = ManejaConexion.obtenerManejo(); private static Logger milog = Logger.getLogger(Principal.class.getName()); public static void main(String[] args) { milog.info(\"Inicio de la aplicaci\u00f3n\"); // ingreso de dato try( Connection conexion = manejaConexion.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(\"INSERT INTO persona (nombre) values (?)\"); ){ ps.setString(1, \"ana\"); int columnasAfectadas = ps.executeUpdate(); if(columnasAfectadas != 1) throw new SQLException(\"Error al insertar registro\"); }catch (SQLException e) { milog.severe(e.getMessage()); } // ejecuta el select try( Connection conexion = manejaConexion.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(\"SELECT id, nombre FROM persona WHERE id = 1\"); ResultSet rs = ps.executeQuery(); ){ while(rs.next()) { milog.info(\"ID: \" + rs.getString(\"id\")); milog.info(\"NOMBRE: \" + rs.getString(\"nombre\")); } }catch (SQLException e) { milog.severe(e.getMessage()); } } }","title":"Ejercicio 4: Clase conexi\u00f3n (Singlet\u00f3n)."},{"location":"ejercicios/servlets/jdbc/sqlite/#ejercicio-5-uso-de-un-dto","text":"Java es un lenguaje que cumple muy bien con lo que determina el paradigma de orientaci\u00f3n a objetos, entonces hay que sacar provecho de esto. Estructura: ./ \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u251c\u2500\u2500 java | \u2514\u2500\u2500 cl | \u2514\u2500\u2500 lherrera | \u2514\u2500\u2500 jdbc | \u2514\u2500\u2500 sqlite | \u251c\u2500\u2500 ManejaConexion.java | \u251c\u2500\u2500 Persona.java | \u2514\u2500\u2500 Principal.java /sqlite/pom.xml <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>cl.lherrera.jdbc</groupId> <artifactId>sqlite</artifactId> <version>0.0.1-SNAPSHOT</version> <dependencies> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> <version>3.30.1</version> </dependency> </dependencies> </project> /sqlite/src/main/java/cl/lherrera/jdbc/sqlite/ManejaConexion.java (Singleton pattern \ud83e\udd4b) package cl.lherrera.jdbc.sqlite; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; import java.util.logging.Logger; public class ManejaConexion { private static final String DATABASE_FILE_PATH = \"/Users/luisherrera/Desktop/TALENTO-PROS/bases/base001.db\"; private static final String DB_URL = \"jdbc:sqlite:\" + DATABASE_FILE_PATH; private static final Logger milog = Logger.getLogger(ManejaConexion.class.getName()); // variable de instancia para controlar s\u00f3lo una. private static ManejaConexion manejaConexion; // \u00fanica forma de instanciar esta clase es desde el interior. private ManejaConexion() {} /** * M\u00e9todo est\u00e1tico, para poder acceder sin una instancia, as\u00ed controlamos * internamente que no se cree una nueva instancia si esta existe. * @return */ public static ManejaConexion obtenerManejo() { if(manejaConexion != null) { return manejaConexion; }else { return new ManejaConexion(); } } /** * Obtiene una conexi\u00f3n, esta arroja la excepci\u00f3n, para poder desde donde sea llamada * usar el try(), con ello poder crear una conexi\u00f3n por consulta y luego * la cerrar\u00e1. * * @return * @throws SQLException */ public Connection obtenerConexion() throws SQLException { Connection conexion = null; try { Class.forName(\"org.sqlite.JDBC\"); conexion = DriverManager.getConnection(DB_URL, \"admin\", \"1234\"); } catch (ClassNotFoundException e) { milog.severe(\"No se pudo cargar el driver.\"); milog.severe(e.getMessage()); } return conexion; } } /sqlite/src/main/java/cl/lherrera/jdbc/sqlite/Persona.java package cl.lherrera.jdbc.sqlite; public class Persona { private Integer id; private String nombre; public Persona() {} public Persona(Integer id, String nombre) { this.id = id; this.nombre = nombre; } public Persona(String nombre) { this.nombre = nombre; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } @Override public String toString() { return \"Persona [id=\" + id + \", nombre=\" + nombre + \"]\"; } } /sqlite/src/main/java/cl/lherrera/jdbc/sqlite/Principal.java package cl.lherrera.jdbc.sqlite; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.util.ArrayList; import java.util.List; import java.util.logging.Logger; public class Principal { private static final ManejaConexion manejaConexion = ManejaConexion.obtenerManejo(); private static Logger milog = Logger.getLogger(Principal.class.getName()); public static void main(String[] args) { milog.info(\"Inicio de la aplicaci\u00f3n\"); // ingreso de dato try( Connection conexion = manejaConexion.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(\"INSERT INTO persona (nombre) values (?)\"); ){ Persona persona = new Persona(\"Carla\"); ps.setString(1, persona.getNombre()); int columnasAfectadas = ps.executeUpdate(); if(columnasAfectadas != 1) throw new SQLException(\"Error al insertar registro\"); }catch (SQLException e) { milog.severe(e.getMessage()); } // ejecuta el select try( Connection conexion = manejaConexion.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(\"SELECT id, nombre FROM persona\"); ResultSet rs = ps.executeQuery(); ){ List<Persona> personas = new ArrayList<>(); while(rs.next()) { personas.add(new Persona(rs.getInt(\"id\"), rs.getString(\"nombre\"))); } // imprimimos los resultados for(Persona per: personas) milog.info(per.toString()); }catch (SQLException e) { milog.severe(e.getMessage()); } } }","title":"Ejercicio 5: Uso de un DTO."},{"location":"ejercicios/servlets/jdbc/sqlite/#ejercicio-6-separando-en-capas-modelos-daos-utils","text":"Separamos en capas, cada una con alguna responsabilidad en particular. La idea es implementar un funcionamiento separado en tres capas, en una el modelo, la vista y el controlador; aunque MVC es enfocado a aplicaci\u00f3nes de escritorio, se supone que MVC es casi una jerga e indica que tenemos tres capas; lo que podemos ver en el ejemplo es que las capas encargadas de los datos no podemos asignarlo solamente al modelo, ya que este necesita conectar y realizar tareas, por tanto el modelo para el caso de los proyectos en java, se divide en nuevas capas, en este caso los Daos (proporcionan el acceso m\u00e1s com\u00fan, como obtener todos) y el mismo modelo, sin contar el Singlet\u00f3n conector. Estructura: \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u251c\u2500\u2500 java \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 jdbc \u2502 \u2514\u2500\u2500 sqlite \u2502 \u251c\u2500\u2500 ManejaConexion.java \u2502 \u251c\u2500\u2500 Principal.java \u2502 \u251c\u2500\u2500 daos \u2502 \u2502 \u2514\u2500\u2500 PersonaDAO.java \u2502 \u2514\u2500\u2500 modelos \u2502 \u2514\u2500\u2500 Persona.java /sqlite/pom.xml <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>cl.lherrera.jdbc</groupId> <artifactId>sqlite</artifactId> <version>0.0.1-SNAPSHOT</version> <dependencies> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> <version>3.30.1</version> </dependency> </dependencies> </project> /sqlite/src/main/java/cl/lherrera/jdbc/sqlite/ManejaConexion.java package cl.lherrera.jdbc.sqlite.utils; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; import java.util.Properties; import java.util.logging.Logger; public class ManejaConexion { // cargamos las propiedades del proyecto private static Propiedades propiedades = Propiedades.obtenerPropiedades(); private static Properties props = propiedades.getProps(); private static final String DB_URL = \"jdbc:sqlite:\" + props.getProperty(\"file_path\"); private static final Logger milog = MiLog.obtenerLog(); private static ManejaConexion manejaConexion = new ManejaConexion(); private ManejaConexion() { if (manejaConexion != null){ //Prevent Reflection throw new IllegalStateException(\"No se puede crear una nueva instancia de ManejaConexion\"); } } /** * M\u00e9todo est\u00e1tico, para poder acceder sin una instancia, as\u00ed controlamos * internamente que no se cree una nueva instancia si esta existe. * */ public static ManejaConexion obtenerManejo() { return manejaConexion; } /** * Obtiene una conexi\u00f3n. * * @return Una conexi\u00f3n abierta, esto es importante ya que esta conexi\u00f3n debe ser cerrada. * @throws <i>SQLException</i>, al no controlar la exception ac\u00e1, obligamos * a tener que utilizar un {@code try()}, as\u00ed cada vez que lo ocupemos * estar\u00e1 dentro del try especial y nos aseguramos que la conexi\u00f3n * cierre. Pero esta caracter\u00edstica, se encuentra vulnerable al * desarrollador si ocupa o no {@code try(){}catch(){}}. */ public Connection obtenerConexion() throws SQLException { Connection conexion = null; try { Class.forName(\"org.sqlite.JDBC\"); conexion = DriverManager.getConnection( DB_URL, props.getProperty(\"usuario\"), props.getProperty(\"contrasenia\") ); } catch (ClassNotFoundException e) { milog.severe(\"No se pudo cargar el driver.\"); milog.severe(e.getMessage()); } return conexion; } } /sqlite/src/main/java/cl/lherrera/jdbc/sqlite/modelos/Persona.java package cl.lherrera.jdbc.sqlite.modelos; public class Persona { private Integer id; private String nombre; public Persona() {} public Persona(Integer id, String nombre) { this.id = id; this.nombre = nombre; } public Persona(String nombre) { this.nombre = nombre; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } @Override public String toString() { return \"Persona [id=\" + id + \", nombre=\" + nombre + \"]\"; } } /sqlite/src/main/java/cl/lherrera/jdbc/sqlite/daos/PersonaDAO.java package cl.lherrera.jdbc.sqlite.daos; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.util.ArrayList; import java.util.List; import java.util.logging.Logger; import cl.lherrera.jdbc.sqlite.ManejaConexion; import cl.lherrera.jdbc.sqlite.modelos.Persona; public class PersonaDAO { private static final ManejaConexion manejaConexion = ManejaConexion.obtenerManejo(); private static Logger milog = Logger.getLogger(PersonaDAO.class.getName()); /** * M\u00e9todo encargado de agregar una persona a la * base de datos. */ public int ingresar(Persona persona) { String letra; int filasAfectadas = 0; try( Connection conexion = manejaConexion.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(\"INSERT INTO persona (nombre) values (?)\"); ){ ps.setString(1, persona.getNombre()); filasAfectadas = ps.executeUpdate(); if(filasAfectadas != 1) throw new SQLException(\"Error al insertar registro\"); }catch (SQLException e) { milog.severe(e.getMessage()); } return filasAfectadas; } /** * M\u00e9todo encargado de retornar una lista de todas las personas * que est\u00e9n en la base de datos. * * @return {@code List} lista poblada con las personas encontradas * en la base de datos. */ public List<Persona> obtenerTodos(){ List<Persona> personas = new ArrayList<>(); try( Connection conexion = manejaConexion.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(\"SELECT id, nombre FROM persona\"); ResultSet rs = ps.executeQuery(); ){ while(rs.next()) { personas.add(new Persona(rs.getInt(\"id\"), rs.getString(\"nombre\"))); } }catch (SQLException e) { milog.severe(e.getMessage()); } return personas; } } /sqlite/src/main/java/cl/lherrera/jdbc/sqlite/Principal.java package cl.lherrera.jdbc.sqlite; import java.util.logging.Logger; import cl.lherrera.jdbc.sqlite.daos.PersonaDAO; import cl.lherrera.jdbc.sqlite.modelos.Persona; public class Principal { private static final ManejaConexion manejaConexion = ManejaConexion.obtenerManejo(); private static Logger milog = Logger.getLogger(Principal.class.getName()); public static void main(String[] args) { milog.info(\"Inicio de la aplicaci\u00f3n\"); PersonaDAO personaDao = new PersonaDAO(); // ingreso de dato Persona persona = new Persona(\"Camilo\"); personaDao.ingresar(persona); // ejecuta el select for(Persona per: personaDao.obtenerTodos()) milog.info(per.toString()); } }","title":"Ejercicio 6: separando en capas (modelos, daos, utils)"},{"location":"ejercicios/servlets/jdbc/sqlite/#ejercicio-7-aplicacion-mantenedora-de-informacion","text":"Con lo ejercitado, podemos entonces crear una aplicaci\u00f3n que mantenga los datos de la base de datos de la tabla persona. Se desacopla el funcionamiento creando un archivo de propiedades, que servir\u00e1 para direfenciar por ejemplo las propiedases del servidor y las del ambiente de desarrollo. Esto se debe a que en servidor, posee su propio archivo de propiedades, entonces posee sus propias credenciales de conexi\u00f3n o una url de los logs propias. Estructura ./ \u251c\u2500\u2500 logs \u2502 \u251c\u2500\u2500 2020_03_29.log \u2502 \u2514\u2500\u2500 2020_03_29.log.lck \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 propiedades \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u251c\u2500\u2500 java \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 jdbc \u2502 \u2514\u2500\u2500 sqlite \u2502 \u251c\u2500\u2500 app \u2502 \u2502 \u2514\u2500\u2500 Principal.java \u2502 \u251c\u2500\u2500 controlador \u2502 \u2502 \u2514\u2500\u2500 PersonaControlador.java \u2502 \u251c\u2500\u2500 dao \u2502 \u2502 \u2514\u2500\u2500 PersonaDAO.java \u2502 \u251c\u2500\u2500 modelo \u2502 \u2502 \u2514\u2500\u2500 Persona.java \u2502 \u251c\u2500\u2500 utils \u2502 \u2502 \u251c\u2500\u2500 ManejaConexion.java \u2502 \u2502 \u251c\u2500\u2500 MiLog.java \u2502 \u2502 \u251c\u2500\u2500 Propiedades.java \u2502 \u2502 \u2514\u2500\u2500 administradorDeAplicacion.java \u2502 \u2514\u2500\u2500 vista \u2502 \u251c\u2500\u2500 Accion.java \u2502 \u2514\u2500\u2500 Dibuja.java Para esta aplicaci\u00f3n se definen tres clases del tipo Singlet\u00f3n, esto con la finalidad de hacer que cada una de estas clases posea una \u00fanica instancia. Esto es necesario ya que estas clases no pueden tener m\u00e1s de una instancia, por que o cran un \u00fanico archivo o se necesita una sola informaci\u00f3n de ellos. Con esto nos aseguramos que sea la misma instancia de cada una de las siguientes clases para toda la aplicaci\u00f3n. /sqlite/src/main/java/cl/lherrera/jdbc/sqlite/utils/MiLog.java package cl.lherrera.jdbc.sqlite.utils; import java.io.File; import java.io.IOException; import java.text.SimpleDateFormat; import java.util.Date; import java.util.Properties; import java.util.logging.FileHandler; import java.util.logging.Logger; import java.util.logging.SimpleFormatter; public class MiLog { private Propiedades propiedades = Propiedades.obtenerPropiedades(); private Properties props = propiedades.getProps(); private static Logger logger = Logger.getLogger(MiLog.class.getName()); // cramos la instancia desde el inicio, ya que llamando a un m\u00e9todo // se corre el riesgo que m\u00e1s de un hilo crea que milog // es null hasta que se ejecute el m\u00e9todo que crea // la instancia. private static MiLog milog = new MiLog(); private MiLog() { if (milog != null){ //Prevent Reflection throw new IllegalStateException(\"No se puede crear una nueva instancia de Milog\"); } this.inicializaArchivo(); } private void inicializaArchivo() { SimpleDateFormat formatoSimple = new SimpleDateFormat(\"yyyy_MM_dd\"); String fecha = formatoSimple.format(new Date()); try { String directorioLogs = props.getProperty(\"directorioLogs\"); boolean existeElDirectorio = verificaExistenciaDirecctorio(directorioLogs); if(existeElDirectorio) { String direccionArchivo = directorioLogs + fecha + \".log\"; FileHandler fh = new FileHandler(direccionArchivo); logger.addHandler(fh); SimpleFormatter formatter = new SimpleFormatter(); fh.setFormatter(formatter); } else { throw new IOException(\"No se pudo crear el directorio: \" + directorioLogs); } } catch (SecurityException | IOException e) { logger.severe(e.getMessage()); } } /** * Toma la ruta y la intenta crear en caso que no exista */ private boolean verificaExistenciaDirecctorio(String directorioLogs) { boolean existe = false; File manejoDirectorio = new File(directorioLogs); if(manejoDirectorio.exists()) { existe = true; }else { existe = manejoDirectorio.mkdir(); } return existe; } public static Logger obtenerLog() { return logger; } } /sqlite/src/main/java/cl/lherrera/jdbc/sqlite/utils/administradorDeAplicacion.java package cl.lherrera.jdbc.sqlite.utils; import java.util.logging.Logger; import cl.lherrera.jdbc.sqlite.controlador.PersonaControlador; public class administradorDeAplicacion { private static Logger milog = MiLog.obtenerLog(); private PersonaControlador controladorPersona = new PersonaControlador(); private boolean seguirEjecutando = true; private static administradorDeAplicacion aplicacion = new administradorDeAplicacion(); private administradorDeAplicacion() { if (aplicacion != null){ //Prevent Reflection throw new IllegalStateException(\"No se puede crear una nueva instancia de AplicacionControlador\"); } } /** * Acceso a la instancia desde el exterior * */ public static administradorDeAplicacion obtenerEjecucion() { return aplicacion; } /** * se encarga de finalizar la aplicaci\u00f3n, para esto cambia * el valor de la variable est\u00e1tica que posee el while * principal. * */ public void terminarAplicacion() { seguirEjecutando = false; } /** * M\u00e9todo principal, es el que mantiene la aplicaci\u00f3n ejecutando el men\u00fa. */ public void iniciaApp() { milog.info(\"Aplicaci\u00f3n iniciada.\"); while(seguirEjecutando) { controladorPersona.iniciaMantenedor(); } milog.info(\"Aplicaci\u00f3n finalizada.\"); } } /sqlite/src/main/java/cl/lherrera/jdbc/sqlite/utils/Propiedades.java package cl.lherrera.jdbc.sqlite.utils; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.IOException; import java.util.Properties; import java.util.logging.Logger; public class Propiedades { private Properties props; private static Logger milog = MiLog.obtenerLog(); private static Propiedades propiedades = new Propiedades(); private Propiedades() { if (propiedades != null){ //Prevent Reflection throw new IllegalStateException(\"No se puede crear una nueva instancia de Propiedades\"); } this.iniciaProps(); } public static Propiedades obtenerPropiedades() { return propiedades; } private void iniciaProps() { try { props = new Properties(); props.load(new FileInputStream(\"propiedades\")); } catch (FileNotFoundException e) { milog.severe(\"El archivo no se ha encontrado\"); milog.severe(e.getMessage()); } catch (IOException e) { milog.severe(e.getMessage()); } } public Properties getProps() { return props; } } /sqlite/src/main/java/cl/lherrera/jdbc/sqlite/utils/ManejaConexion.java package cl.lherrera.jdbc.sqlite.utils; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; import java.util.Properties; import java.util.logging.Logger; public class ManejaConexion { // cargamos las propiedades del proyecto private static Propiedades propiedades = Propiedades.obtenerPropiedades(); private static Properties props = propiedades.getProps(); private static final String DB_URL = \"jdbc:sqlite:\" + props.getProperty(\"file_path\"); private static final Logger milog = MiLog.obtenerLog(); private static ManejaConexion manejaConexion = new ManejaConexion(); private ManejaConexion() { if (manejaConexion != null){ //Prevent Reflection throw new IllegalStateException(\"No se puede crear una nueva instancia de ManejaConexion\"); } } /** * M\u00e9todo est\u00e1tico, para poder acceder sin una instancia, as\u00ed controlamos * internamente que no se cree una nueva instancia si esta existe. * */ public static ManejaConexion obtenerManejo() { return new ManejaConexion(); } /** * Obtiene una conexi\u00f3n. * * @return Una conexi\u00f3n abierta, esto es importante ya que esta conexi\u00f3n debe ser cerrada. * @throws <i>SQLException</i>, al no controlar la exception ac\u00e1, obligamos * a tener que utilizar un {@code try()}, as\u00ed cada vez que lo ocupemos * estar\u00e1 dentro del try especial y nos aseguramos que la conexi\u00f3n * cierre. Pero esta caracter\u00edstica, se encuentra vulnerable al * desarrollador si ocupa o no {@code try(){}catch(){}}. */ public Connection obtenerConexion() throws SQLException { Connection conexion = null; try { Class.forName(\"org.sqlite.JDBC\"); conexion = DriverManager.getConnection( DB_URL, props.getProperty(\"usuario\"), props.getProperty(\"contrasenia\") ); } catch (ClassNotFoundException e) { milog.severe(\"No se pudo cargar el driver.\"); milog.severe(e.getMessage()); } return conexion; } } El modelo est\u00e1 compuesto, por una sola clase, que se encargar\u00e1 de servir para almacenar los datos de las personas. /sqlite/src/main/java/cl/lherrera/jdbc/sqlite/modelo/Persona.java package cl.lherrera.jdbc.sqlite.modelo; public class Persona { private Integer id; private String nombre; public Persona() {} public Persona(Integer id, String nombre) { this.id = id; this.nombre = nombre; } public Persona(String nombre) { this.nombre = nombre; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } @Override public String toString() { return \"Persona [id=\" + id + \", nombre=\" + nombre + \"]\"; } } Necesitamos una clase que realice las consultas m\u00e1s recurrentes sin poner propiedades de negocio en ella, como por ejemplo traer a todas las personas, pero si quisieramos agregar por ejemplo un nombre con especial form\u00e1to no le corresponde al DAO, el DAO solo realiza consultas, lo dem\u00e1s se tratar\u00eda en un paquete especial de servicios; pero para este ejemplo no es necesario. /sqlite/src/main/java/cl/lherrera/jdbc/sqlite/dao/PersonaDAO.java package cl.lherrera.jdbc.sqlite.dao; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.util.ArrayList; import java.util.List; import java.util.logging.Logger; import cl.lherrera.jdbc.sqlite.modelo.Persona; import cl.lherrera.jdbc.sqlite.utils.ManejaConexion; import cl.lherrera.jdbc.sqlite.utils.MiLog; public class PersonaDAO { private static final ManejaConexion manejaConexion = ManejaConexion.obtenerManejo(); private static Logger milog = MiLog.obtenerLog(); /** * M\u00e9todo encargado de agregar una persona a la * base de datos. */ public int ingresar(Persona persona) { int filasAfectadas = 0; try( Connection conexion = manejaConexion.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(\"INSERT INTO persona (nombre) values (?)\"); ){ ps.setString(1, persona.getNombre()); filasAfectadas = ps.executeUpdate(); if(filasAfectadas != 1) throw new SQLException(\"Error al insertar registro\"); }catch (SQLException e) { milog.severe(e.getMessage()); } return filasAfectadas; } /** * M\u00e9todo encargado de retornar una lista de todas las personas * que est\u00e9n en la base de datos. * * @return {@code List} lista poblada con las personas encontradas * en la base de datos. */ public List<Persona> obtenerTodos(){ List<Persona> personas = new ArrayList<>(); try( Connection conexion = manejaConexion.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(\"SELECT id, nombre FROM persona\"); ResultSet rs = ps.executeQuery(); ){ while(rs.next()) { personas.add(new Persona(rs.getInt(\"id\"), rs.getString(\"nombre\"))); } }catch (SQLException e) { milog.severe(e.getMessage()); } return personas; } public Persona buscarPorId(int id) { Persona persona = new Persona(); try( Connection conexion = manejaConexion.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(\"SELECT id, nombre FROM persona where id = \" + id ); ResultSet rs = ps.executeQuery(); ){ if(rs.next()) { persona.setNombre(rs.getString(\"nombre\")); persona.setId(rs.getInt(\"id\")); }else { throw new SQLException(\"No se encuentra el registro en la base de datos\"); } }catch (SQLException e) { milog.severe(e.getMessage()); } return persona; } public void actualizar(int id, Persona persona) { try( Connection conexion = manejaConexion.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(\"UPDATE persona SET nombre = ? WHERE id = ?\"); ){ ps.setString(1, persona.getNombre()); ps.setInt(2, id); int filasAfectadas = ps.executeUpdate(); if(filasAfectadas <= 0) throw new SQLException(\"No se actualiz\u00f3 ning\u00fan registro\"); }catch(SQLException e) { milog.severe(\"Error al actualizar\"); milog.severe(e.getMessage()); } } public void eliminar(int id) { try( Connection conexion = manejaConexion.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(\"DELETE FROM persona WHERE id = ?\"); ){ ps.setInt(1, id); int filasAfectadas = ps.executeUpdate(); if(filasAfectadas <= 0) throw new SQLException(\"No se elimin\u00f3 ning\u00fan registro\"); }catch(SQLException e) { milog.severe(\"Error al eliminar\"); milog.severe(e.getMessage()); } } } Cuando se requiera que se realice una acci\u00f3n que involucre la interacci\u00f3n entre la vista y la base de datos, tendremos a nuestro encargado. El controlador. /sqlite/src/main/java/cl/lherrera/jdbc/sqlite/controlador/PersonaControlador.java package cl.lherrera.jdbc.sqlite.controlador; import java.util.List; import cl.lherrera.jdbc.sqlite.dao.PersonaDAO; import cl.lherrera.jdbc.sqlite.modelo.Persona; import cl.lherrera.jdbc.sqlite.utils.administradorDeAplicacion; import cl.lherrera.jdbc.sqlite.vista.Accion; import cl.lherrera.jdbc.sqlite.vista.Dibuja; public class PersonaControlador { private final PersonaDAO daopersona = new PersonaDAO(); private static final int LISTAR = 1; private static final int INGRESAR = 2; private static final int ACTUALIZAR = 3; private static final int ELIMINAR = 4; public void procesoIngresar() { Persona persona = new Persona(Accion.solicitaNombre()); daopersona.ingresar(persona); Accion.avisoAccionRealizada(); } public void procesoListar() { List<Persona> personas = daopersona.obtenerTodos(); Dibuja.listarTodos(personas); Accion.avisoAccionRealizada(); } public void procesoActualizar() { int id = Accion.solicitaId(); Persona persona = daopersona.buscarPorId(id); Dibuja.muestraDetallePersona(persona); int opcion = Accion.retornaOpcionEntera(); if(opcion == 1) { String nombre = Accion.solicitaNombre(); persona.setNombre(nombre); daopersona.actualizar(id, persona); } Accion.avisoAccionRealizada(); } public void procesoEliminar() { int id = Accion.solicitaId(); Persona persona = daopersona.buscarPorId(id); Dibuja.muestraDetallePersona(persona); int opcion = Accion.retornaOpcionEntera(); if(opcion == 1) daopersona.eliminar(id); Accion.avisoAccionRealizada(); } public void iniciaMantenedor() { Dibuja.principal(); int opcion = Accion.retornaOpcionEntera(); switch (opcion) { case LISTAR: procesoListar(); break; case INGRESAR: procesoIngresar(); break; case ACTUALIZAR: procesoActualizar(); break; case ELIMINAR: procesoEliminar(); break; default: Accion.finalizaAccion(); administradorDeAplicacion aplicacion = administradorDeAplicacion.obtenerEjecucion(); aplicacion.terminarAplicacion(); } } } La parte visual ser\u00e1 representada por salidas de consola, la siguiente capa, ser\u00e1 la encargada de la representaci\u00f3n de los datos para el usuario y sus interacciones. /sqlite/src/main/java/cl/lherrera/jdbc/sqlite/vista/Dibuja.java package cl.lherrera.jdbc.sqlite.vista; import java.util.List; import cl.lherrera.jdbc.sqlite.modelo.Persona; public class Dibuja { public static void solicitaNombre() { System.out.println(\"Ingrese el nombre de la persona\"); } public static void solicitaId() { System.out.println(\"Ingrese el id de la persona\"); } public static void principal() { limpiarPantalla(); String texto = \"\" + \"Men\u00fa principal \\n\\n\" + \"1 - Listar personas\\n\" + \"2 - Ingresar persona\\n\" + \"3 - Actuaizar persona\\n\" + \"4 - Eliminar persona\\n\" + \"5 - Salir\\n\"; System.out.println(texto); } public static void muestraDetallePersona(Persona persona) { System.out.println(\"Persona a ejecutar acci\u00f3n:\"); System.out.println(\"--------------------------\"); System.out.println(\"- id: \" + persona.getId()); System.out.println(\"- nombre: \" + persona.getNombre()); System.out.println(\"--------------------------\"); System.out.println(\"Desea ejecutar: 1-Si, 2-No\"); } public static void listarTodos(List<Persona> personas) { System.out.println(\"Lista de personas:\"); personas.forEach(System.out::println); } public static void confirmaSegir() { System.out.println(\"\\n\\nAcci\u00f3n realizada para continuar presione 'ENTER'...\"); } private static void limpiarPantalla() { for(int i = 0; i < 10; i ++) { System.out.println(\"\\n\"); } } } /sqlite/src/main/java/cl/lherrera/jdbc/sqlite/vista/Accion.java package cl.lherrera.jdbc.sqlite.vista; import java.util.Scanner; /** * Clase encargada de gestionar las acciones del usuario. * Todos sus m\u00e9todos son est\u00e1ticos. * @author luisherrera * */ public class Accion { private static final Scanner SCAN = new Scanner(System.in); private Accion() {} public static int retornaOpcionEntera() { return Integer.parseInt(SCAN.nextLine()); } public static void avisoAccionRealizada() { Dibuja.confirmaSegir(); SCAN.nextLine(); } public static String retornaOpcion() { return SCAN.nextLine(); } public static int solicitaId() { Dibuja.solicitaId(); return retornaOpcionEntera(); } public static String solicitaNombre() { Dibuja.solicitaNombre(); return retornaOpcion(); } public static void finalizaAccion() { SCAN.close(); } } /sqlite/propiedades # datos de conexi\u00f3n file_path=/Users/luisherrera/Desktop/TALENTO-PROS/bases/base001.db usuario=admin contrasenia=1234 directorioLogs=/Users/luisherrera/Desktop/TALENTO-PROS/servlets/sqlite/logs/ /sqlite/pom.xml <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>cl.lherrera.jdbc</groupId> <artifactId>sqlite</artifactId> <version>0.0.1-SNAPSHOT</version> <dependencies> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> <version>3.30.1</version> </dependency> </dependencies> </project>","title":"Ejercicio 7: aplicaci\u00f3n mantenedora de informaci\u00f3n."},{"location":"ejercicios/servlets/jdbc/sqlite/#ejercicio-8-a-la-web","text":"Es momento de fusionar el conocimiento entre servlets y bases de datos, para poder interactuar con un usuario, pero ahora no desde la consola si no que ahora desde la web. El objetivo es el mismo, un mantenedor de personas, lo que antes hicimos en el escritorio, ahora lo realizaremos en la web. El dise\u00f1o se enfoca en el backend, por lo que el Html del ejercicio es muy b\u00e1sico y es una buena forma de una vez terminado el ejercicio, poder mejorar la presentaci\u00f3n y validaciones. Lo primero que necesitamos es crear un proyecto Maven o podemos continuar con el que dejamos hasta ahora, ya que est\u00e1 en maven, pero hay que ir a los facets y cambiarlo a un dynamic web module 4.0, luego agregar maven dependencies, java 8, agregar el servidor y todo lo necesario para que funcione en un entorno web. Estructura: En esta estructura, se puede ver que una vez que el proyecto completo compila, lleva las propiedades al target. se puede ver en config/ . Con esto escondemos las propiedades del uso p\u00fablico y al agregarlo al git ignore, se tomar\u00e1 el de producci\u00f3n, sin tener que realizar alguna tarea manual, como lo ser\u00eda cambiar el directorio absoluto de las propiedades, ya que esto no es autom\u00e1tico. ./ \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u251c\u2500\u2500 WEB-INF \u2502 \u2502 \u251c\u2500\u2500 lib \u2502 \u2502 \u2514\u2500\u2500 propiedades.properties \u2502 \u251c\u2500\u2500 index.jsp \u2502 \u2514\u2500\u2500 mantenedor.jsp \u251c\u2500\u2500 logs \u2502 \u251c\u2500\u2500 2020_03_30.log \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u251c\u2500\u2500 cl \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 webpersonas \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 dao \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 PersonaDAO.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 modelo \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 Persona.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 servlets \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ActualizarPersona.java \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 EliminaPersona.java \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 IngresarPersona.java \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 IniciaMantenedor.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 utils \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ManejaConexion.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 MiLog.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 Propiedades.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 config \u2502 \u2502 \u2502 \u2514\u2500\u2500 propiedades.properties \u2502 \u2502 \u2514\u2500\u2500 resources \u2502 \u2514\u2500\u2500 test \u2502 \u251c\u2500\u2500 java \u2502 \u2514\u2500\u2500 resources \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2502 \u2514\u2500\u2500 maven \u2502 \u2502 \u2514\u2500\u2500 cl.lherrera \u2502 \u2502 \u2514\u2500\u2500 webpersonas \u2502 \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2502 \u2514\u2500\u2500 pom.xml \u2502 \u251c\u2500\u2500 cl \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2514\u2500\u2500 webpersonas \u2502 \u2502 \u251c\u2500\u2500 dao \u2502 \u2502 \u2502 \u2514\u2500\u2500 PersonaDAO.class \u2502 \u2502 \u251c\u2500\u2500 modelo \u2502 \u2502 \u2502 \u2514\u2500\u2500 Persona.class \u2502 \u2502 \u251c\u2500\u2500 servlets \u2502 \u2502 \u2502 \u251c\u2500\u2500 ActualizarPersona.class \u2502 \u2502 \u2502 \u251c\u2500\u2500 EliminaPersona.class \u2502 \u2502 \u2502 \u251c\u2500\u2500 IngresarPersona.class \u2502 \u2502 \u2502 \u2514\u2500\u2500 IniciaMantenedor.class \u2502 \u2502 \u2514\u2500\u2500 utils \u2502 \u2502 \u251c\u2500\u2500 ManejaConexion.class \u2502 \u2502 \u251c\u2500\u2500 MiLog.class \u2502 \u2502 \u2514\u2500\u2500 Propiedades.class \u2502 \u2514\u2500\u2500 config \u2502 \u2514\u2500\u2500 propiedades.properties \u2514\u2500\u2500 test-classes 35 directories, 32 files /webpersonas/pom.xml <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>cl.lherrera</groupId> <artifactId>webpersonas</artifactId> <version>0.0.1-SNAPSHOT</version> <dependencies> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> <version>3.30.1</version> </dependency> </dependencies> </project> Definamos nuestro archivo de propiedades, para que este sea compilado y puesto en un lugar en que el servidor lo encuentre, lo dejamos en un paquete, as\u00ed cuando se ejecute el build, se mover\u00e1 a un contexto del servidor, de otra forma, deber\u00edamos poner el path absoluto; pero esto trae problemas cuando pasamos a producci\u00f3n, donde las rutas abasolutas, no son iguales a las de nuestra m\u00e1quina y el archivo de propiedades, necesariamente debe ser indicado en el c\u00f3digo y esta es una forma muy limpia de hacerlo si estamos trabajando sin framwork. /webpersonas/src/main/java/config/propiedades.properties # datos de conexi\u00f3n file_path=/Users/luisherrera/Desktop/TALENTO-PROS/bases/base001.db usuario=admin contrasenia=1234 directorioLogs=/Users/luisherrera/Desktop/TALENTO-PROS/servlets/webpersonas/logs/ Ahora queda definir las clases utilitarias que usaremos para este proyecto, la gran sorpresa es que reutilizaremos mucho de nuestra app pasada, ya que al ser un desarrollo en capas, es posible modificar completamente alguna de ellas, sin necesidad de afectar la estructura de otras, que auque parezca extra\u00f1o, no tocaremos su implimentaci\u00f3n y nos enfocaremos en desarrollar la interacci\u00f3n web. (Singleton) /webpersonas/src/main/java/cl/lherrera/webpersonas/utils/Propiedades.java package cl.lherrera.webpersonas.utils; import java.io.FileNotFoundException; import java.io.IOException; import java.io.InputStream; import java.util.Properties; import java.util.logging.Logger; public class Propiedades { private Properties props; private static Logger milog = MiLog.obtenerLog(); private static Propiedades propiedades = new Propiedades(); InputStream streamDeBytes = this.getClass().getResourceAsStream(\"/config/propiedades.properties\"); private Propiedades() { if (propiedades != null){ //Prevent Reflection throw new IllegalStateException(\"No se puede crear una nueva instancia de Propiedades\"); } this.iniciaProps(); } public static Propiedades obtenerPropiedades() { return propiedades; } private void iniciaProps() { try { props = new Properties(); props.load(streamDeBytes); } catch (FileNotFoundException e) { milog.severe(\"El archivo:, no se ha encontrado\"); milog.severe(e.getMessage()); } catch (IOException e) { milog.severe(e.getMessage()); } } public Properties getProps() { return props; } } Hay que recordar, que la conexi\u00f3n utiliza un driver que es externo a las librer\u00edas de java, para que fincione, debe estar cargado el driver en el proyecto, pero adiciional a esto, si no se trabaja con maven, estas librer\u00edas deben ir en WEB-INF/libs. Para no tener este problema con un proyecto maven, no hay que olvidar agregar las librer\u00edas de maven al deploy assembly adem\u00e1s del proyecto, para que el servidor cuente tambi\u00e9n con estos drivers extras que estamos utilizando. (si lo hicimos mal, notaremos un error en la carga del driver en Class.forName(\"org.sqlite.JDBC\"); ). (Singleton) /webpersonas/src/main/java/cl/lherrera/webpersonas/utils/ManejaConexion.java package cl.lherrera.webpersonas.utils; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; import java.util.Properties; import java.util.logging.Logger; public class ManejaConexion { // cargamos las propiedades del proyecto private static Propiedades propiedades = Propiedades.obtenerPropiedades(); private static Properties props = propiedades.getProps(); private static final String DB_URL = \"jdbc:sqlite:\" + props.getProperty(\"file_path\"); private static final Logger milog = MiLog.obtenerLog(); private static ManejaConexion manejaConexion = new ManejaConexion(); private ManejaConexion() { if (manejaConexion != null){ //Prevent Reflection throw new IllegalStateException(\"No se puede crear una nueva instancia de ManejaConexion\"); } } /** * M\u00e9todo est\u00e1tico, para poder acceder sin una instancia, as\u00ed controlamos * internamente que no se cree una nueva instancia si esta existe. * */ public static ManejaConexion obtenerManejo() { return manejaConexion; } /** * Obtiene una conexi\u00f3n. * * @return Una conexi\u00f3n abierta, esto es importante ya que esta conexi\u00f3n debe ser cerrada. * @throws <i>SQLException</i>, al no controlar la exception ac\u00e1, obligamos * a tener que utilizar un {@code try()}, as\u00ed cada vez que lo ocupemos * estar\u00e1 dentro del try especial y nos aseguramos que la conexi\u00f3n * cierre. Pero esta caracter\u00edstica, se encuentra vulnerable al * desarrollador si ocupa o no {@code try(){}catch(){}}. */ public Connection obtenerConexion() throws SQLException { Connection conexion = null; try { Class.forName(\"org.sqlite.JDBC\"); conexion = DriverManager.getConnection( DB_URL, props.getProperty(\"usuario\"), props.getProperty(\"contrasenia\") ); } catch (ClassNotFoundException e) { milog.severe(\"No se pudo cargar el driver.\"); milog.severe(e.getMessage()); } return conexion; } } (Singleton) /webpersonas/src/main/java/cl/lherrera/webpersonas/utils/MiLog.java package cl.lherrera.webpersonas.utils; import java.io.File; import java.io.IOException; import java.text.SimpleDateFormat; import java.util.Date; import java.util.Properties; import java.util.logging.FileHandler; import java.util.logging.Logger; import java.util.logging.SimpleFormatter; public class MiLog { private Propiedades propiedades = Propiedades.obtenerPropiedades(); private Properties props = propiedades.getProps(); private static Logger logger = Logger.getLogger(MiLog.class.getName()); // cramos la instancia desde el inicio, ya que llamando a un m\u00e9todo // se corre el riesgo que m\u00e1s de un hilo crea que milog // es null hasta que se ejecute el m\u00e9todo que crea // la instancia. private static MiLog milog = new MiLog(); private MiLog() { if (milog != null){ //Prevent Reflection throw new IllegalStateException(\"No se puede crear una nueva instancia de Milog\"); } this.inicializaArchivo(); } private void inicializaArchivo() { SimpleDateFormat formatoSimple = new SimpleDateFormat(\"yyyy_MM_dd\"); String fecha = formatoSimple.format(new Date()); try { String directorioLogs = props.getProperty(\"directorioLogs\"); boolean existeElDirectorio = verificaExistenciaDirecctorio(directorioLogs); if(existeElDirectorio) { String direccionArchivo = directorioLogs + fecha + \".log\"; FileHandler fh = new FileHandler(direccionArchivo); logger.addHandler(fh); SimpleFormatter formatter = new SimpleFormatter(); fh.setFormatter(formatter); } else { throw new IOException(\"No se pudo crear el directorio: \" + directorioLogs); } } catch (SecurityException | IOException e) { logger.severe(e.getMessage()); } } /** * Toma la ruta y la intenta crear en caso que no exista */ private boolean verificaExistenciaDirecctorio(String directorioLogs) { boolean existe = false; File manejoDirectorio = new File(directorioLogs); if(manejoDirectorio.exists()) { existe = true; }else { existe = manejoDirectorio.mkdir(); } return existe; } public static Logger obtenerLog() { return logger; } } Usamos el mismo DTO o modelo. /webpersonas/src/main/java/cl/lherrera/webpersonas/modelo/Persona.java package cl.lherrera.webpersonas.modelo; public class Persona { private Integer id; private String nombre; public Persona() {} public Persona(Integer id, String nombre) { this.id = id; this.nombre = nombre; } public Persona(String nombre) { this.nombre = nombre; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } @Override public String toString() { return \"Persona [id=\" + id + \", nombre=\" + nombre + \"]\"; } } Usamos el mismo DAO /webpersonas/src/main/java/cl/lherrera/webpersonas/dao/PersonaDAO.java package cl.lherrera.webpersonas.dao; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.util.ArrayList; import java.util.List; import java.util.logging.Logger; import cl.lherrera.webpersonas.modelo.Persona; import cl.lherrera.webpersonas.utils.ManejaConexion; import cl.lherrera.webpersonas.utils.MiLog; public class PersonaDAO { private static final ManejaConexion manejaConexion = ManejaConexion.obtenerManejo(); private static Logger milog = MiLog.obtenerLog(); /** * M\u00e9todo encargado de agregar una persona a la * base de datos. */ public int ingresar(Persona persona) { int filasAfectadas = 0; try( Connection conexion = manejaConexion.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(\"INSERT INTO persona (nombre) values (?)\"); ){ ps.setString(1, persona.getNombre()); filasAfectadas = ps.executeUpdate(); if(filasAfectadas != 1) throw new SQLException(\"Error al insertar registro\"); }catch (SQLException e) { milog.severe(e.getMessage()); } return filasAfectadas; } /** * M\u00e9todo encargado de retornar una lista de todas las personas * que est\u00e9n en la base de datos. * * @return {@code List} lista poblada con las personas encontradas * en la base de datos. */ public List<Persona> obtenerTodos(){ List<Persona> personas = new ArrayList<>(); try( Connection conexion = manejaConexion.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(\"SELECT id, nombre FROM persona\"); ResultSet rs = ps.executeQuery(); ){ while(rs.next()) { personas.add(new Persona(rs.getInt(\"id\"), rs.getString(\"nombre\"))); } }catch (SQLException e) { milog.severe(e.getMessage()); } return personas; } public Persona buscarPorId(int id) { Persona persona = new Persona(); try( Connection conexion = manejaConexion.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(\"SELECT id, nombre FROM persona where id = \" + id ); ResultSet rs = ps.executeQuery(); ){ if(rs.next()) { persona.setNombre(rs.getString(\"nombre\")); persona.setId(rs.getInt(\"id\")); }else { throw new SQLException(\"No se encuentra el registro en la base de datos\"); } }catch (SQLException e) { milog.severe(e.getMessage()); } return persona; } public void actualizar(int id, Persona persona) { try( Connection conexion = manejaConexion.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(\"UPDATE persona SET nombre = ? WHERE id = ?\"); ){ ps.setString(1, persona.getNombre()); ps.setInt(2, id); int filasAfectadas = ps.executeUpdate(); if(filasAfectadas <= 0) throw new SQLException(\"No se actualiz\u00f3 ning\u00fan registro\"); }catch(SQLException e) { milog.severe(\"Error al actualizar\"); milog.severe(e.getMessage()); } } public void eliminar(int id) { try( Connection conexion = manejaConexion.obtenerConexion(); PreparedStatement ps = conexion.prepareStatement(\"DELETE FROM persona WHERE id = ?\"); ){ ps.setInt(1, id); int filasAfectadas = ps.executeUpdate(); if(filasAfectadas <= 0) throw new SQLException(\"No se elimin\u00f3 ning\u00fan registro\"); }catch(SQLException e) { milog.severe(\"Error al eliminar\"); milog.severe(e.getMessage()); } } } Las vistas necesarias: /webpersonas/WebContent/index.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Inicio</title> </head> <body> <h1>Inicio del sistema</h1> <a href=\"mantenedor\">Inicia el mantenedor</a> </body> </html> /webpersonas/WebContent/mantenedor.jsp Basado en scriptles, esta vista contiene todas las funcionalidades necesarias para realizar todas las tareas para mantener la informaci\u00f3n de la tabla personas. <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@ page import=\"java.util.List\"%> <%@ page import=\"cl.lherrera.webpersonas.modelo.Persona\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Ingreso de personas</title> <style> .formularios { float: left; width: 345px; border-right: 1px solid black; } .listaPersonas { float: right; width: 349px; } .contenedor { width: 700px; } </style> </head> <body> <% // variables del request String disabledInsert = (String) request.getAttribute(\"insertForm\"); String disabledUpdate = (String) request.getAttribute(\"updateForm\"); String disabledDelete = (String) request.getAttribute(\"deleteForm\"); List<Persona> personas = (List<Persona>) request.getAttribute(\"personas\"); Object nombreO = request.getAttribute(\"nombre\"); String nombre = (nombreO != null)? (String) nombreO : \"\" ; Object elNombreO = request.getAttribute(\"elNombre\");String elNombre = (elNombreO != null)? (String) elNombreO : \"\" ; String personaId = (String) request.getAttribute(\"id\"); %> <div class=\"contenedor\"> <hr /> <div class=\"formularios\"> <!-- ingresar --> <form action=\"ingresar\" method=\"post\"> <fieldset> <legend>Ingrese una nueva persona</legend> <label for=\"nombre\">Nombre</label> <input type=\"text\" name=\"nombre\" <%=disabledInsert%> /> <button type=\"submit\" <%=disabledInsert %>>Ingresar</button> </fieldset> </form> <hr /> <hr /> <!-- ingresar #--> <!-- actualizar --> <form action=\"actualizar\" method=\"post\"> <fieldset> <input type=\"hidden\" name=\"id\" value=\"<%=personaId %>\" /> <legend>Actualizar persona</legend> <label for=\"nombre\">Nombre</label> <input type=\"text\" name=\"nombre\" id=\"nombre\" value=\"<%=nombre %>\" <%=disabledUpdate %> /> <button type=\"submit\" <%=disabledUpdate %> >Actualizar</button> </fieldset> </form> <hr /> <hr /> <!-- actualizar #--> <!-- eliminar --> <form action=\"eliminar\" method=\"post\"> <fieldset> <input type=\"hidden\" name=\"id\" value=\"<%=personaId %>\" /> <legend>Eliminar a la persona</legend> <label for=\"nombre\">Nombre</label> <input type=\"text\" name=\"elNombre\" id=\"elNombre\" value=\"<%=elNombre %>\" disabled /> <button type=\"submit\" <%=disabledDelete %>>Eliminar</button> </fieldset> </form> <hr /> <hr /> <!-- eliminar #--> </div> <!-- Listar personas --> <div class=\"listaPersonas\"> <h3>Lista de personas</h3> <table style=\"width: 350px; border: 1px solid;\"> <caption>Tabla de informaci\u00f3n</caption> <thead> <tr> <th>ID</th> <th>NOMBRE</th> <th>ACCION</th> </tr> </thead> <tbody> <%if(personas.size() <= 0) {%> <tr> <td>Sin datos...</td> </tr> <%}else { %> <%for(Persona persona: personas) {%> <tr> <td><%=persona.getId() %></td> <td><%=persona.getNombre() %></td> <td> <a href=\"actualizar?id=<%=persona.getId()%>&nombre=<%=persona.getNombre()%>\" >actualizar</a> | <a href=\"eliminar?id=<%=persona.getId()%>&elNombre=<%=persona.getNombre()%>\" >Eliminar</a> </td> </tr> <%}%> <%} %> </tbody> </table> </div> <!-- Listar personas #--> </div> </body> </html> Finalmente el paquete que contendr\u00e1 la l\u00f3gica que maneja el servidor, donde cada petici\u00f3n URL ser\u00e1 trabajada, es la capa que ejecuta el rol de controlador, ya que realiza la interacci\u00f3n entre la vista (web) y los datos. (Por ahora todo ser\u00e1 get y post) /webpersonas/src/main/java/cl/lherrera/webpersonas/servlets/IniciaMantenedor.java package cl.lherrera.webpersonas.servlets; import java.io.IOException; import java.util.List; import java.util.logging.Logger; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import cl.lherrera.webpersonas.dao.PersonaDAO; import cl.lherrera.webpersonas.modelo.Persona; import cl.lherrera.webpersonas.utils.MiLog; @WebServlet(name = \"Mantenedor de Personas\", urlPatterns = \"/mantenedor\") public class IniciaMantenedor extends HttpServlet{ private static final Logger logger = MiLog.obtenerLog(); private static PersonaDAO daoPersona = new PersonaDAO(); private static final long serialVersionUID = -4282664097471786333L; /** * Procesa el request por referencia, modifica el mismo objeto req * este objeto, ir\u00e1 al jsp para all\u00ed finalizar la entrega del * response. */ private void procesaGetRequest(HttpServletRequest req) { // se llena la lista para la tabla List<Persona> personas = daoPersona.obtenerTodos(); req.setAttribute(\"personas\", personas); // usado para bloquear elementos del formulario req.setAttribute(\"insertForm\", \"\"); req.setAttribute(\"updateForm\", \"disabled\"); req.setAttribute(\"deleteForm\", \"disabled\"); } @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { procesaGetRequest(req); try { req.getRequestDispatcher(\"mantenedor.jsp\").forward(req, resp); } catch (ServletException | IOException e) { logger.severe(e.getMessage()); } } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp){ // cuando un doPost solicita la carga mediante un forward... doGet(req, resp); } } /webpersonas/src/main/java/cl/lherrera/webpersonas/servlets/IngresarPersona.java package cl.lherrera.webpersonas.servlets; import java.io.IOException; import java.util.logging.Logger; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import cl.lherrera.webpersonas.dao.PersonaDAO; import cl.lherrera.webpersonas.modelo.Persona; import cl.lherrera.webpersonas.utils.MiLog; @WebServlet(name = \"IIngresar Persona\", urlPatterns = \"/ingresar\") public class IngresarPersona extends HttpServlet{ private static final Logger logger = MiLog.obtenerLog(); private static final long serialVersionUID = 6755151974107090793L; private static PersonaDAO daoPersona = new PersonaDAO(); private void procesaGetRequest(HttpServletRequest req) { if(req.getParameter(\"nombre\") != null) { String nombre = req.getParameter(\"nombre\"); daoPersona.ingresar(new Persona(nombre) ); }else { logger.warning(\"El request no posee los datos necesarios\"); } } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) { procesaGetRequest(req); try { // el servlet que escucha esta url, se encarga de dejar el jsp // en un estado consistente inicial. req.getRequestDispatcher(\"mantenedor\").forward(req, resp); } catch (ServletException | IOException e) { logger.severe(e.getMessage()); } } } /webpersonas/src/main/java/cl/lherrera/webpersonas/servlets/ActualizarPersona.java package cl.lherrera.webpersonas.servlets; import java.io.IOException; import java.util.List; import java.util.logging.Logger; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import cl.lherrera.webpersonas.dao.PersonaDAO; import cl.lherrera.webpersonas.modelo.Persona; import cl.lherrera.webpersonas.utils.MiLog; @WebServlet(name = \"Actualizar Persona\", urlPatterns = \"/actualizar\") public class ActualizarPersona extends HttpServlet{ private static final Logger logger = MiLog.obtenerLog(); private static final long serialVersionUID = 6755151974107090793L; private static PersonaDAO daoPersona = new PersonaDAO(); private void procesaGetRequest(HttpServletRequest req) { List<Persona> personas = daoPersona.obtenerTodos(); req.setAttribute(\"personas\", personas); // bloqueo de formularios req.setAttribute(\"insertForm\", \"disabled\"); req.setAttribute(\"updateForm\", \"\"); req.setAttribute(\"deleteForm\", \"disabled\"); // par\u00e1metros para el formulario req.setAttribute(\"id\", req.getParameter(\"id\") ); req.setAttribute(\"nombre\", req.getParameter(\"nombre\") ); } private void procesaPostRequest(HttpServletRequest req) { if(req.getParameter(\"id\") != null) { int idPersona = Integer.parseInt(req.getParameter(\"id\")); String nombrePersona = req.getParameter(\"nombre\"); Persona persona = new Persona(nombrePersona); daoPersona.actualizar(idPersona, persona); }else { logger.warning(\"El request no posee los datos necesarios\"); } } @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { procesaGetRequest(req); try { req.getRequestDispatcher(\"mantenedor.jsp\").forward(req, resp); } catch (ServletException | IOException e) { logger.severe(e.getMessage()); } } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) { procesaPostRequest(req); try { // no llamamos directo al jsp. si no que al servlet que carga // la ventana inicial req.getRequestDispatcher(\"mantenedor\").forward(req, resp); } catch (ServletException | IOException e) { logger.severe(e.getMessage()); } } } /webpersonas/src/main/java/cl/lherrera/webpersonas/servlets/EliminaPersona.java package cl.lherrera.webpersonas.servlets; import java.io.IOException; import java.util.List; import java.util.logging.Logger; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import cl.lherrera.webpersonas.dao.PersonaDAO; import cl.lherrera.webpersonas.modelo.Persona; import cl.lherrera.webpersonas.utils.MiLog; @WebServlet(name = \"Eliminar Persona\", urlPatterns = \"/eliminar\") public class EliminaPersona extends HttpServlet{ private static final Logger logger = MiLog.obtenerLog(); private static final long serialVersionUID = 6755151974107090793L; private static PersonaDAO daoPersona = new PersonaDAO(); private void procesaGetRequest(HttpServletRequest req) { List<Persona> personas = daoPersona.obtenerTodos(); req.setAttribute(\"personas\", personas); // bloqueo de formularios req.setAttribute(\"insertForm\", \"disabled\"); req.setAttribute(\"updateForm\", \"disabled\"); req.setAttribute(\"deleteForm\", \"\"); // datos de los valores del formulario if(req.getParameter(\"id\") != null && req.getParameter(\"elNombre\") != null) { req.setAttribute(\"id\", req.getParameter(\"id\") ); req.setAttribute(\"elNombre\", req.getParameter(\"elNombre\") ); }else { logger.warning(\"El request no posee los datos necesarios\"); } } private void procesaPostRequest(HttpServletRequest req) { if(req.getParameter(\"id\") != null) { int personaId = Integer.parseInt(req.getParameter(\"id\") ); daoPersona.eliminar(personaId ); }else { logger.warning(\"El request no posee los datos necesarios\"); } } @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { procesaGetRequest(req); try { req.getRequestDispatcher(\"mantenedor.jsp\").forward(req, resp); } catch (ServletException | IOException e) { logger.severe(e.getMessage()); } } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) { procesaPostRequest(req); try { req.getRequestDispatcher(\"mantenedor\").forward(req, resp); } catch (ServletException | IOException e) { logger.severe(e.getMessage()); } } } De esta manera tendremos nuestro proyecto terminado, solamente falta implementarlo y observar los resultados. \ud83d\udc68\ud83c\udffb\u200d\ud83c\udfeb\ud83d\udc4d\ud83c\udffc.","title":"Ejercicio 8: A LA WEB \ud83d\udc7e \ud83e\udd4b"},{"location":"ejercicios/servlets/request/get/","text":"Peticiones tipo Get. Ejercicio 1: Enviar una petici\u00f3n get y capturarla. Usando: javascript . En una petici\u00f3n GET, los atriburtos se env\u00edan por la url y con Javascript, lo podemos capturar. url . Estructura: \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u251c\u2500\u2500 WEB-INF \u2502 \u2502 \u2514\u2500\u2500 lib \u2502 \u251c\u2500\u2500 index.jsp \u2502 \u2514\u2500\u2500 procesa.jsp \u251c\u2500\u2500 build \u2502 \u2514\u2500\u2500 classes \u2514\u2500\u2500 src /peticiones/WebContent/index.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Request</title> </head> <body> <form action=\"procesa.jsp\" method=\"get\" > Ingrese valor: <input type=\"text\" name=\"atributo\" /> <br /> <button type=\"submit\">Enviar</button> </form> </body> </html> /peticiones/WebContent/procesa.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Insert title here</title> </head> <body> <h1> Los par\u00e1metros son: <div id=\"muestra\"></div> </h1> <script type=\"text/javascript\"> var urlText = window.location.href; var parametrosTxt = urlText.substring(urlText.indexOf('?') + 1); const elemento = document.getElementById(\"muestra\"); elemento.innerHTML = parametrosTxt; </script> </body> </html> Usando Scriptlets. Con esta t\u00e9ctica podemos acceder a cada atributo, utilizando request.getParameter . Indicando que request ya existe est\u00e1ticamente en un archivo jsp , que ya sabemos que es un servlet. Estructura: \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u251c\u2500\u2500 WEB-INF \u2502 \u2502 \u2514\u2500\u2500 lib \u2502 \u251c\u2500\u2500 index.jsp \u2502 \u2514\u2500\u2500 procesa.jsp \u251c\u2500\u2500 build \u2502 \u2514\u2500\u2500 classes \u2514\u2500\u2500 src /peticiones/WebContent/index.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Request</title> </head> <body> <form action=\"procesa.jsp\" method=\"get\"> Ingrese valor: <input type=\"text\" name=\"atributo\" /> <br /> <button type=\"submit\">Enviar</button> </form> </body> </html> /peticiones/WebContent/procesa.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Insert title here</title> </head> <body> <% String atributo = request.getParameter(\"atributo\"); %> <h1>Captura desde el GET</h1> <ul> <li>Atributo: <strong><%=atributo%></strong></li> </ul> </body> </html> Usando un Servlet. Podemos usar de intermediario un Servlet para poder pasar los objetos req y resp , en el caso que requiera una mayor programaci\u00f3n. Estructura: \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u251c\u2500\u2500 WEB-INF \u2502 \u2502 \u251c\u2500\u2500 lib \u2502 \u2502 \u2514\u2500\u2500 web.xml \u2502 \u251c\u2500\u2500 index.jsp \u2502 \u2514\u2500\u2500 procesa.jsp \u2514\u2500\u2500 src \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 servlets \u2514\u2500\u2500 MuestraAtr.java `/peticiones/src/cl/lherrera/servlets/MuestraAtr.java package cl.lherrera.servlets; import java.io.IOException; import java.util.logging.Logger; import javax.servlet.ServletException; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; public class MuestraAtr extends HttpServlet { private static final long serialVersionUID = -3252248185584300198L; private static Logger milog = Logger.getLogger(MuestraAtr.class.getName()); @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { try { req.getRequestDispatcher(\"procesa.jsp\").forward(req, resp); } catch (ServletException | IOException e) { milog.info(e.getMessage()); } } } /peticiones/WebContent/WEB-INF/web.xml <web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\" version=\"3.1\"> <servlet> <servlet-name>muestra atributo</servlet-name> <servlet-class>cl.lherrera.servlets.MuestraAtr</servlet-class> </servlet> <servlet-mapping> <servlet-name>muestra atributo</servlet-name> <url-pattern>/procesa</url-pattern> </servlet-mapping> </web-app> /peticiones/WebContent/index.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Request</title> </head> <body> <form action=\"procesa\" method=\"get\"> Ingrese valor: <input type=\"text\" name=\"atributo\" /> <br /> <button type=\"submit\">Enviar</button> </form> </body> </html> /peticiones/WebContent/procesa.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Insert title here</title> </head> <body> <% String atributo = request.getParameter(\"atributo\"); %> <h1>Captura desde el GET</h1> <ul> <li>Atributo: <strong><%=atributo%></strong></li> </ul> </body> </html> Usando el atributo impl\u00edcito param , ver m\u00e1s. . Estructura: \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u251c\u2500\u2500 WEB-INF \u2502 \u2502 \u251c\u2500\u2500 lib \u2502 \u2502 \u2514\u2500\u2500 web.xml \u2502 \u251c\u2500\u2500 index.jsp \u2502 \u2514\u2500\u2500 procesa.jsp \u2514\u2500\u2500 src \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 servlets \u2514\u2500\u2500 MuestraAtr.java /peticiones/src/cl/lherrera/servlets/MuestraAtr.java package cl.lherrera.servlets; import java.io.IOException; import java.util.logging.Logger; import javax.servlet.ServletException; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; public class MuestraAtr extends HttpServlet { private static final long serialVersionUID = -3252248185584300198L; private static Logger milog = Logger.getLogger(MuestraAtr.class.getName()); @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { try { req.getRequestDispatcher(\"procesa.jsp\").forward(req, resp); } catch (ServletException | IOException e) { milog.info(e.getMessage()); } } } /peticiones/WebContent/WEB-INF/web.xml <web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\" version=\"3.1\"> <servlet> <servlet-name>muestra atributo</servlet-name> <servlet-class>cl.lherrera.servlets.MuestraAtr</servlet-class> </servlet> <servlet-mapping> <servlet-name>muestra atributo</servlet-name> <url-pattern>/procesa</url-pattern> </servlet-mapping> </web-app> /peticiones/WebContent/index.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Request</title> </head> <body> <form action=\"procesa\" method=\"get\"> Ingrese valor: <input type=\"text\" name=\"atributo\" /> <br /> <button type=\"submit\">Enviar</button> </form> </body> </html> <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Insert title here</title> </head> <body> <h1>Captura desde el GET</h1> <ul> <li>Atributo: <strong> ${param[\"atributo\"]} </strong></li> </ul> </body> </html>","title":"Peticiones tipo Get."},{"location":"ejercicios/servlets/request/get/#peticiones-tipo-get","text":"","title":"Peticiones tipo Get."},{"location":"ejercicios/servlets/request/get/#ejercicio-1-enviar-una-peticion-get-y-capturarla","text":"","title":"Ejercicio 1: Enviar una petici\u00f3n get y capturarla."},{"location":"ejercicios/servlets/request/get/#usando-javascript","text":"En una petici\u00f3n GET, los atriburtos se env\u00edan por la url y con Javascript, lo podemos capturar. url . Estructura: \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u251c\u2500\u2500 WEB-INF \u2502 \u2502 \u2514\u2500\u2500 lib \u2502 \u251c\u2500\u2500 index.jsp \u2502 \u2514\u2500\u2500 procesa.jsp \u251c\u2500\u2500 build \u2502 \u2514\u2500\u2500 classes \u2514\u2500\u2500 src /peticiones/WebContent/index.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Request</title> </head> <body> <form action=\"procesa.jsp\" method=\"get\" > Ingrese valor: <input type=\"text\" name=\"atributo\" /> <br /> <button type=\"submit\">Enviar</button> </form> </body> </html> /peticiones/WebContent/procesa.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Insert title here</title> </head> <body> <h1> Los par\u00e1metros son: <div id=\"muestra\"></div> </h1> <script type=\"text/javascript\"> var urlText = window.location.href; var parametrosTxt = urlText.substring(urlText.indexOf('?') + 1); const elemento = document.getElementById(\"muestra\"); elemento.innerHTML = parametrosTxt; </script> </body> </html>","title":"Usando: javascript."},{"location":"ejercicios/servlets/request/get/#usando-scriptlets","text":"Con esta t\u00e9ctica podemos acceder a cada atributo, utilizando request.getParameter . Indicando que request ya existe est\u00e1ticamente en un archivo jsp , que ya sabemos que es un servlet. Estructura: \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u251c\u2500\u2500 WEB-INF \u2502 \u2502 \u2514\u2500\u2500 lib \u2502 \u251c\u2500\u2500 index.jsp \u2502 \u2514\u2500\u2500 procesa.jsp \u251c\u2500\u2500 build \u2502 \u2514\u2500\u2500 classes \u2514\u2500\u2500 src /peticiones/WebContent/index.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Request</title> </head> <body> <form action=\"procesa.jsp\" method=\"get\"> Ingrese valor: <input type=\"text\" name=\"atributo\" /> <br /> <button type=\"submit\">Enviar</button> </form> </body> </html> /peticiones/WebContent/procesa.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Insert title here</title> </head> <body> <% String atributo = request.getParameter(\"atributo\"); %> <h1>Captura desde el GET</h1> <ul> <li>Atributo: <strong><%=atributo%></strong></li> </ul> </body> </html>","title":"Usando Scriptlets."},{"location":"ejercicios/servlets/request/get/#usando-un-servlet","text":"Podemos usar de intermediario un Servlet para poder pasar los objetos req y resp , en el caso que requiera una mayor programaci\u00f3n. Estructura: \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u251c\u2500\u2500 WEB-INF \u2502 \u2502 \u251c\u2500\u2500 lib \u2502 \u2502 \u2514\u2500\u2500 web.xml \u2502 \u251c\u2500\u2500 index.jsp \u2502 \u2514\u2500\u2500 procesa.jsp \u2514\u2500\u2500 src \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 servlets \u2514\u2500\u2500 MuestraAtr.java `/peticiones/src/cl/lherrera/servlets/MuestraAtr.java package cl.lherrera.servlets; import java.io.IOException; import java.util.logging.Logger; import javax.servlet.ServletException; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; public class MuestraAtr extends HttpServlet { private static final long serialVersionUID = -3252248185584300198L; private static Logger milog = Logger.getLogger(MuestraAtr.class.getName()); @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { try { req.getRequestDispatcher(\"procesa.jsp\").forward(req, resp); } catch (ServletException | IOException e) { milog.info(e.getMessage()); } } } /peticiones/WebContent/WEB-INF/web.xml <web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\" version=\"3.1\"> <servlet> <servlet-name>muestra atributo</servlet-name> <servlet-class>cl.lherrera.servlets.MuestraAtr</servlet-class> </servlet> <servlet-mapping> <servlet-name>muestra atributo</servlet-name> <url-pattern>/procesa</url-pattern> </servlet-mapping> </web-app> /peticiones/WebContent/index.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Request</title> </head> <body> <form action=\"procesa\" method=\"get\"> Ingrese valor: <input type=\"text\" name=\"atributo\" /> <br /> <button type=\"submit\">Enviar</button> </form> </body> </html> /peticiones/WebContent/procesa.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Insert title here</title> </head> <body> <% String atributo = request.getParameter(\"atributo\"); %> <h1>Captura desde el GET</h1> <ul> <li>Atributo: <strong><%=atributo%></strong></li> </ul> </body> </html>","title":"Usando un Servlet."},{"location":"ejercicios/servlets/request/get/#usando-el-atributo-implicito-param-ver-mas","text":"Estructura: \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u251c\u2500\u2500 WEB-INF \u2502 \u2502 \u251c\u2500\u2500 lib \u2502 \u2502 \u2514\u2500\u2500 web.xml \u2502 \u251c\u2500\u2500 index.jsp \u2502 \u2514\u2500\u2500 procesa.jsp \u2514\u2500\u2500 src \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 servlets \u2514\u2500\u2500 MuestraAtr.java /peticiones/src/cl/lherrera/servlets/MuestraAtr.java package cl.lherrera.servlets; import java.io.IOException; import java.util.logging.Logger; import javax.servlet.ServletException; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; public class MuestraAtr extends HttpServlet { private static final long serialVersionUID = -3252248185584300198L; private static Logger milog = Logger.getLogger(MuestraAtr.class.getName()); @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { try { req.getRequestDispatcher(\"procesa.jsp\").forward(req, resp); } catch (ServletException | IOException e) { milog.info(e.getMessage()); } } } /peticiones/WebContent/WEB-INF/web.xml <web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\" version=\"3.1\"> <servlet> <servlet-name>muestra atributo</servlet-name> <servlet-class>cl.lherrera.servlets.MuestraAtr</servlet-class> </servlet> <servlet-mapping> <servlet-name>muestra atributo</servlet-name> <url-pattern>/procesa</url-pattern> </servlet-mapping> </web-app> /peticiones/WebContent/index.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Request</title> </head> <body> <form action=\"procesa\" method=\"get\"> Ingrese valor: <input type=\"text\" name=\"atributo\" /> <br /> <button type=\"submit\">Enviar</button> </form> </body> </html> <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Insert title here</title> </head> <body> <h1>Captura desde el GET</h1> <ul> <li>Atributo: <strong> ${param[\"atributo\"]} </strong></li> </ul> </body> </html>","title":"Usando el atributo impl\u00edcito param, ver m\u00e1s.."},{"location":"ejercicios/servlets/request/post-archivo/","text":"Env\u00edo de archivos mediante un Post. Ejercicio 1: Desde un formulario. Utilizar un formulario para subir un archivo desde la web. Soluci\u00f3n: Utilizando Scriptlets y un proyecto web din\u00e1mico, con apache tomcat 9. Estructura \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u251c\u2500\u2500 WEB-INF \u2502 \u2502 \u2514\u2500\u2500 lib \u2502 \u251c\u2500\u2500 index.jsp \u2502 \u2514\u2500\u2500 inicio.jsp \u2514\u2500\u2500 src \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 postfiles \u2514\u2500\u2500 Inicio.java /servfile/WebContent/index.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Ir a</title> </head> <body> <a href=inicio>Ir a...</a> </body> </html> /servfile/WebContent/inicio.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Subir archivo</title> </head> <body> <h1>Subir archivo</h1> <form method=\"post\" action=\"inicio\" enctype=\"multipart/form-data\"> Archivo: <input type=\"file\" value=\"Seleccionar\" name=\"file\" size=\"60\" /><br /> <br /> <input type=\"submit\" value=\"Subir\" /> </form> </body> </html> /servfile/src/cl/lherrera/postfiles/Inicio.java package cl.lherrera.postfiles; import java.io.File; import java.io.IOException; import java.util.Collection; import java.util.logging.Logger; import javax.servlet.ServletException; import javax.servlet.annotation.MultipartConfig; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.Part; @WebServlet(\"/inicio\") @MultipartConfig() public class Inicio extends HttpServlet{ private static final long serialVersionUID = -4126615102927566280L; private static Logger milog = Logger.getLogger(Inicio.class.getName()); private static final String SAVE_DIR = \"/Users/luisherrera/Desktop/TALENTO-PROS/servlets/servfile/WebContent/archivos\"; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { try { req.getRequestDispatcher(\"inicio.jsp\").forward(req, resp); } catch (ServletException | IOException e) { milog.severe(e.getMessage()); } } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) { // verificar direcctorio () File direcctorio = new File(SAVE_DIR); if (!direcctorio.exists()) direcctorio.mkdir(); try { // obtener partes del archivo Collection<Part> partesDelArchivo = req.getParts(); // guardar las partes del archivo for (Part part : partesDelArchivo) { // extrae el nombre del archivo al que pertenece la parte. String fileName = part.getSubmittedFileName(); // se escribe la parte part.write(SAVE_DIR + File.separator + fileName); } resp.getWriter().println(\"Archivo almacenado\"); } catch (IOException | ServletException e) { milog.info(e.getMessage()); } } } Ejercicio 2: Parte del nombre (m\u00e1s de un imput) Poder enviar un valor como parte del nombre del archivo que subiremos, usando la parte que tr\u00e1e al archivo y rescatando el par\u00e1metro que trae el nombre. \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u251c\u2500\u2500 WEB-INF \u2502 \u2502 \u2514\u2500\u2500 lib \u2502 \u251c\u2500\u2500 archivos \u2502 \u2502 \u2514\u2500\u2500 foo-database.db \u2502 \u251c\u2500\u2500 index.jsp \u2502 \u2514\u2500\u2500 inicio.jsp \u2514\u2500\u2500 src \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 postfiles \u2514\u2500\u2500 Inicio.java /filepostdos/WebContent/index.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Insert title here</title> </head> <body> <a href=inicio>Ir a...</a> </body> </html> /filepostdos/WebContent/inicio.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Subir archivo</title> </head> <body> <h1>Subir archivo</h1> <form method=\"post\" action=\"inicio\" enctype=\"multipart/form-data\"> Archivo: <input type=\"file\" value=\"Seleccionar\" name=\"file\" size=\"60\" /><br /> Nombre: <input type=\"text\" name=\"nombre\"> <br /> <input type=\"submit\" value=\"Subir\" /> </form> </body> </html> /filepostdos/src/cl/lherrera/postfiles/Inicio.java Se puede ver que podemos rescatar la parte que corresponde, adem\u00e1s de algunas conficuraciones para manejar la subida. package cl.lherrera.postfiles; import java.io.File; import java.io.IOException; import java.util.logging.Logger; import javax.servlet.ServletException; import javax.servlet.annotation.MultipartConfig; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.Part; @WebServlet(\"/inicio\") @MultipartConfig(fileSizeThreshold=1024*1024*2, // 2MB maxFileSize=1024*1024*10, // 10MB maxRequestSize=1024*1024*50) // 50MB public class Inicio extends HttpServlet{ private static final long serialVersionUID = -4126615102927566280L; private static Logger milog = Logger.getLogger(Inicio.class.getName()); private static final String SAVE_DIR = \"/Users/luisherrera/Desktop/TALENTO-PROS/servlets/filepostdos/WebContent/archivos\"; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { try { req.getRequestDispatcher(\"inicio.jsp\").forward(req, resp); } catch (ServletException | IOException e) { milog.severe(e.getMessage()); } } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) { // verificar direcctorio () File direcctorio = new File(SAVE_DIR); if (!direcctorio.exists()) direcctorio.mkdir(); try { // capturamos el nombre String nombre = req.getParameter(\"nombre\"); Part filePart = req.getPart(\"file\"); String fileName = nombre + \"-\" + filePart.getSubmittedFileName(); filePart.write(SAVE_DIR + File.separator + fileName); resp.getWriter().println(\"Archivo almacenado\"); } catch (IOException | ServletException e) { milog.info(e.getMessage()); } } } Ejercicio 3: El 2 en Maven, con web.xml. Usar create single project y en las propiedades del proyecto llevarlo a 1.8. Agregar la librer\u00eda de apache server runtime , para que se pueda trabajar con servlets o jsp. En project facets hay que agregar dynamic web module 4.0 . Finalmente en run on server, nos vamos a next y vemos que solamente est\u00e9 nuestro proyecto agregado, quitamos el resto, esto para que no heredar problemas. Estructura: \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u251c\u2500\u2500 WEB-INF \u2502 \u2502 \u251c\u2500\u2500 lib \u2502 \u2502 \u2514\u2500\u2500 web.xml \u2502 \u251c\u2500\u2500 index.jsp \u2502 \u2514\u2500\u2500 inicio.jsp \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 servlets \u2502 \u2502 \u2502 \u2514\u2500\u2500 Inicio.java \u2502 \u2502 \u2514\u2500\u2500 resources \u2502 \u2514\u2500\u2500 test \u2502 \u251c\u2500\u2500 java \u2502 \u2514\u2500\u2500 resources /servletstres/WebContent/WEB-INF/web.xml <web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\" version=\"3.1\"> <welcome-file-list> <welcome-file>index.jsp</welcome-file> <welcome-file>index.html</welcome-file> </welcome-file-list> <servlet> <servlet-name>inicio</servlet-name> <servlet-class>cl.lherrera.servlets.Inicio</servlet-class> <multipart-config> <max-file-size>20971520</max-file-size> <max-request-size>20971520</max-request-size> <file-size-threshold>20971520</file-size-threshold> </multipart-config> </servlet> <servlet-mapping> <servlet-name>inicio</servlet-name> <url-pattern>/inicio</url-pattern> </servlet-mapping> </web-app> /servletstres/WebContent/index.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Insert title here</title> </head> <body> <a href=inicio>Ir a...</a> </body> </html> /servletstres/WebContent/inicio.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Subir archivo</title> </head> <body> <h1>Subir archivo</h1> <form method=\"post\" action=\"inicio\" enctype=\"multipart/form-data\"> Archivo: <input type=\"file\" value=\"Seleccionar\" name=\"file\" size=\"60\" /><br /> Nombre: <input type=\"text\" name=\"nombre\"> <br /> <input type=\"submit\" value=\"Subir\" /> </form> </body> </html> /servletstres/pom.xml <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>cl.lherrera</groupId> <artifactId>servletstres</artifactId> <version>0.0.1-SNAPSHOT</version> </project> /servletstres/src/main/java/cl/lherrera/servlets/Inicio.java package cl.lherrera.servlets; import java.io.File; import java.io.IOException; import java.util.logging.Logger; import javax.servlet.ServletException; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.Part; public class Inicio extends HttpServlet{ private static final long serialVersionUID = -4126615102927566280L; private static Logger milog = Logger.getLogger(Inicio.class.getName()); private static final String SAVE_DIR = \"/Users/luisherrera/Desktop/TALENTO-PROS/servlets/servletstres/WebContent/archivos\"; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { try { req.getRequestDispatcher(\"inicio.jsp\").forward(req, resp); } catch (ServletException | IOException e) { milog.severe(e.getMessage()); } } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) { // verificar direcctorio () File direcctorio = new File(SAVE_DIR); if (!direcctorio.exists()) direcctorio.mkdir(); try { // capturamos el nombre String nombre = req.getParameter(\"nombre\"); Part filePart = req.getPart(\"file\"); String fileName = nombre + \"-\" + filePart.getSubmittedFileName(); filePart.write(SAVE_DIR + File.separator + fileName); resp.getWriter().println(\"Archivo almacenado\"); } catch (IOException | ServletException e) { milog.info(e.getMessage()); } } }","title":"Env\u00edo de archivos mediante un Post."},{"location":"ejercicios/servlets/request/post-archivo/#envio-de-archivos-mediante-un-post","text":"","title":"Env\u00edo de archivos mediante un Post."},{"location":"ejercicios/servlets/request/post-archivo/#ejercicio-1-desde-un-formulario","text":"Utilizar un formulario para subir un archivo desde la web.","title":"Ejercicio 1: Desde un formulario."},{"location":"ejercicios/servlets/request/post-archivo/#solucion","text":"Utilizando Scriptlets y un proyecto web din\u00e1mico, con apache tomcat 9. Estructura \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u251c\u2500\u2500 WEB-INF \u2502 \u2502 \u2514\u2500\u2500 lib \u2502 \u251c\u2500\u2500 index.jsp \u2502 \u2514\u2500\u2500 inicio.jsp \u2514\u2500\u2500 src \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 postfiles \u2514\u2500\u2500 Inicio.java /servfile/WebContent/index.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Ir a</title> </head> <body> <a href=inicio>Ir a...</a> </body> </html> /servfile/WebContent/inicio.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Subir archivo</title> </head> <body> <h1>Subir archivo</h1> <form method=\"post\" action=\"inicio\" enctype=\"multipart/form-data\"> Archivo: <input type=\"file\" value=\"Seleccionar\" name=\"file\" size=\"60\" /><br /> <br /> <input type=\"submit\" value=\"Subir\" /> </form> </body> </html> /servfile/src/cl/lherrera/postfiles/Inicio.java package cl.lherrera.postfiles; import java.io.File; import java.io.IOException; import java.util.Collection; import java.util.logging.Logger; import javax.servlet.ServletException; import javax.servlet.annotation.MultipartConfig; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.Part; @WebServlet(\"/inicio\") @MultipartConfig() public class Inicio extends HttpServlet{ private static final long serialVersionUID = -4126615102927566280L; private static Logger milog = Logger.getLogger(Inicio.class.getName()); private static final String SAVE_DIR = \"/Users/luisherrera/Desktop/TALENTO-PROS/servlets/servfile/WebContent/archivos\"; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { try { req.getRequestDispatcher(\"inicio.jsp\").forward(req, resp); } catch (ServletException | IOException e) { milog.severe(e.getMessage()); } } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) { // verificar direcctorio () File direcctorio = new File(SAVE_DIR); if (!direcctorio.exists()) direcctorio.mkdir(); try { // obtener partes del archivo Collection<Part> partesDelArchivo = req.getParts(); // guardar las partes del archivo for (Part part : partesDelArchivo) { // extrae el nombre del archivo al que pertenece la parte. String fileName = part.getSubmittedFileName(); // se escribe la parte part.write(SAVE_DIR + File.separator + fileName); } resp.getWriter().println(\"Archivo almacenado\"); } catch (IOException | ServletException e) { milog.info(e.getMessage()); } } }","title":"Soluci\u00f3n:"},{"location":"ejercicios/servlets/request/post-archivo/#ejercicio-2-parte-del-nombre-mas-de-un-imput","text":"Poder enviar un valor como parte del nombre del archivo que subiremos, usando la parte que tr\u00e1e al archivo y rescatando el par\u00e1metro que trae el nombre. \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u251c\u2500\u2500 WEB-INF \u2502 \u2502 \u2514\u2500\u2500 lib \u2502 \u251c\u2500\u2500 archivos \u2502 \u2502 \u2514\u2500\u2500 foo-database.db \u2502 \u251c\u2500\u2500 index.jsp \u2502 \u2514\u2500\u2500 inicio.jsp \u2514\u2500\u2500 src \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 postfiles \u2514\u2500\u2500 Inicio.java /filepostdos/WebContent/index.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Insert title here</title> </head> <body> <a href=inicio>Ir a...</a> </body> </html> /filepostdos/WebContent/inicio.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Subir archivo</title> </head> <body> <h1>Subir archivo</h1> <form method=\"post\" action=\"inicio\" enctype=\"multipart/form-data\"> Archivo: <input type=\"file\" value=\"Seleccionar\" name=\"file\" size=\"60\" /><br /> Nombre: <input type=\"text\" name=\"nombre\"> <br /> <input type=\"submit\" value=\"Subir\" /> </form> </body> </html> /filepostdos/src/cl/lherrera/postfiles/Inicio.java Se puede ver que podemos rescatar la parte que corresponde, adem\u00e1s de algunas conficuraciones para manejar la subida. package cl.lherrera.postfiles; import java.io.File; import java.io.IOException; import java.util.logging.Logger; import javax.servlet.ServletException; import javax.servlet.annotation.MultipartConfig; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.Part; @WebServlet(\"/inicio\") @MultipartConfig(fileSizeThreshold=1024*1024*2, // 2MB maxFileSize=1024*1024*10, // 10MB maxRequestSize=1024*1024*50) // 50MB public class Inicio extends HttpServlet{ private static final long serialVersionUID = -4126615102927566280L; private static Logger milog = Logger.getLogger(Inicio.class.getName()); private static final String SAVE_DIR = \"/Users/luisherrera/Desktop/TALENTO-PROS/servlets/filepostdos/WebContent/archivos\"; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { try { req.getRequestDispatcher(\"inicio.jsp\").forward(req, resp); } catch (ServletException | IOException e) { milog.severe(e.getMessage()); } } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) { // verificar direcctorio () File direcctorio = new File(SAVE_DIR); if (!direcctorio.exists()) direcctorio.mkdir(); try { // capturamos el nombre String nombre = req.getParameter(\"nombre\"); Part filePart = req.getPart(\"file\"); String fileName = nombre + \"-\" + filePart.getSubmittedFileName(); filePart.write(SAVE_DIR + File.separator + fileName); resp.getWriter().println(\"Archivo almacenado\"); } catch (IOException | ServletException e) { milog.info(e.getMessage()); } } }","title":"Ejercicio 2: Parte del nombre (m\u00e1s de un imput)"},{"location":"ejercicios/servlets/request/post-archivo/#ejercicio-3-el-2-en-maven-con-webxml","text":"Usar create single project y en las propiedades del proyecto llevarlo a 1.8. Agregar la librer\u00eda de apache server runtime , para que se pueda trabajar con servlets o jsp. En project facets hay que agregar dynamic web module 4.0 . Finalmente en run on server, nos vamos a next y vemos que solamente est\u00e9 nuestro proyecto agregado, quitamos el resto, esto para que no heredar problemas. Estructura: \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u251c\u2500\u2500 WEB-INF \u2502 \u2502 \u251c\u2500\u2500 lib \u2502 \u2502 \u2514\u2500\u2500 web.xml \u2502 \u251c\u2500\u2500 index.jsp \u2502 \u2514\u2500\u2500 inicio.jsp \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 servlets \u2502 \u2502 \u2502 \u2514\u2500\u2500 Inicio.java \u2502 \u2502 \u2514\u2500\u2500 resources \u2502 \u2514\u2500\u2500 test \u2502 \u251c\u2500\u2500 java \u2502 \u2514\u2500\u2500 resources /servletstres/WebContent/WEB-INF/web.xml <web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\" version=\"3.1\"> <welcome-file-list> <welcome-file>index.jsp</welcome-file> <welcome-file>index.html</welcome-file> </welcome-file-list> <servlet> <servlet-name>inicio</servlet-name> <servlet-class>cl.lherrera.servlets.Inicio</servlet-class> <multipart-config> <max-file-size>20971520</max-file-size> <max-request-size>20971520</max-request-size> <file-size-threshold>20971520</file-size-threshold> </multipart-config> </servlet> <servlet-mapping> <servlet-name>inicio</servlet-name> <url-pattern>/inicio</url-pattern> </servlet-mapping> </web-app> /servletstres/WebContent/index.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Insert title here</title> </head> <body> <a href=inicio>Ir a...</a> </body> </html> /servletstres/WebContent/inicio.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Subir archivo</title> </head> <body> <h1>Subir archivo</h1> <form method=\"post\" action=\"inicio\" enctype=\"multipart/form-data\"> Archivo: <input type=\"file\" value=\"Seleccionar\" name=\"file\" size=\"60\" /><br /> Nombre: <input type=\"text\" name=\"nombre\"> <br /> <input type=\"submit\" value=\"Subir\" /> </form> </body> </html> /servletstres/pom.xml <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>cl.lherrera</groupId> <artifactId>servletstres</artifactId> <version>0.0.1-SNAPSHOT</version> </project> /servletstres/src/main/java/cl/lherrera/servlets/Inicio.java package cl.lherrera.servlets; import java.io.File; import java.io.IOException; import java.util.logging.Logger; import javax.servlet.ServletException; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.Part; public class Inicio extends HttpServlet{ private static final long serialVersionUID = -4126615102927566280L; private static Logger milog = Logger.getLogger(Inicio.class.getName()); private static final String SAVE_DIR = \"/Users/luisherrera/Desktop/TALENTO-PROS/servlets/servletstres/WebContent/archivos\"; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { try { req.getRequestDispatcher(\"inicio.jsp\").forward(req, resp); } catch (ServletException | IOException e) { milog.severe(e.getMessage()); } } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) { // verificar direcctorio () File direcctorio = new File(SAVE_DIR); if (!direcctorio.exists()) direcctorio.mkdir(); try { // capturamos el nombre String nombre = req.getParameter(\"nombre\"); Part filePart = req.getPart(\"file\"); String fileName = nombre + \"-\" + filePart.getSubmittedFileName(); filePart.write(SAVE_DIR + File.separator + fileName); resp.getWriter().println(\"Archivo almacenado\"); } catch (IOException | ServletException e) { milog.info(e.getMessage()); } } }","title":"Ejercicio 3: El 2 en Maven, con web.xml."},{"location":"ejercicios/servlets/seguridad/seguridadDeclarativa/","text":"Seguridad Declarativa. Entendiendo los mayores aspectos de la seguridad en las aplicaciones web. Dato: El n\u00famero de puertos disponibles son todos los que podamos representar con 16 bits. Es decir, del 0 hasta el 65536. Existen dos aspectos importantes en la seguridad de las aplicaciones web. Prevenir que usuarios no autorizados accedan a datos sencibles. (autentificaci\u00f3n, X.509) Evitar que un atacante se haga con datos mientras est\u00e9 en tr\u00e1nsito.(ssl secure sockets layer) Ambos aspectos, son independientes en funcionamiento, las formas de solucionar las restricciones de acceso, son independientes de como se proteja esta informaci\u00f3n en el transporte. Es decir, que si dise\u00f1amos un sistema de autentificaci\u00f3n, no debemos redise\u00f1arlo por aspectos (ssl). Seguridad declarativa : Este tipo de seguridad, indica que ning\u00fan jsp o servlet, necesitar\u00e1 programaci\u00f3n extra para este prop\u00f3sito, en realidad, ser\u00e1 el servidor quien se encargar\u00e1 de este prop\u00f3sito. La configuraci\u00f3n de la seguridad ir\u00e1 en el web.xml . (Web application deployment descriptor). Desde ac\u00e1 definimos que estar\u00e1 restringido y qu\u00e9 no. a diferencia de la seguridad program\u00e1tica , en la que los servlets y jsp, poseer\u00e1n l\u00f3gica que indique personalizadamente que estar\u00e1 disponible y qu\u00e9 no. Una de las formas m\u00e1s comunes de seguridad declarativa es la FBA - (Form-Based Authentication), usualmente utilizado con campos como usuario y contrase\u00f1a, los cuales ser\u00e1n la forma de identificar a un usuario. Para que una autentificaci\u00f3n sea considerada robusta, debe cumplir con los siguientes 8 pasos recomendados: Configurar: nombres de usuario, contrase\u00f1as y roles. Cuando un usuario intenta acceder a un recurso protegido en una aplicaci\u00f3n que usa autenticaci\u00f3n basada en formularios, el sistema env\u00eda autom\u00e1ticamente al usuario a un formulario HTML para solicitar un nombre de usuario y contrase\u00f1a, verifica que la contrase\u00f1a coincida con el usuario, determina qu\u00e9 roles abstractos (usuario normal, administrador, ejecutivo, etc.) al que pertenece ese usuario y ve si alguno de esos roles, tiene permiso para acceder al recurso. Si es as\u00ed, el servidor redirige al usuario a la p\u00e1gina solicitada originalmente. De lo contrario, el servidor redirige al usuario a una p\u00e1gina de error. La buena noticia con respecto a este proceso es que el servidor (contenedor), hace mucho trabajo por nosotros. La mala noticia es que la tarea de asociar usuarios con contrase\u00f1as y roles l\u00f3gicos es espec\u00edfica del servidor. Por lo tanto, aunque no tendr\u00eda que cambiar el archivo web.xml ni ninguno de los c\u00f3digos de servlet y JSP; para mover una aplicaci\u00f3n web segura de un sistema a otro, a\u00fan tendr\u00eda que hacer cambios personalizados en cada sistema para configurar los usuarios y contrase\u00f1as Establecer contrase\u00f1as con Tomcat Tomcat permite a los desarrolladores avanzados, configurar esquemas personalizados de administraci\u00f3n de nombre de usuario y contrase\u00f1a (por ejemplo, acceder a una base de datos, buscar en el archivo UNIX / etc / passwd, verificar la configuraci\u00f3n de la cuenta de usuario de Windows o hacer una llamada Kerberos). Para m\u00e1s detalles, consulte http://jakarta.apache.org/tomcat/tomcat-5.5-doc/realm-howto.html. Sin embargo, esta configuraci\u00f3n requiere mucho trabajo, por lo que Tomcat tambi\u00e9n proporciona un mecanismo predeterminado para usar en las pruebas. Con este mecanismo, Tomcat almacena nombres de usuario, contrase\u00f1as y roles en tomcat_dir / conf / tomcat-users.xml. Este archivo debe contener un encabezado XML seguido de un elemento tomcat-users que contenga cualquier n\u00famero de roles y elementos de usuario. Cada elemento de rol debe tener un atributo de nombre de rol. Cada elemento de usuario debe tener tres atributos: nombre de usuario, contrase\u00f1a (la contrase\u00f1a de texto sin formato) y roles (una lista separada por comas de nombres de roles l\u00f3gicos). Ejemplo: /Applications/contenedor/apache-tomcat-9.0.31_bkp20202303/conf/tomcat-users.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> <tomcat-users xmlns=\"http://tomcat.apache.org/xml\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://tomcat.apache.org/xml tomcat-users.xsd\" version=\"1.0\"> <!-- NOTE: By default, no user is included in the \"manager-gui\" role required to operate the \"/manager/html\" web application. If you wish to use this app, you must define such a user - the username and password are arbitrary. It is strongly recommended that you do NOT use one of the users in the commented out section below since they are intended for use with the examples web application. --> <!-- NOTE: The sample user and role entries below are intended for use with the examples web application. They are wrapped in a comment and thus are ignored when reading this file. If you wish to configure these users for use with the examples web application, do not forget to remove the <!.. ..> that surrounds them. You will also need to set the passwords to something appropriate. --> <!-- <role rolename=\"tomcat\"/> <role rolename=\"role1\"/> <user username=\"tomcat\" password=\"<must-be-changed>\" roles=\"tomcat\"/> <user username=\"both\" password=\"<must-be-changed>\" roles=\"tomcat,role1\"/> <user username=\"role1\" password=\"<must-be-changed>\" roles=\"role1\"/> --> <!-- se agrega este para poder entrar en la administraci\u00f3n --> <role rolename=\"manager-gui\"/> <user username=\"admin\" password=\"admin\" roles=\"manager-gui\"/> </tomcat-users> Tenga en cuenta, que la estrategia predeterminada de Tomcat para almacenar contrase\u00f1as sin cifrar es deficiente para las aplicaciones implementadas reales. Primero, un intruso que obtiene acceso al sistema de archivos del servidor puede obtener todas las contrase\u00f1as. En segundo lugar, incluso los administradores de sistemas autorizados para acceder a los recursos del servidor no deber\u00edan poder obtener las contrase\u00f1as de los usuarios. De hecho, debido a que muchos usuarios reutilizan las contrase\u00f1as en m\u00faltiples sistemas, las contrase\u00f1as nunca deben almacenarse en texto claro. En cambio, deben cifrarse con un algoritmo que no se puede revertir f\u00e1cilmente. Luego, cuando un usuario proporciona una contrase\u00f1a, se cifra y la versi\u00f3n cifrada se compara con la contrase\u00f1a cifrada almacenada. Sin embargo, el enfoque predeterminado de Tomcat facilita la configuraci\u00f3n y prueba de aplicaciones web seguras. Solo tenga en cuenta que para aplicaciones reales querr\u00e1 reemplazar el esquema de contrase\u00f1a simple basado en archivos con algo m\u00e1s robusto (por ejemplo, una base de datos o una llamada al sistema a Kerberos o al sistema de cuenta de usuario de Windows). Decirle al servidor que est\u00e1 utilizando la autenticaci\u00f3n basada en formularios; Designaci\u00f3n de ubicaciones de inicio de sesi\u00f3n y p\u00e1ginas de error de inicio de sesi\u00f3n : Usaremos el elemento login-config en el descriptor de implementaci\u00f3n (web.xml) para controlar el m\u00e9todo de autenticaci\u00f3n. Recuerde que este archivo va en el directorio WEB-INF de su aplicaci\u00f3n web. Aunque algunos servidores admiten archivos web.xml no est\u00e1ndar (por ejemplo, Tomcat tiene uno en tomcat_dir/conf que proporciona valores predeterminados para m\u00faltiples aplicaciones web), esos archivos son completamente espec\u00edficos del servidor. Solo abordamos la versi\u00f3n est\u00e1ndar que se incluye en el directorio WEB-INF de la aplicaci\u00f3n web. Para usar la autenticaci\u00f3n basada en formularios, proporcione un valor de FORM para el subelemento del m\u00e9todo auth y use el subelemento form-login-config para proporcionar las ubicaciones del inicio de sesi\u00f3n ( form-login-page ) y login-failure ( form-error-page ). m\u00e1s adelante, explicamos exactamente qu\u00e9 deben contener estos dos archivos. Por ahora, sin embargo, tenga en cuenta que nada exige que utilicen contenido din\u00e1mico. Por lo tanto, estas p\u00e1ginas pueden consistir en JSP o HTML ordinario. Por ejemplo, el siguiente c\u00f3digo, muestra parte de un archivo web.xml que estipula que el contenedor usa autenticaci\u00f3n basada en formularios. Los usuarios no autenticados que intenten acceder a recursos protegidos ser\u00e1n redirigidos a http: //host/webAppPrefix/login.jsp . Si inician sesi\u00f3n correctamente, volver\u00e1n a cualquier recurso al que intentaron acceder por primera vez. Si falla su intento de inicio de sesi\u00f3n, ser\u00e1n redirigidos a http: //host/webAppPrefix/login-error.html . <web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\" version=\"3.1\"> <!-- ... --> <login-config> <auth-method>FORM</auth-method> <form-login-config> <form-login-page>/login.jsp</form-login-page> <form-error-page>/login-error.jsp</form-error-page> <form-login-config> </login-config> <!-- ... --> </web-app> Crear la p\u00e1gina de inicio de sesi\u00f3n El elemento login-config le dice al servidor que use autenticaci\u00f3n basada en formularios y que redirija a los usuarios no autenticados a una p\u00e1gina designada. Ok; Pero, \u00bfqu\u00e9 deber\u00edas poner en esa p\u00e1gina? La respuesta es sorprendentemente simple: todo lo que requiere la p\u00e1gina de inicio de sesi\u00f3n es un formulario con una ACCI\u00d3N de j_security_check , un campo de texto llamado j_username y un campo de contrase\u00f1a llamado j_password . Y, debido a que el uso de GET nos muestra todo el contenido de los puntos de los campos de contrase\u00f1a (protegiendo la contrase\u00f1a de miradas indiscretas que miran por encima del hombro del usuario), todos los formularios que tienen campos de contrase\u00f1a deben usar un M\u00c9TODO de POST. Nunca utilizas GET con campos de contrase\u00f1a porque la contrase\u00f1a se mostrar\u00e1 en texto claro en la barra de direcciones del navegador. Tenga en cuenta que j_security_check es un nombre \"m\u00e1gico\"; no lo introduces con un \"/\", incluso si tu p\u00e1gina de inicio de sesi\u00f3n est\u00e1 en un subdirectorio del directorio principal de la aplicaci\u00f3n web. <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Document</title> </head> <body> <form action=\"j_security_check\" method=\"post\"> <table> <tr> <td>Nombre de usuario: <input type=\"text\" name=\"j_username\" id=\"\"></td> </tr> <tr> <td>Contrase\u00f1a: <input type=\"password\" name=\"j_password\" id=\"\"></td> </tr> </table> </form> </body> </html> Esa fue la p\u00e1gina para iniciar sesi\u00f3n. \u00bfQu\u00e9 pasa con una p\u00e1gina para cerrar sesi\u00f3n? La sesi\u00f3n deber\u00eda agotar el tiempo, pero \u00bfqu\u00e9 sucede si los usuarios desean cerrar sesi\u00f3n inmediatamente sin cerrar el navegador? La especificaci\u00f3n del servlet exige que invalidar la HttpSession deber\u00eda cerrar la sesi\u00f3n de los usuarios y hacer que se vuelvan a autenticar la pr\u00f3xima vez que intenten acceder a un recurso protegido. Por lo tanto, puede crear una p\u00e1gina de cierre de sesi\u00f3n haciendo un servlet o una p\u00e1gina JSP que busque la sesi\u00f3n y la invalide o cierre. Esto contrasta con la autenticaci\u00f3n B\u00c1SICA, donde el cierre de sesi\u00f3n no es compatible sin que el usuario cierre y reinicie el navegador. Restricci\u00f3n del acceso directo a la p\u00e1gina de inicio de sesi\u00f3n. Como explicamos, cuando un usuario no autenticado intenta acceder a un recurso protegido, el servidor redirige autom\u00e1ticamente a la p\u00e1gina de inicio de sesi\u00f3n. Desafortunadamente, la especificaci\u00f3n del servlet no obliga a los servidores compatibles a usar la redirecci\u00f3n \"detr\u00e1s de escena\" (es decir, utilizando el m\u00e9todo RequestDispatcher.forward) a la p\u00e1gina JSP especificada en el elemento form-login-page. Los servidores son libres de usar el m\u00e9todo HttpServletResponse.sendRedirect, y algunos servidores modernos lo hacen. Los contenedores que utilizan el m\u00e9todo sendRedirect exponen la URL completa de la p\u00e1gina de inicio de sesi\u00f3n al cliente. El usuario desprevenido puede invocar m\u00e1s tarde esta URL, intentando iniciar sesi\u00f3n en la aplicaci\u00f3n por primera vez (el usuario a\u00fan no se autenticar\u00eda), iniciar sesi\u00f3n con un nombre de usuario diferente mientras ya est\u00e1 conectado, o simplemente presionando el bot\u00f3n Atr\u00e1s del navegador. La especificaci\u00f3n del servlet tampoco determina qu\u00e9 deben hacer los servidores compatibles si el usuario intenta acceder directamente a la p\u00e1gina de inicio de sesi\u00f3n, como en los escenarios descritos. Por lo tanto, el resultado es altamente espec\u00edfico del servidor. El servidor puede reenviar al usuario a una p\u00e1gina que no existe, lo que da como resultado un error HTTP 404 o producir alg\u00fan otro resultado que el usuario no espera. Obviamente, ninguno de estos resultados es bueno. Podemos evitar parcialmente este comportamiento impredecible, si colocamos algo de l\u00f3gica en la p\u00e1gina de inicio de sesi\u00f3n. La l\u00f3gica deber\u00eda proteger a dos tipos de usuarios para que no accedan directamente a la p\u00e1gina de inicio de sesi\u00f3n: un usuario no autenticado (a\u00fan no ha iniciado sesi\u00f3n) y un usuario autenticado (intenta acceder a la p\u00e1gina de inicio de sesi\u00f3n que ya ha iniciado sesi\u00f3n). <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <% response.setHeader(\"Cache-Control\", \"no-store, no-cache, must-revalidate\"); response.setHeader(\"Pragma\", \"no-cache\"); response.serDateHeader(\"Expires\", -1); // verificamos si ya estamos autentificados if(request.getRemoteUser() = != null){ response.sendRedirect(\"logout-confirmation.jsp); } %> <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Document</title> </head> <body> <form action=\"j_security_check\" method=\"post\"> <table> <tr> <td>Nombre de usuario: <input type=\"text\" name=\"j_username\" id=\"\"></td> </tr> <tr> <td>Contrase\u00f1a: <input type=\"password\" name=\"j_password\" id=\"\"></td> </tr> </table> </form> </body> </html> La primera l\u00ednea, que establece el encabezado de respuesta HTTP versi\u00f3n 1.1 Cache-Control en \"no-store, no-cache, must-revalidate\", asegura que el usuario nunca ver\u00e1 la versi\u00f3n en cach\u00e9 del navegador de la p\u00e1gina de inicio de sesi\u00f3n. Del mismo modo, para satisfacer la versi\u00f3n 1.0 de HTTP, tambi\u00e9n configuramos los encabezados Pragma y Expires. Las siguientes l\u00edneas usan el m\u00e9todo getRemoteUser , que devuelve el nombre de usuario del usuario actualmente conectado. Si el usuario no ha iniciado sesi\u00f3n, devuelve nulo. Por lo tanto, si getRemoteUser devuelve, de hecho, un valor no nulo, podemos estar seguros de que este usuario ya ha iniciado sesi\u00f3n e invoca la p\u00e1gina de inicio de sesi\u00f3n directamente. En este caso, simplemente redirigimos al usuario a alg\u00fan logout-confirm.jsp , que le da al usuario la opci\u00f3n de cerrar sesi\u00f3n formalmente. Realmente no hay una manera limpia y f\u00e1cil de proteger al usuario no autenticado de acceder directamente a la p\u00e1gina de inicio de sesi\u00f3n. Una manera sucia ser\u00eda redirigir ciegamente cada solicitud de la p\u00e1gina de inicio de sesi\u00f3n a un recurso protegido (por ejemplo, /protectedA.jsp), haciendo que el servidor active el proceso de autenticaci\u00f3n y \"volver a servir\" la p\u00e1gina de inicio de sesi\u00f3n al cliente como parte de ese proceso. Este enfoque resolver\u00eda el problema de un usuario no autenticado que invoca directamente la p\u00e1gina de inicio de sesi\u00f3n. Sin embargo, tambi\u00e9n introducir\u00eda algunos efectos secundarios. \u00bfQu\u00e9 suceder\u00eda si un usuario no autenticado intenta invocar otro recurso protegido, /protectedB.jsp ? El servidor servir\u00e1 la p\u00e1gina de inicio de sesi\u00f3n, y si el inicio de sesi\u00f3n es exitoso, el usuario ser\u00e1 reenviado a /protectedA.jsp. Sin embargo, el usuario solicit\u00f3 ir a /protectedB.jsp ! El usuario conectado pero frustrado ahora se ver\u00eda obligado a navegar nuevamente por su sitio web para llegar a /protectedB.jsp . Por lo tanto, si su aplicaci\u00f3n web se implementar\u00e1 en un servidor que utiliza sendRedirect para reenviar al usuario a la p\u00e1gina de inicio de sesi\u00f3n, debe decidir qu\u00e9 efecto secundario es m\u00e1s perjudicial para su aplicaci\u00f3n y ajustarlo en consecuencia. M\u00e1s importante, el problema con todos los enfoques discutidos es que obligan a escribir c\u00f3digo relacionado con la seguridad, que es antit\u00e9tico al modelo de seguridad declarativo. Creaci\u00f3n de la p\u00e1gina para informar intentos de inicio de sesi\u00f3n fallidos La p\u00e1gina de inicio de sesi\u00f3n debe contener un formulario con una ACCI\u00d3N de prop\u00f3sito especial (j_security_check), un campo de texto con un nombre especial (j_username) y un campo de contrase\u00f1a con otro nombre reservado (j_password). Cuando el usuario intenta acceder a un recurso protegido, el servidor presenta autom\u00e1ticamente la p\u00e1gina de inicio de sesi\u00f3n. El usuario completa el formulario de inicio de sesi\u00f3n y lo env\u00eda. Si las credenciales presentadas (por ejemplo, nombre de usuario y contrase\u00f1a) son las de un usuario legal pero el usuario no pertenece a la categor\u00eda de usuarios que pueden acceder al recurso solicitado, el servidor rechazar\u00e1 la solicitud con un c\u00f3digo de error HTTP 403 Prohibido. Recuerde que con el descriptor de despliegue, puede especificar una p\u00e1gina personalizada que se mostrar\u00e1 cuando se produzca un error HTTP. Sin embargo, si el nombre de usuario y la contrase\u00f1a no son los de un usuario legal, el servidor enviar\u00e1 autom\u00e1ticamente al usuario a la p\u00e1gina login-failure especificada en el elemento form-error-page. Entonces, \u00bfqu\u00e9 se requiere para estar en la p\u00e1gina de inicio de sesi\u00f3n fallido? \u00a1Nada! Esta p\u00e1gina es arbitraria; puede contener un enlace a una secci\u00f3n sin restricciones de la aplicaci\u00f3n web o un simple mensaje de \"error de inicio de sesi\u00f3n\". Especificar las URL que deber\u00edan estar protegidas con contrase\u00f1a El elemento login-config le dice al servidor qu\u00e9 m\u00e9todo de autenticaci\u00f3n usar. Bien, pero \u00bfc\u00f3mo se designan las URL espec\u00edficas a las que se debe restringir el acceso? La designaci\u00f3n de URL restringidas y la descripci\u00f3n de la protecci\u00f3n que deber\u00edan tener, es el prop\u00f3sito del elemento security-constraint . El elemento security-constraint , contiene cuatro subelementos posibles: display-name (un elemento opcional que proporciona un nombre para que los IDE lo usen), web-resource-collection (un elemento obligatorio que especifica las URL que deben protegerse), auth-restricci\u00f3n (un elemento opcional que designa los roles abstractos que deber\u00edan tener acceso a las URL) y user-data-constraint (un elemento opcional que especifica si se requiere SSL). Tenga en cuenta que se permiten m\u00faltiples web-resource-collection dentro de security-constraint . Ejemplo del uso de security-constraint . El siguiente c\u00f3digo, le indica al servidor que requiera contrase\u00f1as para todas las URL del formulario http://host/webAppPrefix/sensible/loQueSea . Los usuarios que proporcionan contrase\u00f1as y pertenecen a los roles l\u00f3gicos de administrator o executive tendr\u00e1n acceso; a todos los dem\u00e1s se les negar\u00e1. El resto de esta subsecci\u00f3n, proporciona detalles sobre los elementos de web-resource-collection , auth-constraint y display-name elements . <web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\" version=\"3.1\"> <security-constraint> <web-resource-collection> <web-resource-name>Sensible</web-resource-name> <url-pattern>/sensible/*</url-pattern> </web-resource-collection> <auth-constraint> <role-name>administrator</role-name> <role-name>executive</role-name> </auth-constraint> </security-constraint> </web-app> web-resource-collection Este subelemento security-constraint , identifica los recursos que deben protegerse. Cada elemento security-constraint debe contener una o m\u00e1s web-resource-collection ; todos los dem\u00e1s subelementos securitycontraint son opcionales. El elemento web-resource-collection , consiste en un elemento web-resource-name que proporciona un nombre de identificaci\u00f3n arbitrario, un url-pattern , que identifica las URL que deben protegerse, un elemento opcional http-method , que designa los vervos HTTP a los que se aplica la protecci\u00f3n (GET, POST, etc .; el valor predeterminado es todos los m\u00e9todos), y un elemento de descripci\u00f3n opcional que proporciona documentaci\u00f3n. Por ejemplo, la siguiente entrada web-resource-collection , (dentro de un elemento security-constraint ), especifica la protecci\u00f3n con contrase\u00f1a que debe aplicarse a todos los documenteos del directorio propietario (y subdirecctorios) y la p\u00e1gina delete-account.jsp en el direcctorio de arministraci\u00f3n. Debido a que se aplican restricciones de seguridad para solicitar la URL, no el directorio f\u00edsico, esta restricci\u00f3n de seguridad se aplicar\u00eda igualmente a cualquier servlet asignado a las URL que contengan el directorio propietario en ellas. Por ejemplo, un servlet mapeado con un patr\u00f3n /propietario/CompanySecretOfTheDayServlet , tambi\u00e9n estar\u00eda protegido por la siguiente restricci\u00f3n de seguridad: <web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\" version=\"3.1\"> <security-constraint> <web-resource-collection> <web-resource-name>Propietary</web-resource-name> <url-pattern>/propietary/*</url-pattern> </web-resource-collection> <web-resource-collection> <web-resource-name>Account Deletion</web-resource-name> <url-pattern>/admin/delete-account.jsp</url-pattern> </web-resource-collection> </security-constraint> </web-app> Es importante, proteger el acceso al servlet y el jsp que lo contiene. Al proteger los env\u00edos de formularios, es importante que proteja la p\u00e1gina que tiene el formulario, as\u00ed como el servlet al que se env\u00eda el formulario. Un error com\u00fan es proteger solo el formulario y dejar el servlet sin protecci\u00f3n. Esta supervisi\u00f3n permite a los usuarios omitir el formulario, ya sea de forma deliberada o accidental (por ejemplo, siguiendo un marcador), y acceder al servlet sin ser autenticado. Al proteger los env\u00edos de formularios, aseg\u00farese de proteger el servlet al que se env\u00eda el formulario adem\u00e1s de la p\u00e1gina del formulario. Tambi\u00e9n es importante tener en cuenta que el url-pattern se aplica solo a los clientes que acceden directamente a los recursos. En particular, no se aplica a las p\u00e1ginas a las que se accede a trav\u00e9s de la arquitectura MVC con un RequestDispatcher o por los medios similares de jsp: forward o jsp: include . Su asimetr\u00eda es buena si se usa correctamente. Por ejemplo, con la arquitectura MVC, un servlet busca datos, los coloca en beans y reenv\u00eda la solicitud a una p\u00e1gina JSP que extrae los datos de los beans y los muestra. Gustar\u00eda entonces, que nunca se acceda directamente a la p\u00e1gina JSP, sino que solo se acceda a trav\u00e9s del servlet que configura los beans que utilizar\u00e1 la p\u00e1gina. Los elementos url-pattern y auth-restriction , pueden proporcionar esta garant\u00eda al declarar que ning\u00fan usuario tiene acceso directo a la p\u00e1gina JSP. Sin embargo, tenga en cuenta que el enfoque m\u00e1s simple para este problema es colocar las p\u00e1ginas JSP dentro del directorio WEB-INF. Este comportamiento asim\u00e9trico puede sorprender a los desarrolladores y permitirles proporcionar accidentalmente acceso sin restricciones a los recursos que deben protegerse. Estas protecciones se aplican solo al acceso directo del cliente. El modelo de seguridad no se aplica a las p\u00e1ginas a las que se accede mediante RequestDispatcher , jsp: forward o jsp: include . auth-constraint Mientras que el elemento web-resource-collection , designa las URL que deben protegerse, el elemento auth-constraint , designa a los usuarios que deber\u00edan tener acceso a estos recursos . Debe contener uno o m\u00e1s elementos role-name , que identifiquen la clase de usuarios que tienen acceso y, opcionalmente, un elemento description que describa el rol. Por ejemplo, la siguiente parte del elemento security-constraint , en web.xml establece que solo los usuarios designados como Administrators o Big Kahunas (o ambos) deber\u00edan tener acceso al recurso designado. <web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\" version=\"3.1\"> <security-constraint> <!-- qu\u00e9 estamos restringiendo --> <web-resource-collection> <web-resource-name>Propietary</web-resource-name> <url-pattern>/propietary/*</url-pattern> </web-resource-collection> <web-resource-collection> <web-resource-name>Account Deletion</web-resource-name> <url-pattern>/admin/delete-account.jsp</url-pattern> </web-resource-collection> <!-- quienes tinen acceso a lo restringido --> <auth-constraint> <role-name>administrator</role-name> <role-name>kahuna</role-name> </auth-constraint> </security-constraint> </web-app> Si desea que todos los usuarios autenticados tengan acceso a un recurso, use * como role-name . Para restringir el acceso de cualquier persona a un grupo de recursos, use un elemento auth-constraint vac\u00edo (por ejemplo, ). El elemento auth-constraint vac\u00edo, significa que ning\u00fan rol tiene acceso. Aunque a primera vista parece in\u00fatil negar el acceso a todos los usuarios, recuerde que estas restricciones de seguridad solo se aplican al acceso directo del cliente. Entonces, por ejemplo, suponga que tiene un fragmento JSP que est\u00e1 destinado a insertarse en otro archivo con jsp: include . O suponga que tiene una p\u00e1gina JSP que es el destino de reenv\u00edo de un servlet que est\u00e1 utilizando un RequestDispatcher como parte de la arquitectura MVC. En ambos casos, los usuarios deben tener prohibido acceder directamente a la p\u00e1gina JSP. Un elemento de restricci\u00f3n de seguridad con un elemento auth-constraint vac\u00edo impondr\u00eda esta restricci\u00f3n. Sin embargo, como mencionamos, colocar estos recursos dentro del directorio WEB-INF es la soluci\u00f3n m\u00e1s simple. display-name Este, rara vez, utilizado subelemento opcional de security-constraint . Le da un nombre a la entrada de restricci\u00f3n de seguridad. Este nombre puede ser utilizado por un IDE u otra herramienta gr\u00e1fica. Listar todos los posibles roles o (roles abstractos).","title":"Seguridad Declarativa."},{"location":"ejercicios/servlets/seguridad/seguridadDeclarativa/#seguridad-declarativa","text":"","title":"Seguridad Declarativa."},{"location":"ejercicios/servlets/seguridad/seguridadDeclarativa/#entendiendo-los-mayores-aspectos-de-la-seguridad-en-las-aplicaciones-web","text":"Dato: El n\u00famero de puertos disponibles son todos los que podamos representar con 16 bits. Es decir, del 0 hasta el 65536. Existen dos aspectos importantes en la seguridad de las aplicaciones web. Prevenir que usuarios no autorizados accedan a datos sencibles. (autentificaci\u00f3n, X.509) Evitar que un atacante se haga con datos mientras est\u00e9 en tr\u00e1nsito.(ssl secure sockets layer) Ambos aspectos, son independientes en funcionamiento, las formas de solucionar las restricciones de acceso, son independientes de como se proteja esta informaci\u00f3n en el transporte. Es decir, que si dise\u00f1amos un sistema de autentificaci\u00f3n, no debemos redise\u00f1arlo por aspectos (ssl). Seguridad declarativa : Este tipo de seguridad, indica que ning\u00fan jsp o servlet, necesitar\u00e1 programaci\u00f3n extra para este prop\u00f3sito, en realidad, ser\u00e1 el servidor quien se encargar\u00e1 de este prop\u00f3sito. La configuraci\u00f3n de la seguridad ir\u00e1 en el web.xml . (Web application deployment descriptor). Desde ac\u00e1 definimos que estar\u00e1 restringido y qu\u00e9 no. a diferencia de la seguridad program\u00e1tica , en la que los servlets y jsp, poseer\u00e1n l\u00f3gica que indique personalizadamente que estar\u00e1 disponible y qu\u00e9 no. Una de las formas m\u00e1s comunes de seguridad declarativa es la FBA - (Form-Based Authentication), usualmente utilizado con campos como usuario y contrase\u00f1a, los cuales ser\u00e1n la forma de identificar a un usuario. Para que una autentificaci\u00f3n sea considerada robusta, debe cumplir con los siguientes 8 pasos recomendados: Configurar: nombres de usuario, contrase\u00f1as y roles. Cuando un usuario intenta acceder a un recurso protegido en una aplicaci\u00f3n que usa autenticaci\u00f3n basada en formularios, el sistema env\u00eda autom\u00e1ticamente al usuario a un formulario HTML para solicitar un nombre de usuario y contrase\u00f1a, verifica que la contrase\u00f1a coincida con el usuario, determina qu\u00e9 roles abstractos (usuario normal, administrador, ejecutivo, etc.) al que pertenece ese usuario y ve si alguno de esos roles, tiene permiso para acceder al recurso. Si es as\u00ed, el servidor redirige al usuario a la p\u00e1gina solicitada originalmente. De lo contrario, el servidor redirige al usuario a una p\u00e1gina de error. La buena noticia con respecto a este proceso es que el servidor (contenedor), hace mucho trabajo por nosotros. La mala noticia es que la tarea de asociar usuarios con contrase\u00f1as y roles l\u00f3gicos es espec\u00edfica del servidor. Por lo tanto, aunque no tendr\u00eda que cambiar el archivo web.xml ni ninguno de los c\u00f3digos de servlet y JSP; para mover una aplicaci\u00f3n web segura de un sistema a otro, a\u00fan tendr\u00eda que hacer cambios personalizados en cada sistema para configurar los usuarios y contrase\u00f1as Establecer contrase\u00f1as con Tomcat Tomcat permite a los desarrolladores avanzados, configurar esquemas personalizados de administraci\u00f3n de nombre de usuario y contrase\u00f1a (por ejemplo, acceder a una base de datos, buscar en el archivo UNIX / etc / passwd, verificar la configuraci\u00f3n de la cuenta de usuario de Windows o hacer una llamada Kerberos). Para m\u00e1s detalles, consulte http://jakarta.apache.org/tomcat/tomcat-5.5-doc/realm-howto.html. Sin embargo, esta configuraci\u00f3n requiere mucho trabajo, por lo que Tomcat tambi\u00e9n proporciona un mecanismo predeterminado para usar en las pruebas. Con este mecanismo, Tomcat almacena nombres de usuario, contrase\u00f1as y roles en tomcat_dir / conf / tomcat-users.xml. Este archivo debe contener un encabezado XML seguido de un elemento tomcat-users que contenga cualquier n\u00famero de roles y elementos de usuario. Cada elemento de rol debe tener un atributo de nombre de rol. Cada elemento de usuario debe tener tres atributos: nombre de usuario, contrase\u00f1a (la contrase\u00f1a de texto sin formato) y roles (una lista separada por comas de nombres de roles l\u00f3gicos). Ejemplo: /Applications/contenedor/apache-tomcat-9.0.31_bkp20202303/conf/tomcat-users.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> <tomcat-users xmlns=\"http://tomcat.apache.org/xml\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://tomcat.apache.org/xml tomcat-users.xsd\" version=\"1.0\"> <!-- NOTE: By default, no user is included in the \"manager-gui\" role required to operate the \"/manager/html\" web application. If you wish to use this app, you must define such a user - the username and password are arbitrary. It is strongly recommended that you do NOT use one of the users in the commented out section below since they are intended for use with the examples web application. --> <!-- NOTE: The sample user and role entries below are intended for use with the examples web application. They are wrapped in a comment and thus are ignored when reading this file. If you wish to configure these users for use with the examples web application, do not forget to remove the <!.. ..> that surrounds them. You will also need to set the passwords to something appropriate. --> <!-- <role rolename=\"tomcat\"/> <role rolename=\"role1\"/> <user username=\"tomcat\" password=\"<must-be-changed>\" roles=\"tomcat\"/> <user username=\"both\" password=\"<must-be-changed>\" roles=\"tomcat,role1\"/> <user username=\"role1\" password=\"<must-be-changed>\" roles=\"role1\"/> --> <!-- se agrega este para poder entrar en la administraci\u00f3n --> <role rolename=\"manager-gui\"/> <user username=\"admin\" password=\"admin\" roles=\"manager-gui\"/> </tomcat-users> Tenga en cuenta, que la estrategia predeterminada de Tomcat para almacenar contrase\u00f1as sin cifrar es deficiente para las aplicaciones implementadas reales. Primero, un intruso que obtiene acceso al sistema de archivos del servidor puede obtener todas las contrase\u00f1as. En segundo lugar, incluso los administradores de sistemas autorizados para acceder a los recursos del servidor no deber\u00edan poder obtener las contrase\u00f1as de los usuarios. De hecho, debido a que muchos usuarios reutilizan las contrase\u00f1as en m\u00faltiples sistemas, las contrase\u00f1as nunca deben almacenarse en texto claro. En cambio, deben cifrarse con un algoritmo que no se puede revertir f\u00e1cilmente. Luego, cuando un usuario proporciona una contrase\u00f1a, se cifra y la versi\u00f3n cifrada se compara con la contrase\u00f1a cifrada almacenada. Sin embargo, el enfoque predeterminado de Tomcat facilita la configuraci\u00f3n y prueba de aplicaciones web seguras. Solo tenga en cuenta que para aplicaciones reales querr\u00e1 reemplazar el esquema de contrase\u00f1a simple basado en archivos con algo m\u00e1s robusto (por ejemplo, una base de datos o una llamada al sistema a Kerberos o al sistema de cuenta de usuario de Windows). Decirle al servidor que est\u00e1 utilizando la autenticaci\u00f3n basada en formularios; Designaci\u00f3n de ubicaciones de inicio de sesi\u00f3n y p\u00e1ginas de error de inicio de sesi\u00f3n : Usaremos el elemento login-config en el descriptor de implementaci\u00f3n (web.xml) para controlar el m\u00e9todo de autenticaci\u00f3n. Recuerde que este archivo va en el directorio WEB-INF de su aplicaci\u00f3n web. Aunque algunos servidores admiten archivos web.xml no est\u00e1ndar (por ejemplo, Tomcat tiene uno en tomcat_dir/conf que proporciona valores predeterminados para m\u00faltiples aplicaciones web), esos archivos son completamente espec\u00edficos del servidor. Solo abordamos la versi\u00f3n est\u00e1ndar que se incluye en el directorio WEB-INF de la aplicaci\u00f3n web. Para usar la autenticaci\u00f3n basada en formularios, proporcione un valor de FORM para el subelemento del m\u00e9todo auth y use el subelemento form-login-config para proporcionar las ubicaciones del inicio de sesi\u00f3n ( form-login-page ) y login-failure ( form-error-page ). m\u00e1s adelante, explicamos exactamente qu\u00e9 deben contener estos dos archivos. Por ahora, sin embargo, tenga en cuenta que nada exige que utilicen contenido din\u00e1mico. Por lo tanto, estas p\u00e1ginas pueden consistir en JSP o HTML ordinario. Por ejemplo, el siguiente c\u00f3digo, muestra parte de un archivo web.xml que estipula que el contenedor usa autenticaci\u00f3n basada en formularios. Los usuarios no autenticados que intenten acceder a recursos protegidos ser\u00e1n redirigidos a http: //host/webAppPrefix/login.jsp . Si inician sesi\u00f3n correctamente, volver\u00e1n a cualquier recurso al que intentaron acceder por primera vez. Si falla su intento de inicio de sesi\u00f3n, ser\u00e1n redirigidos a http: //host/webAppPrefix/login-error.html . <web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\" version=\"3.1\"> <!-- ... --> <login-config> <auth-method>FORM</auth-method> <form-login-config> <form-login-page>/login.jsp</form-login-page> <form-error-page>/login-error.jsp</form-error-page> <form-login-config> </login-config> <!-- ... --> </web-app> Crear la p\u00e1gina de inicio de sesi\u00f3n El elemento login-config le dice al servidor que use autenticaci\u00f3n basada en formularios y que redirija a los usuarios no autenticados a una p\u00e1gina designada. Ok; Pero, \u00bfqu\u00e9 deber\u00edas poner en esa p\u00e1gina? La respuesta es sorprendentemente simple: todo lo que requiere la p\u00e1gina de inicio de sesi\u00f3n es un formulario con una ACCI\u00d3N de j_security_check , un campo de texto llamado j_username y un campo de contrase\u00f1a llamado j_password . Y, debido a que el uso de GET nos muestra todo el contenido de los puntos de los campos de contrase\u00f1a (protegiendo la contrase\u00f1a de miradas indiscretas que miran por encima del hombro del usuario), todos los formularios que tienen campos de contrase\u00f1a deben usar un M\u00c9TODO de POST. Nunca utilizas GET con campos de contrase\u00f1a porque la contrase\u00f1a se mostrar\u00e1 en texto claro en la barra de direcciones del navegador. Tenga en cuenta que j_security_check es un nombre \"m\u00e1gico\"; no lo introduces con un \"/\", incluso si tu p\u00e1gina de inicio de sesi\u00f3n est\u00e1 en un subdirectorio del directorio principal de la aplicaci\u00f3n web. <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Document</title> </head> <body> <form action=\"j_security_check\" method=\"post\"> <table> <tr> <td>Nombre de usuario: <input type=\"text\" name=\"j_username\" id=\"\"></td> </tr> <tr> <td>Contrase\u00f1a: <input type=\"password\" name=\"j_password\" id=\"\"></td> </tr> </table> </form> </body> </html> Esa fue la p\u00e1gina para iniciar sesi\u00f3n. \u00bfQu\u00e9 pasa con una p\u00e1gina para cerrar sesi\u00f3n? La sesi\u00f3n deber\u00eda agotar el tiempo, pero \u00bfqu\u00e9 sucede si los usuarios desean cerrar sesi\u00f3n inmediatamente sin cerrar el navegador? La especificaci\u00f3n del servlet exige que invalidar la HttpSession deber\u00eda cerrar la sesi\u00f3n de los usuarios y hacer que se vuelvan a autenticar la pr\u00f3xima vez que intenten acceder a un recurso protegido. Por lo tanto, puede crear una p\u00e1gina de cierre de sesi\u00f3n haciendo un servlet o una p\u00e1gina JSP que busque la sesi\u00f3n y la invalide o cierre. Esto contrasta con la autenticaci\u00f3n B\u00c1SICA, donde el cierre de sesi\u00f3n no es compatible sin que el usuario cierre y reinicie el navegador. Restricci\u00f3n del acceso directo a la p\u00e1gina de inicio de sesi\u00f3n. Como explicamos, cuando un usuario no autenticado intenta acceder a un recurso protegido, el servidor redirige autom\u00e1ticamente a la p\u00e1gina de inicio de sesi\u00f3n. Desafortunadamente, la especificaci\u00f3n del servlet no obliga a los servidores compatibles a usar la redirecci\u00f3n \"detr\u00e1s de escena\" (es decir, utilizando el m\u00e9todo RequestDispatcher.forward) a la p\u00e1gina JSP especificada en el elemento form-login-page. Los servidores son libres de usar el m\u00e9todo HttpServletResponse.sendRedirect, y algunos servidores modernos lo hacen. Los contenedores que utilizan el m\u00e9todo sendRedirect exponen la URL completa de la p\u00e1gina de inicio de sesi\u00f3n al cliente. El usuario desprevenido puede invocar m\u00e1s tarde esta URL, intentando iniciar sesi\u00f3n en la aplicaci\u00f3n por primera vez (el usuario a\u00fan no se autenticar\u00eda), iniciar sesi\u00f3n con un nombre de usuario diferente mientras ya est\u00e1 conectado, o simplemente presionando el bot\u00f3n Atr\u00e1s del navegador. La especificaci\u00f3n del servlet tampoco determina qu\u00e9 deben hacer los servidores compatibles si el usuario intenta acceder directamente a la p\u00e1gina de inicio de sesi\u00f3n, como en los escenarios descritos. Por lo tanto, el resultado es altamente espec\u00edfico del servidor. El servidor puede reenviar al usuario a una p\u00e1gina que no existe, lo que da como resultado un error HTTP 404 o producir alg\u00fan otro resultado que el usuario no espera. Obviamente, ninguno de estos resultados es bueno. Podemos evitar parcialmente este comportamiento impredecible, si colocamos algo de l\u00f3gica en la p\u00e1gina de inicio de sesi\u00f3n. La l\u00f3gica deber\u00eda proteger a dos tipos de usuarios para que no accedan directamente a la p\u00e1gina de inicio de sesi\u00f3n: un usuario no autenticado (a\u00fan no ha iniciado sesi\u00f3n) y un usuario autenticado (intenta acceder a la p\u00e1gina de inicio de sesi\u00f3n que ya ha iniciado sesi\u00f3n). <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <% response.setHeader(\"Cache-Control\", \"no-store, no-cache, must-revalidate\"); response.setHeader(\"Pragma\", \"no-cache\"); response.serDateHeader(\"Expires\", -1); // verificamos si ya estamos autentificados if(request.getRemoteUser() = != null){ response.sendRedirect(\"logout-confirmation.jsp); } %> <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Document</title> </head> <body> <form action=\"j_security_check\" method=\"post\"> <table> <tr> <td>Nombre de usuario: <input type=\"text\" name=\"j_username\" id=\"\"></td> </tr> <tr> <td>Contrase\u00f1a: <input type=\"password\" name=\"j_password\" id=\"\"></td> </tr> </table> </form> </body> </html> La primera l\u00ednea, que establece el encabezado de respuesta HTTP versi\u00f3n 1.1 Cache-Control en \"no-store, no-cache, must-revalidate\", asegura que el usuario nunca ver\u00e1 la versi\u00f3n en cach\u00e9 del navegador de la p\u00e1gina de inicio de sesi\u00f3n. Del mismo modo, para satisfacer la versi\u00f3n 1.0 de HTTP, tambi\u00e9n configuramos los encabezados Pragma y Expires. Las siguientes l\u00edneas usan el m\u00e9todo getRemoteUser , que devuelve el nombre de usuario del usuario actualmente conectado. Si el usuario no ha iniciado sesi\u00f3n, devuelve nulo. Por lo tanto, si getRemoteUser devuelve, de hecho, un valor no nulo, podemos estar seguros de que este usuario ya ha iniciado sesi\u00f3n e invoca la p\u00e1gina de inicio de sesi\u00f3n directamente. En este caso, simplemente redirigimos al usuario a alg\u00fan logout-confirm.jsp , que le da al usuario la opci\u00f3n de cerrar sesi\u00f3n formalmente. Realmente no hay una manera limpia y f\u00e1cil de proteger al usuario no autenticado de acceder directamente a la p\u00e1gina de inicio de sesi\u00f3n. Una manera sucia ser\u00eda redirigir ciegamente cada solicitud de la p\u00e1gina de inicio de sesi\u00f3n a un recurso protegido (por ejemplo, /protectedA.jsp), haciendo que el servidor active el proceso de autenticaci\u00f3n y \"volver a servir\" la p\u00e1gina de inicio de sesi\u00f3n al cliente como parte de ese proceso. Este enfoque resolver\u00eda el problema de un usuario no autenticado que invoca directamente la p\u00e1gina de inicio de sesi\u00f3n. Sin embargo, tambi\u00e9n introducir\u00eda algunos efectos secundarios. \u00bfQu\u00e9 suceder\u00eda si un usuario no autenticado intenta invocar otro recurso protegido, /protectedB.jsp ? El servidor servir\u00e1 la p\u00e1gina de inicio de sesi\u00f3n, y si el inicio de sesi\u00f3n es exitoso, el usuario ser\u00e1 reenviado a /protectedA.jsp. Sin embargo, el usuario solicit\u00f3 ir a /protectedB.jsp ! El usuario conectado pero frustrado ahora se ver\u00eda obligado a navegar nuevamente por su sitio web para llegar a /protectedB.jsp . Por lo tanto, si su aplicaci\u00f3n web se implementar\u00e1 en un servidor que utiliza sendRedirect para reenviar al usuario a la p\u00e1gina de inicio de sesi\u00f3n, debe decidir qu\u00e9 efecto secundario es m\u00e1s perjudicial para su aplicaci\u00f3n y ajustarlo en consecuencia. M\u00e1s importante, el problema con todos los enfoques discutidos es que obligan a escribir c\u00f3digo relacionado con la seguridad, que es antit\u00e9tico al modelo de seguridad declarativo. Creaci\u00f3n de la p\u00e1gina para informar intentos de inicio de sesi\u00f3n fallidos La p\u00e1gina de inicio de sesi\u00f3n debe contener un formulario con una ACCI\u00d3N de prop\u00f3sito especial (j_security_check), un campo de texto con un nombre especial (j_username) y un campo de contrase\u00f1a con otro nombre reservado (j_password). Cuando el usuario intenta acceder a un recurso protegido, el servidor presenta autom\u00e1ticamente la p\u00e1gina de inicio de sesi\u00f3n. El usuario completa el formulario de inicio de sesi\u00f3n y lo env\u00eda. Si las credenciales presentadas (por ejemplo, nombre de usuario y contrase\u00f1a) son las de un usuario legal pero el usuario no pertenece a la categor\u00eda de usuarios que pueden acceder al recurso solicitado, el servidor rechazar\u00e1 la solicitud con un c\u00f3digo de error HTTP 403 Prohibido. Recuerde que con el descriptor de despliegue, puede especificar una p\u00e1gina personalizada que se mostrar\u00e1 cuando se produzca un error HTTP. Sin embargo, si el nombre de usuario y la contrase\u00f1a no son los de un usuario legal, el servidor enviar\u00e1 autom\u00e1ticamente al usuario a la p\u00e1gina login-failure especificada en el elemento form-error-page. Entonces, \u00bfqu\u00e9 se requiere para estar en la p\u00e1gina de inicio de sesi\u00f3n fallido? \u00a1Nada! Esta p\u00e1gina es arbitraria; puede contener un enlace a una secci\u00f3n sin restricciones de la aplicaci\u00f3n web o un simple mensaje de \"error de inicio de sesi\u00f3n\". Especificar las URL que deber\u00edan estar protegidas con contrase\u00f1a El elemento login-config le dice al servidor qu\u00e9 m\u00e9todo de autenticaci\u00f3n usar. Bien, pero \u00bfc\u00f3mo se designan las URL espec\u00edficas a las que se debe restringir el acceso? La designaci\u00f3n de URL restringidas y la descripci\u00f3n de la protecci\u00f3n que deber\u00edan tener, es el prop\u00f3sito del elemento security-constraint . El elemento security-constraint , contiene cuatro subelementos posibles: display-name (un elemento opcional que proporciona un nombre para que los IDE lo usen), web-resource-collection (un elemento obligatorio que especifica las URL que deben protegerse), auth-restricci\u00f3n (un elemento opcional que designa los roles abstractos que deber\u00edan tener acceso a las URL) y user-data-constraint (un elemento opcional que especifica si se requiere SSL). Tenga en cuenta que se permiten m\u00faltiples web-resource-collection dentro de security-constraint . Ejemplo del uso de security-constraint . El siguiente c\u00f3digo, le indica al servidor que requiera contrase\u00f1as para todas las URL del formulario http://host/webAppPrefix/sensible/loQueSea . Los usuarios que proporcionan contrase\u00f1as y pertenecen a los roles l\u00f3gicos de administrator o executive tendr\u00e1n acceso; a todos los dem\u00e1s se les negar\u00e1. El resto de esta subsecci\u00f3n, proporciona detalles sobre los elementos de web-resource-collection , auth-constraint y display-name elements . <web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\" version=\"3.1\"> <security-constraint> <web-resource-collection> <web-resource-name>Sensible</web-resource-name> <url-pattern>/sensible/*</url-pattern> </web-resource-collection> <auth-constraint> <role-name>administrator</role-name> <role-name>executive</role-name> </auth-constraint> </security-constraint> </web-app> web-resource-collection Este subelemento security-constraint , identifica los recursos que deben protegerse. Cada elemento security-constraint debe contener una o m\u00e1s web-resource-collection ; todos los dem\u00e1s subelementos securitycontraint son opcionales. El elemento web-resource-collection , consiste en un elemento web-resource-name que proporciona un nombre de identificaci\u00f3n arbitrario, un url-pattern , que identifica las URL que deben protegerse, un elemento opcional http-method , que designa los vervos HTTP a los que se aplica la protecci\u00f3n (GET, POST, etc .; el valor predeterminado es todos los m\u00e9todos), y un elemento de descripci\u00f3n opcional que proporciona documentaci\u00f3n. Por ejemplo, la siguiente entrada web-resource-collection , (dentro de un elemento security-constraint ), especifica la protecci\u00f3n con contrase\u00f1a que debe aplicarse a todos los documenteos del directorio propietario (y subdirecctorios) y la p\u00e1gina delete-account.jsp en el direcctorio de arministraci\u00f3n. Debido a que se aplican restricciones de seguridad para solicitar la URL, no el directorio f\u00edsico, esta restricci\u00f3n de seguridad se aplicar\u00eda igualmente a cualquier servlet asignado a las URL que contengan el directorio propietario en ellas. Por ejemplo, un servlet mapeado con un patr\u00f3n /propietario/CompanySecretOfTheDayServlet , tambi\u00e9n estar\u00eda protegido por la siguiente restricci\u00f3n de seguridad: <web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\" version=\"3.1\"> <security-constraint> <web-resource-collection> <web-resource-name>Propietary</web-resource-name> <url-pattern>/propietary/*</url-pattern> </web-resource-collection> <web-resource-collection> <web-resource-name>Account Deletion</web-resource-name> <url-pattern>/admin/delete-account.jsp</url-pattern> </web-resource-collection> </security-constraint> </web-app> Es importante, proteger el acceso al servlet y el jsp que lo contiene. Al proteger los env\u00edos de formularios, es importante que proteja la p\u00e1gina que tiene el formulario, as\u00ed como el servlet al que se env\u00eda el formulario. Un error com\u00fan es proteger solo el formulario y dejar el servlet sin protecci\u00f3n. Esta supervisi\u00f3n permite a los usuarios omitir el formulario, ya sea de forma deliberada o accidental (por ejemplo, siguiendo un marcador), y acceder al servlet sin ser autenticado. Al proteger los env\u00edos de formularios, aseg\u00farese de proteger el servlet al que se env\u00eda el formulario adem\u00e1s de la p\u00e1gina del formulario. Tambi\u00e9n es importante tener en cuenta que el url-pattern se aplica solo a los clientes que acceden directamente a los recursos. En particular, no se aplica a las p\u00e1ginas a las que se accede a trav\u00e9s de la arquitectura MVC con un RequestDispatcher o por los medios similares de jsp: forward o jsp: include . Su asimetr\u00eda es buena si se usa correctamente. Por ejemplo, con la arquitectura MVC, un servlet busca datos, los coloca en beans y reenv\u00eda la solicitud a una p\u00e1gina JSP que extrae los datos de los beans y los muestra. Gustar\u00eda entonces, que nunca se acceda directamente a la p\u00e1gina JSP, sino que solo se acceda a trav\u00e9s del servlet que configura los beans que utilizar\u00e1 la p\u00e1gina. Los elementos url-pattern y auth-restriction , pueden proporcionar esta garant\u00eda al declarar que ning\u00fan usuario tiene acceso directo a la p\u00e1gina JSP. Sin embargo, tenga en cuenta que el enfoque m\u00e1s simple para este problema es colocar las p\u00e1ginas JSP dentro del directorio WEB-INF. Este comportamiento asim\u00e9trico puede sorprender a los desarrolladores y permitirles proporcionar accidentalmente acceso sin restricciones a los recursos que deben protegerse. Estas protecciones se aplican solo al acceso directo del cliente. El modelo de seguridad no se aplica a las p\u00e1ginas a las que se accede mediante RequestDispatcher , jsp: forward o jsp: include . auth-constraint Mientras que el elemento web-resource-collection , designa las URL que deben protegerse, el elemento auth-constraint , designa a los usuarios que deber\u00edan tener acceso a estos recursos . Debe contener uno o m\u00e1s elementos role-name , que identifiquen la clase de usuarios que tienen acceso y, opcionalmente, un elemento description que describa el rol. Por ejemplo, la siguiente parte del elemento security-constraint , en web.xml establece que solo los usuarios designados como Administrators o Big Kahunas (o ambos) deber\u00edan tener acceso al recurso designado. <web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\" version=\"3.1\"> <security-constraint> <!-- qu\u00e9 estamos restringiendo --> <web-resource-collection> <web-resource-name>Propietary</web-resource-name> <url-pattern>/propietary/*</url-pattern> </web-resource-collection> <web-resource-collection> <web-resource-name>Account Deletion</web-resource-name> <url-pattern>/admin/delete-account.jsp</url-pattern> </web-resource-collection> <!-- quienes tinen acceso a lo restringido --> <auth-constraint> <role-name>administrator</role-name> <role-name>kahuna</role-name> </auth-constraint> </security-constraint> </web-app> Si desea que todos los usuarios autenticados tengan acceso a un recurso, use * como role-name . Para restringir el acceso de cualquier persona a un grupo de recursos, use un elemento auth-constraint vac\u00edo (por ejemplo, ). El elemento auth-constraint vac\u00edo, significa que ning\u00fan rol tiene acceso. Aunque a primera vista parece in\u00fatil negar el acceso a todos los usuarios, recuerde que estas restricciones de seguridad solo se aplican al acceso directo del cliente. Entonces, por ejemplo, suponga que tiene un fragmento JSP que est\u00e1 destinado a insertarse en otro archivo con jsp: include . O suponga que tiene una p\u00e1gina JSP que es el destino de reenv\u00edo de un servlet que est\u00e1 utilizando un RequestDispatcher como parte de la arquitectura MVC. En ambos casos, los usuarios deben tener prohibido acceder directamente a la p\u00e1gina JSP. Un elemento de restricci\u00f3n de seguridad con un elemento auth-constraint vac\u00edo impondr\u00eda esta restricci\u00f3n. Sin embargo, como mencionamos, colocar estos recursos dentro del directorio WEB-INF es la soluci\u00f3n m\u00e1s simple. display-name Este, rara vez, utilizado subelemento opcional de security-constraint . Le da un nombre a la entrada de restricci\u00f3n de seguridad. Este nombre puede ser utilizado por un IDE u otra herramienta gr\u00e1fica. Listar todos los posibles roles o (roles abstractos).","title":"Entendiendo los mayores aspectos de la seguridad en las aplicaciones web."},{"location":"ejercicios/servlets/seguridad/ssl/","text":"Seguridad SSL. Fuente: https://www.sslmarket.es/ssl/help-trabajar-con-los-certificados-en-java-keystore/ Ejemplo Crear un sitio web en Java , utilizando el servidor Apache Tomcat , que pueda ser accedido mediante el protocolo https . El servidor escucha mediante la configuraci\u00f3n que existe en el archivo server.xml , este archivo est\u00e1 en el directorio conf del servidor apache que descargamos. Cuando agregamos el servidor a eclipse, se crea una copia para eclipse, as\u00ed que debemos hacerlo desde el ide. En el explorador del IDE hay un directorio llamado Servers dentro est\u00e1 el servidor y el acceso a este archivo. All\u00ed podremos ver su configuraci\u00f3n. (depende la versi\u00f3n de Tomcat, puede que las opciones sean diferentes) <Connector connectionTimeout=\"20000\" port=\"8080\" protocol=\"HTTP/1.1\" redirectPort=\"8443\"/> Creamos la siguiente aplicaci\u00f3n maven transformada mediante facets-module a web, con la siguiente estructura: ./ \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u251c\u2500\u2500 WEB-INF \u2502 \u2502 \u251c\u2500\u2500 lib \u2502 \u2502 \u2514\u2500\u2500 web.xml \u2502 \u2514\u2500\u2500 index.jsp \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2514\u2500\u2500 resources \u2502 \u2514\u2500\u2500 test \u2502 \u251c\u2500\u2500 java \u2502 \u2514\u2500\u2500 resources \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u2514\u2500\u2500 META-INF \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 maven \u2502 \u2514\u2500\u2500 cl.lherrera \u2502 \u2514\u2500\u2500 auth002 \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2514\u2500\u2500 pom.xml \u2514\u2500\u2500 test-classes 18 directories, 7 files Todo generado con la herramienta incluyendo el descriptor de despliegue web.xml . El \u00fanico archivo generado es el index.jsp /auth002/WebContent/index.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Insert title here</title> </head> <body>hola mundo </body> </html> Ejecutamos el servidor y accedemos mediante el siguiente enlace: http://localhost:8080/auth002/ . Si ahora intentamos acceder, pero usando un protocolo de comunicaci\u00f3n segura de (Security Socket Layer) no podremos conectarnos debido a que no tenemos habilitado ese puerto en el servidor. Hay que activarlo; pero antes necesitamos un certificado ssl, estos los podemos comprar; pero existe una forma de crear uno propio aunque no sea validado por una entidad certificada, nos servir\u00e1 para entender como configurar estas caracteristicas. Generamos entonces el contenedor de llaves que nos servir\u00e1 como certificado de prueba. keytool es la herramienta que realiza esta tarea, lo escribimos en la consola para confirmar su funcionamiento. \u279c auth002 keytool Herramienta de Gesti\u00f3n de Certificados y Claves Comandos: -certreq Genera una solicitud de certificado -changealias Cambia un alias de entrada -delete Suprime una entrada -exportcert Exporta el certificado -genkeypair Genera un par de claves -genseckey Genera un clave secreta -gencert Genera un certificado a partir de una solicitud de certificado -importcert Importa un certificado o una cadena de certificados -importpass Importa una contrase\u00f1a -importkeystore Importa una o todas las entradas desde otro almac\u00e9n de claves -keypasswd Cambia la contrase\u00f1a de clave de una entrada -list Enumera las entradas de un almac\u00e9n de claves -printcert Imprime el contenido de un certificado -printcertreq Imprime el contenido de una solicitud de certificado -printcrl Imprime el contenido de un archivo CRL -storepasswd Cambia la contrase\u00f1a de almac\u00e9n de un almac\u00e9n de claves Utilice \"keytool -command_name -help\" para la sintaxis de nombre_comando Si no, hay que usar la ruta absoluta C:\\Program Files\\Java\\jdk1.8.0_121\\bin nos vamos a una carpeta donde querramos almacenar las llaves. En mi caso: /Users/luisherrera/projects/certificadosSSL/talentoDigital Ejecutamos el siguiente comando: keytool -genkey -alias test -keyalg RSA -keystore test.jks -keysize 2048 Donde el alias es el nombre del contenedor de llaves y el keystore es el nombre (en realidad la ruta) del archivo .jks, que es un form\u00e1to de una implementaci\u00f3n JSSE para certificados, podemos transformarlo a una implementaci\u00f3n del tipo web PKCS12 , pero eso lo veremos m\u00e1s adelante. Es decir que con este comando, fabricaremos nuestro certificado llamado test.jks (si compramos uno, hay otro comando para importarlo que est\u00e1 en el link de la fuente). \u279c talentoDigital keytool -genkey -alias test -keyalg RSA -keystore test.jks -keysize 2048 Introduzca la contrase\u00f1a del almac\u00e9n de claves: Volver a escribir la contrase\u00f1a nueva: \u00bfCu\u00e1les son su nombre y su apellido? [Unknown]: luis herrera \u00bfCu\u00e1l es el nombre de su unidad de organizaci\u00f3n? [Unknown]: aiep \u00bfCu\u00e1l es el nombre de su organizaci\u00f3n? [Unknown]: aiep \u00bfCu\u00e1l es el nombre de su ciudad o localidad? [Unknown]: santiao \u00bfCu\u00e1l es el nombre de su estado o provincia? [Unknown]: nunoa \u00bfCu\u00e1l es el c\u00f3digo de pa\u00eds de dos letras de la unidad? [Unknown]: cl \u00bfEs correcto CN=luis herrera, OU=aiep, O=aiep, L=santiao, ST=nunoa, C=cl? [no]: si Introduzca la contrase\u00f1a de clave para <test> (INTRO si es la misma contrase\u00f1a que la del almac\u00e9n de claves): Volver a escribir la contrase\u00f1a nueva: Warning: El almac\u00e9n de claves JKS utiliza un formato propietario. Se recomienda migrar a PKCS12, que es un formato est\u00e1ndar del sector que utiliza \"keytool -importkeystore -srckeystore test.jks -destkeystore test.jks -deststoretype pkcs12\". Migramos el estandar PKCS12 , para quitar el warning. \u279c talentoDigital keytool -importkeystore -srckeystore test.jks -destkeystore test.jks -deststoretype pkcs12 Introduzca la contrase\u00f1a de almac\u00e9n de claves de origen: La entrada del alias test se ha importado correctamente. Comando de importaci\u00f3n completado: 1 entradas importadas correctamente, 0 entradas incorrectas o canceladas Warning: Se ha migrado \"test.jks\" a Non JKS/JCEKS. Se ha realizado la copia de seguridad del almac\u00e9n de claves JKS como \"test.jks.old\". \u279c talentoDigital La contrase\u00f1a usada en todo es changeit , ya que es la contrase\u00f1a por defecto que usa TOMCAT y para mantener el estandar lo dejamos tal cual. ./ \u251c\u2500\u2500 test.jks \u2514\u2500\u2500 test.jks.old 0 directories, 2 files Luego debemos ir al directoriio Servers que est\u00e1 en eclipse (si es que a\u00f1adimos el servidor anteriormente). y agregamos lo en server.xml . <Connector SSLEnabled=\"true\" maxThreads=\"150\" port=\"8443\" protocol=\"org.apache.coyote.http11.Http11NioProtocol\"> <SSLHostConfig> <Certificate certificateKeystoreFile=\"/Users/luisherrera/projects/certificadosSSL/talentoDigital/test.jks\" type=\"RSA\"/> </SSLHostConfig> </Connector> Quedando el archivo de la siguiente forma: server.xml . <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --><!-- Note: A \"Server\" is not itself a \"Container\", so you may not define subcomponents such as \"Valves\" at this level. Documentation at /docs/config/server.html --><Server port=\"8005\" shutdown=\"SHUTDOWN\"> <Listener className=\"org.apache.catalina.startup.VersionLoggerListener\"/> <!-- Security listener. Documentation at /docs/config/listeners.html <Listener className=\"org.apache.catalina.security.SecurityListener\" /> --> <!--APR library loader. Documentation at /docs/apr.html --> <Listener SSLEngine=\"on\" className=\"org.apache.catalina.core.AprLifecycleListener\"/> <!-- Prevent memory leaks due to use of particular java/javax APIs--> <Listener className=\"org.apache.catalina.core.JreMemoryLeakPreventionListener\"/> <Listener className=\"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener\"/> <Listener className=\"org.apache.catalina.core.ThreadLocalLeakPreventionListener\"/> <!-- Global JNDI resources Documentation at /docs/jndi-resources-howto.html --> <GlobalNamingResources> <!-- Editable user database that can also be used by UserDatabaseRealm to authenticate users --> <Resource auth=\"Container\" description=\"User database that can be updated and saved\" factory=\"org.apache.catalina.users.MemoryUserDatabaseFactory\" name=\"UserDatabase\" pathname=\"conf/tomcat-users.xml\" type=\"org.apache.catalina.UserDatabase\"/> </GlobalNamingResources> <!-- A \"Service\" is a collection of one or more \"Connectors\" that share a single \"Container\" Note: A \"Service\" is not itself a \"Container\", so you may not define subcomponents such as \"Valves\" at this level. Documentation at /docs/config/service.html --> <Service name=\"Catalina\"> <!--The connectors can use a shared executor, you can define one or more named thread pools--> <!-- <Executor name=\"tomcatThreadPool\" namePrefix=\"catalina-exec-\" maxThreads=\"150\" minSpareThreads=\"4\"/> --> <!-- A \"Connector\" represents an endpoint by which requests are received and responses are returned. Documentation at : Java HTTP Connector: /docs/config/http.html Java AJP Connector: /docs/config/ajp.html APR (HTTP/AJP) Connector: /docs/apr.html Define a non-SSL/TLS HTTP/1.1 Connector on port 8080 --> <Connector connectionTimeout=\"20000\" port=\"8080\" protocol=\"HTTP/1.1\" redirectPort=\"8443\"/> <!-- A \"Connector\" using the shared thread pool--> <!-- <Connector executor=\"tomcatThreadPool\" port=\"8080\" protocol=\"HTTP/1.1\" connectionTimeout=\"20000\" redirectPort=\"8443\" /> --> <!-- Define an SSL/TLS HTTP/1.1 Connector on port 8443 This connector uses the NIO implementation. The default SSLImplementation will depend on the presence of the APR/native library and the useOpenSSL attribute of the AprLifecycleListener. Either JSSE or OpenSSL style configuration may be used regardless of the SSLImplementation selected. JSSE style configuration is used below. --> <!-- <Connector port=\"8443\" protocol=\"org.apache.coyote.http11.Http11NioProtocol\" maxThreads=\"150\" SSLEnabled=\"true\"> <SSLHostConfig> <Certificate certificateKeystoreFile=\"conf/localhost-rsa.jks\" type=\"RSA\" /> </SSLHostConfig> </Connector> --> <Connector SSLEnabled=\"true\" maxThreads=\"150\" port=\"8443\" protocol=\"org.apache.coyote.http11.Http11NioProtocol\"> <SSLHostConfig> <Certificate certificateKeystoreFile=\"/Users/luisherrera/projects/certificadosSSL/talentoDigital/test.jks\" type=\"RSA\"/> </SSLHostConfig> </Connector> <!-- Define an SSL/TLS HTTP/1.1 Connector on port 8443 with HTTP/2 This connector uses the APR/native implementation which always uses OpenSSL for TLS. Either JSSE or OpenSSL style configuration may be used. OpenSSL style configuration is used below. --> <!-- <Connector port=\"8443\" protocol=\"org.apache.coyote.http11.Http11AprProtocol\" maxThreads=\"150\" SSLEnabled=\"true\" > <UpgradeProtocol className=\"org.apache.coyote.http2.Http2Protocol\" /> <SSLHostConfig> <Certificate certificateKeyFile=\"conf/localhost-rsa-key.pem\" certificateFile=\"conf/localhost-rsa-cert.pem\" certificateChainFile=\"conf/localhost-rsa-chain.pem\" type=\"RSA\" /> </SSLHostConfig> </Connector> --> <!-- <Connector --> <!-- port=\"8443\" --> <!-- maxHttpHeaderSize=\"8192\" --> <!-- maxThreads=\"150\" --> <!-- minSpareThreads=\"25\" --> <!-- maxSpareThreads=\"75\" --> <!-- enableLookups=\"false\" --> <!-- disableUploadTimeout=\"true\" --> <!-- acceptCount=\"100\" --> <!-- scheme=\"https\" --> <!-- secure=\"true\" --> <!-- SSLEnabled=\"true\" --> <!-- clientAuth=\"false\" --> <!-- sslProtocol=\"TLS\" --> <!-- keyAlias=\"server\" --> <!-- keystoreFile=\"/Applications/contenedor/tomcat9/llaves/keys\" --> <!-- keypass=\"luis123\" /> --> <!-- Define an AJP 1.3 Connector on port 8009 --> <!-- <Connector protocol=\"AJP/1.3\" address=\"::1\" port=\"8009\" redirectPort=\"8443\" /> --> <!-- An Engine represents the entry point (within Catalina) that processes every request. The Engine implementation for Tomcat stand alone analyzes the HTTP headers included with the request, and passes them on to the appropriate Host (virtual host). Documentation at /docs/config/engine.html --> <!-- You should set jvmRoute to support load-balancing via AJP ie : <Engine name=\"Catalina\" defaultHost=\"localhost\" jvmRoute=\"jvm1\"> --> <Engine defaultHost=\"localhost\" name=\"Catalina\"> <!--For clustering, please take a look at documentation at: /docs/cluster-howto.html (simple how to) /docs/config/cluster.html (reference documentation) --> <!-- <Cluster className=\"org.apache.catalina.ha.tcp.SimpleTcpCluster\"/> --> <!-- Use the LockOutRealm to prevent attempts to guess user passwords via a brute-force attack --> <Realm className=\"org.apache.catalina.realm.LockOutRealm\"> <!-- This Realm uses the UserDatabase configured in the global JNDI resources under the key \"UserDatabase\". Any edits that are performed against this UserDatabase are immediately available for use by the Realm. --> <Realm className=\"org.apache.catalina.realm.UserDatabaseRealm\" resourceName=\"UserDatabase\"/> </Realm> <Host appBase=\"webapps\" autoDeploy=\"true\" name=\"localhost\" unpackWARs=\"true\"> <!-- SingleSignOn valve, share authentication between web applications Documentation at: /docs/config/valve.html --> <!-- <Valve className=\"org.apache.catalina.authenticator.SingleSignOn\" /> --> <!-- Access log processes all example. Documentation at: /docs/config/valve.html Note: The pattern used is equivalent to using pattern=\"common\" --> <Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\" pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" prefix=\"localhost_access_log\" suffix=\".txt\"/> <Context docBase=\"auth002\" path=\"/auth002\" reloadable=\"true\" source=\"org.eclipse.jst.jee.server:auth002\"/></Host> </Engine> </Service> </Server> Al acceder a https://localhost:8443/auth002/ , esta vez, nos lanzar\u00e1 una advertencia (ya que nuestro certificado no est\u00e1 validado por un tercero), vamos a configuraci\u00f3n avanzada, Continuar a localhost (no seguro) y estaremos dentro, pero ahora la informaci\u00f3n desde el servidor y el cliente, se encripta. Ejemplo 2: Accesos s\u00f3lo por SSL Utilizando Java, y la configuraci\u00f3n del servidor que utilizamos anteriormente, Creamos un sitio con dos p\u00e1ginas, pero una de ellas, funcionar\u00e1 solamente mediante ssl . Estructura: ./ \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u251c\u2500\u2500 WEB-INF \u2502 \u2502 \u251c\u2500\u2500 lib \u2502 \u2502 \u2514\u2500\u2500 web.xml \u2502 \u251c\u2500\u2500 index.jsp \u2502 \u2514\u2500\u2500 protegido \u2502 \u2514\u2500\u2500 paginasegura.jsp \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 auth002 \u2502 \u2502 \u2502 \u2514\u2500\u2500 servlets \u2502 \u2502 \u2502 \u2514\u2500\u2500 ManejaSensible.java \u2502 \u2502 \u2514\u2500\u2500 resources \u2502 \u2514\u2500\u2500 test \u2502 \u251c\u2500\u2500 java \u2502 \u2514\u2500\u2500 resources \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2502 \u2514\u2500\u2500 maven \u2502 \u2502 \u2514\u2500\u2500 cl.lherrera \u2502 \u2502 \u2514\u2500\u2500 auth002 \u2502 \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2502 \u2514\u2500\u2500 pom.xml \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 auth002 \u2502 \u2514\u2500\u2500 servlets \u2502 \u2514\u2500\u2500 ManejaSensible.class \u2514\u2500\u2500 test-classes 27 directories, 10 files Servlet que simplente redirige. /auth002/src/main/java/cl/lherrera/auth002/servlets/ManejaSensible.java package cl.lherrera.auth002.servlets; import java.io.IOException; import javax.servlet.ServletException; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; public class ManejaSensible extends HttpServlet{ private static final long serialVersionUID = -8273382432698807110L; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp){ try { req.getRequestDispatcher(\"/protegido/paginasegura.jsp\").forward(req, resp); } catch (ServletException | IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } } } vistas del sitio: /auth002/WebContent/index.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Insert title here</title> </head> <body> hola mundo -> <a href=\"protegido/sensible\">Hacia la seguridad...</a> </body> </html> /auth002/WebContent/protegido/paginasegura.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Insert title here</title> </head> <body> <h1>Soy una p\u00e1gina segura, con informaci\u00f3n sensible </h1> </body> </html> El descriptor de despliegue, se encarga de realizar la tarea de restricci\u00f3n, en el elemento security-constraint .: /auth002/WebContent/WEB-INF/web.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\" id=\"WebApp_ID\" version=\"4.0\"> <display-name>auth002</display-name> <welcome-file-list> <welcome-file>index.html</welcome-file> <welcome-file>index.htm</welcome-file> <welcome-file>index.jsp</welcome-file> <welcome-file>default.html</welcome-file> <welcome-file>default.htm</welcome-file> <welcome-file>default.jsp</welcome-file> </welcome-file-list> <servlet> <servlet-name>a lo sensible</servlet-name> <servlet-class>cl.lherrera.auth002.servlets.ManejaSensible</servlet-class> </servlet> <servlet-mapping> <servlet-name>a lo sensible</servlet-name> <url-pattern>/protegido/sensible</url-pattern> </servlet-mapping> <security-constraint> <web-resource-collection> <web-resource-name>recursosSensibles</web-resource-name> <url-pattern>/protegido/*</url-pattern> </web-resource-collection> <user-data-constraint> <transport-guarantee>CONFIDENTIAL</transport-guarantee> </user-data-constraint> </security-constraint> </web-app> Queda como ejercicio, hacer que se protejan todas las URL del sitio.","title":"Seguridad SSL."},{"location":"ejercicios/servlets/seguridad/ssl/#seguridad-ssl","text":"Fuente: https://www.sslmarket.es/ssl/help-trabajar-con-los-certificados-en-java-keystore/","title":"Seguridad SSL."},{"location":"ejercicios/servlets/seguridad/ssl/#ejemplo","text":"Crear un sitio web en Java , utilizando el servidor Apache Tomcat , que pueda ser accedido mediante el protocolo https . El servidor escucha mediante la configuraci\u00f3n que existe en el archivo server.xml , este archivo est\u00e1 en el directorio conf del servidor apache que descargamos. Cuando agregamos el servidor a eclipse, se crea una copia para eclipse, as\u00ed que debemos hacerlo desde el ide. En el explorador del IDE hay un directorio llamado Servers dentro est\u00e1 el servidor y el acceso a este archivo. All\u00ed podremos ver su configuraci\u00f3n. (depende la versi\u00f3n de Tomcat, puede que las opciones sean diferentes) <Connector connectionTimeout=\"20000\" port=\"8080\" protocol=\"HTTP/1.1\" redirectPort=\"8443\"/> Creamos la siguiente aplicaci\u00f3n maven transformada mediante facets-module a web, con la siguiente estructura: ./ \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u251c\u2500\u2500 WEB-INF \u2502 \u2502 \u251c\u2500\u2500 lib \u2502 \u2502 \u2514\u2500\u2500 web.xml \u2502 \u2514\u2500\u2500 index.jsp \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2514\u2500\u2500 resources \u2502 \u2514\u2500\u2500 test \u2502 \u251c\u2500\u2500 java \u2502 \u2514\u2500\u2500 resources \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u2514\u2500\u2500 META-INF \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 maven \u2502 \u2514\u2500\u2500 cl.lherrera \u2502 \u2514\u2500\u2500 auth002 \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2514\u2500\u2500 pom.xml \u2514\u2500\u2500 test-classes 18 directories, 7 files Todo generado con la herramienta incluyendo el descriptor de despliegue web.xml . El \u00fanico archivo generado es el index.jsp /auth002/WebContent/index.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Insert title here</title> </head> <body>hola mundo </body> </html> Ejecutamos el servidor y accedemos mediante el siguiente enlace: http://localhost:8080/auth002/ . Si ahora intentamos acceder, pero usando un protocolo de comunicaci\u00f3n segura de (Security Socket Layer) no podremos conectarnos debido a que no tenemos habilitado ese puerto en el servidor. Hay que activarlo; pero antes necesitamos un certificado ssl, estos los podemos comprar; pero existe una forma de crear uno propio aunque no sea validado por una entidad certificada, nos servir\u00e1 para entender como configurar estas caracteristicas. Generamos entonces el contenedor de llaves que nos servir\u00e1 como certificado de prueba. keytool es la herramienta que realiza esta tarea, lo escribimos en la consola para confirmar su funcionamiento. \u279c auth002 keytool Herramienta de Gesti\u00f3n de Certificados y Claves Comandos: -certreq Genera una solicitud de certificado -changealias Cambia un alias de entrada -delete Suprime una entrada -exportcert Exporta el certificado -genkeypair Genera un par de claves -genseckey Genera un clave secreta -gencert Genera un certificado a partir de una solicitud de certificado -importcert Importa un certificado o una cadena de certificados -importpass Importa una contrase\u00f1a -importkeystore Importa una o todas las entradas desde otro almac\u00e9n de claves -keypasswd Cambia la contrase\u00f1a de clave de una entrada -list Enumera las entradas de un almac\u00e9n de claves -printcert Imprime el contenido de un certificado -printcertreq Imprime el contenido de una solicitud de certificado -printcrl Imprime el contenido de un archivo CRL -storepasswd Cambia la contrase\u00f1a de almac\u00e9n de un almac\u00e9n de claves Utilice \"keytool -command_name -help\" para la sintaxis de nombre_comando Si no, hay que usar la ruta absoluta C:\\Program Files\\Java\\jdk1.8.0_121\\bin nos vamos a una carpeta donde querramos almacenar las llaves. En mi caso: /Users/luisherrera/projects/certificadosSSL/talentoDigital Ejecutamos el siguiente comando: keytool -genkey -alias test -keyalg RSA -keystore test.jks -keysize 2048 Donde el alias es el nombre del contenedor de llaves y el keystore es el nombre (en realidad la ruta) del archivo .jks, que es un form\u00e1to de una implementaci\u00f3n JSSE para certificados, podemos transformarlo a una implementaci\u00f3n del tipo web PKCS12 , pero eso lo veremos m\u00e1s adelante. Es decir que con este comando, fabricaremos nuestro certificado llamado test.jks (si compramos uno, hay otro comando para importarlo que est\u00e1 en el link de la fuente). \u279c talentoDigital keytool -genkey -alias test -keyalg RSA -keystore test.jks -keysize 2048 Introduzca la contrase\u00f1a del almac\u00e9n de claves: Volver a escribir la contrase\u00f1a nueva: \u00bfCu\u00e1les son su nombre y su apellido? [Unknown]: luis herrera \u00bfCu\u00e1l es el nombre de su unidad de organizaci\u00f3n? [Unknown]: aiep \u00bfCu\u00e1l es el nombre de su organizaci\u00f3n? [Unknown]: aiep \u00bfCu\u00e1l es el nombre de su ciudad o localidad? [Unknown]: santiao \u00bfCu\u00e1l es el nombre de su estado o provincia? [Unknown]: nunoa \u00bfCu\u00e1l es el c\u00f3digo de pa\u00eds de dos letras de la unidad? [Unknown]: cl \u00bfEs correcto CN=luis herrera, OU=aiep, O=aiep, L=santiao, ST=nunoa, C=cl? [no]: si Introduzca la contrase\u00f1a de clave para <test> (INTRO si es la misma contrase\u00f1a que la del almac\u00e9n de claves): Volver a escribir la contrase\u00f1a nueva: Warning: El almac\u00e9n de claves JKS utiliza un formato propietario. Se recomienda migrar a PKCS12, que es un formato est\u00e1ndar del sector que utiliza \"keytool -importkeystore -srckeystore test.jks -destkeystore test.jks -deststoretype pkcs12\". Migramos el estandar PKCS12 , para quitar el warning. \u279c talentoDigital keytool -importkeystore -srckeystore test.jks -destkeystore test.jks -deststoretype pkcs12 Introduzca la contrase\u00f1a de almac\u00e9n de claves de origen: La entrada del alias test se ha importado correctamente. Comando de importaci\u00f3n completado: 1 entradas importadas correctamente, 0 entradas incorrectas o canceladas Warning: Se ha migrado \"test.jks\" a Non JKS/JCEKS. Se ha realizado la copia de seguridad del almac\u00e9n de claves JKS como \"test.jks.old\". \u279c talentoDigital La contrase\u00f1a usada en todo es changeit , ya que es la contrase\u00f1a por defecto que usa TOMCAT y para mantener el estandar lo dejamos tal cual. ./ \u251c\u2500\u2500 test.jks \u2514\u2500\u2500 test.jks.old 0 directories, 2 files Luego debemos ir al directoriio Servers que est\u00e1 en eclipse (si es que a\u00f1adimos el servidor anteriormente). y agregamos lo en server.xml . <Connector SSLEnabled=\"true\" maxThreads=\"150\" port=\"8443\" protocol=\"org.apache.coyote.http11.Http11NioProtocol\"> <SSLHostConfig> <Certificate certificateKeystoreFile=\"/Users/luisherrera/projects/certificadosSSL/talentoDigital/test.jks\" type=\"RSA\"/> </SSLHostConfig> </Connector> Quedando el archivo de la siguiente forma: server.xml . <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --><!-- Note: A \"Server\" is not itself a \"Container\", so you may not define subcomponents such as \"Valves\" at this level. Documentation at /docs/config/server.html --><Server port=\"8005\" shutdown=\"SHUTDOWN\"> <Listener className=\"org.apache.catalina.startup.VersionLoggerListener\"/> <!-- Security listener. Documentation at /docs/config/listeners.html <Listener className=\"org.apache.catalina.security.SecurityListener\" /> --> <!--APR library loader. Documentation at /docs/apr.html --> <Listener SSLEngine=\"on\" className=\"org.apache.catalina.core.AprLifecycleListener\"/> <!-- Prevent memory leaks due to use of particular java/javax APIs--> <Listener className=\"org.apache.catalina.core.JreMemoryLeakPreventionListener\"/> <Listener className=\"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener\"/> <Listener className=\"org.apache.catalina.core.ThreadLocalLeakPreventionListener\"/> <!-- Global JNDI resources Documentation at /docs/jndi-resources-howto.html --> <GlobalNamingResources> <!-- Editable user database that can also be used by UserDatabaseRealm to authenticate users --> <Resource auth=\"Container\" description=\"User database that can be updated and saved\" factory=\"org.apache.catalina.users.MemoryUserDatabaseFactory\" name=\"UserDatabase\" pathname=\"conf/tomcat-users.xml\" type=\"org.apache.catalina.UserDatabase\"/> </GlobalNamingResources> <!-- A \"Service\" is a collection of one or more \"Connectors\" that share a single \"Container\" Note: A \"Service\" is not itself a \"Container\", so you may not define subcomponents such as \"Valves\" at this level. Documentation at /docs/config/service.html --> <Service name=\"Catalina\"> <!--The connectors can use a shared executor, you can define one or more named thread pools--> <!-- <Executor name=\"tomcatThreadPool\" namePrefix=\"catalina-exec-\" maxThreads=\"150\" minSpareThreads=\"4\"/> --> <!-- A \"Connector\" represents an endpoint by which requests are received and responses are returned. Documentation at : Java HTTP Connector: /docs/config/http.html Java AJP Connector: /docs/config/ajp.html APR (HTTP/AJP) Connector: /docs/apr.html Define a non-SSL/TLS HTTP/1.1 Connector on port 8080 --> <Connector connectionTimeout=\"20000\" port=\"8080\" protocol=\"HTTP/1.1\" redirectPort=\"8443\"/> <!-- A \"Connector\" using the shared thread pool--> <!-- <Connector executor=\"tomcatThreadPool\" port=\"8080\" protocol=\"HTTP/1.1\" connectionTimeout=\"20000\" redirectPort=\"8443\" /> --> <!-- Define an SSL/TLS HTTP/1.1 Connector on port 8443 This connector uses the NIO implementation. The default SSLImplementation will depend on the presence of the APR/native library and the useOpenSSL attribute of the AprLifecycleListener. Either JSSE or OpenSSL style configuration may be used regardless of the SSLImplementation selected. JSSE style configuration is used below. --> <!-- <Connector port=\"8443\" protocol=\"org.apache.coyote.http11.Http11NioProtocol\" maxThreads=\"150\" SSLEnabled=\"true\"> <SSLHostConfig> <Certificate certificateKeystoreFile=\"conf/localhost-rsa.jks\" type=\"RSA\" /> </SSLHostConfig> </Connector> --> <Connector SSLEnabled=\"true\" maxThreads=\"150\" port=\"8443\" protocol=\"org.apache.coyote.http11.Http11NioProtocol\"> <SSLHostConfig> <Certificate certificateKeystoreFile=\"/Users/luisherrera/projects/certificadosSSL/talentoDigital/test.jks\" type=\"RSA\"/> </SSLHostConfig> </Connector> <!-- Define an SSL/TLS HTTP/1.1 Connector on port 8443 with HTTP/2 This connector uses the APR/native implementation which always uses OpenSSL for TLS. Either JSSE or OpenSSL style configuration may be used. OpenSSL style configuration is used below. --> <!-- <Connector port=\"8443\" protocol=\"org.apache.coyote.http11.Http11AprProtocol\" maxThreads=\"150\" SSLEnabled=\"true\" > <UpgradeProtocol className=\"org.apache.coyote.http2.Http2Protocol\" /> <SSLHostConfig> <Certificate certificateKeyFile=\"conf/localhost-rsa-key.pem\" certificateFile=\"conf/localhost-rsa-cert.pem\" certificateChainFile=\"conf/localhost-rsa-chain.pem\" type=\"RSA\" /> </SSLHostConfig> </Connector> --> <!-- <Connector --> <!-- port=\"8443\" --> <!-- maxHttpHeaderSize=\"8192\" --> <!-- maxThreads=\"150\" --> <!-- minSpareThreads=\"25\" --> <!-- maxSpareThreads=\"75\" --> <!-- enableLookups=\"false\" --> <!-- disableUploadTimeout=\"true\" --> <!-- acceptCount=\"100\" --> <!-- scheme=\"https\" --> <!-- secure=\"true\" --> <!-- SSLEnabled=\"true\" --> <!-- clientAuth=\"false\" --> <!-- sslProtocol=\"TLS\" --> <!-- keyAlias=\"server\" --> <!-- keystoreFile=\"/Applications/contenedor/tomcat9/llaves/keys\" --> <!-- keypass=\"luis123\" /> --> <!-- Define an AJP 1.3 Connector on port 8009 --> <!-- <Connector protocol=\"AJP/1.3\" address=\"::1\" port=\"8009\" redirectPort=\"8443\" /> --> <!-- An Engine represents the entry point (within Catalina) that processes every request. The Engine implementation for Tomcat stand alone analyzes the HTTP headers included with the request, and passes them on to the appropriate Host (virtual host). Documentation at /docs/config/engine.html --> <!-- You should set jvmRoute to support load-balancing via AJP ie : <Engine name=\"Catalina\" defaultHost=\"localhost\" jvmRoute=\"jvm1\"> --> <Engine defaultHost=\"localhost\" name=\"Catalina\"> <!--For clustering, please take a look at documentation at: /docs/cluster-howto.html (simple how to) /docs/config/cluster.html (reference documentation) --> <!-- <Cluster className=\"org.apache.catalina.ha.tcp.SimpleTcpCluster\"/> --> <!-- Use the LockOutRealm to prevent attempts to guess user passwords via a brute-force attack --> <Realm className=\"org.apache.catalina.realm.LockOutRealm\"> <!-- This Realm uses the UserDatabase configured in the global JNDI resources under the key \"UserDatabase\". Any edits that are performed against this UserDatabase are immediately available for use by the Realm. --> <Realm className=\"org.apache.catalina.realm.UserDatabaseRealm\" resourceName=\"UserDatabase\"/> </Realm> <Host appBase=\"webapps\" autoDeploy=\"true\" name=\"localhost\" unpackWARs=\"true\"> <!-- SingleSignOn valve, share authentication between web applications Documentation at: /docs/config/valve.html --> <!-- <Valve className=\"org.apache.catalina.authenticator.SingleSignOn\" /> --> <!-- Access log processes all example. Documentation at: /docs/config/valve.html Note: The pattern used is equivalent to using pattern=\"common\" --> <Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\" pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" prefix=\"localhost_access_log\" suffix=\".txt\"/> <Context docBase=\"auth002\" path=\"/auth002\" reloadable=\"true\" source=\"org.eclipse.jst.jee.server:auth002\"/></Host> </Engine> </Service> </Server> Al acceder a https://localhost:8443/auth002/ , esta vez, nos lanzar\u00e1 una advertencia (ya que nuestro certificado no est\u00e1 validado por un tercero), vamos a configuraci\u00f3n avanzada, Continuar a localhost (no seguro) y estaremos dentro, pero ahora la informaci\u00f3n desde el servidor y el cliente, se encripta.","title":"Ejemplo"},{"location":"ejercicios/servlets/seguridad/ssl/#ejemplo-2-accesos-solo-por-ssl","text":"Utilizando Java, y la configuraci\u00f3n del servidor que utilizamos anteriormente, Creamos un sitio con dos p\u00e1ginas, pero una de ellas, funcionar\u00e1 solamente mediante ssl . Estructura: ./ \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u251c\u2500\u2500 WEB-INF \u2502 \u2502 \u251c\u2500\u2500 lib \u2502 \u2502 \u2514\u2500\u2500 web.xml \u2502 \u251c\u2500\u2500 index.jsp \u2502 \u2514\u2500\u2500 protegido \u2502 \u2514\u2500\u2500 paginasegura.jsp \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 auth002 \u2502 \u2502 \u2502 \u2514\u2500\u2500 servlets \u2502 \u2502 \u2502 \u2514\u2500\u2500 ManejaSensible.java \u2502 \u2502 \u2514\u2500\u2500 resources \u2502 \u2514\u2500\u2500 test \u2502 \u251c\u2500\u2500 java \u2502 \u2514\u2500\u2500 resources \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2502 \u2514\u2500\u2500 maven \u2502 \u2502 \u2514\u2500\u2500 cl.lherrera \u2502 \u2502 \u2514\u2500\u2500 auth002 \u2502 \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2502 \u2514\u2500\u2500 pom.xml \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 auth002 \u2502 \u2514\u2500\u2500 servlets \u2502 \u2514\u2500\u2500 ManejaSensible.class \u2514\u2500\u2500 test-classes 27 directories, 10 files Servlet que simplente redirige. /auth002/src/main/java/cl/lherrera/auth002/servlets/ManejaSensible.java package cl.lherrera.auth002.servlets; import java.io.IOException; import javax.servlet.ServletException; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; public class ManejaSensible extends HttpServlet{ private static final long serialVersionUID = -8273382432698807110L; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp){ try { req.getRequestDispatcher(\"/protegido/paginasegura.jsp\").forward(req, resp); } catch (ServletException | IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } } } vistas del sitio: /auth002/WebContent/index.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Insert title here</title> </head> <body> hola mundo -> <a href=\"protegido/sensible\">Hacia la seguridad...</a> </body> </html> /auth002/WebContent/protegido/paginasegura.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Insert title here</title> </head> <body> <h1>Soy una p\u00e1gina segura, con informaci\u00f3n sensible </h1> </body> </html> El descriptor de despliegue, se encarga de realizar la tarea de restricci\u00f3n, en el elemento security-constraint .: /auth002/WebContent/WEB-INF/web.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\" id=\"WebApp_ID\" version=\"4.0\"> <display-name>auth002</display-name> <welcome-file-list> <welcome-file>index.html</welcome-file> <welcome-file>index.htm</welcome-file> <welcome-file>index.jsp</welcome-file> <welcome-file>default.html</welcome-file> <welcome-file>default.htm</welcome-file> <welcome-file>default.jsp</welcome-file> </welcome-file-list> <servlet> <servlet-name>a lo sensible</servlet-name> <servlet-class>cl.lherrera.auth002.servlets.ManejaSensible</servlet-class> </servlet> <servlet-mapping> <servlet-name>a lo sensible</servlet-name> <url-pattern>/protegido/sensible</url-pattern> </servlet-mapping> <security-constraint> <web-resource-collection> <web-resource-name>recursosSensibles</web-resource-name> <url-pattern>/protegido/*</url-pattern> </web-resource-collection> <user-data-constraint> <transport-guarantee>CONFIDENTIAL</transport-guarantee> </user-data-constraint> </security-constraint> </web-app> Queda como ejercicio, hacer que se protejan todas las URL del sitio.","title":"Ejemplo 2: Accesos s\u00f3lo por  SSL"},{"location":"ejercicios/servlets/sesion-cookies/cookies/","text":"Cookies Las cookies son uno de los elementos que pueden ser enviados al cliente, aunque esta pr\u00e1ctica no se est\u00e1 permitiendo, ya que son utilizadas para hacer seguimiento por parte de compa\u00f1\u00edas. Es por eso que se debe avisar al usuario que la web utiliza cookies. Su tam\u00e1\u00f1o es peque\u00f1o por que as\u00ed lo determinan los navegadores 4kb. y se recomienda un m\u00e1ximo de 50 pares de clave y valor. Las cookies son simples ficheros de texto en plano que no contienen absolutamente ning\u00fan programa. No se ejecutan ni pueden infiltrarse en un ordenador, pero ante las leyes no nos queda otra que obedecer. Si guardamos que el usuario ha aceptado las cookies en cualquier variable persistente como la sesi\u00f3n o el local storage del navegador, podemos no mostrar el mensaje al usuario si este ya ha acetado las coolies. Ejemplo En el siguiente ejemplo, preguntamos al usuario si es que desea aceptar las cookies, si lo hace, guardamos su respuesta en la memoria de su navegador. Luego enviamos texto , OJO \ud83d\udc41, solamente puede ser texto, sin caracteres especiales, la cookie no acepta nada m\u00e1s. La cookie ser\u00e1 capturada a modo de ejemplo con javascript, usualmente no lo debemos permitir, desde el servidor, pero se ejemplifica para efectos acad\u00e9micos. Estructura: ./ \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u251c\u2500\u2500 WEB-INF \u2502 \u2502 \u251c\u2500\u2500 lib \u2502 \u2502 \u2514\u2500\u2500 web.xml \u2502 \u251c\u2500\u2500 index.jsp \u2502 \u251c\u2500\u2500 politica.html \u2502 \u2514\u2500\u2500 recibe.jsp \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 sesion \u2502 \u2502 \u2502 \u2514\u2500\u2500 servlets \u2502 \u2502 \u2502 \u2514\u2500\u2500 ProcesaForm.java \u2502 \u2502 \u2514\u2500\u2500 resources \u2502 \u2514\u2500\u2500 test \u2502 \u251c\u2500\u2500 java \u2502 \u2514\u2500\u2500 resources \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2502 \u2514\u2500\u2500 maven \u2502 \u2502 \u2514\u2500\u2500 cl.lherrera \u2502 \u2502 \u2514\u2500\u2500 cookies \u2502 \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2502 \u2514\u2500\u2500 pom.xml \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 sesion \u2502 \u2514\u2500\u2500 servlets \u2502 \u2514\u2500\u2500 ProcesaForm.class \u2514\u2500\u2500 test-classes 26 directories, 11 files /cookies/WebContent/WEB-INF/web.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\" id=\"WebApp_ID\" version=\"4.0\"> <display-name>sesion002</display-name> <welcome-file-list> <welcome-file>index.jsp</welcome-file> </welcome-file-list> <servlet> <servlet-name>Procesa el formulario</servlet-name> <servlet-class>cl.lherrera.sesion.servlets.ProcesaForm</servlet-class> </servlet> <servlet-mapping> <servlet-name>Procesa el formulario</servlet-name> <url-pattern>/procesaForm</url-pattern> </servlet-mapping> </web-app> Vistas /cookies/WebContent/index.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Insert title here</title> </head> <style> #cajacookies { box-shadow: 0px 0px 5px 5px #808080; background-color: white; color: black; padding: 10px; margin-left: -15px; margin-right: -15px; margin-bottom: 0px; position: fixed; top: 0px; width: 100%; } #cajacookies button { color: black; } </style> <body> <!-- inicio de cookies --> <div id=\"cajacookies\"> <p> <button onclick=\"aceptarCookies()\" class=\"pull-right\"> <i class=\"fa fa-times\"></i> Aceptar y cerrar \u00e9ste mensaje </button> Este sitio web usa cookies, si permanece aqu\u00ed acepta su uso. Puede leer m\u00e1s sobre el uso de cookies en nuestra <a href=\"politica.html\">pol\u00edtica de privacidad</a>. </p> </div> <form action=\"procesaForm\" method=\"post\"> Valor a grabar en la cookie: <input type=\"text\" name=\"valor\" /> <button type=\"submit\">Enviar</button> </form> <script src=\"https://code.jquery.com/jquery-3.4.1.min.js\" integrity=\"sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=\" crossorigin=\"anonymous\"></script> <script> /* \u00e9sto comprueba la localStorage si ya tiene la variable guardada */ function compruebaAceptaCookies() { if (localStorage.aceptaCookies == 'true') { cajacookies.style.display = 'none'; } } /* aqu\u00ed guardamos la variable de que se ha aceptado el uso de cookies as\u00ed no mostraremos el mensaje de nuevo */ function aceptarCookies() { localStorage.aceptaCookies = 'true'; cajacookies.style.display = 'none'; } /* \u00e9sto se ejecuta cuando la web est\u00e1 cargada */ $(document).ready(function() { compruebaAceptaCookies(); }); </script> </body> </html> /cookies/WebContent/politica.html <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Insert title here</title> </head> <body> El GDPR (General Data Protection Regulation), RGPD (Reglamento General de Protecci\u00f3n de Datos de la UE) O LGDP (Ley general de protecci\u00f3n de datos) son una serie de regulaciones que la Agencia de Protecci\u00f3n de datos o AEPD ha confirmado como adecuadas en las garant\u00edas de los compromisos contractuales, brindados por Google para las transferencias internacionales de datos a Los Estados Unidos. A trav\u00e9s de las herramientas G Suite y Google Cloud Platform. </body> </html> /cookies/WebContent/recibe.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Recibe</title> </head> <body onload=\"getCookie()\"> <div id=\"cookies\"></div> <script type=\"text/javascript\"> function getCookie(cookieName){ var elemento = document.getElementById(\"cookies\"); console.log(\"Ejecutado\"); var cookieArray = document.cookie.split(';'); cookieArray.forEach(galleta => { elemento.innerHTML = elemento.innerHTML + '<br/>' + galleta; }); } </script> </body> </html> Servlet /cookies/src/main/java/cl/lherrera/sesion/servlets/ProcesaForm.java package cl.lherrera.sesion.servlets; import java.io.IOException; import java.util.logging.Logger; import javax.servlet.ServletException; import javax.servlet.http.Cookie; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; public class ProcesaForm extends HttpServlet{ private static final long serialVersionUID = 1421144908062873148L; private static Logger logger = Logger.getLogger(ProcesaForm.class.getName()); @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) { Cookie cookie = new Cookie(\"valor\", req.getParameter(\"valor\") ); resp.addCookie(cookie); doGet(req, resp); } @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { try { req.getRequestDispatcher(\"recibe.jsp\").forward(req, resp); } catch (ServletException | IOException e) { logger.severe(e.getMessage()); } } }","title":"Cookies"},{"location":"ejercicios/servlets/sesion-cookies/cookies/#cookies","text":"Las cookies son uno de los elementos que pueden ser enviados al cliente, aunque esta pr\u00e1ctica no se est\u00e1 permitiendo, ya que son utilizadas para hacer seguimiento por parte de compa\u00f1\u00edas. Es por eso que se debe avisar al usuario que la web utiliza cookies. Su tam\u00e1\u00f1o es peque\u00f1o por que as\u00ed lo determinan los navegadores 4kb. y se recomienda un m\u00e1ximo de 50 pares de clave y valor. Las cookies son simples ficheros de texto en plano que no contienen absolutamente ning\u00fan programa. No se ejecutan ni pueden infiltrarse en un ordenador, pero ante las leyes no nos queda otra que obedecer. Si guardamos que el usuario ha aceptado las cookies en cualquier variable persistente como la sesi\u00f3n o el local storage del navegador, podemos no mostrar el mensaje al usuario si este ya ha acetado las coolies.","title":"Cookies"},{"location":"ejercicios/servlets/sesion-cookies/cookies/#ejemplo","text":"En el siguiente ejemplo, preguntamos al usuario si es que desea aceptar las cookies, si lo hace, guardamos su respuesta en la memoria de su navegador. Luego enviamos texto , OJO \ud83d\udc41, solamente puede ser texto, sin caracteres especiales, la cookie no acepta nada m\u00e1s. La cookie ser\u00e1 capturada a modo de ejemplo con javascript, usualmente no lo debemos permitir, desde el servidor, pero se ejemplifica para efectos acad\u00e9micos. Estructura: ./ \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u251c\u2500\u2500 WEB-INF \u2502 \u2502 \u251c\u2500\u2500 lib \u2502 \u2502 \u2514\u2500\u2500 web.xml \u2502 \u251c\u2500\u2500 index.jsp \u2502 \u251c\u2500\u2500 politica.html \u2502 \u2514\u2500\u2500 recibe.jsp \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 sesion \u2502 \u2502 \u2502 \u2514\u2500\u2500 servlets \u2502 \u2502 \u2502 \u2514\u2500\u2500 ProcesaForm.java \u2502 \u2502 \u2514\u2500\u2500 resources \u2502 \u2514\u2500\u2500 test \u2502 \u251c\u2500\u2500 java \u2502 \u2514\u2500\u2500 resources \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2502 \u2514\u2500\u2500 maven \u2502 \u2502 \u2514\u2500\u2500 cl.lherrera \u2502 \u2502 \u2514\u2500\u2500 cookies \u2502 \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2502 \u2514\u2500\u2500 pom.xml \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 sesion \u2502 \u2514\u2500\u2500 servlets \u2502 \u2514\u2500\u2500 ProcesaForm.class \u2514\u2500\u2500 test-classes 26 directories, 11 files /cookies/WebContent/WEB-INF/web.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\" id=\"WebApp_ID\" version=\"4.0\"> <display-name>sesion002</display-name> <welcome-file-list> <welcome-file>index.jsp</welcome-file> </welcome-file-list> <servlet> <servlet-name>Procesa el formulario</servlet-name> <servlet-class>cl.lherrera.sesion.servlets.ProcesaForm</servlet-class> </servlet> <servlet-mapping> <servlet-name>Procesa el formulario</servlet-name> <url-pattern>/procesaForm</url-pattern> </servlet-mapping> </web-app> Vistas /cookies/WebContent/index.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Insert title here</title> </head> <style> #cajacookies { box-shadow: 0px 0px 5px 5px #808080; background-color: white; color: black; padding: 10px; margin-left: -15px; margin-right: -15px; margin-bottom: 0px; position: fixed; top: 0px; width: 100%; } #cajacookies button { color: black; } </style> <body> <!-- inicio de cookies --> <div id=\"cajacookies\"> <p> <button onclick=\"aceptarCookies()\" class=\"pull-right\"> <i class=\"fa fa-times\"></i> Aceptar y cerrar \u00e9ste mensaje </button> Este sitio web usa cookies, si permanece aqu\u00ed acepta su uso. Puede leer m\u00e1s sobre el uso de cookies en nuestra <a href=\"politica.html\">pol\u00edtica de privacidad</a>. </p> </div> <form action=\"procesaForm\" method=\"post\"> Valor a grabar en la cookie: <input type=\"text\" name=\"valor\" /> <button type=\"submit\">Enviar</button> </form> <script src=\"https://code.jquery.com/jquery-3.4.1.min.js\" integrity=\"sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=\" crossorigin=\"anonymous\"></script> <script> /* \u00e9sto comprueba la localStorage si ya tiene la variable guardada */ function compruebaAceptaCookies() { if (localStorage.aceptaCookies == 'true') { cajacookies.style.display = 'none'; } } /* aqu\u00ed guardamos la variable de que se ha aceptado el uso de cookies as\u00ed no mostraremos el mensaje de nuevo */ function aceptarCookies() { localStorage.aceptaCookies = 'true'; cajacookies.style.display = 'none'; } /* \u00e9sto se ejecuta cuando la web est\u00e1 cargada */ $(document).ready(function() { compruebaAceptaCookies(); }); </script> </body> </html> /cookies/WebContent/politica.html <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Insert title here</title> </head> <body> El GDPR (General Data Protection Regulation), RGPD (Reglamento General de Protecci\u00f3n de Datos de la UE) O LGDP (Ley general de protecci\u00f3n de datos) son una serie de regulaciones que la Agencia de Protecci\u00f3n de datos o AEPD ha confirmado como adecuadas en las garant\u00edas de los compromisos contractuales, brindados por Google para las transferencias internacionales de datos a Los Estados Unidos. A trav\u00e9s de las herramientas G Suite y Google Cloud Platform. </body> </html> /cookies/WebContent/recibe.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Recibe</title> </head> <body onload=\"getCookie()\"> <div id=\"cookies\"></div> <script type=\"text/javascript\"> function getCookie(cookieName){ var elemento = document.getElementById(\"cookies\"); console.log(\"Ejecutado\"); var cookieArray = document.cookie.split(';'); cookieArray.forEach(galleta => { elemento.innerHTML = elemento.innerHTML + '<br/>' + galleta; }); } </script> </body> </html> Servlet /cookies/src/main/java/cl/lherrera/sesion/servlets/ProcesaForm.java package cl.lherrera.sesion.servlets; import java.io.IOException; import java.util.logging.Logger; import javax.servlet.ServletException; import javax.servlet.http.Cookie; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; public class ProcesaForm extends HttpServlet{ private static final long serialVersionUID = 1421144908062873148L; private static Logger logger = Logger.getLogger(ProcesaForm.class.getName()); @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) { Cookie cookie = new Cookie(\"valor\", req.getParameter(\"valor\") ); resp.addCookie(cookie); doGet(req, resp); } @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { try { req.getRequestDispatcher(\"recibe.jsp\").forward(req, resp); } catch (ServletException | IOException e) { logger.severe(e.getMessage()); } } }","title":"Ejemplo"},{"location":"ejercicios/servlets/sesion-cookies/sesion/","text":"Las variables de sesi\u00f3n. La session, es un objeto, de tipo clave valor y comienza desde que se activa por el usuario, hasta que se finalice, ya sea manual o autom\u00e1tico. Est\u00e1 en el objeto request y el objetivo es que se pueda acceder a estas variables como si fueran globales para la app (servlets y jsp)., Hay que recordad que un jsp en estricto rigor, es un servlet, y las variables de sesi\u00f3n no es que se est\u00e9n tratando en el cliente por ponerlas en el JSP, a\u00fan seguimos en el servidor. El tama\u00f1o m\u00e1ximo recomendado para una sesi\u00f3n, es de un promedio de 5 megas. Aunque hay casos en que pueden llegar a contener 50 megas. Ejemplo 1: Env\u00edo valor a otro JSP Se requere que tres p\u00e1ginas comprartan la informaci\u00f3n de un texto que se ingresa con un formulario. Estructura: ./ \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u251c\u2500\u2500 WEB-INF \u2502 \u2502 \u251c\u2500\u2500 lib \u2502 \u2502 \u2514\u2500\u2500 web.xml \u2502 \u251c\u2500\u2500 comprueba.jsp \u2502 \u251c\u2500\u2500 index.jsp \u2502 \u2514\u2500\u2500 recibe.jsp \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 sesion \u2502 \u2502 \u2502 \u2514\u2500\u2500 servlets \u2502 \u2502 \u2502 \u251c\u2500\u2500 Comprueba.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 ProcesaForm.java \u2502 \u2502 \u2514\u2500\u2500 resources \u2502 \u2514\u2500\u2500 test \u2502 \u251c\u2500\u2500 java \u2502 \u2514\u2500\u2500 resources \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2502 \u2514\u2500\u2500 maven \u2502 \u2502 \u2514\u2500\u2500 cl.lherrera \u2502 \u2502 \u2514\u2500\u2500 sesion002 \u2502 \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2502 \u2514\u2500\u2500 pom.xml \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 sesion \u2502 \u2514\u2500\u2500 servlets \u2502 \u251c\u2500\u2500 Comprueba.class \u2502 \u2514\u2500\u2500 ProcesaForm.class \u2514\u2500\u2500 test-classes 26 directories, 13 files /sesion002/WebContent/WEB-INF/web.xml Dos rutas a los servlets <?xml version=\"1.0\" encoding=\"UTF-8\"?> <web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\" id=\"WebApp_ID\" version=\"4.0\"> <display-name>sesion002</display-name> <welcome-file-list> <welcome-file>index.jsp</welcome-file> </welcome-file-list> <servlet> <servlet-name>Procesa el formulario</servlet-name> <servlet-class>cl.lherrera.sesion.servlets.ProcesaForm</servlet-class> </servlet> <servlet-mapping> <servlet-name>Procesa el formulario</servlet-name> <url-pattern>/procesaForm</url-pattern> </servlet-mapping> <servlet> <servlet-name>Comprueba el valor</servlet-name> <servlet-class>cl.lherrera.sesion.servlets.Comprueba</servlet-class> </servlet> <servlet-mapping> <servlet-name>Comprueba el valor</servlet-name> <url-pattern>/comprueba</url-pattern> </servlet-mapping> </web-app> La vistas /sesion002/WebContent/index.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Insert title here</title> </head> <body> <form action=\"procesaForm\" method=\"post\"> Valor a grabar en la sesi\u00f3n: <input type=\"text\" name=\"valor\" placeholder='<%=session.getAttribute(\"valor\")%>' /> <button type=\"submit\">Enviar</button> </form> </body> </html> /sesion002/WebContent/recibe.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Recibe</title> </head> <body> <% String valor = (String) session.getAttribute(\"valor\"); %> <h1>El valor entregado en sesi\u00f3n es: <%=valor %></h1> <a href=\"comprueba\">Compruebalo</a> </body> </html> /sesion002/WebContent/comprueba.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Comprueba</title> </head> <body> <% String valor = (String) request.getSession().getAttribute(\"valor\"); %> <h1><%=valor %></h1> </body> </html> Los servlets, controladores. /sesion002/src/main/java/cl/lherrera/sesion/servlets/ProcesaForm.java package cl.lherrera.sesion.servlets; import java.io.IOException; import java.util.logging.Logger; import javax.servlet.ServletException; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.HttpSession; public class ProcesaForm extends HttpServlet{ private static final long serialVersionUID = 1421144908062873148L; Logger logger = Logger.getLogger(ProcesaForm.class.getName()); @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) { HttpSession session = req.getSession(); session.setAttribute(\"valor\", req.getParameter(\"valor\") ); try { req.getRequestDispatcher(\"recibe.jsp\").forward(req, resp); } catch (ServletException | IOException e) { logger.severe(e.getMessage()); } } } \u00b4/sesion002/src/main/java/cl/lherrera/sesion/servlets/Comprueba.java\u00b4 package cl.lherrera.sesion.servlets; import java.io.IOException; import java.util.logging.Logger; import javax.servlet.ServletException; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.HttpSession; public class ProcesaForm extends HttpServlet{ private static final long serialVersionUID = 1421144908062873148L; Logger logger = Logger.getLogger(ProcesaForm.class.getName()); @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) { HttpSession session = req.getSession(); session.setAttribute(\"valor\", req.getParameter(\"valor\") ); try { req.getRequestDispatcher(\"recibe.jsp\").forward(req, resp); } catch (ServletException | IOException e) { logger.severe(e.getMessage()); } } } Ejemplo 2: Env\u00edo objeto Se necesita almacenar la informaci\u00f3n de los usuarios para el sitio de forma global y no disponemos de una base de datos para que realice esta tarea, es por eso que lo haremos usando sesion, que almacena una lista, en la sesi\u00f3n, lo que permite utilizarla de forma global. Adem\u00e1s podremos ver qu\u00e9 es lo que pasa cuando esta sesi\u00f3n se cierra. Estructura: ./ \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u251c\u2500\u2500 WEB-INF \u2502 \u2502 \u251c\u2500\u2500 lib \u2502 \u2502 \u2514\u2500\u2500 web.xml \u2502 \u251c\u2500\u2500 index.jsp \u2502 \u2514\u2500\u2500 revisaTabla.jsp \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u251c\u2500\u2500 sesion \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 servlets \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 CerrarSesion.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ProcesaForm.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 RevisaTabla.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 session \u2502 \u2502 \u2502 \u2514\u2500\u2500 modelo \u2502 \u2502 \u2502 \u2514\u2500\u2500 Usuario.java \u2502 \u2502 \u2514\u2500\u2500 resources \u2502 \u2514\u2500\u2500 test \u2502 \u251c\u2500\u2500 java \u2502 \u2514\u2500\u2500 resources \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2502 \u2514\u2500\u2500 maven \u2502 \u2502 \u2514\u2500\u2500 cl.lherrera \u2502 \u2502 \u2514\u2500\u2500 sesion004 \u2502 \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2502 \u2514\u2500\u2500 pom.xml \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u251c\u2500\u2500 sesion \u2502 \u2502 \u2514\u2500\u2500 servlets \u2502 \u2502 \u251c\u2500\u2500 CerrarSesion.class \u2502 \u2502 \u251c\u2500\u2500 ProcesaForm.class \u2502 \u2502 \u2514\u2500\u2500 RevisaTabla.class \u2502 \u2514\u2500\u2500 session \u2502 \u2514\u2500\u2500 modelo \u2502 \u2514\u2500\u2500 Usuario.class \u2514\u2500\u2500 test-classes 30 directories, 16 files /sesion004/WebContent/WEB-INF/web.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\" id=\"WebApp_ID\" version=\"4.0\"> <display-name>sesion002</display-name> <welcome-file-list> <welcome-file>index.jsp</welcome-file> </welcome-file-list> <servlet> <servlet-name>Procesa el formulario</servlet-name> <servlet-class>cl.lherrera.sesion.servlets.ProcesaForm</servlet-class> </servlet> <servlet-mapping> <servlet-name>Procesa el formulario</servlet-name> <url-pattern>/procesaForm</url-pattern> </servlet-mapping> <servlet> <servlet-name>muestra una tabla</servlet-name> <servlet-class>cl.lherrera.sesion.servlets.RevisaTabla</servlet-class> </servlet> <servlet-mapping> <servlet-name>muestra una tabla</servlet-name> <url-pattern>/revisarTabla</url-pattern> </servlet-mapping> <servlet> <servlet-name>Cierra sesion</servlet-name> <servlet-class>cl.lherrera.sesion.servlets.CerrarSesion</servlet-class> </servlet> <servlet-mapping> <servlet-name>Cierra sesion</servlet-name> <url-pattern>/cerrarSesion</url-pattern> </servlet-mapping> </web-app> Las vistas /sesion004/WebContent/index.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Index</title> </head> <body> <% String mensaje = (String) request.getAttribute(\"mensaje\"); %> <%=(mensaje != null)? mensaje: \"\" %> <form action=\"procesaForm\" method=\"post\"> <fieldset> <legend>Ingreso de usarios</legend> <p> Nombre: <input type=\"text\" name=\"nombre\"> <br /> </p> <p> Correo: <input type=\"text\" name=\"correo\"> <br /> </p> <p> Tel\u00e9fono: <input type=\"text\" name=\"telefono\"> <br /> </p> </fieldset> <button type=\"submit\">Agregar usuario</button> </form> <p> <a href=\"revisarTabla\">Revisar la tabla</a> | <a href=\"cerrarSesion\">Cerrar sesion</a> </p> </body> </html> /sesion004/WebContent/revisaTabla.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@ page import=\"cl.lherrera.session.modelo.Usuario\"%> <%@ page import=\"java.util.List\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Revisa Tabla</title> </head> <body> <% List<Usuario> usuarios = (List<Usuario>) session.getAttribute(\"usuarios\"); %> <table border=\"1\"> <tr> <th>Nombre</th> <th>Correo</th> <th>Tel\u00e9fono</th> </tr> <%if(usuarios == null){ %> <tr> <td colspan=\"3\">No existen registros...</td> </tr> <%}else { %> <%for (Usuario usuario: usuarios) { %> <tr> <td><%=usuario.getNombre() %></td> <td><%=usuario.getCorreo() %></td> <td><%=usuario.getTelefono() %></td> </tr> <%} %> <%} %> </table> <a href=\"procesaForm\">Volver</a> </body> </html> Los Servlets /sesion004/src/main/java/cl/lherrera/sesion/servlets/ProcesaForm.java package cl.lherrera.sesion.servlets; import java.io.IOException; import java.util.ArrayList; import java.util.List; import java.util.logging.Logger; import javax.servlet.ServletException; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.HttpSession; import cl.lherrera.session.modelo.Usuario; public class ProcesaForm extends HttpServlet{ private static final long serialVersionUID = 1421144908062873148L; private static Logger logger = Logger.getLogger(ProcesaForm.class.getName()); @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) { HttpSession session = req.getSession(); List<Usuario> usuarios = new ArrayList<>(); if(session.getAttribute(\"usuarios\") == null) { session.setAttribute(\"usuarios\", usuarios); } usuarios = (List<Usuario>) session.getAttribute(\"usuarios\"); String nombre = req.getParameter(\"nombre\"); String correo = req.getParameter(\"correo\"); String telefono = req.getParameter(\"telefono\"); Usuario usuario = new Usuario(); usuario.setNombre(nombre); usuario.setCorreo(correo); usuario.setTelefono(telefono); usuarios.add(usuario); session.removeAttribute(\"usuarios\"); session.setAttribute(\"usuarios\", usuarios); req.setAttribute(\"mensaje\", \"Usuario \" + usuario.getNombre() + \" ingresado, consulte tabla\"); try { req.getRequestDispatcher(\"index.jsp\").forward(req, resp); } catch (ServletException | IOException e) { logger.severe(e.getMessage()); } } @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { try { req.getRequestDispatcher(\"index.jsp\").forward(req, resp); } catch (ServletException | IOException e) { logger.severe(e.getMessage()); } } } /sesion004/src/main/java/cl/lherrera/sesion/servlets/RevisaTabla.java package cl.lherrera.sesion.servlets; import java.io.IOException; import java.util.logging.Logger; import javax.servlet.ServletException; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; public class RevisaTabla extends HttpServlet{ private static final long serialVersionUID = 142114490806232148L; private static Logger logger = Logger.getLogger(RevisaTabla.class.getName()); @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { // sin hacer nada m\u00e1s que redirigir try { req.getRequestDispatcher(\"revisaTabla.jsp\").forward(req, resp); } catch (ServletException | IOException e) { logger.severe(e.getMessage()); } } } /sesion004/src/main/java/cl/lherrera/sesion/servlets/CerrarSesion.java package cl.lherrera.sesion.servlets; import java.io.IOException; import java.util.logging.Logger; import javax.servlet.ServletException; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.HttpSession; public class CerrarSesion extends HttpServlet{ private static final long serialVersionUID = -7437014430757537933L; private static Logger logger = Logger.getLogger(CerrarSesion.class.getName()); @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { HttpSession session = req.getSession(); session.removeAttribute(\"usuarios\"); session.invalidate(); req.setAttribute(\"mensaje\", \"Sesi\u00f3n eliminada...\"); try { req.getRequestDispatcher(\"index.jsp\").forward(req, resp); } catch (ServletException | IOException e) { logger.severe(e.getMessage()); } } } Como ejercicio queda crear un inicio de sesi\u00f3n simple, (siempre se podr\u00e1 entrar, el usuario se guarda en una variable de sesi\u00f3n), que en la parte superior aparezca un saludo al usuario que inici\u00f3n sesi\u00f3n.","title":"Las variables de sesi\u00f3n."},{"location":"ejercicios/servlets/sesion-cookies/sesion/#las-variables-de-sesion","text":"La session, es un objeto, de tipo clave valor y comienza desde que se activa por el usuario, hasta que se finalice, ya sea manual o autom\u00e1tico. Est\u00e1 en el objeto request y el objetivo es que se pueda acceder a estas variables como si fueran globales para la app (servlets y jsp)., Hay que recordad que un jsp en estricto rigor, es un servlet, y las variables de sesi\u00f3n no es que se est\u00e9n tratando en el cliente por ponerlas en el JSP, a\u00fan seguimos en el servidor. El tama\u00f1o m\u00e1ximo recomendado para una sesi\u00f3n, es de un promedio de 5 megas. Aunque hay casos en que pueden llegar a contener 50 megas.","title":"Las variables de sesi\u00f3n."},{"location":"ejercicios/servlets/sesion-cookies/sesion/#ejemplo-1-envio-valor-a-otro-jsp","text":"Se requere que tres p\u00e1ginas comprartan la informaci\u00f3n de un texto que se ingresa con un formulario. Estructura: ./ \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u251c\u2500\u2500 WEB-INF \u2502 \u2502 \u251c\u2500\u2500 lib \u2502 \u2502 \u2514\u2500\u2500 web.xml \u2502 \u251c\u2500\u2500 comprueba.jsp \u2502 \u251c\u2500\u2500 index.jsp \u2502 \u2514\u2500\u2500 recibe.jsp \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 sesion \u2502 \u2502 \u2502 \u2514\u2500\u2500 servlets \u2502 \u2502 \u2502 \u251c\u2500\u2500 Comprueba.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 ProcesaForm.java \u2502 \u2502 \u2514\u2500\u2500 resources \u2502 \u2514\u2500\u2500 test \u2502 \u251c\u2500\u2500 java \u2502 \u2514\u2500\u2500 resources \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2502 \u2514\u2500\u2500 maven \u2502 \u2502 \u2514\u2500\u2500 cl.lherrera \u2502 \u2502 \u2514\u2500\u2500 sesion002 \u2502 \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2502 \u2514\u2500\u2500 pom.xml \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 sesion \u2502 \u2514\u2500\u2500 servlets \u2502 \u251c\u2500\u2500 Comprueba.class \u2502 \u2514\u2500\u2500 ProcesaForm.class \u2514\u2500\u2500 test-classes 26 directories, 13 files /sesion002/WebContent/WEB-INF/web.xml Dos rutas a los servlets <?xml version=\"1.0\" encoding=\"UTF-8\"?> <web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\" id=\"WebApp_ID\" version=\"4.0\"> <display-name>sesion002</display-name> <welcome-file-list> <welcome-file>index.jsp</welcome-file> </welcome-file-list> <servlet> <servlet-name>Procesa el formulario</servlet-name> <servlet-class>cl.lherrera.sesion.servlets.ProcesaForm</servlet-class> </servlet> <servlet-mapping> <servlet-name>Procesa el formulario</servlet-name> <url-pattern>/procesaForm</url-pattern> </servlet-mapping> <servlet> <servlet-name>Comprueba el valor</servlet-name> <servlet-class>cl.lherrera.sesion.servlets.Comprueba</servlet-class> </servlet> <servlet-mapping> <servlet-name>Comprueba el valor</servlet-name> <url-pattern>/comprueba</url-pattern> </servlet-mapping> </web-app> La vistas /sesion002/WebContent/index.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Insert title here</title> </head> <body> <form action=\"procesaForm\" method=\"post\"> Valor a grabar en la sesi\u00f3n: <input type=\"text\" name=\"valor\" placeholder='<%=session.getAttribute(\"valor\")%>' /> <button type=\"submit\">Enviar</button> </form> </body> </html> /sesion002/WebContent/recibe.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Recibe</title> </head> <body> <% String valor = (String) session.getAttribute(\"valor\"); %> <h1>El valor entregado en sesi\u00f3n es: <%=valor %></h1> <a href=\"comprueba\">Compruebalo</a> </body> </html> /sesion002/WebContent/comprueba.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Comprueba</title> </head> <body> <% String valor = (String) request.getSession().getAttribute(\"valor\"); %> <h1><%=valor %></h1> </body> </html> Los servlets, controladores. /sesion002/src/main/java/cl/lherrera/sesion/servlets/ProcesaForm.java package cl.lherrera.sesion.servlets; import java.io.IOException; import java.util.logging.Logger; import javax.servlet.ServletException; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.HttpSession; public class ProcesaForm extends HttpServlet{ private static final long serialVersionUID = 1421144908062873148L; Logger logger = Logger.getLogger(ProcesaForm.class.getName()); @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) { HttpSession session = req.getSession(); session.setAttribute(\"valor\", req.getParameter(\"valor\") ); try { req.getRequestDispatcher(\"recibe.jsp\").forward(req, resp); } catch (ServletException | IOException e) { logger.severe(e.getMessage()); } } } \u00b4/sesion002/src/main/java/cl/lherrera/sesion/servlets/Comprueba.java\u00b4 package cl.lherrera.sesion.servlets; import java.io.IOException; import java.util.logging.Logger; import javax.servlet.ServletException; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.HttpSession; public class ProcesaForm extends HttpServlet{ private static final long serialVersionUID = 1421144908062873148L; Logger logger = Logger.getLogger(ProcesaForm.class.getName()); @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) { HttpSession session = req.getSession(); session.setAttribute(\"valor\", req.getParameter(\"valor\") ); try { req.getRequestDispatcher(\"recibe.jsp\").forward(req, resp); } catch (ServletException | IOException e) { logger.severe(e.getMessage()); } } }","title":"Ejemplo 1: Env\u00edo valor a otro JSP"},{"location":"ejercicios/servlets/sesion-cookies/sesion/#ejemplo-2-envio-objeto","text":"Se necesita almacenar la informaci\u00f3n de los usuarios para el sitio de forma global y no disponemos de una base de datos para que realice esta tarea, es por eso que lo haremos usando sesion, que almacena una lista, en la sesi\u00f3n, lo que permite utilizarla de forma global. Adem\u00e1s podremos ver qu\u00e9 es lo que pasa cuando esta sesi\u00f3n se cierra. Estructura: ./ \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u251c\u2500\u2500 WEB-INF \u2502 \u2502 \u251c\u2500\u2500 lib \u2502 \u2502 \u2514\u2500\u2500 web.xml \u2502 \u251c\u2500\u2500 index.jsp \u2502 \u2514\u2500\u2500 revisaTabla.jsp \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u251c\u2500\u2500 sesion \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 servlets \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 CerrarSesion.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ProcesaForm.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 RevisaTabla.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 session \u2502 \u2502 \u2502 \u2514\u2500\u2500 modelo \u2502 \u2502 \u2502 \u2514\u2500\u2500 Usuario.java \u2502 \u2502 \u2514\u2500\u2500 resources \u2502 \u2514\u2500\u2500 test \u2502 \u251c\u2500\u2500 java \u2502 \u2514\u2500\u2500 resources \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2502 \u2514\u2500\u2500 maven \u2502 \u2502 \u2514\u2500\u2500 cl.lherrera \u2502 \u2502 \u2514\u2500\u2500 sesion004 \u2502 \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2502 \u2514\u2500\u2500 pom.xml \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u251c\u2500\u2500 sesion \u2502 \u2502 \u2514\u2500\u2500 servlets \u2502 \u2502 \u251c\u2500\u2500 CerrarSesion.class \u2502 \u2502 \u251c\u2500\u2500 ProcesaForm.class \u2502 \u2502 \u2514\u2500\u2500 RevisaTabla.class \u2502 \u2514\u2500\u2500 session \u2502 \u2514\u2500\u2500 modelo \u2502 \u2514\u2500\u2500 Usuario.class \u2514\u2500\u2500 test-classes 30 directories, 16 files /sesion004/WebContent/WEB-INF/web.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\" id=\"WebApp_ID\" version=\"4.0\"> <display-name>sesion002</display-name> <welcome-file-list> <welcome-file>index.jsp</welcome-file> </welcome-file-list> <servlet> <servlet-name>Procesa el formulario</servlet-name> <servlet-class>cl.lherrera.sesion.servlets.ProcesaForm</servlet-class> </servlet> <servlet-mapping> <servlet-name>Procesa el formulario</servlet-name> <url-pattern>/procesaForm</url-pattern> </servlet-mapping> <servlet> <servlet-name>muestra una tabla</servlet-name> <servlet-class>cl.lherrera.sesion.servlets.RevisaTabla</servlet-class> </servlet> <servlet-mapping> <servlet-name>muestra una tabla</servlet-name> <url-pattern>/revisarTabla</url-pattern> </servlet-mapping> <servlet> <servlet-name>Cierra sesion</servlet-name> <servlet-class>cl.lherrera.sesion.servlets.CerrarSesion</servlet-class> </servlet> <servlet-mapping> <servlet-name>Cierra sesion</servlet-name> <url-pattern>/cerrarSesion</url-pattern> </servlet-mapping> </web-app> Las vistas /sesion004/WebContent/index.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Index</title> </head> <body> <% String mensaje = (String) request.getAttribute(\"mensaje\"); %> <%=(mensaje != null)? mensaje: \"\" %> <form action=\"procesaForm\" method=\"post\"> <fieldset> <legend>Ingreso de usarios</legend> <p> Nombre: <input type=\"text\" name=\"nombre\"> <br /> </p> <p> Correo: <input type=\"text\" name=\"correo\"> <br /> </p> <p> Tel\u00e9fono: <input type=\"text\" name=\"telefono\"> <br /> </p> </fieldset> <button type=\"submit\">Agregar usuario</button> </form> <p> <a href=\"revisarTabla\">Revisar la tabla</a> | <a href=\"cerrarSesion\">Cerrar sesion</a> </p> </body> </html> /sesion004/WebContent/revisaTabla.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@ page import=\"cl.lherrera.session.modelo.Usuario\"%> <%@ page import=\"java.util.List\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Revisa Tabla</title> </head> <body> <% List<Usuario> usuarios = (List<Usuario>) session.getAttribute(\"usuarios\"); %> <table border=\"1\"> <tr> <th>Nombre</th> <th>Correo</th> <th>Tel\u00e9fono</th> </tr> <%if(usuarios == null){ %> <tr> <td colspan=\"3\">No existen registros...</td> </tr> <%}else { %> <%for (Usuario usuario: usuarios) { %> <tr> <td><%=usuario.getNombre() %></td> <td><%=usuario.getCorreo() %></td> <td><%=usuario.getTelefono() %></td> </tr> <%} %> <%} %> </table> <a href=\"procesaForm\">Volver</a> </body> </html> Los Servlets /sesion004/src/main/java/cl/lherrera/sesion/servlets/ProcesaForm.java package cl.lherrera.sesion.servlets; import java.io.IOException; import java.util.ArrayList; import java.util.List; import java.util.logging.Logger; import javax.servlet.ServletException; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.HttpSession; import cl.lherrera.session.modelo.Usuario; public class ProcesaForm extends HttpServlet{ private static final long serialVersionUID = 1421144908062873148L; private static Logger logger = Logger.getLogger(ProcesaForm.class.getName()); @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) { HttpSession session = req.getSession(); List<Usuario> usuarios = new ArrayList<>(); if(session.getAttribute(\"usuarios\") == null) { session.setAttribute(\"usuarios\", usuarios); } usuarios = (List<Usuario>) session.getAttribute(\"usuarios\"); String nombre = req.getParameter(\"nombre\"); String correo = req.getParameter(\"correo\"); String telefono = req.getParameter(\"telefono\"); Usuario usuario = new Usuario(); usuario.setNombre(nombre); usuario.setCorreo(correo); usuario.setTelefono(telefono); usuarios.add(usuario); session.removeAttribute(\"usuarios\"); session.setAttribute(\"usuarios\", usuarios); req.setAttribute(\"mensaje\", \"Usuario \" + usuario.getNombre() + \" ingresado, consulte tabla\"); try { req.getRequestDispatcher(\"index.jsp\").forward(req, resp); } catch (ServletException | IOException e) { logger.severe(e.getMessage()); } } @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { try { req.getRequestDispatcher(\"index.jsp\").forward(req, resp); } catch (ServletException | IOException e) { logger.severe(e.getMessage()); } } } /sesion004/src/main/java/cl/lherrera/sesion/servlets/RevisaTabla.java package cl.lherrera.sesion.servlets; import java.io.IOException; import java.util.logging.Logger; import javax.servlet.ServletException; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; public class RevisaTabla extends HttpServlet{ private static final long serialVersionUID = 142114490806232148L; private static Logger logger = Logger.getLogger(RevisaTabla.class.getName()); @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { // sin hacer nada m\u00e1s que redirigir try { req.getRequestDispatcher(\"revisaTabla.jsp\").forward(req, resp); } catch (ServletException | IOException e) { logger.severe(e.getMessage()); } } } /sesion004/src/main/java/cl/lherrera/sesion/servlets/CerrarSesion.java package cl.lherrera.sesion.servlets; import java.io.IOException; import java.util.logging.Logger; import javax.servlet.ServletException; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.HttpSession; public class CerrarSesion extends HttpServlet{ private static final long serialVersionUID = -7437014430757537933L; private static Logger logger = Logger.getLogger(CerrarSesion.class.getName()); @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { HttpSession session = req.getSession(); session.removeAttribute(\"usuarios\"); session.invalidate(); req.setAttribute(\"mensaje\", \"Sesi\u00f3n eliminada...\"); try { req.getRequestDispatcher(\"index.jsp\").forward(req, resp); } catch (ServletException | IOException e) { logger.severe(e.getMessage()); } } } Como ejercicio queda crear un inicio de sesi\u00f3n simple, (siempre se podr\u00e1 entrar, el usuario se guarda en una variable de sesi\u00f3n), que en la parte superior aparezca un saludo al usuario que inici\u00f3n sesi\u00f3n.","title":"Ejemplo 2: Env\u00edo objeto"},{"location":"ejercicios/spring/jwt/basico/","text":"1 Ejemplo b\u00e1sico Proyecto posee errores de negocio, como no poseer un objeto est\u00e1ndar de retorno, ya que hay veces en que se retorna un a cadena y otras un json, estas est\u00e1n \"algunas\" solucionadas en el siguiente proyecto. Implementar el retorno del token , en un campo que se llame data , y el status, para no tener ambig\u00fcedades al momento de esperar un tipo json y un plain string . Es mejor estandarizar la informaci\u00f3n que se usar\u00e1 de interfaz La siguiente aplicaci\u00f3n, muestra la utilizaci\u00f3n de un ejemplo b\u00e1sico del uso de JWT. Se puede registrar un usuario, listarlo e ingresarlo, con restricciones de acceso a listar. Se puede personalizar el campo que usamos como username o el password , el tipo de dato encargado de controlar la seguridad en Spring lo puede manejar; pero para hacerlo necesitamos http.formLogin().usernameParameter(\"correo\") , y esto est\u00e1 m\u00e1s bien pensado para funcionar con MVC . Se descarta el punto anterior ya que el acceso basado en formularios, altera el uso de la API, por ejemplo, en el caso de un error en el intento de autenticaci\u00f3n, nos llevar\u00eda a la p\u00e1gina de login, lo que en el caso de estar siendo consumida, no servir\u00eda una respuesta en `html`` con la p\u00e1gina de inicio de sesi\u00f3n en reemplazo de la que se tiene en el Front. El uso de @Controller no ser\u00e1 necesario, no retornamos vistas, retornamos Json y txt . Es por eso que usaremos @RestController . 1.1 Notas 1.1.1 Head First . Para poder implementar la seguridad en nuestra aplicaci\u00f3n usando JWT , debemos cumplir con las siguientes reglas: Se necesita identificar un username y un password , aunque nuestros campos en la base de datos se llamen de forma distinta, esto lo personalizamos en el modelo, como es el caso de este ejemplo, donde nuestro username se llama correo . y el password se llama contrasenia . Se necesitan implementar las siguientes clases para la administraci\u00f3n de la seguridad: JwtTokenFilter : Extiende de OncePerRequestFilter , es decir, que implementar\u00e1 los m\u00e9todos necesarios para que por cada request este filtro ser\u00e1 aplicado. El m\u00e9todo a implementar es doFilterInternal , que se le debe implementar una l\u00f3gica para que cree un usuario autenticado si es que el token dado es v\u00e1lido, en caso contrario no se crea a este usuario. JwtTokenProvider : No extiende de otra clase y proporciona los servicios del token como lo son: init : Inicia el valor de la clave secreta, cuando se crea este objeto, justo despu\u00e9s (de la construcci\u00f3n) gracias a su anotaci\u00f3n @PostConstruct . createToken : Utilizando el nombre de usuario y la lista de los roles, se crear\u00e1 un token con las condiciones de validez que le indiquemos, como por ejemplo, el tiempo de duraci\u00f3n entre otras personalizaciones, veremos algunos de estos datos en el archivo de propiedades de la aplicaci\u00f3n. getAuthentication : Es el m\u00e9todo que es llamado cuando el JwtTokenFilter , crea el objeto Authentication luego de comprobar si el token es v\u00e1lido o no if (token != null && jwtTokenProvider.validateToken(token)) (extracto de implementaci\u00f3n en JwtTokenFilter )\u001c. getUsername : M\u00e9todo que obtiene informaci\u00f3n del usuario que viene en el token , gracias a parseClaimsJws , en este caso, tenemos el nombre del usuario. Piensen en la necesidad de disponer de informaci\u00f3n del usuario en linea, en una sesi\u00f3n sin estado. Solamente el token mantiene este estado y la informaci\u00f3n del usuario autenticado est\u00e1 all\u00ed, este m\u00e9todo se encarga de extraer esta informaci\u00f3n. resolveToken : Se resuelve el \"Bearer \" , recordando que Authorization: Bearer <access_token> el verdadero token es <access_token> \u001cel Bearer , es nuestro transportador que por defecto es Bearer , pero podr\u00eda cambiar y lo resolver\u00edamos en la implementaci\u00f3n de este m\u00e9todo, adem\u00e1s de personalizar el nombre del campo del Header , que en este caso ser\u00e1 Authorizacion y no Authorization . Lo que en realidad debe hacer es recuperar el token puro, sin el Bearer \u001d. validateToken : Si el token logra ser parseado \u001d, entonces se asume que es un Token v\u00e1lido . parseClaimsJws analiza la llave (no un token que exista hipot\u00e9ticamente, la comparaci\u00f3n se realiza entre el token que est\u00e1 en el request \u001d y la clave cifrada \u001d, de esta clase, cifrada justo despu\u00e9s de construirse este objeto usando init ). JwtTokenFilterConfigurer : Extiende de SecurityConfigurerAdapter<DefaultSecurityFilterChain, HttpSecurity> , que es un adaptador de la seguridad de Spring security - SecurityConfigurer + SecurityBuilder , este \u00faltimo posee un m\u00e9todo configure(HttpSecurity http) sobrecargado que al recibir un tipo HttpSecurity por cada request encadenar\u00e1 el JwtTokenFilter justo antes de UsernamePasswordAuthenticationFilter \u001cy que tiene como misi\u00f3n verificar en cada petici\u00f3n antes de que se pida el usuario, crearlo con la informaci\u00f3n contenida en el token. WebSecurityConfig \u001c: Extiende de WebSecurityConfigurerAdapter otro adaptador como SecurityConfigurerAdapter ; pero con m\u00e1s funcionalidad, tambi\u00e9n posee un m\u00e9todo protected void configure(HttpSecurity http) , pero a diferencia del que se sobre escribe en SecurityConfigurerAdapter , el de \u001c WebSecurityConfigurerAdapter que sobre escribimos ac\u00e1, posee el modificador de acceso protected , lo que hace que realmente no sea el mismo m\u00e9todo. Y as\u00ed es ya que el anterior, posee un DefaultSecurityFilterChain , lo que no es el caso del configure que est\u00e1 presente en esta clase. En pocas palabras, el configure de WebSecurityConfigurerAdapter tiene la posibilidad de entregar o no accesos a diferentes endspoints seg\u00fan los privilegios que posea un usuario. ( roles, si est\u00e1 autenticado, si no) adem\u00e1s de efectuar acciones como redirigir a ventanas en caso de fallos en el inicio de sesi\u00f3n. a diferencia de el otro configure p\u00fablico, que ya sabemos, efect\u00faa una validaci\u00f3n del token en cada petici\u00f3n, este filtro se a\u00f1ade a esta configuraci\u00f3n WEB justo en: http.apply(new JwtTokenFilterConfigurer(jwtTokenProvider) ); , y es el jwtTokenProvider inyectado por Spring justo en esta clase, con que trabajar\u00e1n las clases anteriores que lo posean como atributo, y es por eso, que es inyectado ac\u00e1 y no en las otras clases. Finalmente, esta configuraci\u00f3n tendr\u00e1 adem\u00e1s del control de acceso a los servicios, si no que tendr\u00e1 un filtro por token que en caso de venir y ser v\u00e1lido, permitir\u00e1 el acceso al recurso o retornar\u00e1 un c\u00f3digo de error. Este tipo, consume dependencias de Spring Security , la dependencia de jjwt son solamente para la generaci\u00f3n del token por ejemplo Jwts.builder , pero el configurer forma parte de Spring Security . Adem\u00e1s de las siguientes condiciones para la administraci\u00f3n del usuario y contrase\u00f1a como servicios. Se debe tener una tabla para el manejo de usuarios y debe contar con al menos tres campos: Un campo String que maneje al usuario llamado username (el nombre no es obligatorio podemos usar otro nombre en la base de datos, como vemos en el ejemplo que el campo en la base de datos se llama correo , mientras que el campo realmente en la entidad se llama username ) . Un campo String que maneje la contrase\u00f1a. Con las mismas posibilidades de personalizaci\u00f3n que se indican en el punto anterior. Un campo List<EntidadRol> con la anotaci\u00f3n @ElementCollection(fetch = FetchType.EAGER) para que se maneje la relaci\u00f3n en la base de datos, donde veremos que cuando lo ejecutamos se crea una tabla intermedia con la informaci\u00f3n entre usuarios y roles. Por lo dem\u00e1s contiene todo lo que posee un pojo o mejor dicho, un bean . Una clase que maneje los roles, de tipo Enum , que posea la lista de tipos posibles, como roles. En una aplicaci\u00f3n, todos los tipos de listas cortas, deber\u00edan ser tratados de esta forma, si estamos seguros que la lista no ser\u00e1 larga. Extiende de GrantedAuthority , que al sobre escribir el m\u00e9todo: getAuthority() es capaz de obtener el rol. En la tabla intermedia que existir\u00e1 en la base de datos, veremos un n\u00famero que representa el \u00edndice del tipo en la lista Enum , donde: ROLE_ADMINISTRADOR , ser\u00eda el 0 . El servicio que atienda esta interfaz, en el caso del ejemplo ServicioUsuario , debe extender de UserDetailsService que posee un m\u00e9todo loadUserByUsername , este m\u00e9todo, es capaz de crear un UserDetails con el nombre de usuario. En el ejemplo, es el correo . Como es la capa de servicio, se habla a\u00fan con la jerga de negocio y el username es llamado correo . Este UserDetails , es usado por el JwtTokenProvider inyectado por Spring en su m\u00e9todo Authentication getAuthentication(String token) para poder crear el usuario con la informaci\u00f3n del token. (de esta forma, en una sesi\u00f3n sin estado, se transporta la informaci\u00f3n que contiene el token de manera encriptada, como por ejemplo el nombre de usuario o sus credenciales). 1.2 Implementaci\u00f3n /jwtapp/src/main/java cl.lherrera.jwtapp JwtappApplication.java package cl.lherrera.jwtapp; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class JwtappApplication { public static void main(String[] args) { SpringApplication.run(JwtappApplication.class, args); } } cl.lherrera.jwtapp.apiexception RestServiceException.java package cl.lherrera.jwtapp.apiexception; import org.springframework.http.HttpStatus; public class RestServiceException extends RuntimeException { private static final long serialVersionUID = 5037553749745142029L; private final String message; private final HttpStatus httpStatus; public RestServiceException(String message, HttpStatus httpStatus) { super(); this.message = message; this.httpStatus = httpStatus; } @Override public String getMessage() { return message; } public HttpStatus getHttpStatus() { return httpStatus; } } cl.lherrera.jwtapp.config AppConfig.java package cl.lherrera.jwtapp.config; import javax.sql.DataSource; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.PropertySource; import org.springframework.core.env.Environment; import org.springframework.jdbc.datasource.DriverManagerDataSource; @Configuration @ComponentScan(\"cl.lherrera.jwtapp\") @PropertySource(\"classpath:database.properties\") public class AppConfig { @Autowired Environment environment; @Bean DataSource dataSource() { DriverManagerDataSource driverManagerDataSource = new DriverManagerDataSource(); driverManagerDataSource.setUrl(environment.getProperty(\"url\")); driverManagerDataSource.setUsername(environment.getProperty(\"username\")); driverManagerDataSource.setPassword(environment.getProperty(\"dbpassword\")); driverManagerDataSource.setDriverClassName(environment.getProperty(\"driverClassName\")); return driverManagerDataSource; } } SQLiteDialect.java package cl.lherrera.jwtapp.config; import java.sql.Types; import org.hibernate.dialect.Dialect; import org.hibernate.dialect.function.StandardSQLFunction; import org.hibernate.dialect.function.SQLFunctionTemplate; import org.hibernate.dialect.function.VarArgsSQLFunction; import org.hibernate.type.StandardBasicTypes; public class SQLiteDialect extends Dialect { public SQLiteDialect() { super(); registerColumnType(Types.BIT, \"integer\"); registerColumnType(Types.TINYINT, \"tinyint\"); registerColumnType(Types.SMALLINT, \"smallint\"); registerColumnType(Types.INTEGER, \"integer\"); registerColumnType(Types.BIGINT, \"bigint\"); registerColumnType(Types.FLOAT, \"float\"); registerColumnType(Types.REAL, \"real\"); registerColumnType(Types.DOUBLE, \"double\"); registerColumnType(Types.NUMERIC, \"numeric\"); registerColumnType(Types.DECIMAL, \"decimal\"); registerColumnType(Types.CHAR, \"char\"); registerColumnType(Types.VARCHAR, \"varchar\"); registerColumnType(Types.LONGVARCHAR, \"longvarchar\"); registerColumnType(Types.DATE, \"date\"); registerColumnType(Types.TIME, \"time\"); registerColumnType(Types.TIMESTAMP, \"timestamp\"); registerColumnType(Types.BINARY, \"blob\"); registerColumnType(Types.VARBINARY, \"blob\"); registerColumnType(Types.LONGVARBINARY, \"blob\"); // registerColumnType(Types.NULL, \"null\"); registerColumnType(Types.BLOB, \"blob\"); registerColumnType(Types.CLOB, \"clob\"); registerColumnType(Types.BOOLEAN, \"integer\"); registerFunction(\"concat\", new VarArgsSQLFunction(StandardBasicTypes.STRING, \"\", \"||\", \"\")); registerFunction(\"mod\", new SQLFunctionTemplate(StandardBasicTypes.INTEGER, \"?1 % ?2\")); registerFunction(\"substr\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); registerFunction(\"substring\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); } public boolean supportsIdentityColumns() { return true; } public boolean hasDataTypeInIdentityColumn() { return false; // As specify in NHibernate dialect } public String getIdentityColumnString() { // return \"integer primary key autoincrement\"; return \"integer\"; } public String getIdentitySelectString() { return \"select last_insert_rowid()\"; } public boolean supportsLimit() { return true; } public String getLimitString(String query, boolean hasOffset) { return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? \" limit ? offset ?\" : \" limit ?\") .toString(); } public boolean bindLimitParametersInReverseOrder() { return true; } public boolean supportsTemporaryTables() { return true; } public String getCreateTemporaryTableString() { return \"create temporary table if not exists\"; } public boolean dropTemporaryTableAfterUse() { return false; } public boolean supportsCurrentTimestampSelection() { return true; } public boolean isCurrentTimestampSelectStringCallable() { return false; } public String getCurrentTimestampSelectString() { return \"select current_timestamp\"; } public boolean supportsUnionAll() { return true; } public boolean hasAlterTable() { return false; // As specify in NHibernate dialect } public boolean dropConstraints() { return false; } public String getAddColumnString() { return \"add column\"; } public String getForUpdateString() { return \"\"; } public boolean supportsOuterJoinForUpdate() { return false; } public String getDropForeignKeyString() { throw new UnsupportedOperationException(\"No drop foreign key syntax supported by SQLiteDialect\"); } public String getAddForeignKeyConstraintString(String constraintName, String[] foreignKey, String referencedTable, String[] primaryKey, boolean referencesPrimaryKey) { throw new UnsupportedOperationException(\"No add foreign key syntax supported by SQLiteDialect\"); } public String getAddPrimaryKeyConstraintString(String constraintName) { throw new UnsupportedOperationException(\"No add primary key syntax supported by SQLiteDialect\"); } public boolean supportsIfExistsBeforeTableName() { return true; } public boolean supportsCascadeDelete() { return false; } } cl.lherrera.jwtapp.controller /jwtapp/src/main/java/cl/lherrera/jwtapp/controller/ControladorAplicacion.java package cl.lherrera.jwtapp.controller; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; @RestController @RequestMapping(value = \"/api/v1\") public class ControladorAplicacion { @GetMapping(path = \"/isAlive\") public String isAlive() { return \"200\"; } } /jwtapp/src/main/java/cl/lherrera/jwtapp/controller/ControladorIngreso.java /** * Luego de crear al usuario, lo accedemos con sus credenciales * para obtener un token. * * POST: http://localhost:8080/api/v1/iniciarsesion?correo=l.herrera.garnica@gmail.com&password=1234 * * Sin cuerpo * * Respuesta esperada, el token, sin el Bearer. * */ package cl.lherrera.jwtapp.controller; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController; import cl.lherrera.jwtapp.service.ServicioUsuario; @RestController @RequestMapping(path = \"/api/v1/iniciarsesion\") public class ControladorIngreso { private Logger logger = LoggerFactory.getLogger(ControladorIngreso.class); @Autowired private ServicioUsuario servicioUsuario; @PostMapping(path = {\"\", \"/\"}) public String iniciarSesion( @RequestParam String correo, @RequestParam String password) { logger.debug( String.format(\"INICIARSESION: ]%s[, ]%s[\", correo, password) ); return servicioUsuario.iniciarSesion(correo, password); } } /jwtapp/src/main/java/cl/lherrera/jwtapp/controller/ControladorRegistro.java /** * Servicio que registra a un usuario. Se pide que adem\u00e1s retorne el token. * No es bueno que un m\u00e9todo realice dos tareas principales. Pero en esta ocaci\u00f3n * lo hacemos para obtener el token y no tener que hacer el login. En un sistema * productivo, deber\u00eda solo registrar. Luego, deber\u00edamos iniciar sesi\u00f3n de manera manual * * Headers: * Content-Type:application/json * POST: * http://localhost:8080/api/v1/registrar * BODY-EXAMPLE * * <code> { \"nombre\": \"Luis Herrera\", \"email\": \"l.herrera.garnica@gmail.com\", \"password\": \"1234\", \"roles\": [\"ROLE_ADMINISTRADOR\"] } <code> */ package cl.lherrera.jwtapp.controller; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; import cl.lherrera.jwtapp.dto.UsuarioDTO; import cl.lherrera.jwtapp.service.ServicioUsuario; // para que no retorne vistas. @RestController @RequestMapping(path = \"/api/v1/registrar\") public class ControladorRegistro { private Logger logger = LoggerFactory.getLogger(ControladorRegistro.class); @Autowired ServicioUsuario servicioUsuario; @PostMapping(path = { \"\", \"/\" }) public String registrarUsuaio(@RequestBody UsuarioDTO usuarioDTO) { logger.debug(\"Registrando al usuario: \" + usuarioDTO.toString()); return servicioUsuario.registraNuevoUsuario(usuarioDTO); } } /jwtapp/src/main/java/cl/lherrera/jwtapp/controller/ControladorUsuario.java package cl.lherrera.jwtapp.controller; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; import cl.lherrera.jwtapp.dto.UsuarioDTO; import cl.lherrera.jwtapp.service.ServicioUsuario; @RestController @RequestMapping(\"/api/v1/usuarios\") public class ControladorUsuario { @Autowired private ServicioUsuario servicioUsuario; /** * Servicio para listar los usuarios, requiere ser accedido mediante el uso de * tokens <code> * POST: http://localhost:8080/api/v1/usuarios/ * * Headers * * { * Autorizacion: Bearer ...token que generemos, este par\u00e1metro * lo personalizamos en HEADER_AUTHORIZATION_KEY (JwtToken.java) * } * </code> */ @GetMapping(path = { \"\", \"/\" }) public List<UsuarioDTO> listar() { return servicioUsuario.listaDeUsuarios(); } } cl.lherrera.jwtapp.dao /jwtapp/src/main/java/cl/lherrera/jwtapp/dao/UsuarioDao.java package cl.lherrera.jwtapp.dao; import java.util.Optional; import org.springframework.data.jpa.repository.JpaRepository; import org.springframework.stereotype.Repository; import cl.lherrera.jwtapp.model.Usuario; @Repository public interface UsuarioDao extends JpaRepository<Usuario, Integer> { boolean existsByUsername(String username); Optional<Usuario> findByUsername(String username); } cl.lherrera.jwtapp.dto package cl.lherrera.jwtapp.dto; import java.util.List; import cl.lherrera.jwtapp.model.Rol; public class UsuarioDTO { private String nombre; private String email; private String password; private List<Rol> roles; public UsuarioDTO() { } public UsuarioDTO(String nombre, String email, String password, List<Rol> roles) { super(); this.nombre = nombre; this.email = email; this.password = password; this.roles = roles; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public List<Rol> getRoles() { return roles; } public void setRoles(List<Rol> roles) { this.roles = roles; } @Override public String toString() { return \"UsuarioDTO [nombre=\" + nombre + \", email=\" + email + \", password=\" + password + \", roles=\" + roles + \"]\"; } } cl.lherrera.jwtapp.mapper UsuarioMapper.java package cl.lherrera.jwtapp.mapper; import java.util.Arrays; import java.util.List; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import cl.lherrera.jwtapp.dto.UsuarioDTO; import cl.lherrera.jwtapp.model.Usuario; public class UsuarioMapper { private static Logger logger = LoggerFactory.getLogger(UsuarioMapper.class); private UsuarioMapper() {} /** * Transforma un Usuario a un UsuarioDTO */ public static UsuarioDTO usuarioADto(Usuario usuario) { logger.debug(\"Usuario: \" + usuario.toString()); UsuarioDTO dtoUsuario = new UsuarioDTO(); dtoUsuario.setNombre(usuario.getNombre() + \" \" + usuario.getApellido()); dtoUsuario.setEmail(usuario.getUsername()); dtoUsuario.setRoles(usuario.getRoles()); dtoUsuario.setPassword(null); logger.debug(\"Transformado a DTO : \" + dtoUsuario.toString()); return dtoUsuario; } /** * clase privada para separar el nombre y el apellido que viene en un solo campo * desde el front se separa si viene con espacio no es muy elegante pero es una * soluci\u00f3n r\u00e1pida. */ private static List<String> getNombres(UsuarioDTO dtoUsuario) { return Arrays.asList(dtoUsuario.getNombre().split(\" \")); } /** * Transforma un UsuarioDTO a un Usuario */ public static Usuario dtoAUsuario(UsuarioDTO dtoUsuario) { logger.debug(\"UsuarioDTO: \" + dtoUsuario.toString()); List<String> nombres = getNombres(dtoUsuario); String nombre = (nombres.size() > 0) ? nombres.get(0) : null; String apellido = (nombres.size() > 0) ? nombres.get(1) : null; Usuario usuario = new Usuario(); usuario.setNombre(nombre); usuario.setApellido(apellido); usuario.setUsername(dtoUsuario.getEmail()); usuario.setPassword(dtoUsuario.getPassword()); usuario.setRoles(dtoUsuario.getRoles()); logger.debug(\"Transformado a Usuario: \" + usuario.toString()); return usuario; } } cl.lherrera.jwtapp.model Rol.java package cl.lherrera.jwtapp.model; import org.springframework.security.core.GrantedAuthority; public enum Rol implements GrantedAuthority { ROLE_ADMINISTRADOR, ROLE_USUARIO; @Override public String getAuthority() { return name(); } } Usuario.java package cl.lherrera.jwtapp.model; import java.util.List; import javax.persistence.Column; import javax.persistence.ElementCollection; import javax.persistence.Entity; import javax.persistence.FetchType; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; @Entity public class Usuario { @Id @GeneratedValue(strategy = GenerationType.AUTO) Integer id; String nombre; String apellido; @Column(name = \"correo\") String username; @Column(name = \"contrasenia\") String password; @ElementCollection(fetch = FetchType.EAGER) List<Rol> roles; public Usuario() {} public Usuario(Integer id, String nombre, String apellido, String username, String password, List<Rol> roles) { super(); this.id = id; this.nombre = nombre; this.apellido = apellido; this.username = username; this.password = password; this.roles = roles; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } public String getApellido() { return apellido; } public void setApellido(String apellido) { this.apellido = apellido; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public List<Rol> getRoles() { return roles; } public void setRoles(List<Rol> roles) { this.roles = roles; } @Override public String toString() { return \"Usuario [id=\" + id + \", nombre=\" + nombre + \", apellido=\" + apellido + \", username=\" + username + \", password=\" + password + \", roles=\" + roles + \"]\"; } } cl.lherrera.jwtapp.security JwtTokenFilter.java package cl.lherrera.jwtapp.security; import java.io.IOException; import javax.servlet.FilterChain; import javax.servlet.ServletException; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import org.springframework.security.core.Authentication; import org.springframework.security.core.context.SecurityContextHolder; import org.springframework.web.filter.OncePerRequestFilter; import cl.lherrera.jwtapp.apiexception.RestServiceException; public class JwtTokenFilter extends OncePerRequestFilter { private JwtTokenProvider jwtTokenProvider; public JwtTokenFilter(JwtTokenProvider jwtTokenProvider) { this.jwtTokenProvider = jwtTokenProvider; } @Override protected void doFilterInternal( HttpServletRequest request, HttpServletResponse respose, FilterChain filterChain) throws ServletException, IOException { // extraemos el token del request, este debe ir en el header // con el nombre Authentication y en el valor String token = jwtTokenProvider.resolveToken(request); try { // si el token no es nulo y si es v\u00e1lido... if (token != null && jwtTokenProvider.validateToken(token)) { // creamos un objeto (new UsernamePasswordAuthenticationToken) // ya las credenciales no est\u00e1n disponibles, solamente `userDetails`` Authentication auth = jwtTokenProvider.getAuthentication(token); SecurityContextHolder.getContext().setAuthentication(auth); } } catch (RestServiceException ex) { SecurityContextHolder.clearContext(); respose.sendError(ex.getHttpStatus().value(), ex.getMessage()); return; } filterChain.doFilter(request, respose); } } JwtTokenFilterConfigurer.java package cl.lherrera.jwtapp.security; import org.springframework.security.config.annotation.SecurityConfigurerAdapter; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.web.DefaultSecurityFilterChain; import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter; public class JwtTokenFilterConfigurer extends SecurityConfigurerAdapter<DefaultSecurityFilterChain, HttpSecurity> { private JwtTokenProvider jwtTokenProvider; public JwtTokenFilterConfigurer(JwtTokenProvider jwtTokenProvider) { this.jwtTokenProvider = jwtTokenProvider; } @Override public void configure(HttpSecurity http) throws Exception { JwtTokenFilter customFilter = new JwtTokenFilter(jwtTokenProvider); http.addFilterBefore(customFilter, UsernamePasswordAuthenticationFilter.class); } } JwtTokenProvider.java package cl.lherrera.jwtapp.security; import java.util.Base64; import java.util.Date; import java.util.List; import java.util.Objects; import java.util.stream.Collectors; import javax.annotation.PostConstruct; import javax.servlet.http.HttpServletRequest; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.http.HttpStatus; import org.springframework.security.authentication.UsernamePasswordAuthenticationToken; import org.springframework.security.core.Authentication; import org.springframework.security.core.authority.SimpleGrantedAuthority; import org.springframework.security.core.userdetails.UserDetails; import org.springframework.stereotype.Component; import cl.lherrera.jwtapp.apiexception.RestServiceException; import cl.lherrera.jwtapp.model.Rol; import cl.lherrera.jwtapp.service.ServicioUsuario; // dependencia jjwt import io.jsonwebtoken.Claims; import io.jsonwebtoken.JwtException; import io.jsonwebtoken.Jwts; import io.jsonwebtoken.SignatureAlgorithm; @Component public class JwtTokenProvider { private Logger logger = LoggerFactory.getLogger(JwtTokenProvider.class); private final static String HEADER_AUTHORIZATION_KEY = \"Autorizacion\"; private final static String TOKEN_BEARER_VALUE = \"Bearer \"; // propiedad @Value(\"${security.jwt.token.secret-key}\") private String secretKey; // propiedad @Value(\"${security.jwt.token.expire-length}\") private long validityInMilliseconds; // servicio Implementado @Autowired private ServicioUsuario servicioUsuario; /** * Spring calls methods annotated with @PostConstruct * only once, just after the initialization * of bean properties. * https://www.baeldung.com/spring-postconstruct-predestroy * * Asigna el valor de la clave secreta */ @PostConstruct protected void init() { secretKey = Base64.getEncoder().encodeToString(secretKey.getBytes()); logger.debug(\"LLave inicializada: \" + secretKey); } public String createToken(String username, List<Rol> roles) { Claims claims = Jwts.claims().setSubject(username); List<SimpleGrantedAuthority> grats = roles.stream() .map(rol -> new SimpleGrantedAuthority(rol.getAuthority()) ) .filter(Objects::nonNull) .collect(Collectors.toList()); claims.put(\"auth\", grats); // expiraci\u00f3n del token Date now = new Date(); Date validity = new Date(now.getTime() + validityInMilliseconds); // creaci\u00f3n del token String token = Jwts.builder() .setClaims(claims) .setIssuedAt(now) .setExpiration(validity) .signWith(SignatureAlgorithm.HS256, secretKey) .compact(); return token; } /** * A partir del token se obtiene el nombre de usuario y luego, * se obtiene un `UserDetails`, que ya sabemos que es la * entidad que maneja como ususuario de sesi\u00f3n. */ public Authentication getAuthentication(String token) { UserDetails userDetails = servicioUsuario.loadUserByUsername(getUsername(token)); UsernamePasswordAuthenticationToken autenticacion; autenticacion = new UsernamePasswordAuthenticationToken( userDetails, \"\", userDetails.getAuthorities() ); return autenticacion; } /** * En la configuraci\u00f3n de seguridad * lo que sabe Spring es que el nombre * de usuario es el correo. */ private String getUsername(String token) { String userName = Jwts.parser() .setSigningKey(secretKey) .parseClaimsJws(token) .getBody() .getSubject(); return userName; } /** * Quitamos \"Bearer \" del principio del token */ public String resolveToken(HttpServletRequest req) { String tokenReal = null; String bearerToken = req.getHeader(HEADER_AUTHORIZATION_KEY); logger.debug(\"Bearer token: \" + bearerToken); boolean inicioOk = (bearerToken != null && bearerToken.startsWith(TOKEN_BEARER_VALUE)); if (inicioOk) { tokenReal = bearerToken.substring(TOKEN_BEARER_VALUE.length()); } return tokenReal; } /** * Si el token logra ser parseado, entonces se asume que es un * Token v\u00e1lido. `parseClaimsJws` analiza la llave (no un * token que exista hipoteticamente, la comparaci\u00f3n se * realiza entre el token que est\u00e1 en el request * y la clave cifrada de esta clase. cifrada * justo despu\u00e9s de construirse este * objeto `INIT`). */ public boolean validateToken(String token) { try { Jwts.parser().setSigningKey(secretKey).parseClaimsJws(token); return true; } catch (JwtException | IllegalArgumentException e) { throw new RestServiceException( \"Expired or invalid JWT token\", HttpStatus.INTERNAL_SERVER_ERROR ); } } } WebSecurityConfig.java package cl.lherrera.jwtapp.security; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.security.authentication.AuthenticationManager; import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity; import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter; import org.springframework.security.config.http.SessionCreationPolicy; import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder; import org.springframework.security.crypto.password.PasswordEncoder; @Configuration @EnableWebSecurity @EnableGlobalMethodSecurity(prePostEnabled = true) public class WebSecurityConfig extends WebSecurityConfigurerAdapter { @Autowired private JwtTokenProvider jwtTokenProvider; @Override protected void configure(HttpSecurity http) throws Exception { // sin verificaci\u00f3n csrf, inseguro. (Laravel) http.csrf().disable(); // sesi\u00f3n sin estado. http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS); // Autorizaci\u00f3n de peticiones. http.authorizeRequests() // servicios p\u00fablicos. .antMatchers( \"/api/v1/isAlive\", \"/api/v1/iniciarsesion\", \"/api/v1/registrar\").permitAll() // todos los dem\u00e1s. servicios, solamente para usuarios autenticados. .anyRequest().authenticated(); // Applies a {@link SecurityConfigurer} to this {@link SecurityBuilder} overriding any // {@link SecurityConfigurer} of the exact same class. Note that object hierarchies // are not considered. // // El filtro personaliizado que creamos en JwtTokenFilterConfigurer, donde // validamos el token, y si es v\u00e1lido crea el Authenticate, se aplica ac\u00e1 // es un filtro que se concatena a los que ya hemos puesto en este mismo // m\u00e9todo, se aplica antes que a todos por que JwtTokenFilterConfigurer // HttpSecurity.addFilterBefore(customFilter, UsernamePasswordAuthenticationFilter.class); // le decimos que el filtro lo realice antes que se ejecute la autenticaci\u00f3n con // user y password. http.apply(new JwtTokenFilterConfigurer(jwtTokenProvider) ); } @Bean @Override public AuthenticationManager authenticationManagerBean() throws Exception { return super.authenticationManagerBean(); } @Bean public PasswordEncoder passwordEncoder() { // fuerza = 12 (entre 4 y 31) return new BCryptPasswordEncoder(12); } } cl.lherrera.jwtapp.service ServicioUsuario.java package cl.lherrera.jwtapp.service; import java.util.List; import org.springframework.security.core.userdetails.UserDetailsService; import cl.lherrera.jwtapp.dto.UsuarioDTO; /** * Al extender UserDetailsService, traemos el m\u00e9todo loadUserByUsername, que * sobre escribimos en la implementaci\u00f3n, podremos ver que a veces se implementa * un implements UserDetailsService, pero esto causa confusiones ya que a veces * los desarrolladores que no conocen que este m\u00e9todo est\u00e1 en * UserDetailsService, lo ponen igual ac\u00e1, en this. y lo sobre escriben en la * implementaci\u00f3n, funcionando de todas formas por que Spring asume sobre * escrito el loadUserByUsername que le pertenece a UserDetailsService y no * ServicioUsuario. * */ public interface ServicioUsuario extends UserDetailsService { String iniciarSesion(String correo, String contrasenia); List<UsuarioDTO> listaDeUsuarios(); /** * Servicio encargado de registrar un usuario hay que tener en cuenta varias * cosas como el dar una buena encriptaci\u00f3n a la base de datos. */ String registraNuevoUsuario(UsuarioDTO usuarioDTO); } ServicioUsuarioImpl.java package cl.lherrera.jwtapp.service; import java.util.List; import java.util.stream.Collectors; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpStatus; import org.springframework.security.authentication.UsernamePasswordAuthenticationToken; import org.springframework.security.authentication.AuthenticationManager; import org.springframework.security.core.Authentication; import org.springframework.security.core.AuthenticationException; import org.springframework.security.core.userdetails.UserDetails; import org.springframework.security.core.userdetails.UsernameNotFoundException; import org.springframework.security.crypto.password.PasswordEncoder; import org.springframework.stereotype.Service; import cl.lherrera.jwtapp.apiexception.RestServiceException; import cl.lherrera.jwtapp.dao.UsuarioDao; import cl.lherrera.jwtapp.dto.UsuarioDTO; import cl.lherrera.jwtapp.mapper.UsuarioMapper; import cl.lherrera.jwtapp.model.Usuario; import cl.lherrera.jwtapp.security.JwtTokenProvider; @Service public class ServicioUsuarioImpl implements ServicioUsuario { private Logger logger = LoggerFactory.getLogger(ServicioUsuarioImpl.class); @Autowired UsuarioDao daoUsuario; @Autowired private AuthenticationManager authenticationManager; @Autowired private JwtTokenProvider jwtTokenProvider; @Autowired private PasswordEncoder passwordEncoder; @Override public String iniciarSesion(String correo, String contrasenia) { String token = \"\"; logger.debug(\"Inicio de la sesi\u00f3n: correo: \" + correo + \"contrase\u00f1a: \" + contrasenia); try { // intenta crear la autenticaci\u00f3n. // si no puede, se env\u00eda un AuthenticationException. Authentication objetoAutentificacion = new UsernamePasswordAuthenticationToken(correo, contrasenia); authenticationManager.authenticate(objetoAutentificacion); Usuario usuarioAutenticado = daoUsuario.findByUsername(correo).orElse(null); if (usuarioAutenticado != null) token = generaToken(usuarioAutenticado); } catch (AuthenticationException e) { throw new RestServiceException(\"username o password invalido\", HttpStatus.UNPROCESSABLE_ENTITY); } return token; } private String generaToken(Usuario usuario) { String token = jwtTokenProvider.createToken(usuario.getUsername(), usuario.getRoles()); logger.debug(\"Token generado: ...\" + token.substring(token.length() - 5)); return token; } @Override public List<UsuarioDTO> listaDeUsuarios() { List<UsuarioDTO> usuarios = daoUsuario.findAll().stream() // cada uno de los usuarios pasando a un DTO .map(usuario -> UsuarioMapper.usuarioADto(usuario)).collect(Collectors.toList()); logger.debug(\"Lista de usuarioDTO: \" + usuarios.toString()); return usuarios; } @Override public String registraNuevoUsuario(UsuarioDTO dtoUsuario) { String token = null; // verificar si el usuario existe para no ingresarlo otra vez Usuario usuario = daoUsuario.findByUsername(dtoUsuario.getEmail()).orElse(null); if (usuario == null) { String constraseniaEnDuro = dtoUsuario.getPassword(); String constraseniaEncriptada = passwordEncoder.encode(constraseniaEnDuro); dtoUsuario.setPassword(constraseniaEncriptada); // guardamos el usuario convertido desde un DTO usuario = UsuarioMapper.dtoAUsuario(dtoUsuario); logger.debug(\"Registrando nuevo usuario: \" + usuario.toString()); daoUsuario.save(usuario); logger.debug(\"Usuario nuevo registrado: \" + usuario.toString()); logger.debug(\"Generando token... \"); token = this.generaToken(usuario); } return token; } /** * Se implementa desde UserDetailsService, interface que extiende * ServicioUsuario. * * Se supone que se debe cargar el nombre de usuario y en este caso es * correo, es por que se exige un valor de nombre de usuario, que puede ser * por ejemplo: rut, correo, nombre de usuario, tag name, etc. El c\u00f3mo se maneje * depender\u00e1 de nuestra implementaci\u00f3n. * * Construye un `UserDetails` est\u00e1tico, con la informaci\u00f3n que se le * proporcione. En este caso, el nombre de usuario que ven\u00eda como argumento y la * contrase\u00f1a que est\u00e1 en la base de datos. Este proceso es implementado ya que * este \u00fanico m\u00e9todo, posee acceso a la contrase\u00f1a del usuario. La t\u00e9cnica usada * es que cada m\u00e9todo retorna un `UserBuilder`, hasta llegar a `build()`, es * cuando finalmente es convertido en un `UserDetail`. * **/ @Override public UserDetails loadUserByUsername(String correo) throws UsernameNotFoundException { final Usuario user = daoUsuario.findByUsername(correo).orElse(null); if (user == null) { throw new UsernameNotFoundException(\"Usuario '\" + correo + \"' no encontrado\"); } return org.springframework.security.core.userdetails.User// .withUsername(correo).password(user.getPassword()).authorities(user.getRoles()).accountExpired(false) .accountLocked(false).credentialsExpired(false).disabled(false).build(); } } /jwtapp/src/main/resources application.properties spring.jpa.generate-ddl=true spring.jpa.database-platform=cl.lherrera.jwtapp.config.SQLiteDialect spring.jpa.show-sql=true spring.jpa.hibernate.ddl-auto=create-drop spring.jpa.properties.hibernate.format_sql=true # Configuraci\u00f3n para el token. security.jwt.token.secret-key=DLatam-SecretKey security.jwt.token.expire-length=3600000 # Para mostrar el log de debug # esto no se mostrar\u00eda en producci\u00f3n logging.level.org.springframework.web=DEBUG #logging.level.root=DEBU logging.level.cl.lherrera.jwtapp=DEBUG logging.file.name=logs database.properties driverClassName=org.sqlite.JDBC url=jdbc:sqlite:baseDeDatos.db username=jpaspring password=sa /jwtapp/pom.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.7.RELEASE</version> <relativePath/> <!-- lookup parent from repository --> </parent> <groupId>cl.lherrera</groupId> <artifactId>jwtapp</artifactId> <version>20.0.0</version> <name>jwtapp</name> <description>aplicaci\u00f3n b\u00e1sica de JWT</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-jpa</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-security</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <scope>runtime</scope> <optional>true</optional> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> <dependency> <groupId>org.springframework.security</groupId> <artifactId>spring-security-test</artifactId> <scope>test</scope> </dependency> <!-- JWT - SUPPORT --> <dependency> <groupId>io.jsonwebtoken</groupId> <artifactId>jjwt</artifactId> <version>0.9.1</version> </dependency> <!-- JWT - SUPPORT # --> <!-- SQLITE - SUPPORT --> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> </dependency> <!-- SQLITE - SUPPORT #--> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project>","title":"Basico"},{"location":"ejercicios/spring/jwt/basico/#1-ejemplo-basico","text":"Proyecto posee errores de negocio, como no poseer un objeto est\u00e1ndar de retorno, ya que hay veces en que se retorna un a cadena y otras un json, estas est\u00e1n \"algunas\" solucionadas en el siguiente proyecto. Implementar el retorno del token , en un campo que se llame data , y el status, para no tener ambig\u00fcedades al momento de esperar un tipo json y un plain string . Es mejor estandarizar la informaci\u00f3n que se usar\u00e1 de interfaz La siguiente aplicaci\u00f3n, muestra la utilizaci\u00f3n de un ejemplo b\u00e1sico del uso de JWT. Se puede registrar un usuario, listarlo e ingresarlo, con restricciones de acceso a listar. Se puede personalizar el campo que usamos como username o el password , el tipo de dato encargado de controlar la seguridad en Spring lo puede manejar; pero para hacerlo necesitamos http.formLogin().usernameParameter(\"correo\") , y esto est\u00e1 m\u00e1s bien pensado para funcionar con MVC . Se descarta el punto anterior ya que el acceso basado en formularios, altera el uso de la API, por ejemplo, en el caso de un error en el intento de autenticaci\u00f3n, nos llevar\u00eda a la p\u00e1gina de login, lo que en el caso de estar siendo consumida, no servir\u00eda una respuesta en `html`` con la p\u00e1gina de inicio de sesi\u00f3n en reemplazo de la que se tiene en el Front. El uso de @Controller no ser\u00e1 necesario, no retornamos vistas, retornamos Json y txt . Es por eso que usaremos @RestController .","title":"1 Ejemplo b\u00e1sico"},{"location":"ejercicios/spring/jwt/basico/#11-notas","text":"","title":"1.1 Notas"},{"location":"ejercicios/spring/jwt/basico/#111-head-first","text":"Para poder implementar la seguridad en nuestra aplicaci\u00f3n usando JWT , debemos cumplir con las siguientes reglas: Se necesita identificar un username y un password , aunque nuestros campos en la base de datos se llamen de forma distinta, esto lo personalizamos en el modelo, como es el caso de este ejemplo, donde nuestro username se llama correo . y el password se llama contrasenia . Se necesitan implementar las siguientes clases para la administraci\u00f3n de la seguridad: JwtTokenFilter : Extiende de OncePerRequestFilter , es decir, que implementar\u00e1 los m\u00e9todos necesarios para que por cada request este filtro ser\u00e1 aplicado. El m\u00e9todo a implementar es doFilterInternal , que se le debe implementar una l\u00f3gica para que cree un usuario autenticado si es que el token dado es v\u00e1lido, en caso contrario no se crea a este usuario. JwtTokenProvider : No extiende de otra clase y proporciona los servicios del token como lo son: init : Inicia el valor de la clave secreta, cuando se crea este objeto, justo despu\u00e9s (de la construcci\u00f3n) gracias a su anotaci\u00f3n @PostConstruct . createToken : Utilizando el nombre de usuario y la lista de los roles, se crear\u00e1 un token con las condiciones de validez que le indiquemos, como por ejemplo, el tiempo de duraci\u00f3n entre otras personalizaciones, veremos algunos de estos datos en el archivo de propiedades de la aplicaci\u00f3n. getAuthentication : Es el m\u00e9todo que es llamado cuando el JwtTokenFilter , crea el objeto Authentication luego de comprobar si el token es v\u00e1lido o no if (token != null && jwtTokenProvider.validateToken(token)) (extracto de implementaci\u00f3n en JwtTokenFilter )\u001c. getUsername : M\u00e9todo que obtiene informaci\u00f3n del usuario que viene en el token , gracias a parseClaimsJws , en este caso, tenemos el nombre del usuario. Piensen en la necesidad de disponer de informaci\u00f3n del usuario en linea, en una sesi\u00f3n sin estado. Solamente el token mantiene este estado y la informaci\u00f3n del usuario autenticado est\u00e1 all\u00ed, este m\u00e9todo se encarga de extraer esta informaci\u00f3n. resolveToken : Se resuelve el \"Bearer \" , recordando que Authorization: Bearer <access_token> el verdadero token es <access_token> \u001cel Bearer , es nuestro transportador que por defecto es Bearer , pero podr\u00eda cambiar y lo resolver\u00edamos en la implementaci\u00f3n de este m\u00e9todo, adem\u00e1s de personalizar el nombre del campo del Header , que en este caso ser\u00e1 Authorizacion y no Authorization . Lo que en realidad debe hacer es recuperar el token puro, sin el Bearer \u001d. validateToken : Si el token logra ser parseado \u001d, entonces se asume que es un Token v\u00e1lido . parseClaimsJws analiza la llave (no un token que exista hipot\u00e9ticamente, la comparaci\u00f3n se realiza entre el token que est\u00e1 en el request \u001d y la clave cifrada \u001d, de esta clase, cifrada justo despu\u00e9s de construirse este objeto usando init ). JwtTokenFilterConfigurer : Extiende de SecurityConfigurerAdapter<DefaultSecurityFilterChain, HttpSecurity> , que es un adaptador de la seguridad de Spring security - SecurityConfigurer + SecurityBuilder , este \u00faltimo posee un m\u00e9todo configure(HttpSecurity http) sobrecargado que al recibir un tipo HttpSecurity por cada request encadenar\u00e1 el JwtTokenFilter justo antes de UsernamePasswordAuthenticationFilter \u001cy que tiene como misi\u00f3n verificar en cada petici\u00f3n antes de que se pida el usuario, crearlo con la informaci\u00f3n contenida en el token. WebSecurityConfig \u001c: Extiende de WebSecurityConfigurerAdapter otro adaptador como SecurityConfigurerAdapter ; pero con m\u00e1s funcionalidad, tambi\u00e9n posee un m\u00e9todo protected void configure(HttpSecurity http) , pero a diferencia del que se sobre escribe en SecurityConfigurerAdapter , el de \u001c WebSecurityConfigurerAdapter que sobre escribimos ac\u00e1, posee el modificador de acceso protected , lo que hace que realmente no sea el mismo m\u00e9todo. Y as\u00ed es ya que el anterior, posee un DefaultSecurityFilterChain , lo que no es el caso del configure que est\u00e1 presente en esta clase. En pocas palabras, el configure de WebSecurityConfigurerAdapter tiene la posibilidad de entregar o no accesos a diferentes endspoints seg\u00fan los privilegios que posea un usuario. ( roles, si est\u00e1 autenticado, si no) adem\u00e1s de efectuar acciones como redirigir a ventanas en caso de fallos en el inicio de sesi\u00f3n. a diferencia de el otro configure p\u00fablico, que ya sabemos, efect\u00faa una validaci\u00f3n del token en cada petici\u00f3n, este filtro se a\u00f1ade a esta configuraci\u00f3n WEB justo en: http.apply(new JwtTokenFilterConfigurer(jwtTokenProvider) ); , y es el jwtTokenProvider inyectado por Spring justo en esta clase, con que trabajar\u00e1n las clases anteriores que lo posean como atributo, y es por eso, que es inyectado ac\u00e1 y no en las otras clases. Finalmente, esta configuraci\u00f3n tendr\u00e1 adem\u00e1s del control de acceso a los servicios, si no que tendr\u00e1 un filtro por token que en caso de venir y ser v\u00e1lido, permitir\u00e1 el acceso al recurso o retornar\u00e1 un c\u00f3digo de error. Este tipo, consume dependencias de Spring Security , la dependencia de jjwt son solamente para la generaci\u00f3n del token por ejemplo Jwts.builder , pero el configurer forma parte de Spring Security . Adem\u00e1s de las siguientes condiciones para la administraci\u00f3n del usuario y contrase\u00f1a como servicios. Se debe tener una tabla para el manejo de usuarios y debe contar con al menos tres campos: Un campo String que maneje al usuario llamado username (el nombre no es obligatorio podemos usar otro nombre en la base de datos, como vemos en el ejemplo que el campo en la base de datos se llama correo , mientras que el campo realmente en la entidad se llama username ) . Un campo String que maneje la contrase\u00f1a. Con las mismas posibilidades de personalizaci\u00f3n que se indican en el punto anterior. Un campo List<EntidadRol> con la anotaci\u00f3n @ElementCollection(fetch = FetchType.EAGER) para que se maneje la relaci\u00f3n en la base de datos, donde veremos que cuando lo ejecutamos se crea una tabla intermedia con la informaci\u00f3n entre usuarios y roles. Por lo dem\u00e1s contiene todo lo que posee un pojo o mejor dicho, un bean . Una clase que maneje los roles, de tipo Enum , que posea la lista de tipos posibles, como roles. En una aplicaci\u00f3n, todos los tipos de listas cortas, deber\u00edan ser tratados de esta forma, si estamos seguros que la lista no ser\u00e1 larga. Extiende de GrantedAuthority , que al sobre escribir el m\u00e9todo: getAuthority() es capaz de obtener el rol. En la tabla intermedia que existir\u00e1 en la base de datos, veremos un n\u00famero que representa el \u00edndice del tipo en la lista Enum , donde: ROLE_ADMINISTRADOR , ser\u00eda el 0 . El servicio que atienda esta interfaz, en el caso del ejemplo ServicioUsuario , debe extender de UserDetailsService que posee un m\u00e9todo loadUserByUsername , este m\u00e9todo, es capaz de crear un UserDetails con el nombre de usuario. En el ejemplo, es el correo . Como es la capa de servicio, se habla a\u00fan con la jerga de negocio y el username es llamado correo . Este UserDetails , es usado por el JwtTokenProvider inyectado por Spring en su m\u00e9todo Authentication getAuthentication(String token) para poder crear el usuario con la informaci\u00f3n del token. (de esta forma, en una sesi\u00f3n sin estado, se transporta la informaci\u00f3n que contiene el token de manera encriptada, como por ejemplo el nombre de usuario o sus credenciales).","title":"1.1.1 Head First."},{"location":"ejercicios/spring/jwt/basico/#12-implementacion","text":"","title":"1.2 Implementaci\u00f3n"},{"location":"ejercicios/spring/jwt/basico/#jwtappsrcmainjava","text":"","title":"/jwtapp/src/main/java"},{"location":"ejercicios/spring/jwt/basico/#cllherrerajwtapp","text":"JwtappApplication.java package cl.lherrera.jwtapp; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class JwtappApplication { public static void main(String[] args) { SpringApplication.run(JwtappApplication.class, args); } }","title":"cl.lherrera.jwtapp"},{"location":"ejercicios/spring/jwt/basico/#cllherrerajwtappapiexception","text":"RestServiceException.java package cl.lherrera.jwtapp.apiexception; import org.springframework.http.HttpStatus; public class RestServiceException extends RuntimeException { private static final long serialVersionUID = 5037553749745142029L; private final String message; private final HttpStatus httpStatus; public RestServiceException(String message, HttpStatus httpStatus) { super(); this.message = message; this.httpStatus = httpStatus; } @Override public String getMessage() { return message; } public HttpStatus getHttpStatus() { return httpStatus; } }","title":"cl.lherrera.jwtapp.apiexception"},{"location":"ejercicios/spring/jwt/basico/#cllherrerajwtappconfig","text":"AppConfig.java package cl.lherrera.jwtapp.config; import javax.sql.DataSource; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.PropertySource; import org.springframework.core.env.Environment; import org.springframework.jdbc.datasource.DriverManagerDataSource; @Configuration @ComponentScan(\"cl.lherrera.jwtapp\") @PropertySource(\"classpath:database.properties\") public class AppConfig { @Autowired Environment environment; @Bean DataSource dataSource() { DriverManagerDataSource driverManagerDataSource = new DriverManagerDataSource(); driverManagerDataSource.setUrl(environment.getProperty(\"url\")); driverManagerDataSource.setUsername(environment.getProperty(\"username\")); driverManagerDataSource.setPassword(environment.getProperty(\"dbpassword\")); driverManagerDataSource.setDriverClassName(environment.getProperty(\"driverClassName\")); return driverManagerDataSource; } } SQLiteDialect.java package cl.lherrera.jwtapp.config; import java.sql.Types; import org.hibernate.dialect.Dialect; import org.hibernate.dialect.function.StandardSQLFunction; import org.hibernate.dialect.function.SQLFunctionTemplate; import org.hibernate.dialect.function.VarArgsSQLFunction; import org.hibernate.type.StandardBasicTypes; public class SQLiteDialect extends Dialect { public SQLiteDialect() { super(); registerColumnType(Types.BIT, \"integer\"); registerColumnType(Types.TINYINT, \"tinyint\"); registerColumnType(Types.SMALLINT, \"smallint\"); registerColumnType(Types.INTEGER, \"integer\"); registerColumnType(Types.BIGINT, \"bigint\"); registerColumnType(Types.FLOAT, \"float\"); registerColumnType(Types.REAL, \"real\"); registerColumnType(Types.DOUBLE, \"double\"); registerColumnType(Types.NUMERIC, \"numeric\"); registerColumnType(Types.DECIMAL, \"decimal\"); registerColumnType(Types.CHAR, \"char\"); registerColumnType(Types.VARCHAR, \"varchar\"); registerColumnType(Types.LONGVARCHAR, \"longvarchar\"); registerColumnType(Types.DATE, \"date\"); registerColumnType(Types.TIME, \"time\"); registerColumnType(Types.TIMESTAMP, \"timestamp\"); registerColumnType(Types.BINARY, \"blob\"); registerColumnType(Types.VARBINARY, \"blob\"); registerColumnType(Types.LONGVARBINARY, \"blob\"); // registerColumnType(Types.NULL, \"null\"); registerColumnType(Types.BLOB, \"blob\"); registerColumnType(Types.CLOB, \"clob\"); registerColumnType(Types.BOOLEAN, \"integer\"); registerFunction(\"concat\", new VarArgsSQLFunction(StandardBasicTypes.STRING, \"\", \"||\", \"\")); registerFunction(\"mod\", new SQLFunctionTemplate(StandardBasicTypes.INTEGER, \"?1 % ?2\")); registerFunction(\"substr\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); registerFunction(\"substring\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); } public boolean supportsIdentityColumns() { return true; } public boolean hasDataTypeInIdentityColumn() { return false; // As specify in NHibernate dialect } public String getIdentityColumnString() { // return \"integer primary key autoincrement\"; return \"integer\"; } public String getIdentitySelectString() { return \"select last_insert_rowid()\"; } public boolean supportsLimit() { return true; } public String getLimitString(String query, boolean hasOffset) { return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? \" limit ? offset ?\" : \" limit ?\") .toString(); } public boolean bindLimitParametersInReverseOrder() { return true; } public boolean supportsTemporaryTables() { return true; } public String getCreateTemporaryTableString() { return \"create temporary table if not exists\"; } public boolean dropTemporaryTableAfterUse() { return false; } public boolean supportsCurrentTimestampSelection() { return true; } public boolean isCurrentTimestampSelectStringCallable() { return false; } public String getCurrentTimestampSelectString() { return \"select current_timestamp\"; } public boolean supportsUnionAll() { return true; } public boolean hasAlterTable() { return false; // As specify in NHibernate dialect } public boolean dropConstraints() { return false; } public String getAddColumnString() { return \"add column\"; } public String getForUpdateString() { return \"\"; } public boolean supportsOuterJoinForUpdate() { return false; } public String getDropForeignKeyString() { throw new UnsupportedOperationException(\"No drop foreign key syntax supported by SQLiteDialect\"); } public String getAddForeignKeyConstraintString(String constraintName, String[] foreignKey, String referencedTable, String[] primaryKey, boolean referencesPrimaryKey) { throw new UnsupportedOperationException(\"No add foreign key syntax supported by SQLiteDialect\"); } public String getAddPrimaryKeyConstraintString(String constraintName) { throw new UnsupportedOperationException(\"No add primary key syntax supported by SQLiteDialect\"); } public boolean supportsIfExistsBeforeTableName() { return true; } public boolean supportsCascadeDelete() { return false; } }","title":"cl.lherrera.jwtapp.config"},{"location":"ejercicios/spring/jwt/basico/#cllherrerajwtappcontroller","text":"/jwtapp/src/main/java/cl/lherrera/jwtapp/controller/ControladorAplicacion.java package cl.lherrera.jwtapp.controller; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; @RestController @RequestMapping(value = \"/api/v1\") public class ControladorAplicacion { @GetMapping(path = \"/isAlive\") public String isAlive() { return \"200\"; } } /jwtapp/src/main/java/cl/lherrera/jwtapp/controller/ControladorIngreso.java /** * Luego de crear al usuario, lo accedemos con sus credenciales * para obtener un token. * * POST: http://localhost:8080/api/v1/iniciarsesion?correo=l.herrera.garnica@gmail.com&password=1234 * * Sin cuerpo * * Respuesta esperada, el token, sin el Bearer. * */ package cl.lherrera.jwtapp.controller; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController; import cl.lherrera.jwtapp.service.ServicioUsuario; @RestController @RequestMapping(path = \"/api/v1/iniciarsesion\") public class ControladorIngreso { private Logger logger = LoggerFactory.getLogger(ControladorIngreso.class); @Autowired private ServicioUsuario servicioUsuario; @PostMapping(path = {\"\", \"/\"}) public String iniciarSesion( @RequestParam String correo, @RequestParam String password) { logger.debug( String.format(\"INICIARSESION: ]%s[, ]%s[\", correo, password) ); return servicioUsuario.iniciarSesion(correo, password); } } /jwtapp/src/main/java/cl/lherrera/jwtapp/controller/ControladorRegistro.java /** * Servicio que registra a un usuario. Se pide que adem\u00e1s retorne el token. * No es bueno que un m\u00e9todo realice dos tareas principales. Pero en esta ocaci\u00f3n * lo hacemos para obtener el token y no tener que hacer el login. En un sistema * productivo, deber\u00eda solo registrar. Luego, deber\u00edamos iniciar sesi\u00f3n de manera manual * * Headers: * Content-Type:application/json * POST: * http://localhost:8080/api/v1/registrar * BODY-EXAMPLE * * <code> { \"nombre\": \"Luis Herrera\", \"email\": \"l.herrera.garnica@gmail.com\", \"password\": \"1234\", \"roles\": [\"ROLE_ADMINISTRADOR\"] } <code> */ package cl.lherrera.jwtapp.controller; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; import cl.lherrera.jwtapp.dto.UsuarioDTO; import cl.lherrera.jwtapp.service.ServicioUsuario; // para que no retorne vistas. @RestController @RequestMapping(path = \"/api/v1/registrar\") public class ControladorRegistro { private Logger logger = LoggerFactory.getLogger(ControladorRegistro.class); @Autowired ServicioUsuario servicioUsuario; @PostMapping(path = { \"\", \"/\" }) public String registrarUsuaio(@RequestBody UsuarioDTO usuarioDTO) { logger.debug(\"Registrando al usuario: \" + usuarioDTO.toString()); return servicioUsuario.registraNuevoUsuario(usuarioDTO); } } /jwtapp/src/main/java/cl/lherrera/jwtapp/controller/ControladorUsuario.java package cl.lherrera.jwtapp.controller; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; import cl.lherrera.jwtapp.dto.UsuarioDTO; import cl.lherrera.jwtapp.service.ServicioUsuario; @RestController @RequestMapping(\"/api/v1/usuarios\") public class ControladorUsuario { @Autowired private ServicioUsuario servicioUsuario; /** * Servicio para listar los usuarios, requiere ser accedido mediante el uso de * tokens <code> * POST: http://localhost:8080/api/v1/usuarios/ * * Headers * * { * Autorizacion: Bearer ...token que generemos, este par\u00e1metro * lo personalizamos en HEADER_AUTHORIZATION_KEY (JwtToken.java) * } * </code> */ @GetMapping(path = { \"\", \"/\" }) public List<UsuarioDTO> listar() { return servicioUsuario.listaDeUsuarios(); } }","title":"cl.lherrera.jwtapp.controller"},{"location":"ejercicios/spring/jwt/basico/#cllherrerajwtappdao","text":"/jwtapp/src/main/java/cl/lherrera/jwtapp/dao/UsuarioDao.java package cl.lherrera.jwtapp.dao; import java.util.Optional; import org.springframework.data.jpa.repository.JpaRepository; import org.springframework.stereotype.Repository; import cl.lherrera.jwtapp.model.Usuario; @Repository public interface UsuarioDao extends JpaRepository<Usuario, Integer> { boolean existsByUsername(String username); Optional<Usuario> findByUsername(String username); }","title":"cl.lherrera.jwtapp.dao"},{"location":"ejercicios/spring/jwt/basico/#cllherrerajwtappdto","text":"package cl.lherrera.jwtapp.dto; import java.util.List; import cl.lherrera.jwtapp.model.Rol; public class UsuarioDTO { private String nombre; private String email; private String password; private List<Rol> roles; public UsuarioDTO() { } public UsuarioDTO(String nombre, String email, String password, List<Rol> roles) { super(); this.nombre = nombre; this.email = email; this.password = password; this.roles = roles; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public List<Rol> getRoles() { return roles; } public void setRoles(List<Rol> roles) { this.roles = roles; } @Override public String toString() { return \"UsuarioDTO [nombre=\" + nombre + \", email=\" + email + \", password=\" + password + \", roles=\" + roles + \"]\"; } }","title":"cl.lherrera.jwtapp.dto"},{"location":"ejercicios/spring/jwt/basico/#cllherrerajwtappmapper","text":"UsuarioMapper.java package cl.lherrera.jwtapp.mapper; import java.util.Arrays; import java.util.List; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import cl.lherrera.jwtapp.dto.UsuarioDTO; import cl.lherrera.jwtapp.model.Usuario; public class UsuarioMapper { private static Logger logger = LoggerFactory.getLogger(UsuarioMapper.class); private UsuarioMapper() {} /** * Transforma un Usuario a un UsuarioDTO */ public static UsuarioDTO usuarioADto(Usuario usuario) { logger.debug(\"Usuario: \" + usuario.toString()); UsuarioDTO dtoUsuario = new UsuarioDTO(); dtoUsuario.setNombre(usuario.getNombre() + \" \" + usuario.getApellido()); dtoUsuario.setEmail(usuario.getUsername()); dtoUsuario.setRoles(usuario.getRoles()); dtoUsuario.setPassword(null); logger.debug(\"Transformado a DTO : \" + dtoUsuario.toString()); return dtoUsuario; } /** * clase privada para separar el nombre y el apellido que viene en un solo campo * desde el front se separa si viene con espacio no es muy elegante pero es una * soluci\u00f3n r\u00e1pida. */ private static List<String> getNombres(UsuarioDTO dtoUsuario) { return Arrays.asList(dtoUsuario.getNombre().split(\" \")); } /** * Transforma un UsuarioDTO a un Usuario */ public static Usuario dtoAUsuario(UsuarioDTO dtoUsuario) { logger.debug(\"UsuarioDTO: \" + dtoUsuario.toString()); List<String> nombres = getNombres(dtoUsuario); String nombre = (nombres.size() > 0) ? nombres.get(0) : null; String apellido = (nombres.size() > 0) ? nombres.get(1) : null; Usuario usuario = new Usuario(); usuario.setNombre(nombre); usuario.setApellido(apellido); usuario.setUsername(dtoUsuario.getEmail()); usuario.setPassword(dtoUsuario.getPassword()); usuario.setRoles(dtoUsuario.getRoles()); logger.debug(\"Transformado a Usuario: \" + usuario.toString()); return usuario; } }","title":"cl.lherrera.jwtapp.mapper"},{"location":"ejercicios/spring/jwt/basico/#cllherrerajwtappmodel","text":"Rol.java package cl.lherrera.jwtapp.model; import org.springframework.security.core.GrantedAuthority; public enum Rol implements GrantedAuthority { ROLE_ADMINISTRADOR, ROLE_USUARIO; @Override public String getAuthority() { return name(); } } Usuario.java package cl.lherrera.jwtapp.model; import java.util.List; import javax.persistence.Column; import javax.persistence.ElementCollection; import javax.persistence.Entity; import javax.persistence.FetchType; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; @Entity public class Usuario { @Id @GeneratedValue(strategy = GenerationType.AUTO) Integer id; String nombre; String apellido; @Column(name = \"correo\") String username; @Column(name = \"contrasenia\") String password; @ElementCollection(fetch = FetchType.EAGER) List<Rol> roles; public Usuario() {} public Usuario(Integer id, String nombre, String apellido, String username, String password, List<Rol> roles) { super(); this.id = id; this.nombre = nombre; this.apellido = apellido; this.username = username; this.password = password; this.roles = roles; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } public String getApellido() { return apellido; } public void setApellido(String apellido) { this.apellido = apellido; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public List<Rol> getRoles() { return roles; } public void setRoles(List<Rol> roles) { this.roles = roles; } @Override public String toString() { return \"Usuario [id=\" + id + \", nombre=\" + nombre + \", apellido=\" + apellido + \", username=\" + username + \", password=\" + password + \", roles=\" + roles + \"]\"; } }","title":"cl.lherrera.jwtapp.model"},{"location":"ejercicios/spring/jwt/basico/#cllherrerajwtappsecurity","text":"JwtTokenFilter.java package cl.lherrera.jwtapp.security; import java.io.IOException; import javax.servlet.FilterChain; import javax.servlet.ServletException; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import org.springframework.security.core.Authentication; import org.springframework.security.core.context.SecurityContextHolder; import org.springframework.web.filter.OncePerRequestFilter; import cl.lherrera.jwtapp.apiexception.RestServiceException; public class JwtTokenFilter extends OncePerRequestFilter { private JwtTokenProvider jwtTokenProvider; public JwtTokenFilter(JwtTokenProvider jwtTokenProvider) { this.jwtTokenProvider = jwtTokenProvider; } @Override protected void doFilterInternal( HttpServletRequest request, HttpServletResponse respose, FilterChain filterChain) throws ServletException, IOException { // extraemos el token del request, este debe ir en el header // con el nombre Authentication y en el valor String token = jwtTokenProvider.resolveToken(request); try { // si el token no es nulo y si es v\u00e1lido... if (token != null && jwtTokenProvider.validateToken(token)) { // creamos un objeto (new UsernamePasswordAuthenticationToken) // ya las credenciales no est\u00e1n disponibles, solamente `userDetails`` Authentication auth = jwtTokenProvider.getAuthentication(token); SecurityContextHolder.getContext().setAuthentication(auth); } } catch (RestServiceException ex) { SecurityContextHolder.clearContext(); respose.sendError(ex.getHttpStatus().value(), ex.getMessage()); return; } filterChain.doFilter(request, respose); } } JwtTokenFilterConfigurer.java package cl.lherrera.jwtapp.security; import org.springframework.security.config.annotation.SecurityConfigurerAdapter; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.web.DefaultSecurityFilterChain; import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter; public class JwtTokenFilterConfigurer extends SecurityConfigurerAdapter<DefaultSecurityFilterChain, HttpSecurity> { private JwtTokenProvider jwtTokenProvider; public JwtTokenFilterConfigurer(JwtTokenProvider jwtTokenProvider) { this.jwtTokenProvider = jwtTokenProvider; } @Override public void configure(HttpSecurity http) throws Exception { JwtTokenFilter customFilter = new JwtTokenFilter(jwtTokenProvider); http.addFilterBefore(customFilter, UsernamePasswordAuthenticationFilter.class); } } JwtTokenProvider.java package cl.lherrera.jwtapp.security; import java.util.Base64; import java.util.Date; import java.util.List; import java.util.Objects; import java.util.stream.Collectors; import javax.annotation.PostConstruct; import javax.servlet.http.HttpServletRequest; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.http.HttpStatus; import org.springframework.security.authentication.UsernamePasswordAuthenticationToken; import org.springframework.security.core.Authentication; import org.springframework.security.core.authority.SimpleGrantedAuthority; import org.springframework.security.core.userdetails.UserDetails; import org.springframework.stereotype.Component; import cl.lherrera.jwtapp.apiexception.RestServiceException; import cl.lherrera.jwtapp.model.Rol; import cl.lherrera.jwtapp.service.ServicioUsuario; // dependencia jjwt import io.jsonwebtoken.Claims; import io.jsonwebtoken.JwtException; import io.jsonwebtoken.Jwts; import io.jsonwebtoken.SignatureAlgorithm; @Component public class JwtTokenProvider { private Logger logger = LoggerFactory.getLogger(JwtTokenProvider.class); private final static String HEADER_AUTHORIZATION_KEY = \"Autorizacion\"; private final static String TOKEN_BEARER_VALUE = \"Bearer \"; // propiedad @Value(\"${security.jwt.token.secret-key}\") private String secretKey; // propiedad @Value(\"${security.jwt.token.expire-length}\") private long validityInMilliseconds; // servicio Implementado @Autowired private ServicioUsuario servicioUsuario; /** * Spring calls methods annotated with @PostConstruct * only once, just after the initialization * of bean properties. * https://www.baeldung.com/spring-postconstruct-predestroy * * Asigna el valor de la clave secreta */ @PostConstruct protected void init() { secretKey = Base64.getEncoder().encodeToString(secretKey.getBytes()); logger.debug(\"LLave inicializada: \" + secretKey); } public String createToken(String username, List<Rol> roles) { Claims claims = Jwts.claims().setSubject(username); List<SimpleGrantedAuthority> grats = roles.stream() .map(rol -> new SimpleGrantedAuthority(rol.getAuthority()) ) .filter(Objects::nonNull) .collect(Collectors.toList()); claims.put(\"auth\", grats); // expiraci\u00f3n del token Date now = new Date(); Date validity = new Date(now.getTime() + validityInMilliseconds); // creaci\u00f3n del token String token = Jwts.builder() .setClaims(claims) .setIssuedAt(now) .setExpiration(validity) .signWith(SignatureAlgorithm.HS256, secretKey) .compact(); return token; } /** * A partir del token se obtiene el nombre de usuario y luego, * se obtiene un `UserDetails`, que ya sabemos que es la * entidad que maneja como ususuario de sesi\u00f3n. */ public Authentication getAuthentication(String token) { UserDetails userDetails = servicioUsuario.loadUserByUsername(getUsername(token)); UsernamePasswordAuthenticationToken autenticacion; autenticacion = new UsernamePasswordAuthenticationToken( userDetails, \"\", userDetails.getAuthorities() ); return autenticacion; } /** * En la configuraci\u00f3n de seguridad * lo que sabe Spring es que el nombre * de usuario es el correo. */ private String getUsername(String token) { String userName = Jwts.parser() .setSigningKey(secretKey) .parseClaimsJws(token) .getBody() .getSubject(); return userName; } /** * Quitamos \"Bearer \" del principio del token */ public String resolveToken(HttpServletRequest req) { String tokenReal = null; String bearerToken = req.getHeader(HEADER_AUTHORIZATION_KEY); logger.debug(\"Bearer token: \" + bearerToken); boolean inicioOk = (bearerToken != null && bearerToken.startsWith(TOKEN_BEARER_VALUE)); if (inicioOk) { tokenReal = bearerToken.substring(TOKEN_BEARER_VALUE.length()); } return tokenReal; } /** * Si el token logra ser parseado, entonces se asume que es un * Token v\u00e1lido. `parseClaimsJws` analiza la llave (no un * token que exista hipoteticamente, la comparaci\u00f3n se * realiza entre el token que est\u00e1 en el request * y la clave cifrada de esta clase. cifrada * justo despu\u00e9s de construirse este * objeto `INIT`). */ public boolean validateToken(String token) { try { Jwts.parser().setSigningKey(secretKey).parseClaimsJws(token); return true; } catch (JwtException | IllegalArgumentException e) { throw new RestServiceException( \"Expired or invalid JWT token\", HttpStatus.INTERNAL_SERVER_ERROR ); } } } WebSecurityConfig.java package cl.lherrera.jwtapp.security; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.security.authentication.AuthenticationManager; import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity; import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter; import org.springframework.security.config.http.SessionCreationPolicy; import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder; import org.springframework.security.crypto.password.PasswordEncoder; @Configuration @EnableWebSecurity @EnableGlobalMethodSecurity(prePostEnabled = true) public class WebSecurityConfig extends WebSecurityConfigurerAdapter { @Autowired private JwtTokenProvider jwtTokenProvider; @Override protected void configure(HttpSecurity http) throws Exception { // sin verificaci\u00f3n csrf, inseguro. (Laravel) http.csrf().disable(); // sesi\u00f3n sin estado. http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS); // Autorizaci\u00f3n de peticiones. http.authorizeRequests() // servicios p\u00fablicos. .antMatchers( \"/api/v1/isAlive\", \"/api/v1/iniciarsesion\", \"/api/v1/registrar\").permitAll() // todos los dem\u00e1s. servicios, solamente para usuarios autenticados. .anyRequest().authenticated(); // Applies a {@link SecurityConfigurer} to this {@link SecurityBuilder} overriding any // {@link SecurityConfigurer} of the exact same class. Note that object hierarchies // are not considered. // // El filtro personaliizado que creamos en JwtTokenFilterConfigurer, donde // validamos el token, y si es v\u00e1lido crea el Authenticate, se aplica ac\u00e1 // es un filtro que se concatena a los que ya hemos puesto en este mismo // m\u00e9todo, se aplica antes que a todos por que JwtTokenFilterConfigurer // HttpSecurity.addFilterBefore(customFilter, UsernamePasswordAuthenticationFilter.class); // le decimos que el filtro lo realice antes que se ejecute la autenticaci\u00f3n con // user y password. http.apply(new JwtTokenFilterConfigurer(jwtTokenProvider) ); } @Bean @Override public AuthenticationManager authenticationManagerBean() throws Exception { return super.authenticationManagerBean(); } @Bean public PasswordEncoder passwordEncoder() { // fuerza = 12 (entre 4 y 31) return new BCryptPasswordEncoder(12); } }","title":"cl.lherrera.jwtapp.security"},{"location":"ejercicios/spring/jwt/basico/#cllherrerajwtappservice","text":"ServicioUsuario.java package cl.lherrera.jwtapp.service; import java.util.List; import org.springframework.security.core.userdetails.UserDetailsService; import cl.lherrera.jwtapp.dto.UsuarioDTO; /** * Al extender UserDetailsService, traemos el m\u00e9todo loadUserByUsername, que * sobre escribimos en la implementaci\u00f3n, podremos ver que a veces se implementa * un implements UserDetailsService, pero esto causa confusiones ya que a veces * los desarrolladores que no conocen que este m\u00e9todo est\u00e1 en * UserDetailsService, lo ponen igual ac\u00e1, en this. y lo sobre escriben en la * implementaci\u00f3n, funcionando de todas formas por que Spring asume sobre * escrito el loadUserByUsername que le pertenece a UserDetailsService y no * ServicioUsuario. * */ public interface ServicioUsuario extends UserDetailsService { String iniciarSesion(String correo, String contrasenia); List<UsuarioDTO> listaDeUsuarios(); /** * Servicio encargado de registrar un usuario hay que tener en cuenta varias * cosas como el dar una buena encriptaci\u00f3n a la base de datos. */ String registraNuevoUsuario(UsuarioDTO usuarioDTO); } ServicioUsuarioImpl.java package cl.lherrera.jwtapp.service; import java.util.List; import java.util.stream.Collectors; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpStatus; import org.springframework.security.authentication.UsernamePasswordAuthenticationToken; import org.springframework.security.authentication.AuthenticationManager; import org.springframework.security.core.Authentication; import org.springframework.security.core.AuthenticationException; import org.springframework.security.core.userdetails.UserDetails; import org.springframework.security.core.userdetails.UsernameNotFoundException; import org.springframework.security.crypto.password.PasswordEncoder; import org.springframework.stereotype.Service; import cl.lherrera.jwtapp.apiexception.RestServiceException; import cl.lherrera.jwtapp.dao.UsuarioDao; import cl.lherrera.jwtapp.dto.UsuarioDTO; import cl.lherrera.jwtapp.mapper.UsuarioMapper; import cl.lherrera.jwtapp.model.Usuario; import cl.lherrera.jwtapp.security.JwtTokenProvider; @Service public class ServicioUsuarioImpl implements ServicioUsuario { private Logger logger = LoggerFactory.getLogger(ServicioUsuarioImpl.class); @Autowired UsuarioDao daoUsuario; @Autowired private AuthenticationManager authenticationManager; @Autowired private JwtTokenProvider jwtTokenProvider; @Autowired private PasswordEncoder passwordEncoder; @Override public String iniciarSesion(String correo, String contrasenia) { String token = \"\"; logger.debug(\"Inicio de la sesi\u00f3n: correo: \" + correo + \"contrase\u00f1a: \" + contrasenia); try { // intenta crear la autenticaci\u00f3n. // si no puede, se env\u00eda un AuthenticationException. Authentication objetoAutentificacion = new UsernamePasswordAuthenticationToken(correo, contrasenia); authenticationManager.authenticate(objetoAutentificacion); Usuario usuarioAutenticado = daoUsuario.findByUsername(correo).orElse(null); if (usuarioAutenticado != null) token = generaToken(usuarioAutenticado); } catch (AuthenticationException e) { throw new RestServiceException(\"username o password invalido\", HttpStatus.UNPROCESSABLE_ENTITY); } return token; } private String generaToken(Usuario usuario) { String token = jwtTokenProvider.createToken(usuario.getUsername(), usuario.getRoles()); logger.debug(\"Token generado: ...\" + token.substring(token.length() - 5)); return token; } @Override public List<UsuarioDTO> listaDeUsuarios() { List<UsuarioDTO> usuarios = daoUsuario.findAll().stream() // cada uno de los usuarios pasando a un DTO .map(usuario -> UsuarioMapper.usuarioADto(usuario)).collect(Collectors.toList()); logger.debug(\"Lista de usuarioDTO: \" + usuarios.toString()); return usuarios; } @Override public String registraNuevoUsuario(UsuarioDTO dtoUsuario) { String token = null; // verificar si el usuario existe para no ingresarlo otra vez Usuario usuario = daoUsuario.findByUsername(dtoUsuario.getEmail()).orElse(null); if (usuario == null) { String constraseniaEnDuro = dtoUsuario.getPassword(); String constraseniaEncriptada = passwordEncoder.encode(constraseniaEnDuro); dtoUsuario.setPassword(constraseniaEncriptada); // guardamos el usuario convertido desde un DTO usuario = UsuarioMapper.dtoAUsuario(dtoUsuario); logger.debug(\"Registrando nuevo usuario: \" + usuario.toString()); daoUsuario.save(usuario); logger.debug(\"Usuario nuevo registrado: \" + usuario.toString()); logger.debug(\"Generando token... \"); token = this.generaToken(usuario); } return token; } /** * Se implementa desde UserDetailsService, interface que extiende * ServicioUsuario. * * Se supone que se debe cargar el nombre de usuario y en este caso es * correo, es por que se exige un valor de nombre de usuario, que puede ser * por ejemplo: rut, correo, nombre de usuario, tag name, etc. El c\u00f3mo se maneje * depender\u00e1 de nuestra implementaci\u00f3n. * * Construye un `UserDetails` est\u00e1tico, con la informaci\u00f3n que se le * proporcione. En este caso, el nombre de usuario que ven\u00eda como argumento y la * contrase\u00f1a que est\u00e1 en la base de datos. Este proceso es implementado ya que * este \u00fanico m\u00e9todo, posee acceso a la contrase\u00f1a del usuario. La t\u00e9cnica usada * es que cada m\u00e9todo retorna un `UserBuilder`, hasta llegar a `build()`, es * cuando finalmente es convertido en un `UserDetail`. * **/ @Override public UserDetails loadUserByUsername(String correo) throws UsernameNotFoundException { final Usuario user = daoUsuario.findByUsername(correo).orElse(null); if (user == null) { throw new UsernameNotFoundException(\"Usuario '\" + correo + \"' no encontrado\"); } return org.springframework.security.core.userdetails.User// .withUsername(correo).password(user.getPassword()).authorities(user.getRoles()).accountExpired(false) .accountLocked(false).credentialsExpired(false).disabled(false).build(); } }","title":"cl.lherrera.jwtapp.service"},{"location":"ejercicios/spring/jwt/basico/#jwtappsrcmainresources","text":"","title":"/jwtapp/src/main/resources"},{"location":"ejercicios/spring/jwt/basico/#applicationproperties","text":"spring.jpa.generate-ddl=true spring.jpa.database-platform=cl.lherrera.jwtapp.config.SQLiteDialect spring.jpa.show-sql=true spring.jpa.hibernate.ddl-auto=create-drop spring.jpa.properties.hibernate.format_sql=true # Configuraci\u00f3n para el token. security.jwt.token.secret-key=DLatam-SecretKey security.jwt.token.expire-length=3600000 # Para mostrar el log de debug # esto no se mostrar\u00eda en producci\u00f3n logging.level.org.springframework.web=DEBUG #logging.level.root=DEBU logging.level.cl.lherrera.jwtapp=DEBUG logging.file.name=logs","title":"application.properties"},{"location":"ejercicios/spring/jwt/basico/#databaseproperties","text":"driverClassName=org.sqlite.JDBC url=jdbc:sqlite:baseDeDatos.db username=jpaspring password=sa","title":"database.properties"},{"location":"ejercicios/spring/jwt/basico/#jwtapppomxml","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.7.RELEASE</version> <relativePath/> <!-- lookup parent from repository --> </parent> <groupId>cl.lherrera</groupId> <artifactId>jwtapp</artifactId> <version>20.0.0</version> <name>jwtapp</name> <description>aplicaci\u00f3n b\u00e1sica de JWT</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-jpa</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-security</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <scope>runtime</scope> <optional>true</optional> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> <dependency> <groupId>org.springframework.security</groupId> <artifactId>spring-security-test</artifactId> <scope>test</scope> </dependency> <!-- JWT - SUPPORT --> <dependency> <groupId>io.jsonwebtoken</groupId> <artifactId>jjwt</artifactId> <version>0.9.1</version> </dependency> <!-- JWT - SUPPORT # --> <!-- SQLITE - SUPPORT --> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> </dependency> <!-- SQLITE - SUPPORT #--> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project>","title":"/jwtapp/pom.xml"},{"location":"ejercicios/spring/jwt/mtnusuario/backend/","text":"1 Mantenedor de Usuarios - BackEnd Es una continuaci\u00f3n del proyecto anterior. Es la implementaci\u00f3n de los servicios que consumir\u00e1 la aplicaci\u00f3n en html, javascript y css . Esta aplicaci\u00f3n posee implementaciones pendientes, como el tipo de retorno del registro, o la re direcci\u00f3n de los usuarios al login, que no se presenta en las dem\u00e1s opciones; pero lo que se tiene implementado es suficiente ejemplo para poder entender la implementaci\u00f3n de las soluciones que siguen el patr\u00f3n Backend for FrontEnd - BFF . A diferencia de Spring Mvc ; ac\u00e1 no utilizaremos JSP, JSTL o THYMELEAF \u001d, si no que, la implementaci\u00f3n queda abierta a cualquier tecnolog\u00eda de FrontEnd . Una particularidad de este ejemplo, es que utilizamos un DTO, que posee un nombre, que se ingresa con son apellido, todo junto, el servicio se encargar\u00e1 de ingresar estos datos en campos diferentes. Se asume la configuraci\u00f3n que viene en el proyecto, por ejemplo el puerto 9090 . 1.1 Servicios Registro de Usuario Se encarga de registrar un usuario en el sistema, para que este pueda tener acceso. Luego este podr\u00e1 iniciar sesi\u00f3n. \u001dPost\u001d: http://localhost:9090/api/v1/registrar Body: { \"nombre\": \"Luis Herrera\", \"email\": \"l.herrera.garnica@gmail.com\", \"password\": \"1234\", \"roles\": [\"ROLE_ADMINISTRADOR\"] } Headers: { \"Content-Type\":\"application/json\" } Response: (Esto debe cambiar a un retorno tipo Json) eyJhbGciOiJIUzI1NiJ...resto del token. Iniciar sesi\u00f3n Este servicio es el que utilizando las credenciales, que en este caso son correo y contrase\u00f1a , se crear\u00e1 el token , el que finalmente ser\u00e1 entregado. No se crea una sesi\u00f3n en el servidor, en vez de eso, se crea una variable en el storage del navegador del cliente. Toda la informaci\u00f3n deber\u00eda entregarse con la estructura json , y no una cadena. \u001dPost\u001d: http://localhost:9090/api/v1/iniciarsesion?correo=l.herrera.garnica@gmail.com&password=1234 Response: { \"status\": 200, \"data\": \"eyJhbGciOiJIUzI1NiJ...resto del token.\" } Listar usuarios Este servicio, se encarga de obtener la lista de usuarios que existen en el sistema. Deber\u00eda ser Authoritation pero en Java esto fue modificado por Autorizacion , para poder ver que este tipo de par\u00e1metro es completamente personalizable. Get: http://localhost:9090/api/v1/usuarios/ Headers: { \"Autorizacion\":\"Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJkb3NAZ21haWwuY29tIiwiYXV0aCI6W3siYXV0aG9yaXR5IjoiUk9MRV9BRE1JTklTVFJBRE9SIn0seyJhdXRob3JpdHkiOiJST0xFX1VTVUFSSU8ifV0sImlhdCI6MTU5MDM3ODc2MywiZXhwIjoxNTkwMzgyMzYzfQ.tmbUOOmfVyaMFDNM-u7YBeNGH3CWq5XuFrZEyFhYsBM\" } Response: { \"status\": 200, \"data\": [ { \"nombre\": \"Luis Herrera\", \"email\": \"l.herrera.garnica@gmail.com\", \"password\": null, \"roles\": [ \"ROLE_ADMINISTRADOR\" ] }, { \"nombre\": \"Luis Herrera2\", \"email\": \"dos@gmail.com\", \"password\": null, \"roles\": [ \"ROLE_ADMINISTRADOR\", \"ROLE_USUARIO\" ] } ] } Encontrar Usuario por nombre Este servicio se preocupa de obtener un usuario por su nombre de usuario que en este caso es el correo . No ser\u00e1 visible directamente mediante una vista, pero este servicio, se utilizar\u00e1 para imprimir el nombre de usuario en la ventana principal. Post: http://localhost:9090/api/v1/usuarios?correo=l.herrera.garnica@gmail.com Headers: { \"Autorizacion\":\"Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJkb3NAZ21haWwuY29tIiwiYXV0aCI6W3siYXV0aG9yaXR5IjoiUk9MRV9BRE1JTklTVFJBRE9SIn0seyJhdXRob3JpdHkiOiJST0xFX1VTVUFSSU8ifV0sImlhdCI6MTU5MDM3ODc2MywiZXhwIjoxNTkwMzgyMzYzfQ.tmbUOOmfVyaMFDNM-u7YBeNGH3CWq5XuFrZEyFhYsBM\" } Response: { \"status\": 200, \"data\": { \"nombre\": \"Luis Herrera\", \"email\": \"l.herrera.garnica@gmail.com\", \"password\": null, \"roles\": [ \"ROLE_ADMINISTRADOR\" ] } } 1.2 Estructura de archivos ./ \u251c\u2500\u2500 HELP.md \u251c\u2500\u2500 mvnw \u251c\u2500\u2500 mvnw.cmd \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 additional-spring-configuration-metadata.json \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 jwtapp \u2502 \u2502 \u2502 \u251c\u2500\u2500 JwtappApplication.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 apiexception \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 RestServiceException.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 config \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 AppConfig.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 SQLiteDialect.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 controller \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ControladorAplicacion.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ControladorIngreso.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ControladorRegistro.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ControladorUsuario.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 dao \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioDao.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 dto \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 RespuestaDTO.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioDTO.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 mapper \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioMapper.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 model \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 Rol.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 Usuario.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 security \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 JwtTokenFilter.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 JwtTokenFilterConfigurer.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 JwtTokenProvider.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 WebSecurityConfig.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 service \u2502 \u2502 \u2502 \u251c\u2500\u2500 ServicioUsuario.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 ServicioUsuarioImpl.java \u2502 \u2502 \u2514\u2500\u2500 resources \u2502 \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2502 \u251c\u2500\u2500 database.properties \u2502 \u2502 \u251c\u2500\u2500 static \u2502 \u2502 \u2514\u2500\u2500 templates \u2502 \u2514\u2500\u2500 test \u2502 \u2514\u2500\u2500 java \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 jwtapp \u2502 \u2514\u2500\u2500 JwtappApplicationTests.java \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2502 \u2514\u2500\u2500 maven \u2502 \u2502 \u2514\u2500\u2500 cl.lherrera \u2502 \u2502 \u2514\u2500\u2500 jwtapp \u2502 \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2502 \u2514\u2500\u2500 pom.xml \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2514\u2500\u2500 database.properties \u2514\u2500\u2500 test-classes 31 directories, 34 files 1.3 Implementaci\u00f3n /jwtapp/src/main/java/ cl.lherrera.jwtapp JwtappApplication.java Sin modificaciones, quiz\u00e1s se recomienda ingresar a un usuario por ac\u00e1 y restringir el acceso al registro de usuarios. package cl.lherrera.jwtapp; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class JwtappApplication { public static void main(String[] args) { SpringApplication.run(JwtappApplication.class, args); } } cl.lherrera.jwtapp.apiexception RestServiceException.java package cl.lherrera.jwtapp.apiexception; import org.springframework.http.HttpStatus; public class RestServiceException extends RuntimeException { private static final long serialVersionUID = 5037553749745142029L; private final String message; private final HttpStatus httpStatus; public RestServiceException(String message, HttpStatus httpStatus) { super(); this.message = message; this.httpStatus = httpStatus; } /** * se sobrescribe para poder inclu\u00edr el status en el mensaje de la excepci\u00f3n. */ @Override public String getMessage() { return message; } public HttpStatus getHttpStatus() { return httpStatus; } } cl.lherrera.jwtapp.config AppConfig.java package cl.lherrera.jwtapp.config; import javax.sql.DataSource; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.PropertySource; import org.springframework.core.env.Environment; import org.springframework.jdbc.datasource.DriverManagerDataSource; @Configuration @ComponentScan(\"cl.lherrera.jwtapp\") // escaneo de componentes, desde el paquete base. @PropertySource(\"classpath:database.properties\") // archvo que utilizar\u00e1 en la case para usar `environment.getProperty` public class AppConfig { @Autowired Environment environment; @Bean DataSource dataSource() { DriverManagerDataSource driverManagerDataSource = new DriverManagerDataSource(); driverManagerDataSource.setUrl(environment.getProperty(\"url\")); driverManagerDataSource.setUsername(environment.getProperty(\"username\")); driverManagerDataSource.setPassword(environment.getProperty(\"dbpassword\")); driverManagerDataSource.setDriverClassName(environment.getProperty(\"driverClassName\")); return driverManagerDataSource; } } SQLiteDialect.java package cl.lherrera.jwtapp.config; import java.sql.Types; import org.hibernate.dialect.Dialect; import org.hibernate.dialect.function.StandardSQLFunction; import org.hibernate.dialect.function.SQLFunctionTemplate; import org.hibernate.dialect.function.VarArgsSQLFunction; import org.hibernate.type.StandardBasicTypes; /** * Necesario para utilizar SQLite, se aplica en AppConfig. * @author luisherrera * */ public class SQLiteDialect extends Dialect { public SQLiteDialect() { super(); registerColumnType(Types.BIT, \"integer\"); registerColumnType(Types.TINYINT, \"tinyint\"); registerColumnType(Types.SMALLINT, \"smallint\"); registerColumnType(Types.INTEGER, \"integer\"); registerColumnType(Types.BIGINT, \"bigint\"); registerColumnType(Types.FLOAT, \"float\"); registerColumnType(Types.REAL, \"real\"); registerColumnType(Types.DOUBLE, \"double\"); registerColumnType(Types.NUMERIC, \"numeric\"); registerColumnType(Types.DECIMAL, \"decimal\"); registerColumnType(Types.CHAR, \"char\"); registerColumnType(Types.VARCHAR, \"varchar\"); registerColumnType(Types.LONGVARCHAR, \"longvarchar\"); registerColumnType(Types.DATE, \"date\"); registerColumnType(Types.TIME, \"time\"); registerColumnType(Types.TIMESTAMP, \"timestamp\"); registerColumnType(Types.BINARY, \"blob\"); registerColumnType(Types.VARBINARY, \"blob\"); registerColumnType(Types.LONGVARBINARY, \"blob\"); // registerColumnType(Types.NULL, \"null\"); registerColumnType(Types.BLOB, \"blob\"); registerColumnType(Types.CLOB, \"clob\"); registerColumnType(Types.BOOLEAN, \"integer\"); registerFunction(\"concat\", new VarArgsSQLFunction(StandardBasicTypes.STRING, \"\", \"||\", \"\")); registerFunction(\"mod\", new SQLFunctionTemplate(StandardBasicTypes.INTEGER, \"?1 % ?2\")); registerFunction(\"substr\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); registerFunction(\"substring\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); } public boolean supportsIdentityColumns() { return true; } public boolean hasDataTypeInIdentityColumn() { return false; // As specify in NHibernate dialect } public String getIdentityColumnString() { // return \"integer primary key autoincrement\"; return \"integer\"; } public String getIdentitySelectString() { return \"select last_insert_rowid()\"; } public boolean supportsLimit() { return true; } public String getLimitString(String query, boolean hasOffset) { return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? \" limit ? offset ?\" : \" limit ?\") .toString(); } public boolean bindLimitParametersInReverseOrder() { return true; } public boolean supportsTemporaryTables() { return true; } public String getCreateTemporaryTableString() { return \"create temporary table if not exists\"; } public boolean dropTemporaryTableAfterUse() { return false; } public boolean supportsCurrentTimestampSelection() { return true; } public boolean isCurrentTimestampSelectStringCallable() { return false; } public String getCurrentTimestampSelectString() { return \"select current_timestamp\"; } public boolean supportsUnionAll() { return true; } public boolean hasAlterTable() { return false; // As specify in NHibernate dialect } public boolean dropConstraints() { return false; } public String getAddColumnString() { return \"add column\"; } public String getForUpdateString() { return \"\"; } public boolean supportsOuterJoinForUpdate() { return false; } public String getDropForeignKeyString() { throw new UnsupportedOperationException(\"No drop foreign key syntax supported by SQLiteDialect\"); } public String getAddForeignKeyConstraintString(String constraintName, String[] foreignKey, String referencedTable, String[] primaryKey, boolean referencesPrimaryKey) { throw new UnsupportedOperationException(\"No add foreign key syntax supported by SQLiteDialect\"); } public String getAddPrimaryKeyConstraintString(String constraintName) { throw new UnsupportedOperationException(\"No add primary key syntax supported by SQLiteDialect\"); } public boolean supportsIfExistsBeforeTableName() { return true; } public boolean supportsCascadeDelete() { return false; } } cl.lherrera.jwtapp.controller ControladorAplicacion.java package cl.lherrera.jwtapp.controller; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; /** * M\u00e9todo para comprobar si la api est\u00e1 disponible Es utilizado por monitores, * que ejecutan una petici\u00f3n a este endpoint, para poder verificar que est\u00e9 * disponible o no. * * @author luisherrera * */ @RestController @RequestMapping(value = \"/api/v1/isAlive\") public class ControladorAplicacion { @GetMapping(path = { \"\", \"/\" }) public String isAlive() { return \"200\"; } } ControladorIngreso.java package cl.lherrera.jwtapp.controller; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController; import cl.lherrera.jwtapp.dto.RespuestaDTO; import cl.lherrera.jwtapp.service.ServicioUsuario; @RestController @RequestMapping(path = \"/api/v1/iniciarsesion\") public class ControladorIngreso { private Logger logger = LoggerFactory.getLogger(ControladorIngreso.class); @Autowired private ServicioUsuario servicioUsuario; @PostMapping(path = { \"\", \"/\" }) public RespuestaDTO<String> iniciarSesion(@RequestParam String correo, @RequestParam String password) { logger.debug(\"Ejecutado: /api/v1/iniciarsesion, par\u00e1metros : \" + \" \" + correo + \" \" + password); RespuestaDTO<String> respuesta = new RespuestaDTO<>(); String data = servicioUsuario.iniciarSesion(correo, password); respuesta.setStatus(200); respuesta.setData(data); return respuesta; } } ControladorRegistro.java /** * Servicio que registra a un usuario. Se pide que adem\u00e1s retorne el token. * No es bueno que un m\u00e9todo realice dos tareas principales. Pero en esta ocaci\u00f3n * lo hacemos para obtener el token y no tener que hacer el login. En un sistema * productivo, deber\u00eda solo registrar. Luego, deber\u00edamos iniciar sesi\u00f3n de manera manual * * Headers: * Content-Type:application/json * POST: * http://localhost:8080/api/v1/registrar * BODY-EXAMPLE * * <code> { \"nombre\": \"Luis Herrera\", \"email\": \"l.herrera.garnica@gmail.com\", \"password\": \"1234\", \"roles\": [\"ROLE_ADMINISTRADOR\"] } <code> */ package cl.lherrera.jwtapp.controller; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; import cl.lherrera.jwtapp.dto.UsuarioDTO; import cl.lherrera.jwtapp.service.ServicioUsuario; // para que no retorne vistas. @RestController @RequestMapping(path = \"/api/v1/registrar\") public class ControladorRegistro { private Logger logger = LoggerFactory.getLogger(ControladorRegistro.class); @Autowired ServicioUsuario servicioUsuario; /** * Este m\u00e9todo, debe ser refactorizado, si se va a utilizar * productivamente, no deber\u00eda responder una cadena, si no * que un json, con la cadena en el atributo data. * * Esto queda demostrado en el inicio de sesi\u00f3n, aunque este * servicio solamente deber\u00eda retornar el estado de creado. */ @PostMapping(path = { \"\", \"/\" }) public String registrarUsuaio(@RequestBody UsuarioDTO usuarioDTO) { logger.debug(\"Registrando al usuario: \" + usuarioDTO.toString()); return servicioUsuario.registraNuevoUsuario(usuarioDTO); } } ControladorUsuario.java package cl.lherrera.jwtapp.controller; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController; import cl.lherrera.jwtapp.dto.RespuestaDTO; import cl.lherrera.jwtapp.dto.UsuarioDTO; import cl.lherrera.jwtapp.service.ServicioUsuario; @RestController @RequestMapping(\"/api/v1/usuarios\") public class ControladorUsuario { @Autowired private ServicioUsuario servicioUsuario; @GetMapping(path = { \"\", \"/\" }) public RespuestaDTO<List<UsuarioDTO>> listar() { RespuestaDTO<List<UsuarioDTO>> respuesta = new RespuestaDTO<>(); List<UsuarioDTO> usuarios = servicioUsuario.listaDeUsuarios(); respuesta.setStatus(200); respuesta.setData(usuarios); return respuesta; } @PostMapping(path = { \"\", \"/\" }) public RespuestaDTO<UsuarioDTO> encontrarPorNombreDeUsuario(@RequestParam String correo) { UsuarioDTO usuario = servicioUsuario.obtenerPorCorreo(correo); RespuestaDTO<UsuarioDTO> respuesta = new RespuestaDTO<>(); respuesta.setStatus(200); respuesta.setData(usuario); return respuesta; } } cl.lherrera.jwtapp.dao UsuarioDao.java package cl.lherrera.jwtapp.dao; import java.util.Optional; import org.springframework.data.jpa.repository.JpaRepository; import org.springframework.stereotype.Repository; import cl.lherrera.jwtapp.model.Usuario; @Repository public interface UsuarioDao extends JpaRepository<Usuario, Integer> { boolean existsByUsername(String username); /** * Ya que mediante el token tenemos la informaci\u00f3n del nombre de usuario, * utilizamos esta informaci\u00f3n, para poder obtener al usuario mediante esta * informaci\u00f3n */ Optional<Usuario> findByUsername(String username); } cl.lherrera.jwtapp.dto RespuestaDTO.java package cl.lherrera.jwtapp.dto; /** * Esta clase fue dise\u00f1ada para poder manejar los diferentes tipos de * respuestas, por ejemplo en el caso de token, es una cadena, para el caso del * usuario es un Usuario, por lo tanto, estos tipos de retornos se traducen a * distintos tipos en java, aunque sean todos json, poseen estructuras distintas * que deben ser manejadas con las t\u00e9cnicas que existen en java, antes de * finalmente ser transformadas en cadenas o json, son objetos, es por ello que * la respuesta es un tipo <T>, por que el campo data, es lo que se busca por * estandar como el campo que contiene la informaci\u00f3n, es por eso que la * respuesta debe ser multipo, por que puede contender cualquuier tipo de * respuesta. Recordar que no puede ser con polimorfismo puro, como lo ser\u00eda con * un tipo padre como tipo de respuesta, ya que este, deber\u00eda contener todos los * m\u00e9todos de cualquier tipo de variable, lo que es impensable. La ventaja de * <T> es que si le pasamos el tipo que sea, asume todos sus m\u00e9todos, a * diferencia del polimorfismo que solamente asume los m\u00e9todos del padre y para * ejecutar alguno que no posea, se debe hacer un cast. Usando <T> no tenemos * este problema. * * @author luisherrera * * @param <T> */ public class RespuestaDTO<T> { private Integer status; private T data; public RespuestaDTO() { } public RespuestaDTO(Integer status, T data) { super(); this.status = status; this.data = data; } public Integer getStatus() { return status; } public void setStatus(Integer status) { this.status = status; } public T getData() { return data; } public void setData(T data) { this.data = data; } } UsuarioDTO.java package cl.lherrera.jwtapp.dto; import java.util.List; import cl.lherrera.jwtapp.model.Rol; /** * Clase de transporte de datos, que contiene la estructura del objeto json * esperado en el frontEnd. En este caso, para el front, este elemento seg\u00fan la * t\u00e9cnica de puntos funci\u00f3n ser\u00eda un (EIF: External Interface File) * * @author luisherrera * */ public class UsuarioDTO { private String nombre; private String email; private String password; private List<Rol> roles; public UsuarioDTO() { } public UsuarioDTO(String nombre, String email, String password, List<Rol> roles) { super(); this.nombre = nombre; this.email = email; this.password = password; this.roles = roles; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public List<Rol> getRoles() { return roles; } public void setRoles(List<Rol> roles) { this.roles = roles; } @Override public String toString() { return \"UsuarioDTO [nombre=\" + nombre + \", email=\" + email + \", password=\" + password + \", roles=\" + roles + \"]\"; } } cl.lherrera.jwtapp.mapper UsuarioMapper.java package cl.lherrera.jwtapp.mapper; import java.util.Arrays; import java.util.List; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import cl.lherrera.jwtapp.dto.UsuarioDTO; import cl.lherrera.jwtapp.model.Usuario; /** * contiene toda la l\u00f3gica necesaria para que las entidades sean transformadas en * los objetos que son requeridos para el servicio. * * @author luisherrera * */ public class UsuarioMapper { private static Logger logger = LoggerFactory.getLogger(UsuarioMapper.class); private UsuarioMapper() { } /** * Transforma un Usuario a un UsuarioDTO */ public static UsuarioDTO usuarioADto(Usuario usuario) { logger.debug(\"Usuario: \" + usuario.toString()); UsuarioDTO dtoUsuario = new UsuarioDTO(); dtoUsuario.setNombre(usuario.getNombre() + \" \" + usuario.getApellido()); dtoUsuario.setEmail(usuario.getUsername()); dtoUsuario.setRoles(usuario.getRoles()); dtoUsuario.setPassword(null); logger.debug(\"Transformado a DTO : \" + dtoUsuario.toString()); return dtoUsuario; } /** * m\u00e9todo privado para separar el nombre y el apellido que viene en un solo * campo desde el front se separa si viene con espacio no es muy elegante pero * es una soluci\u00f3n r\u00e1pida. */ private static List<String> getNombres(UsuarioDTO dtoUsuario) { return Arrays.asList(dtoUsuario.getNombre().split(\" \")); } /** * Transforma un UsuarioDTO a un Usuario */ public static Usuario dtoAUsuario(UsuarioDTO dtoUsuario) { logger.debug(\"UsuarioDTO: \" + dtoUsuario.toString()); List<String> nombres = getNombres(dtoUsuario); String apellido = \"\"; String nombre = (nombres.size() > 0) ? nombres.get(0) : null; if (nombres.size() > 1) apellido = (nombres.size() > 0) ? nombres.get(1) : null; Usuario usuario = new Usuario(); usuario.setNombre(nombre); usuario.setApellido(apellido); usuario.setUsername(dtoUsuario.getEmail()); usuario.setPassword(dtoUsuario.getPassword()); usuario.setRoles(dtoUsuario.getRoles()); logger.debug(\"Transformado a Usuario: \" + usuario.toString()); return usuario; } } cl.lherrera.jwtapp.model Rol.java Ya hemos mencionado que el truco est\u00e1 en implementar GrantedAuthority . package cl.lherrera.jwtapp.model; import org.springframework.security.core.GrantedAuthority; public enum Rol implements GrantedAuthority { ROLE_ADMINISTRADOR, ROLE_USUARIO; @Override public String getAuthority() { return name(); } } Usuario.java package cl.lherrera.jwtapp.model; import java.util.List; import javax.persistence.Column; import javax.persistence.ElementCollection; import javax.persistence.Entity; import javax.persistence.FetchType; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; /** * No se utilizar\u00e1 el campo tipo \u00fanico, ya que el Dialecto falla, no se ha * probado con otro motor, de todas formas este contrrol se maneja mediante el * m\u00e9todo `findByUser`, a nivel de seguriidad. * * @author luisherrera * */ @Entity public class Usuario { @Id @GeneratedValue(strategy = GenerationType.AUTO) Integer id; String nombre; String apellido; @Column(name = \"correo\") String username; @Column(name = \"contrasenia\") String password; @ElementCollection(fetch = FetchType.EAGER) List<Rol> roles; public Usuario() { } public Usuario(Integer id, String nombre, String apellido, String username, String password, List<Rol> roles) { super(); this.id = id; this.nombre = nombre; this.apellido = apellido; this.username = username; this.password = password; this.roles = roles; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } public String getApellido() { return apellido; } public void setApellido(String apellido) { this.apellido = apellido; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public List<Rol> getRoles() { return roles; } public void setRoles(List<Rol> roles) { this.roles = roles; } @Override public String toString() { return \"Usuario [id=\" + id + \", nombre=\" + nombre + \", apellido=\" + apellido + \", username=\" + username + \", password=\" + password + \", roles=\" + roles + \"]\"; } } cl.lherrera.jwtapp.security En el proyecto anterior, se puede ver un mayor detalle a nivel de configuraciones de este paquete y su funcionamiento, en esta versi\u00f3n, se puede ver que las p\u00e1ginas que pod\u00edan ser accedidas han sido modificadas, para poder actualizar los accesos de inicio de sesi\u00f3n y registro que cambiaron de controlador respecto al proyecto anterior (b\u00e1sico). JwtTokenFilter.java package cl.lherrera.jwtapp.security; import java.io.IOException; import javax.servlet.FilterChain; import javax.servlet.ServletException; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import org.springframework.security.core.Authentication; import org.springframework.security.core.context.SecurityContextHolder; import org.springframework.web.filter.OncePerRequestFilter; import cl.lherrera.jwtapp.apiexception.RestServiceException; public class JwtTokenFilter extends OncePerRequestFilter { private JwtTokenProvider jwtTokenProvider; public JwtTokenFilter(JwtTokenProvider jwtTokenProvider) { this.jwtTokenProvider = jwtTokenProvider; } @Override protected void doFilterInternal( HttpServletRequest request, HttpServletResponse respose, FilterChain filterChain) throws ServletException, IOException { // extraemos el token del request, este debe ir en el header // con el nombre Authentication y en el valor String token = jwtTokenProvider.resolveToken(request); try { // si el token no es nulo y si es v\u00e1lido... if (token != null && jwtTokenProvider.validateToken(token)) { // creamos un objeto (new UsernamePasswordAuthenticationToken) // ya las credenciales no est\u00e1n disponibles, solamente `userDetails`` Authentication auth = jwtTokenProvider.getAuthentication(token); SecurityContextHolder.getContext().setAuthentication(auth); } } catch (RestServiceException ex) { SecurityContextHolder.clearContext(); respose.sendError(ex.getHttpStatus().value(), ex.getMessage()); return; } filterChain.doFilter(request, respose); } } JwtTokenFilterConfigurer.java package cl.lherrera.jwtapp.security; import org.springframework.security.config.annotation.SecurityConfigurerAdapter; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.web.DefaultSecurityFilterChain; import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter; public class JwtTokenFilterConfigurer extends SecurityConfigurerAdapter<DefaultSecurityFilterChain, HttpSecurity> { private JwtTokenProvider jwtTokenProvider; public JwtTokenFilterConfigurer(JwtTokenProvider jwtTokenProvider) { this.jwtTokenProvider = jwtTokenProvider; } @Override public void configure(HttpSecurity http) throws Exception { JwtTokenFilter customFilter = new JwtTokenFilter(jwtTokenProvider); http.addFilterBefore(customFilter, UsernamePasswordAuthenticationFilter.class); } } JwtTokenProvider.java package cl.lherrera.jwtapp.security; import java.util.Base64; import java.util.Date; import java.util.List; import java.util.Objects; import java.util.stream.Collectors; import javax.annotation.PostConstruct; import javax.servlet.http.HttpServletRequest; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.http.HttpStatus; import org.springframework.security.authentication.UsernamePasswordAuthenticationToken; import org.springframework.security.core.Authentication; import org.springframework.security.core.authority.SimpleGrantedAuthority; import org.springframework.security.core.userdetails.UserDetails; import org.springframework.stereotype.Component; import cl.lherrera.jwtapp.apiexception.RestServiceException; import cl.lherrera.jwtapp.model.Rol; import cl.lherrera.jwtapp.service.ServicioUsuario; // dependencia jjwt import io.jsonwebtoken.Claims; import io.jsonwebtoken.JwtException; import io.jsonwebtoken.Jwts; import io.jsonwebtoken.SignatureAlgorithm; @Component public class JwtTokenProvider { private Logger logger = LoggerFactory.getLogger(JwtTokenProvider.class); private final static String HEADER_AUTHORIZATION_KEY = \"Autorizacion\"; private final static String TOKEN_BEARER_VALUE = \"Bearer \"; // propiedad @Value(\"${security.jwt.token.secret-key}\") private String secretKey; // propiedad @Value(\"${security.jwt.token.expire-length}\") private long validityInMilliseconds; // servicio Implementado @Autowired private ServicioUsuario servicioUsuario; /** * Spring calls methods annotated with @PostConstruct * only once, just after the initialization * of bean properties. * https://www.baeldung.com/spring-postconstruct-predestroy * * Asigna el valor de la clave secreta */ @PostConstruct protected void init() { secretKey = Base64.getEncoder().encodeToString(secretKey.getBytes()); logger.debug(\"LLave inicializada: \" + secretKey); } public String createToken(String username, List<Rol> roles) { Claims claims = Jwts.claims().setSubject(username); List<SimpleGrantedAuthority> grats = roles.stream() .map(rol -> new SimpleGrantedAuthority(rol.getAuthority()) ) .filter(Objects::nonNull) .collect(Collectors.toList()); claims.put(\"auth\", grats); // expiraci\u00f3n del token Date now = new Date(); Date validity = new Date(now.getTime() + validityInMilliseconds); // creaci\u00f3n del token String token = Jwts.builder() .setClaims(claims) .setIssuedAt(now) .setExpiration(validity) .signWith(SignatureAlgorithm.HS256, secretKey) .compact(); return token; } /** * A partir del token se obtiene el nombre de usuario y luego, * se obtiene un `UserDetails`, que ya sabemos que es la * entidad que maneja como ususuario de sesi\u00f3n. */ public Authentication getAuthentication(String token) { UserDetails userDetails = servicioUsuario.loadUserByUsername(getUsername(token)); UsernamePasswordAuthenticationToken autenticacion; autenticacion = new UsernamePasswordAuthenticationToken( userDetails, \"\", userDetails.getAuthorities() ); return autenticacion; } /** * En la configuraci\u00f3n de seguridad * lo que sabe Spring es que el nombre * de usuario es el correo. */ private String getUsername(String token) { String userName = Jwts.parser() .setSigningKey(secretKey) .parseClaimsJws(token) .getBody() .getSubject(); return userName; } /** * Quitamos \"Bearer \" del principio del token */ public String resolveToken(HttpServletRequest req) { String tokenReal = null; String bearerToken = req.getHeader(HEADER_AUTHORIZATION_KEY); logger.debug(\"Bearer token: \" + bearerToken); boolean inicioOk = (bearerToken != null && bearerToken.startsWith(TOKEN_BEARER_VALUE)); if (inicioOk) { tokenReal = bearerToken.substring(TOKEN_BEARER_VALUE.length()); } return tokenReal; } /** * Si el token logra ser parseado, entonces se asume que es un * Token v\u00e1lido. `parseClaimsJws` analiza la llave (no un * token que exista hipoteticamente, la comparaci\u00f3n se * realiza entre el token que est\u00e1 en el request * y la clave cifrada de esta clase. cifrada * justo despu\u00e9s de construirse este * objeto `INIT`). */ public boolean validateToken(String token) { try { Jwts.parser().setSigningKey(secretKey).parseClaimsJws(token); return true; } catch (JwtException | IllegalArgumentException e) { throw new RestServiceException( \"Expired or invalid JWT token\", HttpStatus.INTERNAL_SERVER_ERROR ); } } } s WebSecurityConfig.java package cl.lherrera.jwtapp.security; import java.util.Arrays; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.security.authentication.AuthenticationManager; import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity; import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter; import org.springframework.security.config.http.SessionCreationPolicy; import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder; import org.springframework.security.crypto.password.PasswordEncoder; import org.springframework.web.cors.CorsConfiguration; import org.springframework.web.cors.CorsConfigurationSource; import org.springframework.web.cors.UrlBasedCorsConfigurationSource; @Configuration @EnableWebSecurity @EnableGlobalMethodSecurity(prePostEnabled = true) public class WebSecurityConfig extends WebSecurityConfigurerAdapter { @Autowired private JwtTokenProvider jwtTokenProvider; @Override protected void configure(HttpSecurity http) throws Exception { // sin verificaci\u00f3n csrf, inseguro. (Laravel) http.csrf().disable(); /** * Esta configuraci\u00f3n, permite hacer pruebas desde un frontend, ubicado en la * misma m\u00e1quina. */ http.cors().configurationSource(corsConfigurationSource()); // sesi\u00f3n sin estado. http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS); // Autorizaci\u00f3n de peticiones. http.authorizeRequests() // servicios p\u00fablicos. .antMatchers( \"/api/v1/isAlive\", \"/api/v1/iniciarsesion\", \"/api/v1/registrar\").permitAll() // todos los dem\u00e1s. servicios, solamente para usuarios autenticados. .anyRequest().authenticated(); // Applies a {@link SecurityConfigurer} to this {@link SecurityBuilder} overriding any // {@link SecurityConfigurer} of the exact same class. Note that object hierarchies // are not considered. // // El filtro personaliizado que creamos en JwtTokenFilterConfigurer, donde // validamos el token, y si es v\u00e1lido crea el Authenticate, se aplica ac\u00e1 // es un filtro que se concatena a los que ya hemos puesto en este mismo // m\u00e9todo, se aplica antes que a todos por que JwtTokenFilterConfigurer // HttpSecurity.addFilterBefore(customFilter, UsernamePasswordAuthenticationFilter.class); // le decimos que el filtro lo realice antes que se ejecute la autenticaci\u00f3n con // user y password. http.apply(new JwtTokenFilterConfigurer(jwtTokenProvider) ); } @Bean @Override public AuthenticationManager authenticationManagerBean() throws Exception { return super.authenticationManagerBean(); } @Bean public PasswordEncoder passwordEncoder() { // fuerza = 12 (entre 4 y 31) return new BCryptPasswordEncoder(12); } /** * Esta configuraci\u00f3n, permite hacer pruebas desde * un frontend, ubicado en la misma m\u00e1quina. */ @Bean CorsConfigurationSource corsConfigurationSource() { CorsConfiguration configuration = new CorsConfiguration(); configuration.setAllowedOrigins(Arrays.asList(\"*\")); configuration.setAllowedMethods(Arrays.asList(\"GET\", \"POST\")); configuration.setAllowCredentials(true); // the below three lines will add the relevant CORS response headers configuration.addAllowedOrigin(\"*\"); configuration.addAllowedHeader(\"*\"); configuration.addAllowedMethod(\"*\"); UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource(); source.registerCorsConfiguration(\"/**\", configuration); return source; } } cl.lherrera.jwtapp.service Modificaciones realizadas para poder inferir de mejor forma, que la implementaci\u00f3n de loadUserByUsername , es obligatoria para poder realizar el uso de credenciales con JWT . Es por eso que se cambia la herencia que lleva la implementaci\u00f3n del servicio de usuarios directamente a la interfaz, ya que podr\u00eda llevar a confusiones el que no se sepa realmente cual es la interfaz que tiene loadUserByUsername \u001cy esta es UserDetailsService . ServicioUsuario.java package cl.lherrera.jwtapp.service; import java.util.List; import org.springframework.security.core.userdetails.UserDetailsService; import cl.lherrera.jwtapp.dto.UsuarioDTO; /** * Al extender UserDetailsService, traemos el m\u00e9todo loadUserByUsername, que * sobre escribimos en la implementaci\u00f3n, podremos ver que a veces se implementa * un implements UserDetailsService, pero esto causa confusiones ya que a veces * los desarrolladores que no conocen que este m\u00e9todo est\u00e1 en * UserDetailsService, lo ponen igual ac\u00e1, en this. y lo sobre escriben en la * implementaci\u00f3n, funcionando de todas formas por que Spring asume sobre * escrito el loadUserByUsername que le pertenece a UserDetailsService y no * ServicioUsuario. * */ public interface ServicioUsuario extends UserDetailsService { String iniciarSesion(String correo, String contrasenia); List<UsuarioDTO> listaDeUsuarios(); /** * Servicio encargado de registrar un usuario hay que tener en cuenta varias * cosas como el dar una buena encriptaci\u00f3n a la base de datos. */ String registraNuevoUsuario(UsuarioDTO usuarioDTO); /** * A diferencia del m\u00e9todo loadUserByUsername, este no retorna * un UserDetails, si no que retorna un DTO para efectos * de poder mostrar m\u00e1s detalles del usuario que se consulte. */ UsuarioDTO obtenerPorCorreo(String correo); } ServicioUsuarioImpl.java package cl.lherrera.jwtapp.service; import java.util.List; import java.util.stream.Collectors; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpStatus; import org.springframework.security.authentication.UsernamePasswordAuthenticationToken; import org.springframework.security.authentication.AuthenticationManager; import org.springframework.security.core.Authentication; import org.springframework.security.core.AuthenticationException; import org.springframework.security.core.userdetails.UserDetails; import org.springframework.security.core.userdetails.UsernameNotFoundException; import org.springframework.security.crypto.password.PasswordEncoder; import org.springframework.stereotype.Service; import cl.lherrera.jwtapp.apiexception.RestServiceException; import cl.lherrera.jwtapp.dao.UsuarioDao; import cl.lherrera.jwtapp.dto.UsuarioDTO; import cl.lherrera.jwtapp.mapper.UsuarioMapper; import cl.lherrera.jwtapp.model.Usuario; import cl.lherrera.jwtapp.security.JwtTokenProvider; @Service public class ServicioUsuarioImpl implements ServicioUsuario { private Logger logger = LoggerFactory.getLogger(ServicioUsuarioImpl.class); @Autowired UsuarioDao daoUsuario; @Autowired private AuthenticationManager authenticationManager; @Autowired private JwtTokenProvider jwtTokenProvider; @Autowired private PasswordEncoder passwordEncoder; @Override public String iniciarSesion(String correo, String contrasenia) { String token = \"\"; logger.debug(\"Inicio de la sesi\u00f3n: correo: \" + correo + \"contrase\u00f1a: \" + contrasenia); try { // intenta crear la autenticaci\u00f3n. // si no puede, se env\u00eda un AuthenticationException. Authentication objetoAutentificacion = new UsernamePasswordAuthenticationToken(correo, contrasenia); authenticationManager.authenticate(objetoAutentificacion); Usuario usuarioAutenticado = daoUsuario.findByUsername(correo).orElse(null); if (usuarioAutenticado != null) token = generaToken(usuarioAutenticado); } catch (AuthenticationException e) { throw new RestServiceException(\"username o password invalido\", HttpStatus.UNPROCESSABLE_ENTITY); } return token; } private String generaToken(Usuario usuario) { String token = jwtTokenProvider.createToken(usuario.getUsername(), usuario.getRoles()); logger.debug(\"Token generado: ...\" + token.substring(token.length() - 5)); return token; } @Override public List<UsuarioDTO> listaDeUsuarios() { List<UsuarioDTO> usuarios = daoUsuario.findAll().stream() // cada uno de los usuarios pasando a un DTO .map(usuario -> UsuarioMapper.usuarioADto(usuario)).collect(Collectors.toList()); logger.debug(\"Lista de usuarioDTO: \" + usuarios.toString()); return usuarios; } @Override public String registraNuevoUsuario(UsuarioDTO dtoUsuario) { String token = null; // verificar si el usuario existe para no ingresarlo otra vez Usuario usuario = daoUsuario.findByUsername(dtoUsuario.getEmail()).orElse(null); if (usuario == null) { String constraseniaEnDuro = dtoUsuario.getPassword(); String constraseniaEncriptada = passwordEncoder.encode(constraseniaEnDuro); dtoUsuario.setPassword(constraseniaEncriptada); // guardamos el usuario convertido desde un DTO usuario = UsuarioMapper.dtoAUsuario(dtoUsuario); logger.debug(\"Registrando nuevo usuario: \" + usuario.toString()); daoUsuario.save(usuario); logger.debug(\"Usuario nuevo registrado: \" + usuario.toString()); logger.debug(\"Generando token... \"); token = this.generaToken(usuario); } return token; } /** * Se implementa desde UserDetailsService, interface que extiende * ServicioUsuario. * * Se supone que se debe cargar el nombre de usuario y en este caso es correo, * es por que se exige un valor de nombre de usuario, que puede ser por ejemplo: * rut, correo, nombre de usuario, tag name, etc. El c\u00f3mo se maneje depender\u00e1 de * nuestra implementaci\u00f3n. * * Construye un `UserDetails` est\u00e1tico, con la informaci\u00f3n que se le * proporcione. En este caso, el nombre de usuario que ven\u00eda como argumento y la * contrase\u00f1a que est\u00e1 en la base de datos. Este proceso es implementado ya que * este \u00fanico m\u00e9todo, posee acceso a la contrase\u00f1a del usuario. La t\u00e9cnica usada * es que cada m\u00e9todo retorna un `UserBuilder`, hasta llegar a `build()`, es * cuando finalmente es convertido en un `UserDetail`. * **/ @Override public UserDetails loadUserByUsername(String correo) throws UsernameNotFoundException { final Usuario user = daoUsuario.findByUsername(correo).orElse(null); if (user == null) { throw new UsernameNotFoundException(\"Usuario '\" + correo + \"' no encontrado\"); } return org.springframework.security.core.userdetails.User// .withUsername(correo).password(user.getPassword()).authorities(user.getRoles()).accountExpired(false) .accountLocked(false).credentialsExpired(false).disabled(false).build(); } @Override public UsuarioDTO obtenerPorCorreo(String correo) { Usuario usuario = daoUsuario.findByUsername(correo).orElse(new Usuario()); return UsuarioMapper.usuarioADto(usuario); } } /jwtapp/src/main/resources application.properties spring.jpa.generate-ddl=true spring.jpa.database-platform=cl.lherrera.jwtapp.config.SQLiteDialect spring.jpa.show-sql=true spring.jpa.hibernate.ddl-auto=create-drop spring.jpa.properties.hibernate.format_sql=true # Configuraci\u00f3n para el token. security.jwt.token.secret-key=DLatam-SecretKey security.jwt.token.expire-length=3600000 # Para mostrar el log de debug # esto no se mostrar\u00eda en producci\u00f3n logging.level.org.springframework.web=DEBUG #logging.level.root=DEBU logging.level.cl.lherrera.jwtapp=DEBUG logging.file.name=logs #Cambiamos el puerto para poder probar con el servidor de vscode server.port=9090 server.address=0.0.0.0 # loggingRequestDetails spring.http.log-request-details=true database.properties driverClassName=org.sqlite.JDBC url=jdbc:sqlite:baseDeDatos.db username=jpaspring password=sa /jwtapp/pom.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.7.RELEASE</version> <relativePath/> <!-- lookup parent from repository --> </parent> <groupId>cl.lherrera</groupId> <artifactId>jwtapp</artifactId> <version>20.0.0</version> <name>jwtapp</name> <description>aplicaci\u00f3n b\u00e1sica de JWT</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-jpa</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-security</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <scope>runtime</scope> <optional>true</optional> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> <dependency> <groupId>org.springframework.security</groupId> <artifactId>spring-security-test</artifactId> <scope>test</scope> </dependency> <!-- JWT - SUPPORT --> <dependency> <groupId>io.jsonwebtoken</groupId> <artifactId>jjwt</artifactId> <version>0.9.1</version> </dependency> <!-- JWT - SUPPORT # --> <!-- SQLITE - SUPPORT --> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> </dependency> <!-- SQLITE - SUPPORT #--> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project> TODO Agregar los @Transactional , que no est\u00e1n.\u001c Reparar formatos de salida a json , por ejemplo en el registro de usuarios. Agregar la capacidad de actualizar y eliminar usuarios.","title":"Backend"},{"location":"ejercicios/spring/jwt/mtnusuario/backend/#1-mantenedor-de-usuarios-backend","text":"Es una continuaci\u00f3n del proyecto anterior. Es la implementaci\u00f3n de los servicios que consumir\u00e1 la aplicaci\u00f3n en html, javascript y css . Esta aplicaci\u00f3n posee implementaciones pendientes, como el tipo de retorno del registro, o la re direcci\u00f3n de los usuarios al login, que no se presenta en las dem\u00e1s opciones; pero lo que se tiene implementado es suficiente ejemplo para poder entender la implementaci\u00f3n de las soluciones que siguen el patr\u00f3n Backend for FrontEnd - BFF . A diferencia de Spring Mvc ; ac\u00e1 no utilizaremos JSP, JSTL o THYMELEAF \u001d, si no que, la implementaci\u00f3n queda abierta a cualquier tecnolog\u00eda de FrontEnd . Una particularidad de este ejemplo, es que utilizamos un DTO, que posee un nombre, que se ingresa con son apellido, todo junto, el servicio se encargar\u00e1 de ingresar estos datos en campos diferentes. Se asume la configuraci\u00f3n que viene en el proyecto, por ejemplo el puerto 9090 .","title":"1 Mantenedor de Usuarios - BackEnd"},{"location":"ejercicios/spring/jwt/mtnusuario/backend/#11-servicios","text":"","title":"1.1 Servicios"},{"location":"ejercicios/spring/jwt/mtnusuario/backend/#registro-de-usuario","text":"Se encarga de registrar un usuario en el sistema, para que este pueda tener acceso. Luego este podr\u00e1 iniciar sesi\u00f3n. \u001dPost\u001d: http://localhost:9090/api/v1/registrar Body: { \"nombre\": \"Luis Herrera\", \"email\": \"l.herrera.garnica@gmail.com\", \"password\": \"1234\", \"roles\": [\"ROLE_ADMINISTRADOR\"] } Headers: { \"Content-Type\":\"application/json\" } Response: (Esto debe cambiar a un retorno tipo Json) eyJhbGciOiJIUzI1NiJ...resto del token.","title":"Registro de Usuario"},{"location":"ejercicios/spring/jwt/mtnusuario/backend/#iniciar-sesion","text":"Este servicio es el que utilizando las credenciales, que en este caso son correo y contrase\u00f1a , se crear\u00e1 el token , el que finalmente ser\u00e1 entregado. No se crea una sesi\u00f3n en el servidor, en vez de eso, se crea una variable en el storage del navegador del cliente. Toda la informaci\u00f3n deber\u00eda entregarse con la estructura json , y no una cadena. \u001dPost\u001d: http://localhost:9090/api/v1/iniciarsesion?correo=l.herrera.garnica@gmail.com&password=1234 Response: { \"status\": 200, \"data\": \"eyJhbGciOiJIUzI1NiJ...resto del token.\" }","title":"Iniciar sesi\u00f3n"},{"location":"ejercicios/spring/jwt/mtnusuario/backend/#listar-usuarios","text":"Este servicio, se encarga de obtener la lista de usuarios que existen en el sistema. Deber\u00eda ser Authoritation pero en Java esto fue modificado por Autorizacion , para poder ver que este tipo de par\u00e1metro es completamente personalizable. Get: http://localhost:9090/api/v1/usuarios/ Headers: { \"Autorizacion\":\"Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJkb3NAZ21haWwuY29tIiwiYXV0aCI6W3siYXV0aG9yaXR5IjoiUk9MRV9BRE1JTklTVFJBRE9SIn0seyJhdXRob3JpdHkiOiJST0xFX1VTVUFSSU8ifV0sImlhdCI6MTU5MDM3ODc2MywiZXhwIjoxNTkwMzgyMzYzfQ.tmbUOOmfVyaMFDNM-u7YBeNGH3CWq5XuFrZEyFhYsBM\" } Response: { \"status\": 200, \"data\": [ { \"nombre\": \"Luis Herrera\", \"email\": \"l.herrera.garnica@gmail.com\", \"password\": null, \"roles\": [ \"ROLE_ADMINISTRADOR\" ] }, { \"nombre\": \"Luis Herrera2\", \"email\": \"dos@gmail.com\", \"password\": null, \"roles\": [ \"ROLE_ADMINISTRADOR\", \"ROLE_USUARIO\" ] } ] }","title":"Listar usuarios"},{"location":"ejercicios/spring/jwt/mtnusuario/backend/#encontrar-usuario-por-nombre","text":"Este servicio se preocupa de obtener un usuario por su nombre de usuario que en este caso es el correo . No ser\u00e1 visible directamente mediante una vista, pero este servicio, se utilizar\u00e1 para imprimir el nombre de usuario en la ventana principal. Post: http://localhost:9090/api/v1/usuarios?correo=l.herrera.garnica@gmail.com Headers: { \"Autorizacion\":\"Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJkb3NAZ21haWwuY29tIiwiYXV0aCI6W3siYXV0aG9yaXR5IjoiUk9MRV9BRE1JTklTVFJBRE9SIn0seyJhdXRob3JpdHkiOiJST0xFX1VTVUFSSU8ifV0sImlhdCI6MTU5MDM3ODc2MywiZXhwIjoxNTkwMzgyMzYzfQ.tmbUOOmfVyaMFDNM-u7YBeNGH3CWq5XuFrZEyFhYsBM\" } Response: { \"status\": 200, \"data\": { \"nombre\": \"Luis Herrera\", \"email\": \"l.herrera.garnica@gmail.com\", \"password\": null, \"roles\": [ \"ROLE_ADMINISTRADOR\" ] } }","title":"Encontrar Usuario por nombre"},{"location":"ejercicios/spring/jwt/mtnusuario/backend/#12-estructura-de-archivos","text":"./ \u251c\u2500\u2500 HELP.md \u251c\u2500\u2500 mvnw \u251c\u2500\u2500 mvnw.cmd \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 additional-spring-configuration-metadata.json \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 jwtapp \u2502 \u2502 \u2502 \u251c\u2500\u2500 JwtappApplication.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 apiexception \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 RestServiceException.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 config \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 AppConfig.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 SQLiteDialect.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 controller \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ControladorAplicacion.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ControladorIngreso.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ControladorRegistro.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ControladorUsuario.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 dao \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioDao.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 dto \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 RespuestaDTO.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioDTO.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 mapper \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioMapper.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 model \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 Rol.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 Usuario.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 security \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 JwtTokenFilter.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 JwtTokenFilterConfigurer.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 JwtTokenProvider.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 WebSecurityConfig.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 service \u2502 \u2502 \u2502 \u251c\u2500\u2500 ServicioUsuario.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 ServicioUsuarioImpl.java \u2502 \u2502 \u2514\u2500\u2500 resources \u2502 \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2502 \u251c\u2500\u2500 database.properties \u2502 \u2502 \u251c\u2500\u2500 static \u2502 \u2502 \u2514\u2500\u2500 templates \u2502 \u2514\u2500\u2500 test \u2502 \u2514\u2500\u2500 java \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 jwtapp \u2502 \u2514\u2500\u2500 JwtappApplicationTests.java \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2502 \u2514\u2500\u2500 maven \u2502 \u2502 \u2514\u2500\u2500 cl.lherrera \u2502 \u2502 \u2514\u2500\u2500 jwtapp \u2502 \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2502 \u2514\u2500\u2500 pom.xml \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2514\u2500\u2500 database.properties \u2514\u2500\u2500 test-classes 31 directories, 34 files","title":"1.2 Estructura de archivos"},{"location":"ejercicios/spring/jwt/mtnusuario/backend/#13-implementacion","text":"","title":"1.3 Implementaci\u00f3n"},{"location":"ejercicios/spring/jwt/mtnusuario/backend/#jwtappsrcmainjava","text":"","title":"/jwtapp/src/main/java/"},{"location":"ejercicios/spring/jwt/mtnusuario/backend/#cllherrerajwtapp","text":"JwtappApplication.java Sin modificaciones, quiz\u00e1s se recomienda ingresar a un usuario por ac\u00e1 y restringir el acceso al registro de usuarios. package cl.lherrera.jwtapp; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class JwtappApplication { public static void main(String[] args) { SpringApplication.run(JwtappApplication.class, args); } }","title":"cl.lherrera.jwtapp"},{"location":"ejercicios/spring/jwt/mtnusuario/backend/#cllherrerajwtappapiexception","text":"RestServiceException.java package cl.lherrera.jwtapp.apiexception; import org.springframework.http.HttpStatus; public class RestServiceException extends RuntimeException { private static final long serialVersionUID = 5037553749745142029L; private final String message; private final HttpStatus httpStatus; public RestServiceException(String message, HttpStatus httpStatus) { super(); this.message = message; this.httpStatus = httpStatus; } /** * se sobrescribe para poder inclu\u00edr el status en el mensaje de la excepci\u00f3n. */ @Override public String getMessage() { return message; } public HttpStatus getHttpStatus() { return httpStatus; } }","title":"cl.lherrera.jwtapp.apiexception"},{"location":"ejercicios/spring/jwt/mtnusuario/backend/#cllherrerajwtappconfig","text":"AppConfig.java package cl.lherrera.jwtapp.config; import javax.sql.DataSource; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.PropertySource; import org.springframework.core.env.Environment; import org.springframework.jdbc.datasource.DriverManagerDataSource; @Configuration @ComponentScan(\"cl.lherrera.jwtapp\") // escaneo de componentes, desde el paquete base. @PropertySource(\"classpath:database.properties\") // archvo que utilizar\u00e1 en la case para usar `environment.getProperty` public class AppConfig { @Autowired Environment environment; @Bean DataSource dataSource() { DriverManagerDataSource driverManagerDataSource = new DriverManagerDataSource(); driverManagerDataSource.setUrl(environment.getProperty(\"url\")); driverManagerDataSource.setUsername(environment.getProperty(\"username\")); driverManagerDataSource.setPassword(environment.getProperty(\"dbpassword\")); driverManagerDataSource.setDriverClassName(environment.getProperty(\"driverClassName\")); return driverManagerDataSource; } } SQLiteDialect.java package cl.lherrera.jwtapp.config; import java.sql.Types; import org.hibernate.dialect.Dialect; import org.hibernate.dialect.function.StandardSQLFunction; import org.hibernate.dialect.function.SQLFunctionTemplate; import org.hibernate.dialect.function.VarArgsSQLFunction; import org.hibernate.type.StandardBasicTypes; /** * Necesario para utilizar SQLite, se aplica en AppConfig. * @author luisherrera * */ public class SQLiteDialect extends Dialect { public SQLiteDialect() { super(); registerColumnType(Types.BIT, \"integer\"); registerColumnType(Types.TINYINT, \"tinyint\"); registerColumnType(Types.SMALLINT, \"smallint\"); registerColumnType(Types.INTEGER, \"integer\"); registerColumnType(Types.BIGINT, \"bigint\"); registerColumnType(Types.FLOAT, \"float\"); registerColumnType(Types.REAL, \"real\"); registerColumnType(Types.DOUBLE, \"double\"); registerColumnType(Types.NUMERIC, \"numeric\"); registerColumnType(Types.DECIMAL, \"decimal\"); registerColumnType(Types.CHAR, \"char\"); registerColumnType(Types.VARCHAR, \"varchar\"); registerColumnType(Types.LONGVARCHAR, \"longvarchar\"); registerColumnType(Types.DATE, \"date\"); registerColumnType(Types.TIME, \"time\"); registerColumnType(Types.TIMESTAMP, \"timestamp\"); registerColumnType(Types.BINARY, \"blob\"); registerColumnType(Types.VARBINARY, \"blob\"); registerColumnType(Types.LONGVARBINARY, \"blob\"); // registerColumnType(Types.NULL, \"null\"); registerColumnType(Types.BLOB, \"blob\"); registerColumnType(Types.CLOB, \"clob\"); registerColumnType(Types.BOOLEAN, \"integer\"); registerFunction(\"concat\", new VarArgsSQLFunction(StandardBasicTypes.STRING, \"\", \"||\", \"\")); registerFunction(\"mod\", new SQLFunctionTemplate(StandardBasicTypes.INTEGER, \"?1 % ?2\")); registerFunction(\"substr\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); registerFunction(\"substring\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); } public boolean supportsIdentityColumns() { return true; } public boolean hasDataTypeInIdentityColumn() { return false; // As specify in NHibernate dialect } public String getIdentityColumnString() { // return \"integer primary key autoincrement\"; return \"integer\"; } public String getIdentitySelectString() { return \"select last_insert_rowid()\"; } public boolean supportsLimit() { return true; } public String getLimitString(String query, boolean hasOffset) { return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? \" limit ? offset ?\" : \" limit ?\") .toString(); } public boolean bindLimitParametersInReverseOrder() { return true; } public boolean supportsTemporaryTables() { return true; } public String getCreateTemporaryTableString() { return \"create temporary table if not exists\"; } public boolean dropTemporaryTableAfterUse() { return false; } public boolean supportsCurrentTimestampSelection() { return true; } public boolean isCurrentTimestampSelectStringCallable() { return false; } public String getCurrentTimestampSelectString() { return \"select current_timestamp\"; } public boolean supportsUnionAll() { return true; } public boolean hasAlterTable() { return false; // As specify in NHibernate dialect } public boolean dropConstraints() { return false; } public String getAddColumnString() { return \"add column\"; } public String getForUpdateString() { return \"\"; } public boolean supportsOuterJoinForUpdate() { return false; } public String getDropForeignKeyString() { throw new UnsupportedOperationException(\"No drop foreign key syntax supported by SQLiteDialect\"); } public String getAddForeignKeyConstraintString(String constraintName, String[] foreignKey, String referencedTable, String[] primaryKey, boolean referencesPrimaryKey) { throw new UnsupportedOperationException(\"No add foreign key syntax supported by SQLiteDialect\"); } public String getAddPrimaryKeyConstraintString(String constraintName) { throw new UnsupportedOperationException(\"No add primary key syntax supported by SQLiteDialect\"); } public boolean supportsIfExistsBeforeTableName() { return true; } public boolean supportsCascadeDelete() { return false; } }","title":"cl.lherrera.jwtapp.config"},{"location":"ejercicios/spring/jwt/mtnusuario/backend/#cllherrerajwtappcontroller","text":"ControladorAplicacion.java package cl.lherrera.jwtapp.controller; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; /** * M\u00e9todo para comprobar si la api est\u00e1 disponible Es utilizado por monitores, * que ejecutan una petici\u00f3n a este endpoint, para poder verificar que est\u00e9 * disponible o no. * * @author luisherrera * */ @RestController @RequestMapping(value = \"/api/v1/isAlive\") public class ControladorAplicacion { @GetMapping(path = { \"\", \"/\" }) public String isAlive() { return \"200\"; } } ControladorIngreso.java package cl.lherrera.jwtapp.controller; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController; import cl.lherrera.jwtapp.dto.RespuestaDTO; import cl.lherrera.jwtapp.service.ServicioUsuario; @RestController @RequestMapping(path = \"/api/v1/iniciarsesion\") public class ControladorIngreso { private Logger logger = LoggerFactory.getLogger(ControladorIngreso.class); @Autowired private ServicioUsuario servicioUsuario; @PostMapping(path = { \"\", \"/\" }) public RespuestaDTO<String> iniciarSesion(@RequestParam String correo, @RequestParam String password) { logger.debug(\"Ejecutado: /api/v1/iniciarsesion, par\u00e1metros : \" + \" \" + correo + \" \" + password); RespuestaDTO<String> respuesta = new RespuestaDTO<>(); String data = servicioUsuario.iniciarSesion(correo, password); respuesta.setStatus(200); respuesta.setData(data); return respuesta; } } ControladorRegistro.java /** * Servicio que registra a un usuario. Se pide que adem\u00e1s retorne el token. * No es bueno que un m\u00e9todo realice dos tareas principales. Pero en esta ocaci\u00f3n * lo hacemos para obtener el token y no tener que hacer el login. En un sistema * productivo, deber\u00eda solo registrar. Luego, deber\u00edamos iniciar sesi\u00f3n de manera manual * * Headers: * Content-Type:application/json * POST: * http://localhost:8080/api/v1/registrar * BODY-EXAMPLE * * <code> { \"nombre\": \"Luis Herrera\", \"email\": \"l.herrera.garnica@gmail.com\", \"password\": \"1234\", \"roles\": [\"ROLE_ADMINISTRADOR\"] } <code> */ package cl.lherrera.jwtapp.controller; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; import cl.lherrera.jwtapp.dto.UsuarioDTO; import cl.lherrera.jwtapp.service.ServicioUsuario; // para que no retorne vistas. @RestController @RequestMapping(path = \"/api/v1/registrar\") public class ControladorRegistro { private Logger logger = LoggerFactory.getLogger(ControladorRegistro.class); @Autowired ServicioUsuario servicioUsuario; /** * Este m\u00e9todo, debe ser refactorizado, si se va a utilizar * productivamente, no deber\u00eda responder una cadena, si no * que un json, con la cadena en el atributo data. * * Esto queda demostrado en el inicio de sesi\u00f3n, aunque este * servicio solamente deber\u00eda retornar el estado de creado. */ @PostMapping(path = { \"\", \"/\" }) public String registrarUsuaio(@RequestBody UsuarioDTO usuarioDTO) { logger.debug(\"Registrando al usuario: \" + usuarioDTO.toString()); return servicioUsuario.registraNuevoUsuario(usuarioDTO); } } ControladorUsuario.java package cl.lherrera.jwtapp.controller; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController; import cl.lherrera.jwtapp.dto.RespuestaDTO; import cl.lherrera.jwtapp.dto.UsuarioDTO; import cl.lherrera.jwtapp.service.ServicioUsuario; @RestController @RequestMapping(\"/api/v1/usuarios\") public class ControladorUsuario { @Autowired private ServicioUsuario servicioUsuario; @GetMapping(path = { \"\", \"/\" }) public RespuestaDTO<List<UsuarioDTO>> listar() { RespuestaDTO<List<UsuarioDTO>> respuesta = new RespuestaDTO<>(); List<UsuarioDTO> usuarios = servicioUsuario.listaDeUsuarios(); respuesta.setStatus(200); respuesta.setData(usuarios); return respuesta; } @PostMapping(path = { \"\", \"/\" }) public RespuestaDTO<UsuarioDTO> encontrarPorNombreDeUsuario(@RequestParam String correo) { UsuarioDTO usuario = servicioUsuario.obtenerPorCorreo(correo); RespuestaDTO<UsuarioDTO> respuesta = new RespuestaDTO<>(); respuesta.setStatus(200); respuesta.setData(usuario); return respuesta; } }","title":"cl.lherrera.jwtapp.controller"},{"location":"ejercicios/spring/jwt/mtnusuario/backend/#cllherrerajwtappdao","text":"UsuarioDao.java package cl.lherrera.jwtapp.dao; import java.util.Optional; import org.springframework.data.jpa.repository.JpaRepository; import org.springframework.stereotype.Repository; import cl.lherrera.jwtapp.model.Usuario; @Repository public interface UsuarioDao extends JpaRepository<Usuario, Integer> { boolean existsByUsername(String username); /** * Ya que mediante el token tenemos la informaci\u00f3n del nombre de usuario, * utilizamos esta informaci\u00f3n, para poder obtener al usuario mediante esta * informaci\u00f3n */ Optional<Usuario> findByUsername(String username); }","title":"cl.lherrera.jwtapp.dao"},{"location":"ejercicios/spring/jwt/mtnusuario/backend/#cllherrerajwtappdto","text":"RespuestaDTO.java package cl.lherrera.jwtapp.dto; /** * Esta clase fue dise\u00f1ada para poder manejar los diferentes tipos de * respuestas, por ejemplo en el caso de token, es una cadena, para el caso del * usuario es un Usuario, por lo tanto, estos tipos de retornos se traducen a * distintos tipos en java, aunque sean todos json, poseen estructuras distintas * que deben ser manejadas con las t\u00e9cnicas que existen en java, antes de * finalmente ser transformadas en cadenas o json, son objetos, es por ello que * la respuesta es un tipo <T>, por que el campo data, es lo que se busca por * estandar como el campo que contiene la informaci\u00f3n, es por eso que la * respuesta debe ser multipo, por que puede contender cualquuier tipo de * respuesta. Recordar que no puede ser con polimorfismo puro, como lo ser\u00eda con * un tipo padre como tipo de respuesta, ya que este, deber\u00eda contener todos los * m\u00e9todos de cualquier tipo de variable, lo que es impensable. La ventaja de * <T> es que si le pasamos el tipo que sea, asume todos sus m\u00e9todos, a * diferencia del polimorfismo que solamente asume los m\u00e9todos del padre y para * ejecutar alguno que no posea, se debe hacer un cast. Usando <T> no tenemos * este problema. * * @author luisherrera * * @param <T> */ public class RespuestaDTO<T> { private Integer status; private T data; public RespuestaDTO() { } public RespuestaDTO(Integer status, T data) { super(); this.status = status; this.data = data; } public Integer getStatus() { return status; } public void setStatus(Integer status) { this.status = status; } public T getData() { return data; } public void setData(T data) { this.data = data; } } UsuarioDTO.java package cl.lherrera.jwtapp.dto; import java.util.List; import cl.lherrera.jwtapp.model.Rol; /** * Clase de transporte de datos, que contiene la estructura del objeto json * esperado en el frontEnd. En este caso, para el front, este elemento seg\u00fan la * t\u00e9cnica de puntos funci\u00f3n ser\u00eda un (EIF: External Interface File) * * @author luisherrera * */ public class UsuarioDTO { private String nombre; private String email; private String password; private List<Rol> roles; public UsuarioDTO() { } public UsuarioDTO(String nombre, String email, String password, List<Rol> roles) { super(); this.nombre = nombre; this.email = email; this.password = password; this.roles = roles; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public List<Rol> getRoles() { return roles; } public void setRoles(List<Rol> roles) { this.roles = roles; } @Override public String toString() { return \"UsuarioDTO [nombre=\" + nombre + \", email=\" + email + \", password=\" + password + \", roles=\" + roles + \"]\"; } }","title":"cl.lherrera.jwtapp.dto"},{"location":"ejercicios/spring/jwt/mtnusuario/backend/#cllherrerajwtappmapper","text":"UsuarioMapper.java package cl.lherrera.jwtapp.mapper; import java.util.Arrays; import java.util.List; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import cl.lherrera.jwtapp.dto.UsuarioDTO; import cl.lherrera.jwtapp.model.Usuario; /** * contiene toda la l\u00f3gica necesaria para que las entidades sean transformadas en * los objetos que son requeridos para el servicio. * * @author luisherrera * */ public class UsuarioMapper { private static Logger logger = LoggerFactory.getLogger(UsuarioMapper.class); private UsuarioMapper() { } /** * Transforma un Usuario a un UsuarioDTO */ public static UsuarioDTO usuarioADto(Usuario usuario) { logger.debug(\"Usuario: \" + usuario.toString()); UsuarioDTO dtoUsuario = new UsuarioDTO(); dtoUsuario.setNombre(usuario.getNombre() + \" \" + usuario.getApellido()); dtoUsuario.setEmail(usuario.getUsername()); dtoUsuario.setRoles(usuario.getRoles()); dtoUsuario.setPassword(null); logger.debug(\"Transformado a DTO : \" + dtoUsuario.toString()); return dtoUsuario; } /** * m\u00e9todo privado para separar el nombre y el apellido que viene en un solo * campo desde el front se separa si viene con espacio no es muy elegante pero * es una soluci\u00f3n r\u00e1pida. */ private static List<String> getNombres(UsuarioDTO dtoUsuario) { return Arrays.asList(dtoUsuario.getNombre().split(\" \")); } /** * Transforma un UsuarioDTO a un Usuario */ public static Usuario dtoAUsuario(UsuarioDTO dtoUsuario) { logger.debug(\"UsuarioDTO: \" + dtoUsuario.toString()); List<String> nombres = getNombres(dtoUsuario); String apellido = \"\"; String nombre = (nombres.size() > 0) ? nombres.get(0) : null; if (nombres.size() > 1) apellido = (nombres.size() > 0) ? nombres.get(1) : null; Usuario usuario = new Usuario(); usuario.setNombre(nombre); usuario.setApellido(apellido); usuario.setUsername(dtoUsuario.getEmail()); usuario.setPassword(dtoUsuario.getPassword()); usuario.setRoles(dtoUsuario.getRoles()); logger.debug(\"Transformado a Usuario: \" + usuario.toString()); return usuario; } }","title":"cl.lherrera.jwtapp.mapper"},{"location":"ejercicios/spring/jwt/mtnusuario/backend/#cllherrerajwtappmodel","text":"Rol.java Ya hemos mencionado que el truco est\u00e1 en implementar GrantedAuthority . package cl.lherrera.jwtapp.model; import org.springframework.security.core.GrantedAuthority; public enum Rol implements GrantedAuthority { ROLE_ADMINISTRADOR, ROLE_USUARIO; @Override public String getAuthority() { return name(); } } Usuario.java package cl.lherrera.jwtapp.model; import java.util.List; import javax.persistence.Column; import javax.persistence.ElementCollection; import javax.persistence.Entity; import javax.persistence.FetchType; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; /** * No se utilizar\u00e1 el campo tipo \u00fanico, ya que el Dialecto falla, no se ha * probado con otro motor, de todas formas este contrrol se maneja mediante el * m\u00e9todo `findByUser`, a nivel de seguriidad. * * @author luisherrera * */ @Entity public class Usuario { @Id @GeneratedValue(strategy = GenerationType.AUTO) Integer id; String nombre; String apellido; @Column(name = \"correo\") String username; @Column(name = \"contrasenia\") String password; @ElementCollection(fetch = FetchType.EAGER) List<Rol> roles; public Usuario() { } public Usuario(Integer id, String nombre, String apellido, String username, String password, List<Rol> roles) { super(); this.id = id; this.nombre = nombre; this.apellido = apellido; this.username = username; this.password = password; this.roles = roles; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } public String getApellido() { return apellido; } public void setApellido(String apellido) { this.apellido = apellido; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public List<Rol> getRoles() { return roles; } public void setRoles(List<Rol> roles) { this.roles = roles; } @Override public String toString() { return \"Usuario [id=\" + id + \", nombre=\" + nombre + \", apellido=\" + apellido + \", username=\" + username + \", password=\" + password + \", roles=\" + roles + \"]\"; } }","title":"cl.lherrera.jwtapp.model"},{"location":"ejercicios/spring/jwt/mtnusuario/backend/#cllherrerajwtappsecurity","text":"En el proyecto anterior, se puede ver un mayor detalle a nivel de configuraciones de este paquete y su funcionamiento, en esta versi\u00f3n, se puede ver que las p\u00e1ginas que pod\u00edan ser accedidas han sido modificadas, para poder actualizar los accesos de inicio de sesi\u00f3n y registro que cambiaron de controlador respecto al proyecto anterior (b\u00e1sico). JwtTokenFilter.java package cl.lherrera.jwtapp.security; import java.io.IOException; import javax.servlet.FilterChain; import javax.servlet.ServletException; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import org.springframework.security.core.Authentication; import org.springframework.security.core.context.SecurityContextHolder; import org.springframework.web.filter.OncePerRequestFilter; import cl.lherrera.jwtapp.apiexception.RestServiceException; public class JwtTokenFilter extends OncePerRequestFilter { private JwtTokenProvider jwtTokenProvider; public JwtTokenFilter(JwtTokenProvider jwtTokenProvider) { this.jwtTokenProvider = jwtTokenProvider; } @Override protected void doFilterInternal( HttpServletRequest request, HttpServletResponse respose, FilterChain filterChain) throws ServletException, IOException { // extraemos el token del request, este debe ir en el header // con el nombre Authentication y en el valor String token = jwtTokenProvider.resolveToken(request); try { // si el token no es nulo y si es v\u00e1lido... if (token != null && jwtTokenProvider.validateToken(token)) { // creamos un objeto (new UsernamePasswordAuthenticationToken) // ya las credenciales no est\u00e1n disponibles, solamente `userDetails`` Authentication auth = jwtTokenProvider.getAuthentication(token); SecurityContextHolder.getContext().setAuthentication(auth); } } catch (RestServiceException ex) { SecurityContextHolder.clearContext(); respose.sendError(ex.getHttpStatus().value(), ex.getMessage()); return; } filterChain.doFilter(request, respose); } } JwtTokenFilterConfigurer.java package cl.lherrera.jwtapp.security; import org.springframework.security.config.annotation.SecurityConfigurerAdapter; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.web.DefaultSecurityFilterChain; import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter; public class JwtTokenFilterConfigurer extends SecurityConfigurerAdapter<DefaultSecurityFilterChain, HttpSecurity> { private JwtTokenProvider jwtTokenProvider; public JwtTokenFilterConfigurer(JwtTokenProvider jwtTokenProvider) { this.jwtTokenProvider = jwtTokenProvider; } @Override public void configure(HttpSecurity http) throws Exception { JwtTokenFilter customFilter = new JwtTokenFilter(jwtTokenProvider); http.addFilterBefore(customFilter, UsernamePasswordAuthenticationFilter.class); } } JwtTokenProvider.java package cl.lherrera.jwtapp.security; import java.util.Base64; import java.util.Date; import java.util.List; import java.util.Objects; import java.util.stream.Collectors; import javax.annotation.PostConstruct; import javax.servlet.http.HttpServletRequest; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.http.HttpStatus; import org.springframework.security.authentication.UsernamePasswordAuthenticationToken; import org.springframework.security.core.Authentication; import org.springframework.security.core.authority.SimpleGrantedAuthority; import org.springframework.security.core.userdetails.UserDetails; import org.springframework.stereotype.Component; import cl.lherrera.jwtapp.apiexception.RestServiceException; import cl.lherrera.jwtapp.model.Rol; import cl.lherrera.jwtapp.service.ServicioUsuario; // dependencia jjwt import io.jsonwebtoken.Claims; import io.jsonwebtoken.JwtException; import io.jsonwebtoken.Jwts; import io.jsonwebtoken.SignatureAlgorithm; @Component public class JwtTokenProvider { private Logger logger = LoggerFactory.getLogger(JwtTokenProvider.class); private final static String HEADER_AUTHORIZATION_KEY = \"Autorizacion\"; private final static String TOKEN_BEARER_VALUE = \"Bearer \"; // propiedad @Value(\"${security.jwt.token.secret-key}\") private String secretKey; // propiedad @Value(\"${security.jwt.token.expire-length}\") private long validityInMilliseconds; // servicio Implementado @Autowired private ServicioUsuario servicioUsuario; /** * Spring calls methods annotated with @PostConstruct * only once, just after the initialization * of bean properties. * https://www.baeldung.com/spring-postconstruct-predestroy * * Asigna el valor de la clave secreta */ @PostConstruct protected void init() { secretKey = Base64.getEncoder().encodeToString(secretKey.getBytes()); logger.debug(\"LLave inicializada: \" + secretKey); } public String createToken(String username, List<Rol> roles) { Claims claims = Jwts.claims().setSubject(username); List<SimpleGrantedAuthority> grats = roles.stream() .map(rol -> new SimpleGrantedAuthority(rol.getAuthority()) ) .filter(Objects::nonNull) .collect(Collectors.toList()); claims.put(\"auth\", grats); // expiraci\u00f3n del token Date now = new Date(); Date validity = new Date(now.getTime() + validityInMilliseconds); // creaci\u00f3n del token String token = Jwts.builder() .setClaims(claims) .setIssuedAt(now) .setExpiration(validity) .signWith(SignatureAlgorithm.HS256, secretKey) .compact(); return token; } /** * A partir del token se obtiene el nombre de usuario y luego, * se obtiene un `UserDetails`, que ya sabemos que es la * entidad que maneja como ususuario de sesi\u00f3n. */ public Authentication getAuthentication(String token) { UserDetails userDetails = servicioUsuario.loadUserByUsername(getUsername(token)); UsernamePasswordAuthenticationToken autenticacion; autenticacion = new UsernamePasswordAuthenticationToken( userDetails, \"\", userDetails.getAuthorities() ); return autenticacion; } /** * En la configuraci\u00f3n de seguridad * lo que sabe Spring es que el nombre * de usuario es el correo. */ private String getUsername(String token) { String userName = Jwts.parser() .setSigningKey(secretKey) .parseClaimsJws(token) .getBody() .getSubject(); return userName; } /** * Quitamos \"Bearer \" del principio del token */ public String resolveToken(HttpServletRequest req) { String tokenReal = null; String bearerToken = req.getHeader(HEADER_AUTHORIZATION_KEY); logger.debug(\"Bearer token: \" + bearerToken); boolean inicioOk = (bearerToken != null && bearerToken.startsWith(TOKEN_BEARER_VALUE)); if (inicioOk) { tokenReal = bearerToken.substring(TOKEN_BEARER_VALUE.length()); } return tokenReal; } /** * Si el token logra ser parseado, entonces se asume que es un * Token v\u00e1lido. `parseClaimsJws` analiza la llave (no un * token que exista hipoteticamente, la comparaci\u00f3n se * realiza entre el token que est\u00e1 en el request * y la clave cifrada de esta clase. cifrada * justo despu\u00e9s de construirse este * objeto `INIT`). */ public boolean validateToken(String token) { try { Jwts.parser().setSigningKey(secretKey).parseClaimsJws(token); return true; } catch (JwtException | IllegalArgumentException e) { throw new RestServiceException( \"Expired or invalid JWT token\", HttpStatus.INTERNAL_SERVER_ERROR ); } } } s WebSecurityConfig.java package cl.lherrera.jwtapp.security; import java.util.Arrays; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.security.authentication.AuthenticationManager; import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity; import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter; import org.springframework.security.config.http.SessionCreationPolicy; import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder; import org.springframework.security.crypto.password.PasswordEncoder; import org.springframework.web.cors.CorsConfiguration; import org.springframework.web.cors.CorsConfigurationSource; import org.springframework.web.cors.UrlBasedCorsConfigurationSource; @Configuration @EnableWebSecurity @EnableGlobalMethodSecurity(prePostEnabled = true) public class WebSecurityConfig extends WebSecurityConfigurerAdapter { @Autowired private JwtTokenProvider jwtTokenProvider; @Override protected void configure(HttpSecurity http) throws Exception { // sin verificaci\u00f3n csrf, inseguro. (Laravel) http.csrf().disable(); /** * Esta configuraci\u00f3n, permite hacer pruebas desde un frontend, ubicado en la * misma m\u00e1quina. */ http.cors().configurationSource(corsConfigurationSource()); // sesi\u00f3n sin estado. http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS); // Autorizaci\u00f3n de peticiones. http.authorizeRequests() // servicios p\u00fablicos. .antMatchers( \"/api/v1/isAlive\", \"/api/v1/iniciarsesion\", \"/api/v1/registrar\").permitAll() // todos los dem\u00e1s. servicios, solamente para usuarios autenticados. .anyRequest().authenticated(); // Applies a {@link SecurityConfigurer} to this {@link SecurityBuilder} overriding any // {@link SecurityConfigurer} of the exact same class. Note that object hierarchies // are not considered. // // El filtro personaliizado que creamos en JwtTokenFilterConfigurer, donde // validamos el token, y si es v\u00e1lido crea el Authenticate, se aplica ac\u00e1 // es un filtro que se concatena a los que ya hemos puesto en este mismo // m\u00e9todo, se aplica antes que a todos por que JwtTokenFilterConfigurer // HttpSecurity.addFilterBefore(customFilter, UsernamePasswordAuthenticationFilter.class); // le decimos que el filtro lo realice antes que se ejecute la autenticaci\u00f3n con // user y password. http.apply(new JwtTokenFilterConfigurer(jwtTokenProvider) ); } @Bean @Override public AuthenticationManager authenticationManagerBean() throws Exception { return super.authenticationManagerBean(); } @Bean public PasswordEncoder passwordEncoder() { // fuerza = 12 (entre 4 y 31) return new BCryptPasswordEncoder(12); } /** * Esta configuraci\u00f3n, permite hacer pruebas desde * un frontend, ubicado en la misma m\u00e1quina. */ @Bean CorsConfigurationSource corsConfigurationSource() { CorsConfiguration configuration = new CorsConfiguration(); configuration.setAllowedOrigins(Arrays.asList(\"*\")); configuration.setAllowedMethods(Arrays.asList(\"GET\", \"POST\")); configuration.setAllowCredentials(true); // the below three lines will add the relevant CORS response headers configuration.addAllowedOrigin(\"*\"); configuration.addAllowedHeader(\"*\"); configuration.addAllowedMethod(\"*\"); UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource(); source.registerCorsConfiguration(\"/**\", configuration); return source; } }","title":"cl.lherrera.jwtapp.security"},{"location":"ejercicios/spring/jwt/mtnusuario/backend/#cllherrerajwtappservice","text":"Modificaciones realizadas para poder inferir de mejor forma, que la implementaci\u00f3n de loadUserByUsername , es obligatoria para poder realizar el uso de credenciales con JWT . Es por eso que se cambia la herencia que lleva la implementaci\u00f3n del servicio de usuarios directamente a la interfaz, ya que podr\u00eda llevar a confusiones el que no se sepa realmente cual es la interfaz que tiene loadUserByUsername \u001cy esta es UserDetailsService . ServicioUsuario.java package cl.lherrera.jwtapp.service; import java.util.List; import org.springframework.security.core.userdetails.UserDetailsService; import cl.lherrera.jwtapp.dto.UsuarioDTO; /** * Al extender UserDetailsService, traemos el m\u00e9todo loadUserByUsername, que * sobre escribimos en la implementaci\u00f3n, podremos ver que a veces se implementa * un implements UserDetailsService, pero esto causa confusiones ya que a veces * los desarrolladores que no conocen que este m\u00e9todo est\u00e1 en * UserDetailsService, lo ponen igual ac\u00e1, en this. y lo sobre escriben en la * implementaci\u00f3n, funcionando de todas formas por que Spring asume sobre * escrito el loadUserByUsername que le pertenece a UserDetailsService y no * ServicioUsuario. * */ public interface ServicioUsuario extends UserDetailsService { String iniciarSesion(String correo, String contrasenia); List<UsuarioDTO> listaDeUsuarios(); /** * Servicio encargado de registrar un usuario hay que tener en cuenta varias * cosas como el dar una buena encriptaci\u00f3n a la base de datos. */ String registraNuevoUsuario(UsuarioDTO usuarioDTO); /** * A diferencia del m\u00e9todo loadUserByUsername, este no retorna * un UserDetails, si no que retorna un DTO para efectos * de poder mostrar m\u00e1s detalles del usuario que se consulte. */ UsuarioDTO obtenerPorCorreo(String correo); } ServicioUsuarioImpl.java package cl.lherrera.jwtapp.service; import java.util.List; import java.util.stream.Collectors; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpStatus; import org.springframework.security.authentication.UsernamePasswordAuthenticationToken; import org.springframework.security.authentication.AuthenticationManager; import org.springframework.security.core.Authentication; import org.springframework.security.core.AuthenticationException; import org.springframework.security.core.userdetails.UserDetails; import org.springframework.security.core.userdetails.UsernameNotFoundException; import org.springframework.security.crypto.password.PasswordEncoder; import org.springframework.stereotype.Service; import cl.lherrera.jwtapp.apiexception.RestServiceException; import cl.lherrera.jwtapp.dao.UsuarioDao; import cl.lherrera.jwtapp.dto.UsuarioDTO; import cl.lherrera.jwtapp.mapper.UsuarioMapper; import cl.lherrera.jwtapp.model.Usuario; import cl.lherrera.jwtapp.security.JwtTokenProvider; @Service public class ServicioUsuarioImpl implements ServicioUsuario { private Logger logger = LoggerFactory.getLogger(ServicioUsuarioImpl.class); @Autowired UsuarioDao daoUsuario; @Autowired private AuthenticationManager authenticationManager; @Autowired private JwtTokenProvider jwtTokenProvider; @Autowired private PasswordEncoder passwordEncoder; @Override public String iniciarSesion(String correo, String contrasenia) { String token = \"\"; logger.debug(\"Inicio de la sesi\u00f3n: correo: \" + correo + \"contrase\u00f1a: \" + contrasenia); try { // intenta crear la autenticaci\u00f3n. // si no puede, se env\u00eda un AuthenticationException. Authentication objetoAutentificacion = new UsernamePasswordAuthenticationToken(correo, contrasenia); authenticationManager.authenticate(objetoAutentificacion); Usuario usuarioAutenticado = daoUsuario.findByUsername(correo).orElse(null); if (usuarioAutenticado != null) token = generaToken(usuarioAutenticado); } catch (AuthenticationException e) { throw new RestServiceException(\"username o password invalido\", HttpStatus.UNPROCESSABLE_ENTITY); } return token; } private String generaToken(Usuario usuario) { String token = jwtTokenProvider.createToken(usuario.getUsername(), usuario.getRoles()); logger.debug(\"Token generado: ...\" + token.substring(token.length() - 5)); return token; } @Override public List<UsuarioDTO> listaDeUsuarios() { List<UsuarioDTO> usuarios = daoUsuario.findAll().stream() // cada uno de los usuarios pasando a un DTO .map(usuario -> UsuarioMapper.usuarioADto(usuario)).collect(Collectors.toList()); logger.debug(\"Lista de usuarioDTO: \" + usuarios.toString()); return usuarios; } @Override public String registraNuevoUsuario(UsuarioDTO dtoUsuario) { String token = null; // verificar si el usuario existe para no ingresarlo otra vez Usuario usuario = daoUsuario.findByUsername(dtoUsuario.getEmail()).orElse(null); if (usuario == null) { String constraseniaEnDuro = dtoUsuario.getPassword(); String constraseniaEncriptada = passwordEncoder.encode(constraseniaEnDuro); dtoUsuario.setPassword(constraseniaEncriptada); // guardamos el usuario convertido desde un DTO usuario = UsuarioMapper.dtoAUsuario(dtoUsuario); logger.debug(\"Registrando nuevo usuario: \" + usuario.toString()); daoUsuario.save(usuario); logger.debug(\"Usuario nuevo registrado: \" + usuario.toString()); logger.debug(\"Generando token... \"); token = this.generaToken(usuario); } return token; } /** * Se implementa desde UserDetailsService, interface que extiende * ServicioUsuario. * * Se supone que se debe cargar el nombre de usuario y en este caso es correo, * es por que se exige un valor de nombre de usuario, que puede ser por ejemplo: * rut, correo, nombre de usuario, tag name, etc. El c\u00f3mo se maneje depender\u00e1 de * nuestra implementaci\u00f3n. * * Construye un `UserDetails` est\u00e1tico, con la informaci\u00f3n que se le * proporcione. En este caso, el nombre de usuario que ven\u00eda como argumento y la * contrase\u00f1a que est\u00e1 en la base de datos. Este proceso es implementado ya que * este \u00fanico m\u00e9todo, posee acceso a la contrase\u00f1a del usuario. La t\u00e9cnica usada * es que cada m\u00e9todo retorna un `UserBuilder`, hasta llegar a `build()`, es * cuando finalmente es convertido en un `UserDetail`. * **/ @Override public UserDetails loadUserByUsername(String correo) throws UsernameNotFoundException { final Usuario user = daoUsuario.findByUsername(correo).orElse(null); if (user == null) { throw new UsernameNotFoundException(\"Usuario '\" + correo + \"' no encontrado\"); } return org.springframework.security.core.userdetails.User// .withUsername(correo).password(user.getPassword()).authorities(user.getRoles()).accountExpired(false) .accountLocked(false).credentialsExpired(false).disabled(false).build(); } @Override public UsuarioDTO obtenerPorCorreo(String correo) { Usuario usuario = daoUsuario.findByUsername(correo).orElse(new Usuario()); return UsuarioMapper.usuarioADto(usuario); } }","title":"cl.lherrera.jwtapp.service"},{"location":"ejercicios/spring/jwt/mtnusuario/backend/#jwtappsrcmainresources","text":"application.properties spring.jpa.generate-ddl=true spring.jpa.database-platform=cl.lherrera.jwtapp.config.SQLiteDialect spring.jpa.show-sql=true spring.jpa.hibernate.ddl-auto=create-drop spring.jpa.properties.hibernate.format_sql=true # Configuraci\u00f3n para el token. security.jwt.token.secret-key=DLatam-SecretKey security.jwt.token.expire-length=3600000 # Para mostrar el log de debug # esto no se mostrar\u00eda en producci\u00f3n logging.level.org.springframework.web=DEBUG #logging.level.root=DEBU logging.level.cl.lherrera.jwtapp=DEBUG logging.file.name=logs #Cambiamos el puerto para poder probar con el servidor de vscode server.port=9090 server.address=0.0.0.0 # loggingRequestDetails spring.http.log-request-details=true database.properties driverClassName=org.sqlite.JDBC url=jdbc:sqlite:baseDeDatos.db username=jpaspring password=sa","title":"/jwtapp/src/main/resources"},{"location":"ejercicios/spring/jwt/mtnusuario/backend/#jwtapppomxml","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.7.RELEASE</version> <relativePath/> <!-- lookup parent from repository --> </parent> <groupId>cl.lherrera</groupId> <artifactId>jwtapp</artifactId> <version>20.0.0</version> <name>jwtapp</name> <description>aplicaci\u00f3n b\u00e1sica de JWT</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-jpa</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-security</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <scope>runtime</scope> <optional>true</optional> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> <dependency> <groupId>org.springframework.security</groupId> <artifactId>spring-security-test</artifactId> <scope>test</scope> </dependency> <!-- JWT - SUPPORT --> <dependency> <groupId>io.jsonwebtoken</groupId> <artifactId>jjwt</artifactId> <version>0.9.1</version> </dependency> <!-- JWT - SUPPORT # --> <!-- SQLITE - SUPPORT --> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> </dependency> <!-- SQLITE - SUPPORT #--> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project>","title":"/jwtapp/pom.xml"},{"location":"ejercicios/spring/jwt/mtnusuario/backend/#todo","text":"Agregar los @Transactional , que no est\u00e1n.\u001c Reparar formatos de salida a json , por ejemplo en el registro de usuarios. Agregar la capacidad de actualizar y eliminar usuarios.","title":"TODO"},{"location":"ejercicios/spring/jwt/mtnusuario/frontend/","text":"2 Mantenedor de Usuarios - FrontEnd EL siguiente, es un proyecto construido con vanilla js . Usando templates para archivos comunes como lo es el nav . Esta aplicaci\u00f3n, permite: Registrar un usuario, iniciar sesi\u00f3n y listar los usuarios registrados. Quedan pendientes otras implementaciones, y m\u00e1s detalle en validaciones; pero con lo desarrollado, se expone una aplicaci\u00f3n de frontEnd que consuma el servicio desarrollado en Spring utilizando JWT . Estructura del proyecto ./ \u251c\u2500\u2500 comunes \u2502 \u251c\u2500\u2500 cdmsJs.html \u2502 \u251c\u2500\u2500 head.html \u2502 \u251c\u2500\u2500 js \u2502 \u2502 \u251c\u2500\u2500 index.js \u2502 \u2502 \u251c\u2500\u2500 iniciarSesion.js \u2502 \u2502 \u2514\u2500\u2500 usuarios.js \u2502 \u2514\u2500\u2500 nav.html \u251c\u2500\u2500 favicon.ico \u251c\u2500\u2500 index.html \u251c\u2500\u2500 iniciarSesion.html \u251c\u2500\u2500 registrar.html \u2514\u2500\u2500 usuarios.html 3 directories, 19 files comunes cdmsJs.html Contiene los cmd - js necesarios para que funcione bootstrap . (Quiz\u00e1s se deber\u00eda replantear el nombre) <!--Bootstrap 4--> <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\" integrity=\"sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj\" crossorigin=\"anonymous\"></script> <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js\" integrity=\"sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo\" crossorigin=\"anonymous\"></script> <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js\" integrity=\"sha384-OgVRvuATP1z7JjHLkuOU7Xw704+h835Lr+6QL9UvYjZE3Ipu6Tp75j7Bh/kR0JKI\" crossorigin=\"anonymous\"></script> head.html Contiene la informaci\u00f3n compartida del head , se genera como plantilla, por que ser\u00e1 igual para todas las ventanas. <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>JWT - FRONT</title> <!--Bootstrap 4--> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\" integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\" crossorigin=\"anonymous\"> nav.html Contiene el men\u00fa de la aplicaci\u00f3n, este ser\u00e1 el mismo para todas las p\u00e1ginas. <ul class=\"nav\"> <li class=\"nav-item\"> <a class=\"nav-link\" href=\"javascript:irA('index.html')\">Inicio</a> </li> <li class=\"nav-item\"> <a class=\"nav-link\" href=\"javascript:irA('usuarios.html')\">Usuarios</a> </li> <li class=\"nav-item\"> <a class=\"nav-link\" href=\"javascript:irA('registrar.html')\">Registrar</a> </li> <li class=\"nav-item\"> <a class=\"nav-link\" href=\"javascript:irA('iniciarSesion.html')\">Cerrar Sesi\u00f3n</a> </li> </ul> js Contiene los c\u00f3digos javascript , personalizados para cada p\u00e1gina , algunos se repiten; pero es para efectos explicativos del ejercicio, por sobre su \u00f3ptimo funcionamiento productivo. Su funcionamiento est\u00e1 basado en la resoluci\u00f3n de la promesa del servicio que consumen, y su implementaci\u00f3n se basa en la especificaci\u00f3n del consumo de estos servicios. Si la implementaci\u00f3n de los servicios en el Backend cambian, estas implementaci\u00f3n, probablemente deban ser ajustadas en este lugar, ya que ac\u00e1 est\u00e1n los consumos. index.js // algunas funciones se repetir\u00e1n, solamente para claridad del ejemplo // para no tener dependencia de los dem\u00e1s archivos, ya que este sistema // no va a seguir creciendo, en caso que se utilice como base // refactorizar. const irA = (uri) => { window.location.href = `${getBaseURL()}/${uri}`; } // copiada de la web, indica la URL actual, por si esta // cambiam, es mejor que sea capturada autom\u00e1ticamente function getBaseURL(){ var elem=document.getElementsByTagName(\"base\")[0]; if (typeof(elem) != 'undefined' && elem != null){ return elem.href; } return window.location.origin; } /** * Funci\u00f3n que es ejecutada al iniciar la carga del cuerpo de la web, se llama * a esta funci\u00f3n, que tiene como objetivo, cargar los datos del usuario\u00e7 * que se encuetra con la sesi\u00f3n iniciada * */ const cargaWeb = () => { const token = sessionStorage.getItem('token') console.log(\"token: \", token) if (token) { const correo = sessionStorage.getItem('correo') const url = `http://localhost:9090/api/v1/usuarios?correo=${correo}` const atributos = { method: 'POST', // or 'PUT' headers: { \"Content-type\": \"application/json; charset=UTF-8\", \"Autorizacion\": `${token}` } } fetch(url, atributos) .then(response => { if (response.status !== 403) { return response.json() } else { window.location.href = `${getBaseURL()}/iniciarSesion.html`; // redirecci\u00f3n al inicio de sesi\u00f3n. } }) .then(responseJson => { if (responseJson.status === 200) { const usuario = responseJson.data document.querySelector('#nombreUsuario').innerHTML = usuario.nombre // finalidad de esta funci\u00f3n. } else { document.querySelector('#nombreUsuario').innerHTML = \"Hubo un problema al cargar al usuario\" } }) .catch(error => { console.log('Hubo un problema con la petici\u00f3n Fetch:' + error.message); }); } else { window.location.href = `${getBaseURL()}/iniciarSesion.html`; } } /** * incluido, solamente para poder usar plantillas * */ function includeHTML() { var z, i, elmnt, file, xhttp; /* Loop through a collection of all HTML elements: */ z = document.getElementsByTagName(\"*\"); for (i = 0; i < z.length; i++) { elmnt = z[i]; /*search for elements with a certain attribute:*/ file = elmnt.getAttribute(\"w3-include-html\"); if (file) { /* Make an HTTP request using the attribute value as the file name: */ xhttp = new XMLHttpRequest(); xhttp.onreadystatechange = function () { if (this.readyState == 4) { if (this.status == 200) { elmnt.innerHTML = this.responseText; } if (this.status == 404) { elmnt.innerHTML = \"Page not found.\"; } /* Remove the attribute, and call this function once more: */ elmnt.removeAttribute(\"w3-include-html\"); includeHTML(); } } xhttp.open(\"GET\", file, true); xhttp.send(); /* Exit the function: */ return; } } } includeHTML(); iniciarSesion.js function getBaseURL() { var elem = document.getElementsByTagName(\"base\")[0]; if (typeof elem != \"undefined\" && elem != null) { return elem.href; } return window.location.origin; } const iniciarSesion = (e) => { const formulario = e.parentElement; let correo = formulario.correo.value; let password = formulario.password.value; sessionStorage.setItem(\"token\", null); sessionStorage.setItem(\"correo\", null); let token; if (correo && password) { const url = `http://localhost:9090/api/v1/iniciarsesion?correo=${correo}&password=${password}`; const atributos = { method: \"POST\", // or 'PUT' headers: { \"Content-type\": \"application/json; charset=UTF-8\" }, }; fetch(url, atributos) .then((response) => response.json()) .then((responseJson) => { if (responseJson.status === 200) { token = `Bearer ${responseJson.data}`; sessionStorage.setItem(\"token\", token); sessionStorage.setItem(\"correo\", correo); window.location.href = `${getBaseURL()}/index.html`; } else { const mensaje = ` <div class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\"> <strong>${responseJson.message}\u001c</strong> <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\"> <span aria-hidden=\"true\">&times;</span> </button> </div> `; document.querySelector(\"#mensaje\").innerHTML = mensaje; formulario.correo.value = \"\"; formulario.password.value = \"\"; } }) .catch((error) => { console.log(\"Hubo un problema con la petici\u00f3n Fetch:\" + error.message); }); } }; function includeHTML() { var z, i, elmnt, file, xhttp; /* Loop through a collection of all HTML elements: */ z = document.getElementsByTagName(\"*\"); for (i = 0; i < z.length; i++) { elmnt = z[i]; /*search for elements with a certain attribute:*/ file = elmnt.getAttribute(\"w3-include-html\"); if (file) { /* Make an HTTP request using the attribute value as the file name: */ xhttp = new XMLHttpRequest(); xhttp.onreadystatechange = function () { if (this.readyState == 4) { if (this.status == 200) { elmnt.innerHTML = this.responseText; } if (this.status == 404) { elmnt.innerHTML = \"Page not found.\"; } /* Remove the attribute, and call this function once more: */ elmnt.removeAttribute(\"w3-include-html\"); includeHTML(); } }; xhttp.open(\"GET\", file, true); xhttp.send(); /* Exit the function: */ return; } } } includeHTML(); usuarios.js const cargaTabla = () => { const token = sessionStorage.getItem(\"token\"); if (token) { const correo = sessionStorage.getItem(\"correo\"); const url = `http://localhost:9090/api/v1/usuarios`; const atributos = { method: \"GET\", // or 'PUT' headers: { \"Content-type\": \"application/json; charset=UTF-8\", Autorizacion: `${token}`, }, }; fetch(url, atributos) .then((response) => response.json()) .then((mi_json) => { $(\"#tabla\").DataTable({ data: mi_json.data.map((x) => [ x.nombre, x.email, x.roles.reduce((rol, cadena) => cadena + \" \" + rol, \"\"), ]), language: { url: \"https://cdn.datatables.net/plug-ins/1.10.21/i18n/Spanish.json\", }, }); }) .catch((error) => { console.log(\"Hubo un problema con la petici\u00f3n Fetch:\" + error.message); }); } else { window.location.href = `${getBaseURL()}/iniciarSesion.html`; } }; const irA = (uri) => { window.location.href = `${getBaseURL()}/${uri}`; }; function getBaseURL() { var elem = document.getElementsByTagName(\"base\")[0]; if (typeof elem != \"undefined\" && elem != null) { return elem.href; } return window.location.origin; } function includeHTML() { var z, i, elmnt, file, xhttp; /* Loop through a collection of all HTML elements: */ z = document.getElementsByTagName(\"*\"); for (i = 0; i < z.length; i++) { elmnt = z[i]; /*search for elements with a certain attribute:*/ file = elmnt.getAttribute(\"w3-include-html\"); if (file) { /* Make an HTTP request using the attribute value as the file name: */ xhttp = new XMLHttpRequest(); xhttp.onreadystatechange = function () { if (this.readyState == 4) { if (this.status == 200) { elmnt.innerHTML = this.responseText; } if (this.status == 404) { elmnt.innerHTML = \"Page not found.\"; } /* Remove the attribute, and call this function once more: */ elmnt.removeAttribute(\"w3-include-html\"); includeHTML(); } } xhttp.open(\"GET\", file, true); xhttp.send(); /* Exit the function: */ return; } } } includeHTML(); index.html Ventana principal, de la cual, la aplicaci\u00f3n, iniciar\u00e1 inmediatamente despu\u00e9s de hacer el inicio de la sesi\u00f3n. <!DOCTYPE html> <html lang=\"es\"> <head> <!-- head --> <div w3-include-html=\"comunes/head.html\"></div> <!-- head --> </head> <body onload=\"cargaWeb()\"> <!-- nav --> <div w3-include-html=\"comunes/nav.html\"></div> <!-- nav #--> <!-- contenedor --> <div class=\"container\"> <div class=\"row my-5\"> <div class=\"col-3\"></div> <div class=\"col-6\"> <!-- contenido --> Bienvenido: <span id=\"nombreUsuario\"></span> <!-- contenido #--> </div> <div class=\"col-3\"></div> </div> </div> <!-- contenedor #--> <!-- cdn comunes --> <div w3-include-html=\"comunes/cdmsJs.html\"></div> <!-- cdn comunes --> <!-- js de la l\u00f3gica de la p\u00e1gina --> <script src=\"comunes/js/index.js\"></script> </body> </html> iniciarSesion.html Falta usar la plantilla (reparar cuando se pueda, no es imperativo para el ejemplo \"como es el login, no se hizo para que no comparta implementaci\u00f3n con las otras p\u00e1ginas; pero se debe revisar su inclusi\u00f3n para un ejemplo productivo\") <!DOCTYPE html> <html lang=\"en\"> <head> <!-- head --> <div w3-include-html=\"comunes/head.html\"></div> <!-- head --> </head> <body> <!-- contenedor --> <div class=\"container\"> <div class=\"row my-5\"> <div class=\"col-3\"></div> <!-- contenido --> <div class=\"col-6\"> <!--Formulario--> <h1>Iniciar Sesi\u00f3n</h1> <div id=\"mensaje\"></div> <form> <div class=\"form-group\"> <label for=\"correo\">Direcci\u00f3n de Correo</label> <input type=\"text\" class=\"form-control\" id=\"correo\" placeholder=\"Ingrese su Direcci\u00f3n de Correo...\"> </div> <div class=\"form-group\"> <label for=\"password\">Contrase\u00f1a</label> <input type=\"password\" class=\"form-control\" id=\"password\" placeholder=\"Ingrese su Contrase\u00f1a...\"> </div> <button type=\"button\" class=\"btn btn-secondary my-5\" onclick=\"iniciarSesion(this)\">Ingresar</button> </form> <!--Formulario#--> </div> <!-- contenido #--> <div class=\"col-3\"></div> </div> </div> <!-- contenedor #--> <!-- cdn comunes --> <div w3-include-html=\"comunes/cdmsJs.html\"></div> <!-- cdn comunes --> <!-- js de la l\u00f3gica de la p\u00e1gina --> <script src=\"comunes/js/iniciarSesion.js\"></script> </body> </html> registrar.html Registra un usuario en el sistema. Se a\u00f1ade un mensaje de ingreso exitoso. <!DOCTYPE html> <html lang=\"es\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Registrar - Usuario</title> <!--Bootstrap 4--> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\" integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\" crossorigin=\"anonymous\"> </head> <body> <!-- nav --> <ul class=\"nav\"> <li class=\"nav-item\"> <a class=\"nav-link\" href=\"javascript:irA('index.html')\">Inicio</a> </li> <li class=\"nav-item\"> <a class=\"nav-link\" href=\"javascript:irA('usuarios.html')\">Usuarios</a> </li> <li class=\"nav-item\"> <a class=\"nav-link disabled\" href=\"javascript:irA('registrar.html')\">Registrar</a> </li> <li class=\"nav-item\"> <a class=\"nav-link\" href=\"javascript:irA('iniciarSesion.html')\">Cerrar Sesi\u00f3n</a> </li> </ul> <!-- nav #--> <div class=\"container\"> <div class=\"row\"> <div class=\"col-3\"></div> <div class=\"col-6\"> <!--Formulario--> <h1>REGISTRAR USUARIO</h1> <div id=\"mensaje\"></div> <form> <div class=\"form-group\"> <label for=\"nombre\">Nombre</label> <input type=\"text\" class=\"form-control\" id=\"nombre\" placeholder=\"Ingrese su nombre...\"> </div> <div class=\"form-group\"> <label for=\"email\">Correo Electr\u00f3nico</label> <input type=\"email\" class=\"form-control\" id=\"email\" placeholder=\"Ingrese su correo electr\u00f3nico...\"> </div> <div class=\"form-group\"> <label for=\"password\">Contrase\u00f1a</label> <input type=\"password\" class=\"form-control\" id=\"password\" placeholder=\"Ingrese la contrase\u00f1a...\" > </div> <div class=\"form-group\"> <label for=\"confirma_password\">Confirmar contrase\u00f1a</label> <input type=\"password\" class=\"form-control\" id=\"confirma_password\" placeholder=\"Confirme la contrase\u00f1a...\"> </div> <div class=\"custom-control custom-switch \"> <input type=\"checkbox\" class=\"custom-control-input \" id=\"esAdmin\"> <label class=\"custom-control-label\" for=\"esAdmin\">Es administrador</label> </div> <button type=\"button\" class=\"btn btn-secondary my-5\" onclick=\"registrarUsuario(this)\">Ingresar</button> </form> <!--Formulario#--> </div> <div class=\"col-3\"></div> </div> </div> <!--Bootstrap 4--> <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\" integrity=\"sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj\" crossorigin=\"anonymous\"></script> <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js\" integrity=\"sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo\" crossorigin=\"anonymous\"></script> <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js\" integrity=\"sha384-OgVRvuATP1z7JjHLkuOU7Xw704+h835Lr+6QL9UvYjZE3Ipu6Tp75j7Bh/kR0JKI\" crossorigin=\"anonymous\"></script> <!--L\u00f3gica de la p\u00e1gina--> <script> const irA = (uri) => { window.location.href = `${getBaseURL()}/${uri}`; } function getBaseURL(){ var elem=document.getElementsByTagName(\"base\")[0]; if (typeof(elem) != 'undefined' && elem != null){ return elem.href; } return window.location.origin; } const registrarUsuario = (e) => { const mensaje = ` <div class=\"alert alert-success alert-dismissible fade show\" role=\"alert\"> <strong>Usuario ingresado!</strong> <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\"> <span aria-hidden=\"true\">&times;</span> </button> </div> ` const formulario = e.parentElement const password = formulario.password.value; const password_con = formulario.confirma_password.value; const esAdmin = formulario.esAdmin.checked let roles = new Array(\"ROLE_USUARIO\") console.log(\"es chequeado: \" + esAdmin) if(esAdmin) roles = roles = new Array(\"ROLE_USUARIO\", \"ROLE_ADMINISTRADOR\") if(password !== password_con){ alert('contrase\u00f1a no son iguales') return } const datos = { \"nombre\": `${formulario.nombre.value}`, \"email\": `${formulario.email.value}`, \"password\": `${password}`, \"roles\": roles } fetch('http://0.0.0.0:9090/api/v1/registrar', { method: 'POST', // or 'PUT' body: JSON.stringify(datos), // data can be `string` or {object}! headers: {\"Content-type\": \"application/json; charset=UTF-8\"} }).then(res => { if(res.status){ document.querySelector(\"#mensaje\").innerHTML = mensaje } }) .catch(error => console.error('Error:', error)) .then(response => console.log('Success:', response)); } </script> <!--L\u00f3gica de la p\u00e1gina#--> </body> </html> usuarios.html Con el uso de datatable , en este caso se inicia y la p\u00e1gina oficial nos genera un cdn , que son los que ocupa esta p\u00e1gina, no se garantiza su continuidad de funcionamiento, ya que el core , de la funcionalidad de los datatables est\u00e1 en un CDN .\u001c <!DOCTYPE html> <html lang=\"es\"> <head> <!-- head --> <div w3-include-html=\"comunes/head.html\"></div> <!-- head --> <!--Bootstrap 4--> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\" integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\" crossorigin=\"anonymous\"> <!-- dataTable --> <link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.datatables.net/v/bs4/jq-3.3.1/dt-1.10.21/b-1.6.2/b-html5-1.6.2/datatables.min.css\" /> </head> <body onload=\"cargaTabla()\"> <!-- nav --> <div w3-include-html=\"comunes/nav.html\"></div> <!-- nav #--> <div class=\"container\"> <div class=\"row my-5\"> <div class=\"col-1\"></div> <div class=\"col-10\"> <table id=\"tabla\" class=\"display table\" cellspacing=\"10\" width=\"100%\"> <thead class=\"thead-light\"> <tr> <th scope=\"col\">Nombre</th> <th scope=\"col\">Email</th> <th scope=\"col\">Roles</th> </tr> </thead> <tfoot class=\"thead-light\"> <tr> <th scope=\"col\">Nombre</th> <th scope=\"col\">Email</th> <th scope=\"col\">Roles</th> </tr> </tfoot> </table> </div> <div class=\"col-1\"></div> </div> </div> <!-- cdn comunes --> <div w3-include-html=\"comunes/cdmsJs.html\"></div> <!-- cdn comunes --> <!-- JQuery --> <script src=\"https://code.jquery.com/jquery-3.5.1.min.js\" integrity=\"sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=\" crossorigin=\"anonymous\"></script> <!-- dataTable --> <script type=\"text/javascript\" src=\"https://cdn.datatables.net/v/bs4/jq-3.3.1/dt-1.10.21/b-1.6.2/b-html5-1.6.2/datatables.min.js\"></script> <!-- js de la l\u00f3gica de la p\u00e1gina --> <script src=\"comunes/js/usuarios.js\"></script> </body> </html> TODO Agregar la capacidad de actualizar y eliminar usuarios. Implementarlo en alg\u00fan Framework de js , ya sea vue , Angular , react .","title":"Frontend"},{"location":"ejercicios/spring/jwt/mtnusuario/frontend/#2-mantenedor-de-usuarios-frontend","text":"EL siguiente, es un proyecto construido con vanilla js . Usando templates para archivos comunes como lo es el nav . Esta aplicaci\u00f3n, permite: Registrar un usuario, iniciar sesi\u00f3n y listar los usuarios registrados. Quedan pendientes otras implementaciones, y m\u00e1s detalle en validaciones; pero con lo desarrollado, se expone una aplicaci\u00f3n de frontEnd que consuma el servicio desarrollado en Spring utilizando JWT .","title":"2 Mantenedor de Usuarios - FrontEnd"},{"location":"ejercicios/spring/jwt/mtnusuario/frontend/#estructura-del-proyecto","text":"./ \u251c\u2500\u2500 comunes \u2502 \u251c\u2500\u2500 cdmsJs.html \u2502 \u251c\u2500\u2500 head.html \u2502 \u251c\u2500\u2500 js \u2502 \u2502 \u251c\u2500\u2500 index.js \u2502 \u2502 \u251c\u2500\u2500 iniciarSesion.js \u2502 \u2502 \u2514\u2500\u2500 usuarios.js \u2502 \u2514\u2500\u2500 nav.html \u251c\u2500\u2500 favicon.ico \u251c\u2500\u2500 index.html \u251c\u2500\u2500 iniciarSesion.html \u251c\u2500\u2500 registrar.html \u2514\u2500\u2500 usuarios.html 3 directories, 19 files","title":"Estructura del proyecto"},{"location":"ejercicios/spring/jwt/mtnusuario/frontend/#comunes","text":"","title":"comunes"},{"location":"ejercicios/spring/jwt/mtnusuario/frontend/#cdmsjshtml","text":"Contiene los cmd - js necesarios para que funcione bootstrap . (Quiz\u00e1s se deber\u00eda replantear el nombre) <!--Bootstrap 4--> <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\" integrity=\"sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj\" crossorigin=\"anonymous\"></script> <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js\" integrity=\"sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo\" crossorigin=\"anonymous\"></script> <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js\" integrity=\"sha384-OgVRvuATP1z7JjHLkuOU7Xw704+h835Lr+6QL9UvYjZE3Ipu6Tp75j7Bh/kR0JKI\" crossorigin=\"anonymous\"></script>","title":"cdmsJs.html"},{"location":"ejercicios/spring/jwt/mtnusuario/frontend/#headhtml","text":"Contiene la informaci\u00f3n compartida del head , se genera como plantilla, por que ser\u00e1 igual para todas las ventanas. <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>JWT - FRONT</title> <!--Bootstrap 4--> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\" integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\" crossorigin=\"anonymous\">","title":"head.html"},{"location":"ejercicios/spring/jwt/mtnusuario/frontend/#navhtml","text":"Contiene el men\u00fa de la aplicaci\u00f3n, este ser\u00e1 el mismo para todas las p\u00e1ginas. <ul class=\"nav\"> <li class=\"nav-item\"> <a class=\"nav-link\" href=\"javascript:irA('index.html')\">Inicio</a> </li> <li class=\"nav-item\"> <a class=\"nav-link\" href=\"javascript:irA('usuarios.html')\">Usuarios</a> </li> <li class=\"nav-item\"> <a class=\"nav-link\" href=\"javascript:irA('registrar.html')\">Registrar</a> </li> <li class=\"nav-item\"> <a class=\"nav-link\" href=\"javascript:irA('iniciarSesion.html')\">Cerrar Sesi\u00f3n</a> </li> </ul>","title":"nav.html"},{"location":"ejercicios/spring/jwt/mtnusuario/frontend/#js","text":"Contiene los c\u00f3digos javascript , personalizados para cada p\u00e1gina , algunos se repiten; pero es para efectos explicativos del ejercicio, por sobre su \u00f3ptimo funcionamiento productivo. Su funcionamiento est\u00e1 basado en la resoluci\u00f3n de la promesa del servicio que consumen, y su implementaci\u00f3n se basa en la especificaci\u00f3n del consumo de estos servicios. Si la implementaci\u00f3n de los servicios en el Backend cambian, estas implementaci\u00f3n, probablemente deban ser ajustadas en este lugar, ya que ac\u00e1 est\u00e1n los consumos.","title":"js"},{"location":"ejercicios/spring/jwt/mtnusuario/frontend/#indexjs","text":"// algunas funciones se repetir\u00e1n, solamente para claridad del ejemplo // para no tener dependencia de los dem\u00e1s archivos, ya que este sistema // no va a seguir creciendo, en caso que se utilice como base // refactorizar. const irA = (uri) => { window.location.href = `${getBaseURL()}/${uri}`; } // copiada de la web, indica la URL actual, por si esta // cambiam, es mejor que sea capturada autom\u00e1ticamente function getBaseURL(){ var elem=document.getElementsByTagName(\"base\")[0]; if (typeof(elem) != 'undefined' && elem != null){ return elem.href; } return window.location.origin; } /** * Funci\u00f3n que es ejecutada al iniciar la carga del cuerpo de la web, se llama * a esta funci\u00f3n, que tiene como objetivo, cargar los datos del usuario\u00e7 * que se encuetra con la sesi\u00f3n iniciada * */ const cargaWeb = () => { const token = sessionStorage.getItem('token') console.log(\"token: \", token) if (token) { const correo = sessionStorage.getItem('correo') const url = `http://localhost:9090/api/v1/usuarios?correo=${correo}` const atributos = { method: 'POST', // or 'PUT' headers: { \"Content-type\": \"application/json; charset=UTF-8\", \"Autorizacion\": `${token}` } } fetch(url, atributos) .then(response => { if (response.status !== 403) { return response.json() } else { window.location.href = `${getBaseURL()}/iniciarSesion.html`; // redirecci\u00f3n al inicio de sesi\u00f3n. } }) .then(responseJson => { if (responseJson.status === 200) { const usuario = responseJson.data document.querySelector('#nombreUsuario').innerHTML = usuario.nombre // finalidad de esta funci\u00f3n. } else { document.querySelector('#nombreUsuario').innerHTML = \"Hubo un problema al cargar al usuario\" } }) .catch(error => { console.log('Hubo un problema con la petici\u00f3n Fetch:' + error.message); }); } else { window.location.href = `${getBaseURL()}/iniciarSesion.html`; } } /** * incluido, solamente para poder usar plantillas * */ function includeHTML() { var z, i, elmnt, file, xhttp; /* Loop through a collection of all HTML elements: */ z = document.getElementsByTagName(\"*\"); for (i = 0; i < z.length; i++) { elmnt = z[i]; /*search for elements with a certain attribute:*/ file = elmnt.getAttribute(\"w3-include-html\"); if (file) { /* Make an HTTP request using the attribute value as the file name: */ xhttp = new XMLHttpRequest(); xhttp.onreadystatechange = function () { if (this.readyState == 4) { if (this.status == 200) { elmnt.innerHTML = this.responseText; } if (this.status == 404) { elmnt.innerHTML = \"Page not found.\"; } /* Remove the attribute, and call this function once more: */ elmnt.removeAttribute(\"w3-include-html\"); includeHTML(); } } xhttp.open(\"GET\", file, true); xhttp.send(); /* Exit the function: */ return; } } } includeHTML();","title":"index.js"},{"location":"ejercicios/spring/jwt/mtnusuario/frontend/#iniciarsesionjs","text":"function getBaseURL() { var elem = document.getElementsByTagName(\"base\")[0]; if (typeof elem != \"undefined\" && elem != null) { return elem.href; } return window.location.origin; } const iniciarSesion = (e) => { const formulario = e.parentElement; let correo = formulario.correo.value; let password = formulario.password.value; sessionStorage.setItem(\"token\", null); sessionStorage.setItem(\"correo\", null); let token; if (correo && password) { const url = `http://localhost:9090/api/v1/iniciarsesion?correo=${correo}&password=${password}`; const atributos = { method: \"POST\", // or 'PUT' headers: { \"Content-type\": \"application/json; charset=UTF-8\" }, }; fetch(url, atributos) .then((response) => response.json()) .then((responseJson) => { if (responseJson.status === 200) { token = `Bearer ${responseJson.data}`; sessionStorage.setItem(\"token\", token); sessionStorage.setItem(\"correo\", correo); window.location.href = `${getBaseURL()}/index.html`; } else { const mensaje = ` <div class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\"> <strong>${responseJson.message}\u001c</strong> <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\"> <span aria-hidden=\"true\">&times;</span> </button> </div> `; document.querySelector(\"#mensaje\").innerHTML = mensaje; formulario.correo.value = \"\"; formulario.password.value = \"\"; } }) .catch((error) => { console.log(\"Hubo un problema con la petici\u00f3n Fetch:\" + error.message); }); } }; function includeHTML() { var z, i, elmnt, file, xhttp; /* Loop through a collection of all HTML elements: */ z = document.getElementsByTagName(\"*\"); for (i = 0; i < z.length; i++) { elmnt = z[i]; /*search for elements with a certain attribute:*/ file = elmnt.getAttribute(\"w3-include-html\"); if (file) { /* Make an HTTP request using the attribute value as the file name: */ xhttp = new XMLHttpRequest(); xhttp.onreadystatechange = function () { if (this.readyState == 4) { if (this.status == 200) { elmnt.innerHTML = this.responseText; } if (this.status == 404) { elmnt.innerHTML = \"Page not found.\"; } /* Remove the attribute, and call this function once more: */ elmnt.removeAttribute(\"w3-include-html\"); includeHTML(); } }; xhttp.open(\"GET\", file, true); xhttp.send(); /* Exit the function: */ return; } } } includeHTML();","title":"iniciarSesion.js"},{"location":"ejercicios/spring/jwt/mtnusuario/frontend/#usuariosjs","text":"const cargaTabla = () => { const token = sessionStorage.getItem(\"token\"); if (token) { const correo = sessionStorage.getItem(\"correo\"); const url = `http://localhost:9090/api/v1/usuarios`; const atributos = { method: \"GET\", // or 'PUT' headers: { \"Content-type\": \"application/json; charset=UTF-8\", Autorizacion: `${token}`, }, }; fetch(url, atributos) .then((response) => response.json()) .then((mi_json) => { $(\"#tabla\").DataTable({ data: mi_json.data.map((x) => [ x.nombre, x.email, x.roles.reduce((rol, cadena) => cadena + \" \" + rol, \"\"), ]), language: { url: \"https://cdn.datatables.net/plug-ins/1.10.21/i18n/Spanish.json\", }, }); }) .catch((error) => { console.log(\"Hubo un problema con la petici\u00f3n Fetch:\" + error.message); }); } else { window.location.href = `${getBaseURL()}/iniciarSesion.html`; } }; const irA = (uri) => { window.location.href = `${getBaseURL()}/${uri}`; }; function getBaseURL() { var elem = document.getElementsByTagName(\"base\")[0]; if (typeof elem != \"undefined\" && elem != null) { return elem.href; } return window.location.origin; } function includeHTML() { var z, i, elmnt, file, xhttp; /* Loop through a collection of all HTML elements: */ z = document.getElementsByTagName(\"*\"); for (i = 0; i < z.length; i++) { elmnt = z[i]; /*search for elements with a certain attribute:*/ file = elmnt.getAttribute(\"w3-include-html\"); if (file) { /* Make an HTTP request using the attribute value as the file name: */ xhttp = new XMLHttpRequest(); xhttp.onreadystatechange = function () { if (this.readyState == 4) { if (this.status == 200) { elmnt.innerHTML = this.responseText; } if (this.status == 404) { elmnt.innerHTML = \"Page not found.\"; } /* Remove the attribute, and call this function once more: */ elmnt.removeAttribute(\"w3-include-html\"); includeHTML(); } } xhttp.open(\"GET\", file, true); xhttp.send(); /* Exit the function: */ return; } } } includeHTML();","title":"usuarios.js"},{"location":"ejercicios/spring/jwt/mtnusuario/frontend/#indexhtml","text":"Ventana principal, de la cual, la aplicaci\u00f3n, iniciar\u00e1 inmediatamente despu\u00e9s de hacer el inicio de la sesi\u00f3n. <!DOCTYPE html> <html lang=\"es\"> <head> <!-- head --> <div w3-include-html=\"comunes/head.html\"></div> <!-- head --> </head> <body onload=\"cargaWeb()\"> <!-- nav --> <div w3-include-html=\"comunes/nav.html\"></div> <!-- nav #--> <!-- contenedor --> <div class=\"container\"> <div class=\"row my-5\"> <div class=\"col-3\"></div> <div class=\"col-6\"> <!-- contenido --> Bienvenido: <span id=\"nombreUsuario\"></span> <!-- contenido #--> </div> <div class=\"col-3\"></div> </div> </div> <!-- contenedor #--> <!-- cdn comunes --> <div w3-include-html=\"comunes/cdmsJs.html\"></div> <!-- cdn comunes --> <!-- js de la l\u00f3gica de la p\u00e1gina --> <script src=\"comunes/js/index.js\"></script> </body> </html>","title":"index.html"},{"location":"ejercicios/spring/jwt/mtnusuario/frontend/#iniciarsesionhtml","text":"Falta usar la plantilla (reparar cuando se pueda, no es imperativo para el ejemplo \"como es el login, no se hizo para que no comparta implementaci\u00f3n con las otras p\u00e1ginas; pero se debe revisar su inclusi\u00f3n para un ejemplo productivo\") <!DOCTYPE html> <html lang=\"en\"> <head> <!-- head --> <div w3-include-html=\"comunes/head.html\"></div> <!-- head --> </head> <body> <!-- contenedor --> <div class=\"container\"> <div class=\"row my-5\"> <div class=\"col-3\"></div> <!-- contenido --> <div class=\"col-6\"> <!--Formulario--> <h1>Iniciar Sesi\u00f3n</h1> <div id=\"mensaje\"></div> <form> <div class=\"form-group\"> <label for=\"correo\">Direcci\u00f3n de Correo</label> <input type=\"text\" class=\"form-control\" id=\"correo\" placeholder=\"Ingrese su Direcci\u00f3n de Correo...\"> </div> <div class=\"form-group\"> <label for=\"password\">Contrase\u00f1a</label> <input type=\"password\" class=\"form-control\" id=\"password\" placeholder=\"Ingrese su Contrase\u00f1a...\"> </div> <button type=\"button\" class=\"btn btn-secondary my-5\" onclick=\"iniciarSesion(this)\">Ingresar</button> </form> <!--Formulario#--> </div> <!-- contenido #--> <div class=\"col-3\"></div> </div> </div> <!-- contenedor #--> <!-- cdn comunes --> <div w3-include-html=\"comunes/cdmsJs.html\"></div> <!-- cdn comunes --> <!-- js de la l\u00f3gica de la p\u00e1gina --> <script src=\"comunes/js/iniciarSesion.js\"></script> </body> </html>","title":"iniciarSesion.html"},{"location":"ejercicios/spring/jwt/mtnusuario/frontend/#registrarhtml","text":"Registra un usuario en el sistema. Se a\u00f1ade un mensaje de ingreso exitoso. <!DOCTYPE html> <html lang=\"es\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Registrar - Usuario</title> <!--Bootstrap 4--> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\" integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\" crossorigin=\"anonymous\"> </head> <body> <!-- nav --> <ul class=\"nav\"> <li class=\"nav-item\"> <a class=\"nav-link\" href=\"javascript:irA('index.html')\">Inicio</a> </li> <li class=\"nav-item\"> <a class=\"nav-link\" href=\"javascript:irA('usuarios.html')\">Usuarios</a> </li> <li class=\"nav-item\"> <a class=\"nav-link disabled\" href=\"javascript:irA('registrar.html')\">Registrar</a> </li> <li class=\"nav-item\"> <a class=\"nav-link\" href=\"javascript:irA('iniciarSesion.html')\">Cerrar Sesi\u00f3n</a> </li> </ul> <!-- nav #--> <div class=\"container\"> <div class=\"row\"> <div class=\"col-3\"></div> <div class=\"col-6\"> <!--Formulario--> <h1>REGISTRAR USUARIO</h1> <div id=\"mensaje\"></div> <form> <div class=\"form-group\"> <label for=\"nombre\">Nombre</label> <input type=\"text\" class=\"form-control\" id=\"nombre\" placeholder=\"Ingrese su nombre...\"> </div> <div class=\"form-group\"> <label for=\"email\">Correo Electr\u00f3nico</label> <input type=\"email\" class=\"form-control\" id=\"email\" placeholder=\"Ingrese su correo electr\u00f3nico...\"> </div> <div class=\"form-group\"> <label for=\"password\">Contrase\u00f1a</label> <input type=\"password\" class=\"form-control\" id=\"password\" placeholder=\"Ingrese la contrase\u00f1a...\" > </div> <div class=\"form-group\"> <label for=\"confirma_password\">Confirmar contrase\u00f1a</label> <input type=\"password\" class=\"form-control\" id=\"confirma_password\" placeholder=\"Confirme la contrase\u00f1a...\"> </div> <div class=\"custom-control custom-switch \"> <input type=\"checkbox\" class=\"custom-control-input \" id=\"esAdmin\"> <label class=\"custom-control-label\" for=\"esAdmin\">Es administrador</label> </div> <button type=\"button\" class=\"btn btn-secondary my-5\" onclick=\"registrarUsuario(this)\">Ingresar</button> </form> <!--Formulario#--> </div> <div class=\"col-3\"></div> </div> </div> <!--Bootstrap 4--> <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\" integrity=\"sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj\" crossorigin=\"anonymous\"></script> <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js\" integrity=\"sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo\" crossorigin=\"anonymous\"></script> <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js\" integrity=\"sha384-OgVRvuATP1z7JjHLkuOU7Xw704+h835Lr+6QL9UvYjZE3Ipu6Tp75j7Bh/kR0JKI\" crossorigin=\"anonymous\"></script> <!--L\u00f3gica de la p\u00e1gina--> <script> const irA = (uri) => { window.location.href = `${getBaseURL()}/${uri}`; } function getBaseURL(){ var elem=document.getElementsByTagName(\"base\")[0]; if (typeof(elem) != 'undefined' && elem != null){ return elem.href; } return window.location.origin; } const registrarUsuario = (e) => { const mensaje = ` <div class=\"alert alert-success alert-dismissible fade show\" role=\"alert\"> <strong>Usuario ingresado!</strong> <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\"> <span aria-hidden=\"true\">&times;</span> </button> </div> ` const formulario = e.parentElement const password = formulario.password.value; const password_con = formulario.confirma_password.value; const esAdmin = formulario.esAdmin.checked let roles = new Array(\"ROLE_USUARIO\") console.log(\"es chequeado: \" + esAdmin) if(esAdmin) roles = roles = new Array(\"ROLE_USUARIO\", \"ROLE_ADMINISTRADOR\") if(password !== password_con){ alert('contrase\u00f1a no son iguales') return } const datos = { \"nombre\": `${formulario.nombre.value}`, \"email\": `${formulario.email.value}`, \"password\": `${password}`, \"roles\": roles } fetch('http://0.0.0.0:9090/api/v1/registrar', { method: 'POST', // or 'PUT' body: JSON.stringify(datos), // data can be `string` or {object}! headers: {\"Content-type\": \"application/json; charset=UTF-8\"} }).then(res => { if(res.status){ document.querySelector(\"#mensaje\").innerHTML = mensaje } }) .catch(error => console.error('Error:', error)) .then(response => console.log('Success:', response)); } </script> <!--L\u00f3gica de la p\u00e1gina#--> </body> </html>","title":"registrar.html"},{"location":"ejercicios/spring/jwt/mtnusuario/frontend/#usuarioshtml","text":"Con el uso de datatable , en este caso se inicia y la p\u00e1gina oficial nos genera un cdn , que son los que ocupa esta p\u00e1gina, no se garantiza su continuidad de funcionamiento, ya que el core , de la funcionalidad de los datatables est\u00e1 en un CDN .\u001c <!DOCTYPE html> <html lang=\"es\"> <head> <!-- head --> <div w3-include-html=\"comunes/head.html\"></div> <!-- head --> <!--Bootstrap 4--> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\" integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\" crossorigin=\"anonymous\"> <!-- dataTable --> <link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.datatables.net/v/bs4/jq-3.3.1/dt-1.10.21/b-1.6.2/b-html5-1.6.2/datatables.min.css\" /> </head> <body onload=\"cargaTabla()\"> <!-- nav --> <div w3-include-html=\"comunes/nav.html\"></div> <!-- nav #--> <div class=\"container\"> <div class=\"row my-5\"> <div class=\"col-1\"></div> <div class=\"col-10\"> <table id=\"tabla\" class=\"display table\" cellspacing=\"10\" width=\"100%\"> <thead class=\"thead-light\"> <tr> <th scope=\"col\">Nombre</th> <th scope=\"col\">Email</th> <th scope=\"col\">Roles</th> </tr> </thead> <tfoot class=\"thead-light\"> <tr> <th scope=\"col\">Nombre</th> <th scope=\"col\">Email</th> <th scope=\"col\">Roles</th> </tr> </tfoot> </table> </div> <div class=\"col-1\"></div> </div> </div> <!-- cdn comunes --> <div w3-include-html=\"comunes/cdmsJs.html\"></div> <!-- cdn comunes --> <!-- JQuery --> <script src=\"https://code.jquery.com/jquery-3.5.1.min.js\" integrity=\"sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=\" crossorigin=\"anonymous\"></script> <!-- dataTable --> <script type=\"text/javascript\" src=\"https://cdn.datatables.net/v/bs4/jq-3.3.1/dt-1.10.21/b-1.6.2/b-html5-1.6.2/datatables.min.js\"></script> <!-- js de la l\u00f3gica de la p\u00e1gina --> <script src=\"comunes/js/usuarios.js\"></script> </body> </html>","title":"usuarios.html"},{"location":"ejercicios/spring/jwt/mtnusuario/frontend/#todo","text":"Agregar la capacidad de actualizar y eliminar usuarios. Implementarlo en alg\u00fan Framework de js , ya sea vue , Angular , react .","title":"TODO"},{"location":"manuales/thymeleaf/ejemplos/","text":"thymeleaf --- Notas En las propiedades del proyecto: spring.thymeleaf.cache: false , con esto evitamos el cache en nuestro desarrollo. Se debe al menos tener las dependencias Spring Web y Thymeleaf . Una gran utilidad es que el modelo model de la vista, puede ser capturado por javascript . A diferencia de jsp que es capturado por un servlet de Java. th: es la forma en que se declaran atributos especiales en thymeleaf . No se debe confundir con el th de la etiqueta table . En en siguiente ejemplo: <input type=\"text\" name=\"userName\" value=\"James Carrot\" th:value=\"${user.name}\" /> vemos que la etiqueta para poder asignar un valor en un campo de texto de un formulario es value , entonces el valor usado para obtener una variable del modelo es con el mismo nombre del atributo value . pero th:value=\"${user.name}\" , quedando value=\"James Carrot\" , quedando este, como valor por defecto. th:text Reemplaza el contenido textual de lo que est\u00e9 en las etiquetas: Controlador /thymeleaftTest/src/main/java/cl/lherrera/arriendopelis/controller/HomeController.java package cl.lherrera.arriendopelis.controller; import java.util.ArrayList; import java.util.Date; import java.util.List; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestMapping; @Controller @RequestMapping(path = \"th\") public class HomeController { @GetMapping(path = { \"\", \"/\" }) public String home(Model modelo) { modelo.addAttribute(\"nombre\", \"Luis Herrera\"); return \"index\"; } // ... otras funcionalidades. Template /thymeleaftTest/src/main/resources/templates/index.html <!DOCTYPE html> <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\"> <head> <meta charset=\"UTF-8\"> <title>Insert title here</title> </head> <body> <h1>Prueba texto simple</h1> <h3 th:text=\"${nombre}\">Texto se reemplaza</h3> <p>Reemplazo literal: <span th:text=\"${nombre}\">literal reemplazo</span>.</p> <p th:text=\"|Reemplazo literal: ${nombre}.|\">literal reemplazo</p> <hr /> </body> </html> Salida <!DOCTYPE html><html xmlns=\"http://www.w3.org/1999/xhtml\"><html><head> <meta charset=\"UTF-8\"> <title>Insert title here</title></head><body><h1>Prueba texto simple</h1><h3>Luis Herrera</h3><p>Reemplazo literal: <span>Luis Herrera</span>.</p><p>Reemplazo literal: Luis Herrera.</p><hr/></body></html> th:each https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#iteration Controlador @GetMapping(path = \"/lista\") public String lista(Model modelo) { List<Persona> personas = new ArrayList<>(); personas.add(new Persona(\"Ana\", new Date())); personas.add(new Persona(\"Juana\", new Date())); personas.add(new Persona(\"Gabriel\", new Date())); modelo.addAttribute(\"personas\", personas); return \"lista\"; } Vista <!DOCTYPE html> <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\"> <head> <meta charset=\"UTF-8\"> <title>Insert title here</title> </head> <body> <h1>Lista de personas</h1> <ul> <li th:each=\"persona : ${personas}\"> <span th:text=\"${persona.nombre}\">Sin personas</span> </li> </ul> </body> </html> <!DOCTYPE html><html xmlns=\"http://www.w3.org/1999/xhtml\"><head> <meta charset=\"UTF-8\"> <title>Insert title here</title></head><body> <h1>Lista de personas</h1> <ul> <li> <span>Ana</span> </li><li> <span>Juana</span> </li><li> <span>Gabriel</span> </li></ul></body></html> Template Layout https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#template-layout th:fragment th:replace : La etiqueta que contenga este atributo, ser\u00e1 completamente reemplazado por el que venga por par\u00e1metro.\u001c Su funcionamiento es similar a como funciona un m\u00e9todo est\u00e1tico. Primero se define: <!-- +++++++++++++++++++++++++++++++++ --> <!-- DECLARACI\u00d3N DE UN M\u00c9TODO EST\u00c1TICO --> <!-- +++++++++++++++++++++++++++++++++ --> <head th:fragment=\"common_header(A, B)\"> <!-- esta secci\u00f3n ser\u00e1 completamete reemplazada por el argumento dado por A --> <title th:replace=\"${A}\">Principal</title> <!-- Esta seccion se mantiiene por que no hay un th:replace=\"${A}\" --> <link rel=\"stylesheet\" href=\"miEstilo\" > <!-- La idea de que se reemplace esta secci\u00f3n, es que cuando una p\u00e1giina la cargue, entregue todo el contenido que indique su selector. --> <th:block th:replace=\"${B}\" /> </head> <!-- +++++++++++++++++++++++++++++++++ --> Es un m\u00e9todo est\u00e1tico, como lo ser\u00eda una funci\u00f3n. Tiene dos par\u00e1metros el primero es A y el segundo es B. El nombre que pueden llevar los par\u00e1metros es variable como lo ser\u00eda en un m\u00e9todo real. Cualquier etiqueta que lleve th:replace=\"${A}\" , ser\u00e1 reemplazado por lo que llegue como A. Lo mismo para el caso de B. Este es un Snipped com\u00fan, ya que permite hacer que el t\u00edtulo sea variable, adem\u00e1s de fijar el css oficial, ya que no posee etiquetas thymeleaf , entonces su contenido es est\u00e1tico, por lo tanto no es reemplazado con lo que venga por par\u00e1metros, es decir que tiene su existencia asegurada. Luego viene la parte en que B, reemplazar\u00e1 alg\u00fan css especial que requiera alguna p\u00e1gina que use esta plantilla. Luego esta deber\u00eda ser llamada desde otro archivo de la siguiente forma: <head th:replace=\"utils :: common_header(~{::link},~{::title})\"> <title>-1-</title> <title>-2-</title> <title>-3-</title> <title>-4-</title> <link rel=\"stylesheet\" th:href=\"uno.css\"> <link rel=\"stylesheet\" th:href=\"dos.css\"> </head> ~{::link} , donde \u001c ::link es el\u001c selector . En este caso, de forma premeditada, se cambia el orden de los argumentos, para demostrar que: Todo lo que en el fragment tenga th:replace=\"${A}\" , ser\u00e1 reemplazado por ::link , es decir, por todas las etiquetas link , ya que este argumento toma el lugar del par\u00e1metro A . <head th:replace=\"utils :: common_header... , quiere decir que el archivo utils.html ubicado en la ra\u00edz del proyecto posee dentro de su body una etiqueta \u001cllamada common_header . Si utils.html se encuentra dentro de un directorio /foo , se llama <head th:replace=\"foo/utils :: , siempre tomando el directorio ra\u00edz no importa desde donde lo llamemos, es decir que no usamos <head th:replace=\"../utils :: , si no que aunque el archivo que llame el fragment se encuentre Quedando el siguiente resultado. <head> <link rel=\"stylesheet\" href=\"uno.css\"> <link rel=\"stylesheet\" href=\"dos.css\"> <!-- bootstrap - 4.4.1 --> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\"> <!-- para los dem\u00e1s enlaces --> <title>-1-</title> <title>-2-</title> <title>-3-</title> <title>-4-</title> </head> Como se puede ver, lo usual es common_header(~{::title},~{::link}) , para que el selector seleccione primero el titulo y luegoo los links, pero en esta ocaci\u00f3n se realiz\u00f3 de esta manera para poner en evidencia el contenido de los argumentos y el lugar de los par\u00e1metros. common_header(~{::link},~{::title}) . template - snippet <!DOCTYPE html> <html th:fragment=\"layout (title, content)\" xmlns:th=\"http://www.thymeleaf.org\"> <head> <title th:replace=\"${title}\">Layout Title</title> </head> <body> <h1>Layout H1</h1> <div th:replace=\"${content}\"> <p>Layout content</p> </div> <footer> Layout footer </footer> </body> </html> <!DOCTYPE html> <html th:replace=\"~{layoutFile :: layout(~{::title}, ~{::section})}\"> <head> <title>Page Title</title> </head> <body> <section> <p>Page content</p> <div>Included on page</div> </section> </body> </html>","title":"`\u001dthymeleaf`"},{"location":"manuales/thymeleaf/ejemplos/#thymeleaf","text":"---","title":"thymeleaf"},{"location":"manuales/thymeleaf/ejemplos/#notas","text":"En las propiedades del proyecto: spring.thymeleaf.cache: false , con esto evitamos el cache en nuestro desarrollo. Se debe al menos tener las dependencias Spring Web y Thymeleaf . Una gran utilidad es que el modelo model de la vista, puede ser capturado por javascript . A diferencia de jsp que es capturado por un servlet de Java. th: es la forma en que se declaran atributos especiales en thymeleaf . No se debe confundir con el th de la etiqueta table . En en siguiente ejemplo: <input type=\"text\" name=\"userName\" value=\"James Carrot\" th:value=\"${user.name}\" /> vemos que la etiqueta para poder asignar un valor en un campo de texto de un formulario es value , entonces el valor usado para obtener una variable del modelo es con el mismo nombre del atributo value . pero th:value=\"${user.name}\" , quedando value=\"James Carrot\" , quedando este, como valor por defecto.","title":"Notas"},{"location":"manuales/thymeleaf/ejemplos/#thtext","text":"Reemplaza el contenido textual de lo que est\u00e9 en las etiquetas:","title":"th:text"},{"location":"manuales/thymeleaf/ejemplos/#controlador","text":"/thymeleaftTest/src/main/java/cl/lherrera/arriendopelis/controller/HomeController.java package cl.lherrera.arriendopelis.controller; import java.util.ArrayList; import java.util.Date; import java.util.List; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestMapping; @Controller @RequestMapping(path = \"th\") public class HomeController { @GetMapping(path = { \"\", \"/\" }) public String home(Model modelo) { modelo.addAttribute(\"nombre\", \"Luis Herrera\"); return \"index\"; } // ... otras funcionalidades.","title":"Controlador"},{"location":"manuales/thymeleaf/ejemplos/#template","text":"/thymeleaftTest/src/main/resources/templates/index.html <!DOCTYPE html> <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\"> <head> <meta charset=\"UTF-8\"> <title>Insert title here</title> </head> <body> <h1>Prueba texto simple</h1> <h3 th:text=\"${nombre}\">Texto se reemplaza</h3> <p>Reemplazo literal: <span th:text=\"${nombre}\">literal reemplazo</span>.</p> <p th:text=\"|Reemplazo literal: ${nombre}.|\">literal reemplazo</p> <hr /> </body> </html>","title":"Template"},{"location":"manuales/thymeleaf/ejemplos/#salida","text":"<!DOCTYPE html><html xmlns=\"http://www.w3.org/1999/xhtml\"><html><head> <meta charset=\"UTF-8\"> <title>Insert title here</title></head><body><h1>Prueba texto simple</h1><h3>Luis Herrera</h3><p>Reemplazo literal: <span>Luis Herrera</span>.</p><p>Reemplazo literal: Luis Herrera.</p><hr/></body></html>","title":"Salida"},{"location":"manuales/thymeleaf/ejemplos/#theach","text":"https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#iteration","title":"th:each"},{"location":"manuales/thymeleaf/ejemplos/#controlador_1","text":"@GetMapping(path = \"/lista\") public String lista(Model modelo) { List<Persona> personas = new ArrayList<>(); personas.add(new Persona(\"Ana\", new Date())); personas.add(new Persona(\"Juana\", new Date())); personas.add(new Persona(\"Gabriel\", new Date())); modelo.addAttribute(\"personas\", personas); return \"lista\"; }","title":"Controlador"},{"location":"manuales/thymeleaf/ejemplos/#vista","text":"<!DOCTYPE html> <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\"> <head> <meta charset=\"UTF-8\"> <title>Insert title here</title> </head> <body> <h1>Lista de personas</h1> <ul> <li th:each=\"persona : ${personas}\"> <span th:text=\"${persona.nombre}\">Sin personas</span> </li> </ul> </body> </html> <!DOCTYPE html><html xmlns=\"http://www.w3.org/1999/xhtml\"><head> <meta charset=\"UTF-8\"> <title>Insert title here</title></head><body> <h1>Lista de personas</h1> <ul> <li> <span>Ana</span> </li><li> <span>Juana</span> </li><li> <span>Gabriel</span> </li></ul></body></html>","title":"Vista"},{"location":"manuales/thymeleaf/ejemplos/#template-layout","text":"https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#template-layout","title":"Template Layout"},{"location":"manuales/thymeleaf/ejemplos/#thfragment","text":"th:replace : La etiqueta que contenga este atributo, ser\u00e1 completamente reemplazado por el que venga por par\u00e1metro.\u001c Su funcionamiento es similar a como funciona un m\u00e9todo est\u00e1tico. Primero se define: <!-- +++++++++++++++++++++++++++++++++ --> <!-- DECLARACI\u00d3N DE UN M\u00c9TODO EST\u00c1TICO --> <!-- +++++++++++++++++++++++++++++++++ --> <head th:fragment=\"common_header(A, B)\"> <!-- esta secci\u00f3n ser\u00e1 completamete reemplazada por el argumento dado por A --> <title th:replace=\"${A}\">Principal</title> <!-- Esta seccion se mantiiene por que no hay un th:replace=\"${A}\" --> <link rel=\"stylesheet\" href=\"miEstilo\" > <!-- La idea de que se reemplace esta secci\u00f3n, es que cuando una p\u00e1giina la cargue, entregue todo el contenido que indique su selector. --> <th:block th:replace=\"${B}\" /> </head> <!-- +++++++++++++++++++++++++++++++++ --> Es un m\u00e9todo est\u00e1tico, como lo ser\u00eda una funci\u00f3n. Tiene dos par\u00e1metros el primero es A y el segundo es B. El nombre que pueden llevar los par\u00e1metros es variable como lo ser\u00eda en un m\u00e9todo real. Cualquier etiqueta que lleve th:replace=\"${A}\" , ser\u00e1 reemplazado por lo que llegue como A. Lo mismo para el caso de B. Este es un Snipped com\u00fan, ya que permite hacer que el t\u00edtulo sea variable, adem\u00e1s de fijar el css oficial, ya que no posee etiquetas thymeleaf , entonces su contenido es est\u00e1tico, por lo tanto no es reemplazado con lo que venga por par\u00e1metros, es decir que tiene su existencia asegurada. Luego viene la parte en que B, reemplazar\u00e1 alg\u00fan css especial que requiera alguna p\u00e1gina que use esta plantilla. Luego esta deber\u00eda ser llamada desde otro archivo de la siguiente forma: <head th:replace=\"utils :: common_header(~{::link},~{::title})\"> <title>-1-</title> <title>-2-</title> <title>-3-</title> <title>-4-</title> <link rel=\"stylesheet\" th:href=\"uno.css\"> <link rel=\"stylesheet\" th:href=\"dos.css\"> </head> ~{::link} , donde \u001c ::link es el\u001c selector . En este caso, de forma premeditada, se cambia el orden de los argumentos, para demostrar que: Todo lo que en el fragment tenga th:replace=\"${A}\" , ser\u00e1 reemplazado por ::link , es decir, por todas las etiquetas link , ya que este argumento toma el lugar del par\u00e1metro A . <head th:replace=\"utils :: common_header... , quiere decir que el archivo utils.html ubicado en la ra\u00edz del proyecto posee dentro de su body una etiqueta \u001cllamada common_header . Si utils.html se encuentra dentro de un directorio /foo , se llama <head th:replace=\"foo/utils :: , siempre tomando el directorio ra\u00edz no importa desde donde lo llamemos, es decir que no usamos <head th:replace=\"../utils :: , si no que aunque el archivo que llame el fragment se encuentre Quedando el siguiente resultado. <head> <link rel=\"stylesheet\" href=\"uno.css\"> <link rel=\"stylesheet\" href=\"dos.css\"> <!-- bootstrap - 4.4.1 --> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\"> <!-- para los dem\u00e1s enlaces --> <title>-1-</title> <title>-2-</title> <title>-3-</title> <title>-4-</title> </head> Como se puede ver, lo usual es common_header(~{::title},~{::link}) , para que el selector seleccione primero el titulo y luegoo los links, pero en esta ocaci\u00f3n se realiz\u00f3 de esta manera para poner en evidencia el contenido de los argumentos y el lugar de los par\u00e1metros. common_header(~{::link},~{::title}) .","title":"th:fragment"},{"location":"manuales/thymeleaf/ejemplos/#template-snippet","text":"<!DOCTYPE html> <html th:fragment=\"layout (title, content)\" xmlns:th=\"http://www.thymeleaf.org\"> <head> <title th:replace=\"${title}\">Layout Title</title> </head> <body> <h1>Layout H1</h1> <div th:replace=\"${content}\"> <p>Layout content</p> </div> <footer> Layout footer </footer> </body> </html> <!DOCTYPE html> <html th:replace=\"~{layoutFile :: layout(~{::title}, ~{::section})}\"> <head> <title>Page Title</title> </head> <body> <section> <p>Page content</p> <div>Included on page</div> </section> </body> </html>","title":"template - snippet"},{"location":"modulos/mod_4/mod4_uni001_001/","text":"Documentaci\u00f3n JSP Serializaci\u00f3n Es el proceso de enviar y recibir datos en serie (secuencias de bytes), a trav\u00e9s de un flujo. Ya hemos trabajado con flujos: Flujos de car\u00e1cteres Lector: Reader Escrito: Writer Flujos de bytes Lector: InputStream Escritor: OutputStream Dependiendo de lo que lean o escriban, llevar\u00e1n prefijos + File: Acceso a ficheros + Piped: Comunicaci\u00f3n entre programas mediante tuber\u00edas (pipes) + String: Acceso a una cadena en memoria (solo caracteres) + CharArray: Acceso a un array de caracteres en memoria (solo caracteres) + ByteArray: Acceso a un array de bytes en memoria (solo bytes) Por ejemplo: FileReader, FileInputStream Serializaci\u00f3n de objetos. Veamos como podemos escribir un objeto en ByteCode. Para eso debe ser entregado en un flujo de datos, un stream, es decir que el objeto debe ser serializado. El objeto que ser\u00e1 serializado ser\u00e1 el objeto P\u001dersona . Estructura ./ \u251c\u2500\u2500 archivo \u251c\u2500\u2500 bin \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 serializa \u2502 \u251c\u2500\u2500 Persona.class \u2502 \u2514\u2500\u2500 Principal.class \u2514\u2500\u2500 src \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 serializa \u2514\u2500\u2500 Principal.java Es curioso ver en la estructura del proyecto, que existe una unidad de compilaci\u00f3n y dos unidades de salida, esto se debe a que en una unidad de compilaci\u00f3n hay dos clases. Principal.java package cl.lherrera.serializa; import java.io.FileOutputStream; import java.io.ObjectOutputStream; import java.io.Serializable; import java.util.logging.Logger; public class Principal { public static void main(String... args) { Logger logger = Logger.getLogger(\"Principal\"); try( FileOutputStream fileOut = new FileOutputStream(\"archivo\"); ){ // // prueba para saber si escribe // fileOut.write(\"Hola\".getBytes()); Persona persona = new Persona(); persona.setNombre(\"Hugo\"); persona.setEdad(24); ObjectOutputStream objeto = new ObjectOutputStream(fileOut); objeto.writeObject(persona); }catch(Exception e) { e.printStackTrace(); logger.severe(e.getMessage()); } } } class Persona implements Serializable { /** * */ private static final long serialVersionUID = 3554052124635461056L; String nombre; int edad; public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } public int getEdad() { return edad; } public void setEdad(int edad) { this.edad = edad; } } Si el objeto que queremos enviar como OutputSteam , no implementa Serializable , entonces no lo podemos serializar, veamos el comportamiento usando el mismo objeto. package cl.lherrera.serializa; import java.io.FileOutputStream; import java.io.ObjectOutputStream; import java.io.Serializable; import java.util.logging.Logger; public class Principal { public static void main(String... args) { Logger logger = Logger.getLogger(\"Principal\"); try( FileOutputStream fileOut = new FileOutputStream(\"archivo\"); ){ // // prueba para saber si escribe // fileOut.write(\"Hola\".getBytes()); Persona persona = new Persona(); persona.setNombre(\"Hugo\"); persona.setEdad(24); ObjectOutputStream objeto = new ObjectOutputStream(fileOut); objeto.writeObject(persona); }catch(Exception e) { e.printStackTrace(); logger.severe(e.getMessage()); } } } class Persona { String nombre; int edad; public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } public int getEdad() { return edad; } public void setEdad(int edad) { this.edad = edad; } } Arroja el siguiente error: java.io.NotSerializableException: cl.lherrera.serializa.Persona at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1184) at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:348) at cl.lherrera.serializa.Principal.main(Principal.java:23) mar 08, 2020 4:12:35 PM cl.lherrera.serializa.Principal main GRAVE: cl.lherrera.serializa.Persona Los Servlets, extienden de HttpServlet , que a su vez extiende de GenericServlet . Esta \u00faltima clase abstracta implementa serializable, por lo tanto, todos nuestros Servlets son serializables y necesitan private static final long serialVersionUID , para poder identificar el objeto cuado se env\u00ede en forma de Bytes.\u001d Estructura de una URL (Uniform Resourse Locatiion) Recordar que opcionalmente, pude ir un query string con un \"?\" unido por \"&\", donde el espacio en blanco es \"%20\", ejemplo: www.miservicioGet.cl?nombre=Luis%20Herrera&comuna=NuNoa , posee dos argumentos y valores. El n\u00fameto total de puertos que soporta TCP-IP es de: 65536. Algunos de los puertos reservados por defecto para alg\u00fan tipo de aplicaci\u00f3nes son los siguientes: CGI (Common Gateway Interface) v/s Servlets Servlet inspirado en applet , pero como funciona en el lado del servidor es servlet . Los CGI, son aplicaciones que ayudan al servidor a obtener la informaci\u00f3n din\u00e1mica, que no pueden realizar las p\u00e1ginas est\u00e1ticas, como por ejemplo, obtener la hora del servidor. Estos CGI est\u00e1n desarrollados en lenguajes como Perl o PHP, entre otros. Java, posee su propio CGI llamado Servlet, y la ventaja (adem\u00e1s de no tener que programar en otro lenguaje), es que adem\u00e1s de ser una app Helper como CGI, un Servlet, puede ser un cliente J2EE, lo que permite utilizar todas las herramientas disponibles de J2EE, como utilizar sus servicios, procesar peticiones ETC. (Todo lo que puede hacer nuestro Apache Tomcat). Estructura b\u00e1sica de un Servlet // import statements public class DatingServlet extends HttpServlet { public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException { // business logic goes here, depending // on what this servlet is supposed to do // (write to the database, do the query, etc.) PrintWriter out = response.getWriter(); // compose the dynamic HTML page out.println( \"something really ugly goes here\"); } } Ejemplo sencillo del uso de Servlets En este ejemplo, se muestra, como implementar c\u00f3digo HTML, desde java. Esta forma, permite verificar, la forma en que Java puede incluir Html y adem\u00e1s como lo muestra. Estructura: ./ \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 WEB-INF \u2502 \u2514\u2500\u2500 lib \u251c\u2500\u2500 build \u2502 \u2514\u2500\u2500 classes \u2502 \u2514\u2500\u2500 jsp001 \u2502 \u2514\u2500\u2500 HolaHtml.class \u2514\u2500\u2500 src \u2514\u2500\u2500 jsp001 \u2514\u2500\u2500 HolaHtml.java HolaHtml.java package jsp001; import java.io.IOException; import java.io.PrintWriter; import java.io.Serializable; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; @WebServlet(\"/\") public class HolaHtml extends HttpServlet { /** * */ private static final long serialVersionUID = 1920949607610226958L; public String miJsp(String nombre) { StringBuilder htmlText = new StringBuilder(); htmlText.append(\"<!DOCTYPE html>\"); htmlText.append(\"<html lang=\\\"es\\\">\"); htmlText.append(\"<head>\"); htmlText.append(\"<meta charset=\\\"UTF-8\\\">\"); htmlText.append(\"<meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\"); htmlText.append(\"<title>Mi saludo</title>\"); htmlText.append(\"</head>\"); htmlText.append(\"<body>\"); htmlText.append(\"<h1>Hola: \").append(nombre).append(\" </h1>\"); htmlText.append(\"</body>\"); htmlText.append(\"</html>\"); return htmlText.toString(); } @Override protected void doGet( HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { PrintWriter escribeHtml = response.getWriter(); escribeHtml.println(miJsp(\"Luis\")); } } Llamada a: http://localhost:8080/jsp001/ Podemos pasar valores por par\u00e1metros en la URL. package jsp001; import java.io.IOException; import java.io.PrintWriter; import java.io.Serializable; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; @WebServlet(\"/\") public class HolaHtml extends HttpServlet { /** * */ private static final long serialVersionUID = 1920949607610226958L; public String miJsp(String nombre) { StringBuilder htmlText = new StringBuilder(); htmlText.append(\"<!DOCTYPE html>\"); htmlText.append(\"<html lang=\\\"es\\\">\"); htmlText.append(\"<head>\"); htmlText.append(\"<meta charset=\\\"UTF-8\\\">\"); htmlText.append(\"<meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\"); htmlText.append(\"<title>Mi saludo</title>\"); htmlText.append(\"</head>\"); htmlText.append(\"<body>\"); htmlText.append(\"<h1>Hola: \").append(nombre).append(\" </h1>\"); htmlText.append(\"</body>\"); htmlText.append(\"</html>\"); return htmlText.toString(); } @Override protected void doGet( HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { String nombre = request.getParameter(\"nombre\"); PrintWriter escribeHtml = response.getWriter(); escribeHtml.println(miJsp(nombre)); } } Llamada: http://localhost:8080/jsp001/?nombre=Luis o http://localhost:8080/jsp001/?nombre=Luis%20Herrera Se puede ver que escribir c\u00f3digo Html en un println , no es una muy elegante manera de hacer sistemas Web, utilizando Java. BULLET POINTS !! \ud83c\udfb1 HTTP significa (Protocolo de transferencia de hipertexto), y es el protocolo de red, utilizado en la Web. Se ejecuta sobre TCP/IP.(confirmaci\u00f3n y reenv\u00edo de paquetes). HTTP, utiliza request/response , donde el cliente realiza un HTTP request y el servidor entrega de vuelta un HTTP response , entonces el navegador luego, determina c\u00f3mo manejar (seg\u00fan el tipo de contenido de la respuesta). Si la respuesta del servidor es una p\u00e1gina HTML, el HTML se agrega al HTTP response. Un HTTP request , incluye: La URL de solicitud (el recurso al que el cliente est\u00e1 intentando acceder). El m\u00e9todo HTTP (GET, POST, etc.). (Opcionalmente) los datos de los par\u00e1metros del formulario (tambi\u00e9n llamada \u201cquery string\u201d). Una respuesta HTTP incluye un status code , el content-type (tambi\u00e9n conocido como MIME type ) y el contenido real del response , (HTML, imagen, etc.). Un GET request, agrega los datos de un formulario, al final de la URL. Un POST request, incluye los datos de un formulario, en el body del request. Un MIME type ( content-type ), le dice al navegador, qu\u00e9 tipo de datos est\u00e1 a punto de recibir, para que el navegador sepa qu\u00e9 hacer con \u00e9l (renderizar el HTML, mostrar el gr\u00e1fico, reproducir la m\u00fasica, etc.). URL significa (Uniform Resource Locator), (Localizador uniforme de recursos). Cada recurso en la web tiene su propia direcci\u00f3n \u00fanica en este formato. comienza con un protocolo(HTTP por ejemplo), seguido del nombre del servidor, un n\u00famero de puerto opcional y, por lo general, una ruta espec\u00edfica y un nombre de recurso. Tambi\u00e9n puede incluir una cadena de consulta (query string) opcional, si es un GET request. Los servidores web, son muy buenos sirviendo p\u00e1ginas HTML est\u00e1ticas; pero si el sitio, necesita generar datos, de forma din\u00e1mica, (por ejemplo la hora actual del servidor), necesita alg\u00fan tipo de aplicaci\u00f3n auxiliar que pueda capturar esa hora. Una forma 'no-Java' de llamar a estas aplicaciones (La mayor\u00eda escritas con Perl) es CGI (Common Gateway Interface) (interfaz de puerta de enlace com\u00fan). Poner c\u00f3digo HTML dentro de un println() , es muy feo y propenso a errores. JSP, resuelve este problema, permitiendo poner dentro de una p\u00e1gina HTML c\u00f3digo Java y no c\u00f3digo HTML dentro de Java. \u00bfQu\u00e9 es un contenedor? You get to focus all your energy on making a fabulous online bubble wrap store, and leave the underlying services like security and JSP processing up to the container. Los Servlets, no poseen un m\u00e9todo main() . Ellos, est\u00e1n bajo el control de otra aplicaci\u00f3n llamada Container \u001d. Por ejemplo ( Apache (server app) Tomcat (container app) ). Son ellos quienes utilizan a los servlet para mantener la comunicaci\u00f3n entre el usuario y el servidor. Si no existiera este contenedor, utilizando Sockets, tendr\u00edamos que desarrollar todas las tareas que realiza el contenedor, las cuales son siempre las mismas es por ello que lo mejor es utilizar estas herramientas que ya poseen lo necesario para mantener esta comunicaci\u00f3n entre cliente y servidor de la forma en que lo conocemos hoy en d\u00eda. Los contenedores traen servicios muy \u00fatiles para nuestras aplicaciones web. Tales como: + Soporte de comunicaci\u00f3n. + Administraci\u00f3n de los ciclos de vida. + Soporte m\u00faltiples hilos. + Seguridad declarativa. (sencillas opciones de seguridad). + Soporte para JSP. \u00bfC\u00f3mo funciona un contenedor? El usuario, utiliza un enlace con una solicitud din\u00e1mica, es decir, el c\u00f3digo que se debe generar no ser\u00e1 una web est\u00e1tica. El servidor al notar que la solicitud va a ser atendida por un servlet, crea dos objetos HttpServletRequest y el HttpServletResponse . Busca al servlet correcto que se encargue de la solicitud, basado en la URL en el request. Crea y coloca un hilo para esa solicitud y le pasa el request y response al servlet encontrado. Dependiendo del tipo de solicitud, el contenedor llamar\u00e1 a alguno de los servicios (m\u00e9todos) del servlet, por ejemplo (doGet() o doPost()) El hilo se completa, el contenedor convierte el objeto response a HTTP response, lo env\u00eda de vuelta al cliente, luego, elimina los objetos HttpServletRequest y el HttpServletResponse . Cargar un WAR en el servidor \ud83e\udd4b Lo primero es crear un proyecto que contenga un Servlet. ./ \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 WEB-INF \u2502 \u251c\u2500\u2500 lib \u2502 \u2514\u2500\u2500 web.xml \u251c\u2500\u2500 build \u2502 \u2514\u2500\u2500 classes \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 servlets \u2502 \u2514\u2500\u2500 SaludaServlet.class \u2514\u2500\u2500 src \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 servlets \u2514\u2500\u2500 SaludaServlet.java /pruebaWar/src/cl/lherrera/servlets/SaludaServlet.java package cl.lherrera.servlets; import java.io.IOException; import java.io.PrintWriter; import javax.servlet.ServletException; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.util.logging.Logger; public class SaludaServlet extends HttpServlet{ final Logger logger = Logger.getLogger(this.getClass().getName()); /** * */ private static final long serialVersionUID = -2176720027407455063L; @Override protected void doGet( HttpServletRequest request, HttpServletResponse response) throws ServletException { try { PrintWriter escribe = response.getWriter(); escribe.println(\"<h1> Hola mundo !! </h1>\"); } catch (IOException e) { logger.severe(e.getMessage()); } } } /pruebaWar/WebContent/WEB-INF/web.xml Se indica la ubicaci\u00f3n de la clase y cual ser\u00e1 al servicio que responder\u00e1 url-pattern . <?xml version=\"1.0\" encoding=\"UTF-8\"?> <web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\" version=\"3.1\"> <servlet> <servlet-name>saluda servlet</servlet-name> <servlet-class>cl.lherrera.servlets.SaludaServlet</servlet-class> </servlet> <servlet-mapping> <servlet-name>saluda servlet</servlet-name> <url-pattern>/saluda</url-pattern> </servlet-mapping> </web-app> Luego hay que configurar Apache Tomcat para esta tarea: En: \u200e\u2068Macintosh HD\u2069/\u2068Aplicaciones\u2069/\u2068contenedor\u2069/\u2068apache-tomcat-9.0.31\u2069/\u2068conf\u2069 Definimos las credenciales para poder ingresar al administrador de apache <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> <tomcat-users xmlns=\"http://tomcat.apache.org/xml\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://tomcat.apache.org/xml tomcat-users.xsd\" version=\"1.0\"> <!-- NOTE: By default, no user is included in the \"manager-gui\" role required to operate the \"/manager/html\" web application. If you wish to use this app, you must define such a user - the username and password are arbitrary. It is strongly recommended that you do NOT use one of the users in the commented out section below since they are intended for use with the examples web application. --> <!-- NOTE: The sample user and role entries below are intended for use with the examples web application. They are wrapped in a comment and thus are ignored when reading this file. If you wish to configure these users for use with the examples web application, do not forget to remove the <!.. ..> that surrounds them. You will also need to set the passwords to something appropriate. --> <!-- <role rolename=\"tomcat\"/> <role rolename=\"role1\"/> <user username=\"tomcat\" password=\"<must-be-changed>\" roles=\"tomcat\"/> <user username=\"both\" password=\"<must-be-changed>\" roles=\"tomcat,role1\"/> <user username=\"role1\" password=\"<must-be-changed>\" roles=\"role1\"/> --> <!-- se agrega este para poder entrar en la administraci\u00f3n --> <role rolename=\"manager-gui\"/> <user username=\"admin\" password=\"admin\" roles=\"manager-gui\"/> </tomcat-users> Lo permitimos todo: chmod -R 777 apache-tomcat-9.0.31 Luego para evitar configurar el path, nos posicionamos en /Applications/contenedor/apache-tomcat-9.0.31 y levantamos el servidor: \u279c apache-tomcat-9.0.31 source bin/startup.sh As\u00ed desde http://localhost:8080/ tendremos la ventana de administaci\u00f3n de tomcat. Hay que ir a la opci\u00f3n Manager App , nos pedir\u00e1 usuario y contrase\u00f1a. Estas ya las hemos configurado y son. admin/admin . En esta ventana podremos \"instalar\" nuestra aplicaci\u00f3n. Para esto, debemos exportar la aplicaci\u00f3n como WAR y este se debe importar desde la administraci\u00f3n de Apache Tomcat. Luego llamamos a la app y al servicio que definimos en el web.xml . http://localhost:8080/pruebaWar/saluda , deber\u00eda imprimir el contenido del servlet en el navegador.","title":"Documentaci\u00f3n JSP"},{"location":"modulos/mod_4/mod4_uni001_001/#documentacion-jsp","text":"","title":"Documentaci\u00f3n JSP"},{"location":"modulos/mod_4/mod4_uni001_001/#serializacion","text":"Es el proceso de enviar y recibir datos en serie (secuencias de bytes), a trav\u00e9s de un flujo. Ya hemos trabajado con flujos: Flujos de car\u00e1cteres Lector: Reader Escrito: Writer Flujos de bytes Lector: InputStream Escritor: OutputStream Dependiendo de lo que lean o escriban, llevar\u00e1n prefijos + File: Acceso a ficheros + Piped: Comunicaci\u00f3n entre programas mediante tuber\u00edas (pipes) + String: Acceso a una cadena en memoria (solo caracteres) + CharArray: Acceso a un array de caracteres en memoria (solo caracteres) + ByteArray: Acceso a un array de bytes en memoria (solo bytes) Por ejemplo: FileReader, FileInputStream","title":"Serializaci\u00f3n"},{"location":"modulos/mod_4/mod4_uni001_001/#serializacion-de-objetos","text":"Veamos como podemos escribir un objeto en ByteCode. Para eso debe ser entregado en un flujo de datos, un stream, es decir que el objeto debe ser serializado. El objeto que ser\u00e1 serializado ser\u00e1 el objeto P\u001dersona . Estructura ./ \u251c\u2500\u2500 archivo \u251c\u2500\u2500 bin \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 serializa \u2502 \u251c\u2500\u2500 Persona.class \u2502 \u2514\u2500\u2500 Principal.class \u2514\u2500\u2500 src \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 serializa \u2514\u2500\u2500 Principal.java Es curioso ver en la estructura del proyecto, que existe una unidad de compilaci\u00f3n y dos unidades de salida, esto se debe a que en una unidad de compilaci\u00f3n hay dos clases. Principal.java package cl.lherrera.serializa; import java.io.FileOutputStream; import java.io.ObjectOutputStream; import java.io.Serializable; import java.util.logging.Logger; public class Principal { public static void main(String... args) { Logger logger = Logger.getLogger(\"Principal\"); try( FileOutputStream fileOut = new FileOutputStream(\"archivo\"); ){ // // prueba para saber si escribe // fileOut.write(\"Hola\".getBytes()); Persona persona = new Persona(); persona.setNombre(\"Hugo\"); persona.setEdad(24); ObjectOutputStream objeto = new ObjectOutputStream(fileOut); objeto.writeObject(persona); }catch(Exception e) { e.printStackTrace(); logger.severe(e.getMessage()); } } } class Persona implements Serializable { /** * */ private static final long serialVersionUID = 3554052124635461056L; String nombre; int edad; public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } public int getEdad() { return edad; } public void setEdad(int edad) { this.edad = edad; } } Si el objeto que queremos enviar como OutputSteam , no implementa Serializable , entonces no lo podemos serializar, veamos el comportamiento usando el mismo objeto. package cl.lherrera.serializa; import java.io.FileOutputStream; import java.io.ObjectOutputStream; import java.io.Serializable; import java.util.logging.Logger; public class Principal { public static void main(String... args) { Logger logger = Logger.getLogger(\"Principal\"); try( FileOutputStream fileOut = new FileOutputStream(\"archivo\"); ){ // // prueba para saber si escribe // fileOut.write(\"Hola\".getBytes()); Persona persona = new Persona(); persona.setNombre(\"Hugo\"); persona.setEdad(24); ObjectOutputStream objeto = new ObjectOutputStream(fileOut); objeto.writeObject(persona); }catch(Exception e) { e.printStackTrace(); logger.severe(e.getMessage()); } } } class Persona { String nombre; int edad; public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } public int getEdad() { return edad; } public void setEdad(int edad) { this.edad = edad; } } Arroja el siguiente error: java.io.NotSerializableException: cl.lherrera.serializa.Persona at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1184) at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:348) at cl.lherrera.serializa.Principal.main(Principal.java:23) mar 08, 2020 4:12:35 PM cl.lherrera.serializa.Principal main GRAVE: cl.lherrera.serializa.Persona Los Servlets, extienden de HttpServlet , que a su vez extiende de GenericServlet . Esta \u00faltima clase abstracta implementa serializable, por lo tanto, todos nuestros Servlets son serializables y necesitan private static final long serialVersionUID , para poder identificar el objeto cuado se env\u00ede en forma de Bytes.","title":"Serializaci\u00f3n de objetos."},{"location":"modulos/mod_4/mod4_uni001_001/#estructura-de-una-url-uniform-resourse-locatiion","text":"Recordar que opcionalmente, pude ir un query string con un \"?\" unido por \"&\", donde el espacio en blanco es \"%20\", ejemplo: www.miservicioGet.cl?nombre=Luis%20Herrera&comuna=NuNoa , posee dos argumentos y valores. El n\u00fameto total de puertos que soporta TCP-IP es de: 65536. Algunos de los puertos reservados por defecto para alg\u00fan tipo de aplicaci\u00f3nes son los siguientes:","title":"Estructura de una URL (Uniform Resourse Locatiion)"},{"location":"modulos/mod_4/mod4_uni001_001/#cgi-common-gateway-interface-vs-servlets","text":"Servlet inspirado en applet , pero como funciona en el lado del servidor es servlet . Los CGI, son aplicaciones que ayudan al servidor a obtener la informaci\u00f3n din\u00e1mica, que no pueden realizar las p\u00e1ginas est\u00e1ticas, como por ejemplo, obtener la hora del servidor. Estos CGI est\u00e1n desarrollados en lenguajes como Perl o PHP, entre otros. Java, posee su propio CGI llamado Servlet, y la ventaja (adem\u00e1s de no tener que programar en otro lenguaje), es que adem\u00e1s de ser una app Helper como CGI, un Servlet, puede ser un cliente J2EE, lo que permite utilizar todas las herramientas disponibles de J2EE, como utilizar sus servicios, procesar peticiones ETC. (Todo lo que puede hacer nuestro Apache Tomcat).","title":"CGI (Common Gateway Interface) v/s Servlets"},{"location":"modulos/mod_4/mod4_uni001_001/#estructura-basica-de-un-servlet","text":"// import statements public class DatingServlet extends HttpServlet { public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException { // business logic goes here, depending // on what this servlet is supposed to do // (write to the database, do the query, etc.) PrintWriter out = response.getWriter(); // compose the dynamic HTML page out.println( \"something really ugly goes here\"); } }","title":"Estructura b\u00e1sica de un Servlet"},{"location":"modulos/mod_4/mod4_uni001_001/#ejemplo-sencillo-del-uso-de-servlets","text":"En este ejemplo, se muestra, como implementar c\u00f3digo HTML, desde java. Esta forma, permite verificar, la forma en que Java puede incluir Html y adem\u00e1s como lo muestra. Estructura: ./ \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 WEB-INF \u2502 \u2514\u2500\u2500 lib \u251c\u2500\u2500 build \u2502 \u2514\u2500\u2500 classes \u2502 \u2514\u2500\u2500 jsp001 \u2502 \u2514\u2500\u2500 HolaHtml.class \u2514\u2500\u2500 src \u2514\u2500\u2500 jsp001 \u2514\u2500\u2500 HolaHtml.java HolaHtml.java package jsp001; import java.io.IOException; import java.io.PrintWriter; import java.io.Serializable; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; @WebServlet(\"/\") public class HolaHtml extends HttpServlet { /** * */ private static final long serialVersionUID = 1920949607610226958L; public String miJsp(String nombre) { StringBuilder htmlText = new StringBuilder(); htmlText.append(\"<!DOCTYPE html>\"); htmlText.append(\"<html lang=\\\"es\\\">\"); htmlText.append(\"<head>\"); htmlText.append(\"<meta charset=\\\"UTF-8\\\">\"); htmlText.append(\"<meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\"); htmlText.append(\"<title>Mi saludo</title>\"); htmlText.append(\"</head>\"); htmlText.append(\"<body>\"); htmlText.append(\"<h1>Hola: \").append(nombre).append(\" </h1>\"); htmlText.append(\"</body>\"); htmlText.append(\"</html>\"); return htmlText.toString(); } @Override protected void doGet( HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { PrintWriter escribeHtml = response.getWriter(); escribeHtml.println(miJsp(\"Luis\")); } } Llamada a: http://localhost:8080/jsp001/ Podemos pasar valores por par\u00e1metros en la URL. package jsp001; import java.io.IOException; import java.io.PrintWriter; import java.io.Serializable; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; @WebServlet(\"/\") public class HolaHtml extends HttpServlet { /** * */ private static final long serialVersionUID = 1920949607610226958L; public String miJsp(String nombre) { StringBuilder htmlText = new StringBuilder(); htmlText.append(\"<!DOCTYPE html>\"); htmlText.append(\"<html lang=\\\"es\\\">\"); htmlText.append(\"<head>\"); htmlText.append(\"<meta charset=\\\"UTF-8\\\">\"); htmlText.append(\"<meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\"); htmlText.append(\"<title>Mi saludo</title>\"); htmlText.append(\"</head>\"); htmlText.append(\"<body>\"); htmlText.append(\"<h1>Hola: \").append(nombre).append(\" </h1>\"); htmlText.append(\"</body>\"); htmlText.append(\"</html>\"); return htmlText.toString(); } @Override protected void doGet( HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { String nombre = request.getParameter(\"nombre\"); PrintWriter escribeHtml = response.getWriter(); escribeHtml.println(miJsp(nombre)); } } Llamada: http://localhost:8080/jsp001/?nombre=Luis o http://localhost:8080/jsp001/?nombre=Luis%20Herrera Se puede ver que escribir c\u00f3digo Html en un println , no es una muy elegante manera de hacer sistemas Web, utilizando Java.","title":"Ejemplo sencillo del uso de Servlets"},{"location":"modulos/mod_4/mod4_uni001_001/#bullet-points","text":"HTTP significa (Protocolo de transferencia de hipertexto), y es el protocolo de red, utilizado en la Web. Se ejecuta sobre TCP/IP.(confirmaci\u00f3n y reenv\u00edo de paquetes). HTTP, utiliza request/response , donde el cliente realiza un HTTP request y el servidor entrega de vuelta un HTTP response , entonces el navegador luego, determina c\u00f3mo manejar (seg\u00fan el tipo de contenido de la respuesta). Si la respuesta del servidor es una p\u00e1gina HTML, el HTML se agrega al HTTP response. Un HTTP request , incluye: La URL de solicitud (el recurso al que el cliente est\u00e1 intentando acceder). El m\u00e9todo HTTP (GET, POST, etc.). (Opcionalmente) los datos de los par\u00e1metros del formulario (tambi\u00e9n llamada \u201cquery string\u201d). Una respuesta HTTP incluye un status code , el content-type (tambi\u00e9n conocido como MIME type ) y el contenido real del response , (HTML, imagen, etc.). Un GET request, agrega los datos de un formulario, al final de la URL. Un POST request, incluye los datos de un formulario, en el body del request. Un MIME type ( content-type ), le dice al navegador, qu\u00e9 tipo de datos est\u00e1 a punto de recibir, para que el navegador sepa qu\u00e9 hacer con \u00e9l (renderizar el HTML, mostrar el gr\u00e1fico, reproducir la m\u00fasica, etc.). URL significa (Uniform Resource Locator), (Localizador uniforme de recursos). Cada recurso en la web tiene su propia direcci\u00f3n \u00fanica en este formato. comienza con un protocolo(HTTP por ejemplo), seguido del nombre del servidor, un n\u00famero de puerto opcional y, por lo general, una ruta espec\u00edfica y un nombre de recurso. Tambi\u00e9n puede incluir una cadena de consulta (query string) opcional, si es un GET request. Los servidores web, son muy buenos sirviendo p\u00e1ginas HTML est\u00e1ticas; pero si el sitio, necesita generar datos, de forma din\u00e1mica, (por ejemplo la hora actual del servidor), necesita alg\u00fan tipo de aplicaci\u00f3n auxiliar que pueda capturar esa hora. Una forma 'no-Java' de llamar a estas aplicaciones (La mayor\u00eda escritas con Perl) es CGI (Common Gateway Interface) (interfaz de puerta de enlace com\u00fan). Poner c\u00f3digo HTML dentro de un println() , es muy feo y propenso a errores. JSP, resuelve este problema, permitiendo poner dentro de una p\u00e1gina HTML c\u00f3digo Java y no c\u00f3digo HTML dentro de Java.","title":"BULLET POINTS !! \ud83c\udfb1"},{"location":"modulos/mod_4/mod4_uni001_001/#que-es-un-contenedor","text":"You get to focus all your energy on making a fabulous online bubble wrap store, and leave the underlying services like security and JSP processing up to the container. Los Servlets, no poseen un m\u00e9todo main() . Ellos, est\u00e1n bajo el control de otra aplicaci\u00f3n llamada Container \u001d. Por ejemplo ( Apache (server app) Tomcat (container app) ). Son ellos quienes utilizan a los servlet para mantener la comunicaci\u00f3n entre el usuario y el servidor. Si no existiera este contenedor, utilizando Sockets, tendr\u00edamos que desarrollar todas las tareas que realiza el contenedor, las cuales son siempre las mismas es por ello que lo mejor es utilizar estas herramientas que ya poseen lo necesario para mantener esta comunicaci\u00f3n entre cliente y servidor de la forma en que lo conocemos hoy en d\u00eda. Los contenedores traen servicios muy \u00fatiles para nuestras aplicaciones web. Tales como: + Soporte de comunicaci\u00f3n. + Administraci\u00f3n de los ciclos de vida. + Soporte m\u00faltiples hilos. + Seguridad declarativa. (sencillas opciones de seguridad). + Soporte para JSP.","title":"\u00bfQu\u00e9 es un contenedor?"},{"location":"modulos/mod_4/mod4_uni001_001/#como-funciona-un-contenedor","text":"El usuario, utiliza un enlace con una solicitud din\u00e1mica, es decir, el c\u00f3digo que se debe generar no ser\u00e1 una web est\u00e1tica. El servidor al notar que la solicitud va a ser atendida por un servlet, crea dos objetos HttpServletRequest y el HttpServletResponse . Busca al servlet correcto que se encargue de la solicitud, basado en la URL en el request. Crea y coloca un hilo para esa solicitud y le pasa el request y response al servlet encontrado. Dependiendo del tipo de solicitud, el contenedor llamar\u00e1 a alguno de los servicios (m\u00e9todos) del servlet, por ejemplo (doGet() o doPost()) El hilo se completa, el contenedor convierte el objeto response a HTTP response, lo env\u00eda de vuelta al cliente, luego, elimina los objetos HttpServletRequest y el HttpServletResponse .","title":"\u00bfC\u00f3mo funciona un contenedor?"},{"location":"modulos/mod_4/mod4_uni001_001/#cargar-un-war-en-el-servidor","text":"Lo primero es crear un proyecto que contenga un Servlet. ./ \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 WEB-INF \u2502 \u251c\u2500\u2500 lib \u2502 \u2514\u2500\u2500 web.xml \u251c\u2500\u2500 build \u2502 \u2514\u2500\u2500 classes \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 servlets \u2502 \u2514\u2500\u2500 SaludaServlet.class \u2514\u2500\u2500 src \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 servlets \u2514\u2500\u2500 SaludaServlet.java /pruebaWar/src/cl/lherrera/servlets/SaludaServlet.java package cl.lherrera.servlets; import java.io.IOException; import java.io.PrintWriter; import javax.servlet.ServletException; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.util.logging.Logger; public class SaludaServlet extends HttpServlet{ final Logger logger = Logger.getLogger(this.getClass().getName()); /** * */ private static final long serialVersionUID = -2176720027407455063L; @Override protected void doGet( HttpServletRequest request, HttpServletResponse response) throws ServletException { try { PrintWriter escribe = response.getWriter(); escribe.println(\"<h1> Hola mundo !! </h1>\"); } catch (IOException e) { logger.severe(e.getMessage()); } } } /pruebaWar/WebContent/WEB-INF/web.xml Se indica la ubicaci\u00f3n de la clase y cual ser\u00e1 al servicio que responder\u00e1 url-pattern . <?xml version=\"1.0\" encoding=\"UTF-8\"?> <web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\" version=\"3.1\"> <servlet> <servlet-name>saluda servlet</servlet-name> <servlet-class>cl.lherrera.servlets.SaludaServlet</servlet-class> </servlet> <servlet-mapping> <servlet-name>saluda servlet</servlet-name> <url-pattern>/saluda</url-pattern> </servlet-mapping> </web-app> Luego hay que configurar Apache Tomcat para esta tarea: En: \u200e\u2068Macintosh HD\u2069/\u2068Aplicaciones\u2069/\u2068contenedor\u2069/\u2068apache-tomcat-9.0.31\u2069/\u2068conf\u2069 Definimos las credenciales para poder ingresar al administrador de apache <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> <tomcat-users xmlns=\"http://tomcat.apache.org/xml\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://tomcat.apache.org/xml tomcat-users.xsd\" version=\"1.0\"> <!-- NOTE: By default, no user is included in the \"manager-gui\" role required to operate the \"/manager/html\" web application. If you wish to use this app, you must define such a user - the username and password are arbitrary. It is strongly recommended that you do NOT use one of the users in the commented out section below since they are intended for use with the examples web application. --> <!-- NOTE: The sample user and role entries below are intended for use with the examples web application. They are wrapped in a comment and thus are ignored when reading this file. If you wish to configure these users for use with the examples web application, do not forget to remove the <!.. ..> that surrounds them. You will also need to set the passwords to something appropriate. --> <!-- <role rolename=\"tomcat\"/> <role rolename=\"role1\"/> <user username=\"tomcat\" password=\"<must-be-changed>\" roles=\"tomcat\"/> <user username=\"both\" password=\"<must-be-changed>\" roles=\"tomcat,role1\"/> <user username=\"role1\" password=\"<must-be-changed>\" roles=\"role1\"/> --> <!-- se agrega este para poder entrar en la administraci\u00f3n --> <role rolename=\"manager-gui\"/> <user username=\"admin\" password=\"admin\" roles=\"manager-gui\"/> </tomcat-users> Lo permitimos todo: chmod -R 777 apache-tomcat-9.0.31 Luego para evitar configurar el path, nos posicionamos en /Applications/contenedor/apache-tomcat-9.0.31 y levantamos el servidor: \u279c apache-tomcat-9.0.31 source bin/startup.sh As\u00ed desde http://localhost:8080/ tendremos la ventana de administaci\u00f3n de tomcat. Hay que ir a la opci\u00f3n Manager App , nos pedir\u00e1 usuario y contrase\u00f1a. Estas ya las hemos configurado y son. admin/admin . En esta ventana podremos \"instalar\" nuestra aplicaci\u00f3n. Para esto, debemos exportar la aplicaci\u00f3n como WAR y este se debe importar desde la administraci\u00f3n de Apache Tomcat. Luego llamamos a la app y al servicio que definimos en el web.xml . http://localhost:8080/pruebaWar/saluda , deber\u00eda imprimir el contenido del servlet en el navegador.","title":"Cargar un WAR en el servidor \ud83e\udd4b"},{"location":"modulos/mod_4/mod4_uni001_002/","text":"JSTL - Tags Core Tags Llamado: <%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %> Scopes Se definen los alcances ya que los tags poseen un alcance por defecto llamado page , pero los scopes son: + page + request + session + aplicaton Cada uno de estos scopes, poseen el alcance de lo que dure cada uno de los expuestos scopes. El scope por defecto es page , este dura lo que dura la p\u00e1gina. c:out Muestra el resultado de una expresi\u00f3n (HTML), similar a la forma en que funciona la etiqueta <% = ...%> . <%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %> <html> <head> <title>Tag Example</title> </head> <body> <c:out value=\"${'Hola mundo'}\" /> </body> </html> c:import Importa c\u00f3digo html desde una URL o una ruta relativa. Se puede traer el text HTML o los objetos del dom, aunque esta \u00faltima forma es la m\u00e1s \u00fatil. Se llama de la siguiente forma, el atributo var es el nombre de la variable, que contendr\u00e1 esta llamada, el atributo url contiene <c:import var=\"staticData\" url=\"/static.html\"/> Una vez que ya tenemos la variable con el contenido est\u00e1tico, podemos imprimirlo, el atributo escapeXml=\"false\" indica que no queremos el texto, que lo que realmente queremos es el Dom que forma ese texto. <c:out value=\"${staticData}\" escapeXml=\"false\"/> <c:out value=\"${datastaticData\" escapeXml=\"false\"/> Podemos llamar a un Servlet, as\u00ed tenemos l\u00f3gica de negocio antes de un contenido est\u00e1tico. <c:import var=\"data\" url=\"/select\"/> <c:out value=\"${data}\" escapeXml=\"false\"/> Se puede llamat a una web completa mientas esta \u00faltima lo permita. <c:import var=\"data\" url=\"https://jsonplaceholder.typicode.com/users/1\"/> <c:out value=\"${data}\" escapeXml=\"false\"/> Podemos traer contenido est\u00e1tico <c:import var=\"data\" url=\"web.html\"/> <c:out value=\"${data}\" escapeXml=\"false\"/> Podemos obtener el contenido de un JSP <c:import var=\"data\" url=\"web.jsp\"/> <c:out value=\"${data}\" escapeXml=\"false\"/> Estos ejemplos son con direcciones relativas, directamente bajo WebContent . c:set Asignamos una variable a un valor, como se har\u00eda en un diccionario, donde var es la clave y value es el valor. Se le suele dar un scope de session, para que estas variables duren lo que dura la sesi\u00f3n. <c:set var=\"valor\" scope=\"session\" value=\"${5*4}\"/> <c:out value=\"${valor}\"/> c:remove Quita alguna variable seteada en alg\u00fan scope. <!-- seteo de variable --> <c:set var=\"income\" scope=\"session\" value=\"${4000*4}\"/> <p>Valor antes de remover: <c:out value=\"${income}\"/></p> <!-- ac\u00e1 se remueve la variable seteada --> <c:remove var=\"income\"/> <p>Despu\u00e9s de remover es: <c:out value=\"${income}\"/></p> c:if Funciona igual que cualquier if imperativo; pero la evaluaci\u00f3n de verdad, se especifica con el atributo test . <!-- seteamos un valor a una variable --> <c:set var=\"income\" scope=\"session\" value=\"${4000*4}\"/> <!-- eval\u00faa una condici\u00f3n --> <c:if test=\"${income > 8000}\"> <p>El valor es: <c:out value=\"${income}\"/><p> </c:if> c:catch Usada para atrapar exceptions . Usada generalmente, cuando se necesita manejar alg\u00fan error y que la vista haga algo si esto ocurre. En el siguiente ejemplo si la variable que captura la excepci\u00f3n, no es nula, se muestra algo en la vista. <c:catch var =\"catchtheException\"> <% int x = 2/0;%> </c:catch> <c:if test = \"${catchtheException != null}\"> <p>Hay una excepci\u00f3n : ${catchtheException} <br /> y esta es: ${catchtheException.message}</p> </c:if> c:choose, c:when y c:otherwise (Elige, cuando, de otra forma). En reemplazo de un if -> else , llegan estas etiquetas que si las comparamos espec\u00edficamente con la programaci\u00f3n imperativa de Java, se podr\u00eda parecer m\u00e1s a un switch . <%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %> <html> <head> <title>Ejemplo JSLT:core</title> </head> <body> <c:set var=\"ingresos\" scope=\"session\" value=\"${100000}\"/> <p>Sus ingresos son : <c:out value=\"${ingresos}\"/></p> <c:choose> <c:when test=\"${ingresos <= 1000}\"> No muy buenos ingresos. </c:when> <c:when test=\"${ingresos > 10000}\"> ingresos muy buenos. </c:when> <c:otherwise> ingresos indeterminados </c:otherwise> </c:choose> </body> </html> c:forEach <!-- cuando queramos que un ciclo se repita n veces. --> <c:forEach var=\"j\" begin=\"1\" end=\"3\"> Item <c:out value=\"${j}\"/><p> </c:forEach> <!-- cuando queramos que una colecci\u00f3n sea recorrida. (como el caso de llenar una tabla) --> <c:set var=\"nombres\" value='<%=new String[] { \"Hugo\", \"Paco\", \"Luis\" }%>' scope=\"session\" /> <ul> <c:forEach var=\"nombre\" items=\"${nombres}\"> <li> <c:out value=\"${nombre}\" /> </li> </c:forEach> </ul> <!-- Usando FN... ya hablaremos de ello --> <c:set var=\"nombres\" value=\"${fn:split('Hugo, Paco, Luis', ',')}\" scope=\"application\" /> <ul> <c:forEach var=\"nombre\" items=\"${nombres}\"> <li><c:out value=\"${nombre}\" /></li> </c:forEach> </ul> c:forTokens Proporciona una especie de split , con el que podemos transformar un string en un arreglo y recorrer sus elementos. <ul> <c:forTokens var='nombre' items='${\"Hugo,Paco,Luis\"}' delims=','> <li><c:out value=\"${nombre}\" /></li> </c:forTokens> </ul> c:url Nos ayuda a completar nuestra URL, a\u00f1adiendo la URI completa, enfocando la atenci\u00f3n solamente en el servicio o el archivo final, como lo ser\u00eda un recurso interno como un archivo JS, o CSS. <!-- URL: http://localhost:8080/pruebaWar/ --> <c:url value=\"/\"/> <!-- Salida: /pruebaWar/ --> c:param Agrega el query string , a la URL. De esta forma no hay que preocuparse por el form\u00e1to que esta deba llevar. <!-- URL: http://localhost:8080/pruebaWar/index.jsp --> <c:url value=\"/index1.jsp\" var=\"completeURL\"> <c:param name=\"trackingId\" value=\"786\" /> <c:param name=\"user\" value=\"Nakul\" /> </c:url> <!-- Salida: /pruebaWar/index1.jsp?trackingId=786&user=Nakul --> <c:out value=\"${completeURL}\" /> c:redirect Redirecciona; pero no es como una etiqueta <a href...> , si esta etiqueta se carga, rirecciona inmediatamete. Usualmente va en condicionales. <c:redirect url=\"http://google.com\"/> Function Tags Transformar cadenas en listas, preguntar por si una cadena comienza con alg\u00fan car\u00e1cter. Como la clase utilitaria de cadenas, estas etiquetas nos ayudan a manipular cadenas. Llamado: <%@ taglib uri=\"http://java.sun.com/jsp/jstl/functions\" prefix=\"fn\" %> \u001d fn:contains() M\u00e9todo contenedor: boolean contains(java.lang.String, java.lang.String) Retorna verdadero o falso, si la cadena en el primer argumento, contiene la cadena entregada en el segundo argumento. <!-- true --> <c:out value='${fn:contains(\"hola mundo\",\"mundo\") }'></c:out> fn:containsIgnoreCase() M\u00e9todo contenedor: boolean containsIgnoreCase(java.lang.String, java.lang.String) Retorna verdadero o falso, si la cadena en el primer argumento, contiene la cadena entregada en el segundo argumento, ignorando si son may\u00fasculas o min\u00fasculas. <!-- true --> <c:out value='${fn:containsIgnoreCase(\"hola mundo\",\"MuNdo\") }'></c:out> fn:startsWith() M\u00e9todo contenedordor: boolean startsWith(java.lang.String, java.lang.String) Retorna verdadero o falso, si la cadena en el primer argumento, comienza con la cadena entregada en el segundo argumento (Case sensintive). <!-- true --> <c:out value='${fn:startsWith(\"hola mundo\",\"mundo\") }'></c:out> fn:endsWith() M\u00e9todo contenedordor: boolean endsWith(java.lang.String, java.lang.String) Retorna verdadero o falso, si la cadena en el primer argumento, termina con la cadena entregada en el segundo argumento (Case sensintive). <!-- true --> <c:out value='${fn:endsWith(\"hola mundo\",\"mundo\") }'></c:out> fn:escapeXml() M\u00e9todo contenedor: java.lang.String escapeXml(java.lang.String) Escapa todos los car\u00e1cteres especiales de etiquetado, para ser interpretado como objetos del documento HTML. Se puede ver que <c:out> posee un atributo escapeXml=\"true\" por defecto que escapa al menos una vez. Es por esto que lo que est\u00e1 en su atributo value escapa al menos una vez. Escapado: ${fn:escapeXml(\"<strong>Hola mundo</strong>\")}<br /> Mismo efecto-c:out : <c:out value='${fn:escapeXml(\"<strong>Hola mundo</strong>\")}' escapeXml=\"false\"></c:out><br /> <hr /> No escapado: ${\"<strong>Hola mundo</strong>\"}<br /> Mismo efecto-c:out: <c:out value='<strong>Hola mundo</strong>' escapeXml=\"false\"></c:out><br /> <hr /> Raro c:out: <c:out value='${fn:escapeXml(\"<strong>Hola mundo</strong>\")}' escapeXml=\"true\"></c:out><br /> Raro Mismo efecto-c:out: <c:out value='${fn:escapeXml(\"<strong>Hola mundo</strong>\")}' ></c:out><br /> fn:indexOf() M\u00e9todo contenedor: int indexOf(java.lang.String, java.lang.String) Retorna el \u00edndice donde comienza la cadena. Comenzando en cero. <!-- 0 --> <c:out value='${fn:indexOf(\"hola mundo\", \"hola\") }'></c:out> <!-- 1 --> <c:out value='${fn:indexOf(\"hola mundo\", \"ola\") }'></c:out> fn:trim() M\u00e9todo contenedor: java.lang.String trim(java.lang.String) \u001d Remueve los espacios que existan al principio y al final de la cadena argumentada. <!-- :::hola mundo::: --> <c:out value='${\":::\"}${fn:trim(\" hola mundo \")}${\":::\"}'></c:out> fn:split() M\u00e9todo contenedor: java.lang.String[] split(java.lang.String, java.lang.String) \u001d Transforma una cadena de car\u00e1cteres en un arreglo de caracteres. Se utiliza un patr\u00f3n de separaci\u00f3n. Para este ejemplo ser\u00e1 una coma. <c:set var=\"nombres\" value=\"${fn:split('Hugo, Paco, Luis', ',')}\" scope=\"application\" /> <ul> <c:forEach var=\"nombre\" items=\"${nombres}\"> <li><c:out value=\"${nombre}\" /></li> </c:forEach> </ul> fn:join() M\u00e9todo contenedor: java.lang.String[] join(java.lang.String, java.lang.String) \u001d Transforma un arreglo de caracteres en una cadena de car\u00e1cteres . Se utiliza un patr\u00f3n de uni\u00f3n. Para este ejemplo ser\u00e1 una coma. <c:set var=\"nombres\" value=\"${fn:split('Hugo,Paco,Luis', ',')}\" scope=\"application\" /> <c:set var=\"unidos\" value=\"${fn:join(nombres, ',')}\" scope=\"application\" /> <c:out value=\"${unidos}\" /> fn:toLowerCase(), fn:toUpperCase() M\u00e9todo contenedor: String fn:toLowerCase(String input), String fn:toUpperCase(String input) \u001d Transforman una cadena de caracteres en min\u00fasculas o may\u00fasculas respectivamente. <c:out value='${fn:toLowerCase(\"MAY\u00daSCULA\")}' /> <hr /> <c:out value='${fn:toUpperCase(\"min\u00fascula\")}' /> fn:substring() M\u00e9todo contenedor: String fn:substring(String inputstring, int start, int end) \u001d Obtiene una sub cadena, determinado por el segundo y tercer argumento, marcados como inicio y el largo. <!-- ABC --> <c:out value='${fn:substring(\"ABCDEF\", 0, 3)}' /> fn:substringAfter() M\u00e9todo contenedor: String fn:substringAfter(String input, String afterstring) Siguiendo un patr\u00f3n de caracteres, retorna el resto de la cadena que venga luego de este patr\u00f3n <!-- EF --> <c:out value='${fn:substringAfter(\"ABCDEF\", \"CD\")}' /> fn:fn:substringBefore() M\u00e9todo contenedor: String fn:fn:substringBefore(String input, String afterstring) Siguiendo un patr\u00f3n de caracteres, retorna el resto de la cadena que venga luego de este patr\u00f3n <!-- AB --> <c:out value='${fn:substringBefore(\"ABCDEF\", \"AB\")}' /> fn:length() M\u00e9todo contenedor: int length(java.lang.Object) Determina el largo de una cadena. <!-- 6 --> <c:out value='${fn:length(\"ABCDEF\")}' /> fn:replace() M\u00e9todo contenedor: String fn:replace(String input, String search_for, String replace_with) Con sus tres argumentos, esta funcion, tomar\u00e1 la primera cadena y buscar\u00e1 el patr\u00f3n entregado en el segundo argumento y lo reemplazar\u00e1 por la tercera cadena. <!-- AB-EF --> <c:out value='${fn:replace(\"ABCDEF\", \"CD\", \"-\")}' /> Formatting tags Llamado: <%@ taglib uri=\"http://java.sun.com/jsp/jstl/fmt\" prefix=\"fmt\" %> Otra utiler\u00eda que nos evitaremos programar gracias a JSTL. Ac\u00e1 encontraremos herramientas que har\u00e1n nuestra tarea de por ejemplo, formatear una fecha, o una moneda antes de presentarla en pantalla, sean menos dolorosas. \ud83c\udfb0 Patrones para el form\u00e1to Cuando tengamos disponible el atributo pattern , podemos indicar un patr\u00f3n que nos porporciona la capacidad de indicar como queremos que un determinado valor sea mostrado. Los siguientes simbolos nos servir\u00e1n de consulta para cuando los necesitemos + 0: representa d\u00edgitos. + #: Representa un d\u00edgito. + E: Representa la forma exponencial. + .: Representa un separador de decimales. + ,: Representa un marcador de posici\u00f3n para un separador de grupos. + ;: Representa un separador de form\u00e1tos + -: Representa un prefijo negativo. + %: Multiplica por 100 y muestra el %. + ?: M\u00faltiples por 1000 muestra por millas. + X: Indica que cualquier otro caracter puede ser usado como prefijo o sufijo. + ': Usado como caracter especial en un prefijo o sufijo. fmt:setLocale Se indica este valor para indicar la configuraci\u00f3n local. si no se hace, se toma el que est\u00e9 seteado en el computador servidor. Para poder revisar los c\u00f3digos, se puede ir a la siguiente web: https://www.oracle.com/java/technologies/javase/jdk8-jre8-suported-locales.html Para indicar que el local es espa\u00f1ol chile. <fmt:setLocale value=\"es-CL\"/> fmt:parseNumber Sintaxis: <fmt:parseNumber attributes> body content </fmt:parseNumber> Este tag, si bien, este tag nos permite parcear monedas, numeros y porcentajes, lo usaremos para parsear n\u00fameros, para las otras transformaciones, usaremos otro fmt . <fmt:parseNumber var=\"numero\" integerOnly=\"true\" type=\"number\" value='${\"3000,55\"}' /> <c:out value=\"${numero}\"></c:out> fmt:formatNumber Sintaxis: <fmt:formatNumber attributes> body content </fmt:formatNumber> <fmt:setLocale value=\"es-CL\"/> <c:set var=\"cantidad\" value=\"9850.14115\" /> <hr/> <fmt:formatNumber var=\"moneda\" value=\"${cantidad}\" type=\"currency\" /> Form\u00e1to moneda: <c:out value=\"${moneda}\"></c:out> <br /> <fmt:formatNumber var=\"moneda\" pattern=\"$ ###,###,###.##\" value=\"${cantidad}\" type=\"currency\" /> Form\u00e1to moneda (patr\u00f3n): <c:out value=\"${moneda}\"></c:out> <br /> <fmt:formatNumber var=\"moneda\" currencyCode=\"CLP\" value=\"${cantidad}\" type=\"currency\" /> Form\u00e1to moneda (currencyCode) (patr\u00f3n): <c:out value=\"${moneda}\"></c:out> <hr/> <fmt:formatNumber var=\"valor\" value='${\"0.7\"}' type=\"percent\" /> Form\u00e1to porcentaje: <c:out value=\"${valor}\"></c:out> <hr/> <fmt:formatNumber var=\"valor\" value='${cantidad}' type=\"number\" /> Form\u00e1to num\u00e9rico: <c:out value=\"${valor}\"></c:out> <br /> <fmt:formatNumber var=\"valor\" value='${cantidad}' type=\"number\" maxIntegerDigits=\"2\" /> Form\u00e1to num\u00e9rico: <c:out value=\"${valor}\"></c:out> fmt:timeZone Sintaxis: <fmt:timeZone attributes> body content </fmt:timeZone> Asigna una zona horaria a una fecha que se imprima en pantalla. Esta fecha debe estar en el cuerpo de timeZone . <c:set var=\"fecha\" value=\"<%=new java.util.Date()%>\" /> Hora en Chicago: <fmt:timeZone value='America/Chicago' > <fmt:formatDate type='both' value=\"${fecha}\" /> </fmt:timeZone> <hr /> Hora en Santiago: <fmt:timeZone value='America/Santiago' > <fmt:formatDate type='both' value=\"${fecha}\" /> </fmt:timeZone> fmt:parseDate Sintaxis: <fmt:parseDate attributes/> Utilizado para transformar cadenas de texto a fechas. <c:set var=\"fecha\" value=\"01-01-2020\" /> <fmt:parseDate value=\"${fecha}\" var=\"parsedDate\" pattern=\"dd-MM-yyyy\" /> <!-- Wed Jan 01 00:00:00 CLST 2020 --> <p><c:out value=\"${parsedDate}\" /></p> M\u00e1s ejemplos: <h3>Date ser\u00e1 parseada desde un formato de cadena 'MM/dd/yyyy'</h3> <c:set var=\"current_time_1\" value=\"12/27/2018\" /> <br> Date (Como la hora no ha sido definida, se toma por defecto '00:00:00') - <br> <fmt:parseDate value=\"${current_time_1}\" type=\"date\" pattern=\"MM/dd/yyyy\" /> <h3>Date ser\u00e1 parseada desde un formato de cadena: 'dd/mm/yyyy HH:mm:ss'</h3> <c:set var=\"current_time_2\" value=\"27/12/2018 11:20:50\" /> Date and time - <br> <fmt:parseDate value=\"${current_time_2}\" type=\"both\" pattern=\"dd/mm/yyyy HH:mm:ss\" /> <h3>Time ser\u00e1 parseado con el form\u00e1to 'HH:mm:ss'</h3> <c:set var=\"current_time_3\" value=\"11:20:50\" /> Time (La fecha no ha sido definida, por eso se toma - 'Jan 01 1970' como valor por defecto ) - <br> <fmt:parseDate value=\"${current_time_3}\" type=\"time\" pattern=\"HH:mm:ss\" /> <h3>Date and Time ser\u00e1n parseadas con un estilo dateStyle=\"long\" y timeStyle=\"long\" string format/ or</h3> <c:set var=\"current_time_4\" value=\"27/12/2018 11:20:50\" /> Date and time - <br> <fmt:parseDate value=\"${current_time_4}\" type=\"both\" pattern=\"dd/mm/yyyy HH:mm:ss\" dateStyle=\"long\" timeStyle=\"long\" /> fmt:formatDate Sintaxis: <fmt:formatDate attributes/> Utilizado para transformar objetos tipo Date a la representaci\u00f3n de una fecha en una cadena. <!-- Formatted Time : 15:54:18 --> <c:set var=\"Date\" value=\"<%=new java.util.Date()%>\" /> <p> Formatted Time : <!-- 16:07:27 --> <fmt:formatDate type=\"time\" value=\"${Date}\" /> </p> <c:set var=\"Date\" value=\"<%=new java.util.Date()%>\" /> <p> <!-- Formatted Date : 11-mar-2020 --> Formatted Date : <fmt:formatDate type=\"date\" value=\"${Date}\" setLocale=\"es_ES\" dateStyle=\"long\" /> </p> <p> Formatted Date : <!-- 16:06:39 --> <fmt:formatDate type=\"time\" value=\"${Date}\" dateStyle=\"long\" /> </p> <p> Formatted Date : <!-- 11 de marzo de 2020 16:03:28 --> <fmt:formatDate type=\"both\" value=\"${Date}\" dateStyle=\"long\" /> </p> <p> Formatted Date : <!-- 11/03/2020 --> <fmt:formatDate type=\"date\" value=\"${Date}\" pattern=\"dd/MM/yyyy\" /> </p> fmt:bundle Sintaxis: <fmt:bundle basename=\"Resource Bundle Name\" prefix=\"msg\"> body content </fmt:bundle> Su utilidad se basa en que nos permite, desde la vista, acceder a un arreglo de arrego de objetos, declarado en una clase especial. Esta clase poseer\u00e1 elementos est\u00e1ticos, por lo tanto solamente almacenan informaci\u00f3n como una peque\u00f1a base de datos. Si a primera vista, no le encontramos utilidad, solamente pensemos que debemos internacionalizar la aplicaci\u00f3n, y debe, seg\u00fan el idioma seleccionado, cargar un mensaje en ingl\u00e9s o en espa\u00f1ol. El traductor de google ser\u00eda una soluci\u00f3n, pero por ejemplo, un tutorial complejo, no basta con traducir rob\u00f3ticamente. La traducci\u00f3n debe ser precisa. Entonces, con el siguiente ejemplo, quiz\u00e1s se nos ocurre una soluci\u00f3n para este problema. Debemos crear una unidad de compilaci\u00f3n que contenga una clase que herede de ListResourceBundle . La clase debe sobrescribir el m\u00e9todo getContents , este ser\u00e1 en encargado de retornar los valores.(arreglo de arreglos), con la informaci\u00f3n. package cl.lherrera.bundles; import java.util.ListResourceBundle; public class Mensaje extends ListResourceBundle{ protected static final Object[][] contenido = { {\"saludo.uno\", \"Saludo-mensaje 1\"}, {\"saludo.dos\", \"Saludo-mensaje 2\"}, {\"saludo.tres\", \"Saludo-mensaje 3\"}, {\"despedida.uno\", \"Despedida-mensaje 1\"}, {\"despedida.dos\", \"Despedida-mensaje 2\"}, {\"despedida.tres\", \"Despedida-mensaje 3\"}, }; @Override protected Object[][] getContents() { return contenido; } } Luego lo llamamos desde la vista de la siguiente manera <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%> <%@ taglib uri=\"http://java.sun.com/jsp/jstl/functions\" prefix=\"fn\"%> <%@ taglib uri=\"http://java.sun.com/jsp/jstl/fmt\" prefix=\"fmt\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Mi web</title> </head> <body> <h1>Mensaje de saludos</h1> <fmt:bundle basename=\"cl.lherrera.bundles.Mensaje\" prefix=\"saludo.\"> <fmt:message key=\"uno\"/><br/> <fmt:message key=\"dos\"/><br/> <fmt:message key=\"tres\"/><br/> </fmt:bundle> <h1>Mensaje de despedida</h1> <fmt:bundle basename=\"cl.lherrera.bundles.Mensaje\" prefix=\"despedida.\"> <fmt:message key=\"uno\"/><br/> <fmt:message key=\"dos\"/><br/> <fmt:message key=\"tres\"/><br/> </fmt:bundle> </body> </html> Puede ser tambi\u00e9n as\u00ed <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%> <%@ taglib uri=\"http://java.sun.com/jsp/jstl/functions\" prefix=\"fn\"%> <%@ taglib uri=\"http://java.sun.com/jsp/jstl/fmt\" prefix=\"fmt\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Mi web</title> </head> <body> <fmt:setBundle basename=\"cl.lherrera.bundles.Mensaje\" var=\"mensaje\"/> <h1>Mensaje de saludos</h1> <ul> <li><fmt:message key=\"saludo.uno\" bundle=\"${mensaje}\"/><br/> </li> <li><fmt:message key=\"saludo.dos\" bundle=\"${mensaje}\"/><br/> </li> <li><fmt:message key=\"saludo.dos\" bundle=\"${mensaje}\"/><br/> </li> </ul> <h1>Mensaje de despedida</h1> <ul> <li><fmt:message key=\"despedida.uno\" bundle=\"${mensaje}\"/><br/> </li> <li><fmt:message key=\"despedida.dos\" bundle=\"${mensaje}\"/><br/> </li> <li><fmt:message key=\"despedida.dos\" bundle=\"${mensaje}\"/><br/> </li> </ul> </body> </html> Se puede ver que desde la vista, utilizando prefix= , podemos indicar el tipo de mensaje que se mostrar\u00e1. \u00bfQuiz\u00e1s con un if , podr\u00edamos elegir de forma m\u00e1s din\u00e1mica.","title":"JSTL - Tags"},{"location":"modulos/mod_4/mod4_uni001_002/#jstl-tags","text":"","title":"JSTL - Tags"},{"location":"modulos/mod_4/mod4_uni001_002/#core-tags","text":"Llamado: <%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>","title":"Core Tags"},{"location":"modulos/mod_4/mod4_uni001_002/#scopes","text":"Se definen los alcances ya que los tags poseen un alcance por defecto llamado page , pero los scopes son: + page + request + session + aplicaton Cada uno de estos scopes, poseen el alcance de lo que dure cada uno de los expuestos scopes. El scope por defecto es page , este dura lo que dura la p\u00e1gina.","title":"Scopes"},{"location":"modulos/mod_4/mod4_uni001_002/#cout","text":"Muestra el resultado de una expresi\u00f3n (HTML), similar a la forma en que funciona la etiqueta <% = ...%> . <%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %> <html> <head> <title>Tag Example</title> </head> <body> <c:out value=\"${'Hola mundo'}\" /> </body> </html>","title":"c:out"},{"location":"modulos/mod_4/mod4_uni001_002/#cimport","text":"Importa c\u00f3digo html desde una URL o una ruta relativa. Se puede traer el text HTML o los objetos del dom, aunque esta \u00faltima forma es la m\u00e1s \u00fatil. Se llama de la siguiente forma, el atributo var es el nombre de la variable, que contendr\u00e1 esta llamada, el atributo url contiene <c:import var=\"staticData\" url=\"/static.html\"/> Una vez que ya tenemos la variable con el contenido est\u00e1tico, podemos imprimirlo, el atributo escapeXml=\"false\" indica que no queremos el texto, que lo que realmente queremos es el Dom que forma ese texto. <c:out value=\"${staticData}\" escapeXml=\"false\"/> <c:out value=\"${datastaticData\" escapeXml=\"false\"/> Podemos llamar a un Servlet, as\u00ed tenemos l\u00f3gica de negocio antes de un contenido est\u00e1tico. <c:import var=\"data\" url=\"/select\"/> <c:out value=\"${data}\" escapeXml=\"false\"/> Se puede llamat a una web completa mientas esta \u00faltima lo permita. <c:import var=\"data\" url=\"https://jsonplaceholder.typicode.com/users/1\"/> <c:out value=\"${data}\" escapeXml=\"false\"/> Podemos traer contenido est\u00e1tico <c:import var=\"data\" url=\"web.html\"/> <c:out value=\"${data}\" escapeXml=\"false\"/> Podemos obtener el contenido de un JSP <c:import var=\"data\" url=\"web.jsp\"/> <c:out value=\"${data}\" escapeXml=\"false\"/> Estos ejemplos son con direcciones relativas, directamente bajo WebContent .","title":"c:import"},{"location":"modulos/mod_4/mod4_uni001_002/#cset","text":"Asignamos una variable a un valor, como se har\u00eda en un diccionario, donde var es la clave y value es el valor. Se le suele dar un scope de session, para que estas variables duren lo que dura la sesi\u00f3n. <c:set var=\"valor\" scope=\"session\" value=\"${5*4}\"/> <c:out value=\"${valor}\"/>","title":"c:set"},{"location":"modulos/mod_4/mod4_uni001_002/#cremove","text":"Quita alguna variable seteada en alg\u00fan scope. <!-- seteo de variable --> <c:set var=\"income\" scope=\"session\" value=\"${4000*4}\"/> <p>Valor antes de remover: <c:out value=\"${income}\"/></p> <!-- ac\u00e1 se remueve la variable seteada --> <c:remove var=\"income\"/> <p>Despu\u00e9s de remover es: <c:out value=\"${income}\"/></p>","title":"c:remove"},{"location":"modulos/mod_4/mod4_uni001_002/#cif","text":"Funciona igual que cualquier if imperativo; pero la evaluaci\u00f3n de verdad, se especifica con el atributo test . <!-- seteamos un valor a una variable --> <c:set var=\"income\" scope=\"session\" value=\"${4000*4}\"/> <!-- eval\u00faa una condici\u00f3n --> <c:if test=\"${income > 8000}\"> <p>El valor es: <c:out value=\"${income}\"/><p> </c:if>","title":"c:if"},{"location":"modulos/mod_4/mod4_uni001_002/#ccatch","text":"Usada para atrapar exceptions . Usada generalmente, cuando se necesita manejar alg\u00fan error y que la vista haga algo si esto ocurre. En el siguiente ejemplo si la variable que captura la excepci\u00f3n, no es nula, se muestra algo en la vista. <c:catch var =\"catchtheException\"> <% int x = 2/0;%> </c:catch> <c:if test = \"${catchtheException != null}\"> <p>Hay una excepci\u00f3n : ${catchtheException} <br /> y esta es: ${catchtheException.message}</p> </c:if>","title":"c:catch"},{"location":"modulos/mod_4/mod4_uni001_002/#cchoose-cwhen-y-cotherwise-elige-cuando-de-otra-forma","text":"En reemplazo de un if -> else , llegan estas etiquetas que si las comparamos espec\u00edficamente con la programaci\u00f3n imperativa de Java, se podr\u00eda parecer m\u00e1s a un switch . <%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %> <html> <head> <title>Ejemplo JSLT:core</title> </head> <body> <c:set var=\"ingresos\" scope=\"session\" value=\"${100000}\"/> <p>Sus ingresos son : <c:out value=\"${ingresos}\"/></p> <c:choose> <c:when test=\"${ingresos <= 1000}\"> No muy buenos ingresos. </c:when> <c:when test=\"${ingresos > 10000}\"> ingresos muy buenos. </c:when> <c:otherwise> ingresos indeterminados </c:otherwise> </c:choose> </body> </html>","title":"c:choose, c:when y c:otherwise (Elige, cuando, de otra forma)."},{"location":"modulos/mod_4/mod4_uni001_002/#cforeach","text":"<!-- cuando queramos que un ciclo se repita n veces. --> <c:forEach var=\"j\" begin=\"1\" end=\"3\"> Item <c:out value=\"${j}\"/><p> </c:forEach> <!-- cuando queramos que una colecci\u00f3n sea recorrida. (como el caso de llenar una tabla) --> <c:set var=\"nombres\" value='<%=new String[] { \"Hugo\", \"Paco\", \"Luis\" }%>' scope=\"session\" /> <ul> <c:forEach var=\"nombre\" items=\"${nombres}\"> <li> <c:out value=\"${nombre}\" /> </li> </c:forEach> </ul> <!-- Usando FN... ya hablaremos de ello --> <c:set var=\"nombres\" value=\"${fn:split('Hugo, Paco, Luis', ',')}\" scope=\"application\" /> <ul> <c:forEach var=\"nombre\" items=\"${nombres}\"> <li><c:out value=\"${nombre}\" /></li> </c:forEach> </ul>","title":"c:forEach"},{"location":"modulos/mod_4/mod4_uni001_002/#cfortokens","text":"Proporciona una especie de split , con el que podemos transformar un string en un arreglo y recorrer sus elementos. <ul> <c:forTokens var='nombre' items='${\"Hugo,Paco,Luis\"}' delims=','> <li><c:out value=\"${nombre}\" /></li> </c:forTokens> </ul>","title":"c:forTokens"},{"location":"modulos/mod_4/mod4_uni001_002/#curl","text":"Nos ayuda a completar nuestra URL, a\u00f1adiendo la URI completa, enfocando la atenci\u00f3n solamente en el servicio o el archivo final, como lo ser\u00eda un recurso interno como un archivo JS, o CSS. <!-- URL: http://localhost:8080/pruebaWar/ --> <c:url value=\"/\"/> <!-- Salida: /pruebaWar/ -->","title":"c:url"},{"location":"modulos/mod_4/mod4_uni001_002/#cparam","text":"Agrega el query string , a la URL. De esta forma no hay que preocuparse por el form\u00e1to que esta deba llevar. <!-- URL: http://localhost:8080/pruebaWar/index.jsp --> <c:url value=\"/index1.jsp\" var=\"completeURL\"> <c:param name=\"trackingId\" value=\"786\" /> <c:param name=\"user\" value=\"Nakul\" /> </c:url> <!-- Salida: /pruebaWar/index1.jsp?trackingId=786&user=Nakul --> <c:out value=\"${completeURL}\" />","title":"c:param"},{"location":"modulos/mod_4/mod4_uni001_002/#credirect","text":"Redirecciona; pero no es como una etiqueta <a href...> , si esta etiqueta se carga, rirecciona inmediatamete. Usualmente va en condicionales. <c:redirect url=\"http://google.com\"/>","title":"c:redirect"},{"location":"modulos/mod_4/mod4_uni001_002/#function-tags","text":"Transformar cadenas en listas, preguntar por si una cadena comienza con alg\u00fan car\u00e1cter. Como la clase utilitaria de cadenas, estas etiquetas nos ayudan a manipular cadenas. Llamado: <%@ taglib uri=\"http://java.sun.com/jsp/jstl/functions\" prefix=\"fn\" %>","title":"Function Tags"},{"location":"modulos/mod_4/mod4_uni001_002/#fncontains","text":"M\u00e9todo contenedor: boolean contains(java.lang.String, java.lang.String) Retorna verdadero o falso, si la cadena en el primer argumento, contiene la cadena entregada en el segundo argumento. <!-- true --> <c:out value='${fn:contains(\"hola mundo\",\"mundo\") }'></c:out>","title":"fn:contains()"},{"location":"modulos/mod_4/mod4_uni001_002/#fncontainsignorecase","text":"M\u00e9todo contenedor: boolean containsIgnoreCase(java.lang.String, java.lang.String) Retorna verdadero o falso, si la cadena en el primer argumento, contiene la cadena entregada en el segundo argumento, ignorando si son may\u00fasculas o min\u00fasculas. <!-- true --> <c:out value='${fn:containsIgnoreCase(\"hola mundo\",\"MuNdo\") }'></c:out>","title":"fn:containsIgnoreCase()"},{"location":"modulos/mod_4/mod4_uni001_002/#fnstartswith","text":"M\u00e9todo contenedordor: boolean startsWith(java.lang.String, java.lang.String) Retorna verdadero o falso, si la cadena en el primer argumento, comienza con la cadena entregada en el segundo argumento (Case sensintive). <!-- true --> <c:out value='${fn:startsWith(\"hola mundo\",\"mundo\") }'></c:out>","title":"fn:startsWith()"},{"location":"modulos/mod_4/mod4_uni001_002/#fnendswith","text":"M\u00e9todo contenedordor: boolean endsWith(java.lang.String, java.lang.String) Retorna verdadero o falso, si la cadena en el primer argumento, termina con la cadena entregada en el segundo argumento (Case sensintive). <!-- true --> <c:out value='${fn:endsWith(\"hola mundo\",\"mundo\") }'></c:out>","title":"fn:endsWith()"},{"location":"modulos/mod_4/mod4_uni001_002/#fnescapexml","text":"M\u00e9todo contenedor: java.lang.String escapeXml(java.lang.String) Escapa todos los car\u00e1cteres especiales de etiquetado, para ser interpretado como objetos del documento HTML. Se puede ver que <c:out> posee un atributo escapeXml=\"true\" por defecto que escapa al menos una vez. Es por esto que lo que est\u00e1 en su atributo value escapa al menos una vez. Escapado: ${fn:escapeXml(\"<strong>Hola mundo</strong>\")}<br /> Mismo efecto-c:out : <c:out value='${fn:escapeXml(\"<strong>Hola mundo</strong>\")}' escapeXml=\"false\"></c:out><br /> <hr /> No escapado: ${\"<strong>Hola mundo</strong>\"}<br /> Mismo efecto-c:out: <c:out value='<strong>Hola mundo</strong>' escapeXml=\"false\"></c:out><br /> <hr /> Raro c:out: <c:out value='${fn:escapeXml(\"<strong>Hola mundo</strong>\")}' escapeXml=\"true\"></c:out><br /> Raro Mismo efecto-c:out: <c:out value='${fn:escapeXml(\"<strong>Hola mundo</strong>\")}' ></c:out><br />","title":"fn:escapeXml()"},{"location":"modulos/mod_4/mod4_uni001_002/#fnindexof","text":"M\u00e9todo contenedor: int indexOf(java.lang.String, java.lang.String) Retorna el \u00edndice donde comienza la cadena. Comenzando en cero. <!-- 0 --> <c:out value='${fn:indexOf(\"hola mundo\", \"hola\") }'></c:out> <!-- 1 --> <c:out value='${fn:indexOf(\"hola mundo\", \"ola\") }'></c:out>","title":"fn:indexOf()"},{"location":"modulos/mod_4/mod4_uni001_002/#fntrim","text":"M\u00e9todo contenedor: java.lang.String trim(java.lang.String) \u001d Remueve los espacios que existan al principio y al final de la cadena argumentada. <!-- :::hola mundo::: --> <c:out value='${\":::\"}${fn:trim(\" hola mundo \")}${\":::\"}'></c:out>","title":"fn:trim()"},{"location":"modulos/mod_4/mod4_uni001_002/#fnsplit","text":"M\u00e9todo contenedor: java.lang.String[] split(java.lang.String, java.lang.String) \u001d Transforma una cadena de car\u00e1cteres en un arreglo de caracteres. Se utiliza un patr\u00f3n de separaci\u00f3n. Para este ejemplo ser\u00e1 una coma. <c:set var=\"nombres\" value=\"${fn:split('Hugo, Paco, Luis', ',')}\" scope=\"application\" /> <ul> <c:forEach var=\"nombre\" items=\"${nombres}\"> <li><c:out value=\"${nombre}\" /></li> </c:forEach> </ul>","title":"fn:split()"},{"location":"modulos/mod_4/mod4_uni001_002/#fnjoin","text":"M\u00e9todo contenedor: java.lang.String[] join(java.lang.String, java.lang.String) \u001d Transforma un arreglo de caracteres en una cadena de car\u00e1cteres . Se utiliza un patr\u00f3n de uni\u00f3n. Para este ejemplo ser\u00e1 una coma. <c:set var=\"nombres\" value=\"${fn:split('Hugo,Paco,Luis', ',')}\" scope=\"application\" /> <c:set var=\"unidos\" value=\"${fn:join(nombres, ',')}\" scope=\"application\" /> <c:out value=\"${unidos}\" />","title":"fn:join()"},{"location":"modulos/mod_4/mod4_uni001_002/#fntolowercase-fntouppercase","text":"M\u00e9todo contenedor: String fn:toLowerCase(String input), String fn:toUpperCase(String input) \u001d Transforman una cadena de caracteres en min\u00fasculas o may\u00fasculas respectivamente. <c:out value='${fn:toLowerCase(\"MAY\u00daSCULA\")}' /> <hr /> <c:out value='${fn:toUpperCase(\"min\u00fascula\")}' />","title":"fn:toLowerCase(), fn:toUpperCase()"},{"location":"modulos/mod_4/mod4_uni001_002/#fnsubstring","text":"M\u00e9todo contenedor: String fn:substring(String inputstring, int start, int end) \u001d Obtiene una sub cadena, determinado por el segundo y tercer argumento, marcados como inicio y el largo. <!-- ABC --> <c:out value='${fn:substring(\"ABCDEF\", 0, 3)}' />","title":"fn:substring()"},{"location":"modulos/mod_4/mod4_uni001_002/#fnsubstringafter","text":"M\u00e9todo contenedor: String fn:substringAfter(String input, String afterstring) Siguiendo un patr\u00f3n de caracteres, retorna el resto de la cadena que venga luego de este patr\u00f3n <!-- EF --> <c:out value='${fn:substringAfter(\"ABCDEF\", \"CD\")}' />","title":"fn:substringAfter()"},{"location":"modulos/mod_4/mod4_uni001_002/#fnfnsubstringbefore","text":"M\u00e9todo contenedor: String fn:fn:substringBefore(String input, String afterstring) Siguiendo un patr\u00f3n de caracteres, retorna el resto de la cadena que venga luego de este patr\u00f3n <!-- AB --> <c:out value='${fn:substringBefore(\"ABCDEF\", \"AB\")}' />","title":"fn:fn:substringBefore()"},{"location":"modulos/mod_4/mod4_uni001_002/#fnlength","text":"M\u00e9todo contenedor: int length(java.lang.Object) Determina el largo de una cadena. <!-- 6 --> <c:out value='${fn:length(\"ABCDEF\")}' />","title":"fn:length()"},{"location":"modulos/mod_4/mod4_uni001_002/#fnreplace","text":"M\u00e9todo contenedor: String fn:replace(String input, String search_for, String replace_with) Con sus tres argumentos, esta funcion, tomar\u00e1 la primera cadena y buscar\u00e1 el patr\u00f3n entregado en el segundo argumento y lo reemplazar\u00e1 por la tercera cadena. <!-- AB-EF --> <c:out value='${fn:replace(\"ABCDEF\", \"CD\", \"-\")}' />","title":"fn:replace()"},{"location":"modulos/mod_4/mod4_uni001_002/#formatting-tags","text":"Llamado: <%@ taglib uri=\"http://java.sun.com/jsp/jstl/fmt\" prefix=\"fmt\" %> Otra utiler\u00eda que nos evitaremos programar gracias a JSTL. Ac\u00e1 encontraremos herramientas que har\u00e1n nuestra tarea de por ejemplo, formatear una fecha, o una moneda antes de presentarla en pantalla, sean menos dolorosas. \ud83c\udfb0","title":"Formatting tags"},{"location":"modulos/mod_4/mod4_uni001_002/#patrones-para-el-formato","text":"Cuando tengamos disponible el atributo pattern , podemos indicar un patr\u00f3n que nos porporciona la capacidad de indicar como queremos que un determinado valor sea mostrado. Los siguientes simbolos nos servir\u00e1n de consulta para cuando los necesitemos + 0: representa d\u00edgitos. + #: Representa un d\u00edgito. + E: Representa la forma exponencial. + .: Representa un separador de decimales. + ,: Representa un marcador de posici\u00f3n para un separador de grupos. + ;: Representa un separador de form\u00e1tos + -: Representa un prefijo negativo. + %: Multiplica por 100 y muestra el %. + ?: M\u00faltiples por 1000 muestra por millas. + X: Indica que cualquier otro caracter puede ser usado como prefijo o sufijo. + ': Usado como caracter especial en un prefijo o sufijo.","title":"Patrones para el form\u00e1to"},{"location":"modulos/mod_4/mod4_uni001_002/#fmtsetlocale","text":"Se indica este valor para indicar la configuraci\u00f3n local. si no se hace, se toma el que est\u00e9 seteado en el computador servidor. Para poder revisar los c\u00f3digos, se puede ir a la siguiente web: https://www.oracle.com/java/technologies/javase/jdk8-jre8-suported-locales.html Para indicar que el local es espa\u00f1ol chile. <fmt:setLocale value=\"es-CL\"/>","title":"fmt:setLocale"},{"location":"modulos/mod_4/mod4_uni001_002/#fmtparsenumber","text":"Sintaxis: <fmt:parseNumber attributes> body content </fmt:parseNumber> Este tag, si bien, este tag nos permite parcear monedas, numeros y porcentajes, lo usaremos para parsear n\u00fameros, para las otras transformaciones, usaremos otro fmt . <fmt:parseNumber var=\"numero\" integerOnly=\"true\" type=\"number\" value='${\"3000,55\"}' /> <c:out value=\"${numero}\"></c:out>","title":"fmt:parseNumber"},{"location":"modulos/mod_4/mod4_uni001_002/#fmtformatnumber","text":"Sintaxis: <fmt:formatNumber attributes> body content </fmt:formatNumber> <fmt:setLocale value=\"es-CL\"/> <c:set var=\"cantidad\" value=\"9850.14115\" /> <hr/> <fmt:formatNumber var=\"moneda\" value=\"${cantidad}\" type=\"currency\" /> Form\u00e1to moneda: <c:out value=\"${moneda}\"></c:out> <br /> <fmt:formatNumber var=\"moneda\" pattern=\"$ ###,###,###.##\" value=\"${cantidad}\" type=\"currency\" /> Form\u00e1to moneda (patr\u00f3n): <c:out value=\"${moneda}\"></c:out> <br /> <fmt:formatNumber var=\"moneda\" currencyCode=\"CLP\" value=\"${cantidad}\" type=\"currency\" /> Form\u00e1to moneda (currencyCode) (patr\u00f3n): <c:out value=\"${moneda}\"></c:out> <hr/> <fmt:formatNumber var=\"valor\" value='${\"0.7\"}' type=\"percent\" /> Form\u00e1to porcentaje: <c:out value=\"${valor}\"></c:out> <hr/> <fmt:formatNumber var=\"valor\" value='${cantidad}' type=\"number\" /> Form\u00e1to num\u00e9rico: <c:out value=\"${valor}\"></c:out> <br /> <fmt:formatNumber var=\"valor\" value='${cantidad}' type=\"number\" maxIntegerDigits=\"2\" /> Form\u00e1to num\u00e9rico: <c:out value=\"${valor}\"></c:out>","title":"fmt:formatNumber"},{"location":"modulos/mod_4/mod4_uni001_002/#fmttimezone","text":"Sintaxis: <fmt:timeZone attributes> body content </fmt:timeZone> Asigna una zona horaria a una fecha que se imprima en pantalla. Esta fecha debe estar en el cuerpo de timeZone . <c:set var=\"fecha\" value=\"<%=new java.util.Date()%>\" /> Hora en Chicago: <fmt:timeZone value='America/Chicago' > <fmt:formatDate type='both' value=\"${fecha}\" /> </fmt:timeZone> <hr /> Hora en Santiago: <fmt:timeZone value='America/Santiago' > <fmt:formatDate type='both' value=\"${fecha}\" /> </fmt:timeZone>","title":"fmt:timeZone"},{"location":"modulos/mod_4/mod4_uni001_002/#fmtparsedate","text":"Sintaxis: <fmt:parseDate attributes/> Utilizado para transformar cadenas de texto a fechas. <c:set var=\"fecha\" value=\"01-01-2020\" /> <fmt:parseDate value=\"${fecha}\" var=\"parsedDate\" pattern=\"dd-MM-yyyy\" /> <!-- Wed Jan 01 00:00:00 CLST 2020 --> <p><c:out value=\"${parsedDate}\" /></p> M\u00e1s ejemplos: <h3>Date ser\u00e1 parseada desde un formato de cadena 'MM/dd/yyyy'</h3> <c:set var=\"current_time_1\" value=\"12/27/2018\" /> <br> Date (Como la hora no ha sido definida, se toma por defecto '00:00:00') - <br> <fmt:parseDate value=\"${current_time_1}\" type=\"date\" pattern=\"MM/dd/yyyy\" /> <h3>Date ser\u00e1 parseada desde un formato de cadena: 'dd/mm/yyyy HH:mm:ss'</h3> <c:set var=\"current_time_2\" value=\"27/12/2018 11:20:50\" /> Date and time - <br> <fmt:parseDate value=\"${current_time_2}\" type=\"both\" pattern=\"dd/mm/yyyy HH:mm:ss\" /> <h3>Time ser\u00e1 parseado con el form\u00e1to 'HH:mm:ss'</h3> <c:set var=\"current_time_3\" value=\"11:20:50\" /> Time (La fecha no ha sido definida, por eso se toma - 'Jan 01 1970' como valor por defecto ) - <br> <fmt:parseDate value=\"${current_time_3}\" type=\"time\" pattern=\"HH:mm:ss\" /> <h3>Date and Time ser\u00e1n parseadas con un estilo dateStyle=\"long\" y timeStyle=\"long\" string format/ or</h3> <c:set var=\"current_time_4\" value=\"27/12/2018 11:20:50\" /> Date and time - <br> <fmt:parseDate value=\"${current_time_4}\" type=\"both\" pattern=\"dd/mm/yyyy HH:mm:ss\" dateStyle=\"long\" timeStyle=\"long\" />","title":"fmt:parseDate"},{"location":"modulos/mod_4/mod4_uni001_002/#fmtformatdate","text":"Sintaxis: <fmt:formatDate attributes/> Utilizado para transformar objetos tipo Date a la representaci\u00f3n de una fecha en una cadena. <!-- Formatted Time : 15:54:18 --> <c:set var=\"Date\" value=\"<%=new java.util.Date()%>\" /> <p> Formatted Time : <!-- 16:07:27 --> <fmt:formatDate type=\"time\" value=\"${Date}\" /> </p> <c:set var=\"Date\" value=\"<%=new java.util.Date()%>\" /> <p> <!-- Formatted Date : 11-mar-2020 --> Formatted Date : <fmt:formatDate type=\"date\" value=\"${Date}\" setLocale=\"es_ES\" dateStyle=\"long\" /> </p> <p> Formatted Date : <!-- 16:06:39 --> <fmt:formatDate type=\"time\" value=\"${Date}\" dateStyle=\"long\" /> </p> <p> Formatted Date : <!-- 11 de marzo de 2020 16:03:28 --> <fmt:formatDate type=\"both\" value=\"${Date}\" dateStyle=\"long\" /> </p> <p> Formatted Date : <!-- 11/03/2020 --> <fmt:formatDate type=\"date\" value=\"${Date}\" pattern=\"dd/MM/yyyy\" /> </p>","title":"fmt:formatDate"},{"location":"modulos/mod_4/mod4_uni001_002/#fmtbundle","text":"Sintaxis: <fmt:bundle basename=\"Resource Bundle Name\" prefix=\"msg\"> body content </fmt:bundle> Su utilidad se basa en que nos permite, desde la vista, acceder a un arreglo de arrego de objetos, declarado en una clase especial. Esta clase poseer\u00e1 elementos est\u00e1ticos, por lo tanto solamente almacenan informaci\u00f3n como una peque\u00f1a base de datos. Si a primera vista, no le encontramos utilidad, solamente pensemos que debemos internacionalizar la aplicaci\u00f3n, y debe, seg\u00fan el idioma seleccionado, cargar un mensaje en ingl\u00e9s o en espa\u00f1ol. El traductor de google ser\u00eda una soluci\u00f3n, pero por ejemplo, un tutorial complejo, no basta con traducir rob\u00f3ticamente. La traducci\u00f3n debe ser precisa. Entonces, con el siguiente ejemplo, quiz\u00e1s se nos ocurre una soluci\u00f3n para este problema. Debemos crear una unidad de compilaci\u00f3n que contenga una clase que herede de ListResourceBundle . La clase debe sobrescribir el m\u00e9todo getContents , este ser\u00e1 en encargado de retornar los valores.(arreglo de arreglos), con la informaci\u00f3n. package cl.lherrera.bundles; import java.util.ListResourceBundle; public class Mensaje extends ListResourceBundle{ protected static final Object[][] contenido = { {\"saludo.uno\", \"Saludo-mensaje 1\"}, {\"saludo.dos\", \"Saludo-mensaje 2\"}, {\"saludo.tres\", \"Saludo-mensaje 3\"}, {\"despedida.uno\", \"Despedida-mensaje 1\"}, {\"despedida.dos\", \"Despedida-mensaje 2\"}, {\"despedida.tres\", \"Despedida-mensaje 3\"}, }; @Override protected Object[][] getContents() { return contenido; } } Luego lo llamamos desde la vista de la siguiente manera <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%> <%@ taglib uri=\"http://java.sun.com/jsp/jstl/functions\" prefix=\"fn\"%> <%@ taglib uri=\"http://java.sun.com/jsp/jstl/fmt\" prefix=\"fmt\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Mi web</title> </head> <body> <h1>Mensaje de saludos</h1> <fmt:bundle basename=\"cl.lherrera.bundles.Mensaje\" prefix=\"saludo.\"> <fmt:message key=\"uno\"/><br/> <fmt:message key=\"dos\"/><br/> <fmt:message key=\"tres\"/><br/> </fmt:bundle> <h1>Mensaje de despedida</h1> <fmt:bundle basename=\"cl.lherrera.bundles.Mensaje\" prefix=\"despedida.\"> <fmt:message key=\"uno\"/><br/> <fmt:message key=\"dos\"/><br/> <fmt:message key=\"tres\"/><br/> </fmt:bundle> </body> </html> Puede ser tambi\u00e9n as\u00ed <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%> <%@ taglib uri=\"http://java.sun.com/jsp/jstl/functions\" prefix=\"fn\"%> <%@ taglib uri=\"http://java.sun.com/jsp/jstl/fmt\" prefix=\"fmt\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Mi web</title> </head> <body> <fmt:setBundle basename=\"cl.lherrera.bundles.Mensaje\" var=\"mensaje\"/> <h1>Mensaje de saludos</h1> <ul> <li><fmt:message key=\"saludo.uno\" bundle=\"${mensaje}\"/><br/> </li> <li><fmt:message key=\"saludo.dos\" bundle=\"${mensaje}\"/><br/> </li> <li><fmt:message key=\"saludo.dos\" bundle=\"${mensaje}\"/><br/> </li> </ul> <h1>Mensaje de despedida</h1> <ul> <li><fmt:message key=\"despedida.uno\" bundle=\"${mensaje}\"/><br/> </li> <li><fmt:message key=\"despedida.dos\" bundle=\"${mensaje}\"/><br/> </li> <li><fmt:message key=\"despedida.dos\" bundle=\"${mensaje}\"/><br/> </li> </ul> </body> </html> Se puede ver que desde la vista, utilizando prefix= , podemos indicar el tipo de mensaje que se mostrar\u00e1. \u00bfQuiz\u00e1s con un if , podr\u00edamos elegir de forma m\u00e1s din\u00e1mica.","title":"fmt:bundle"},{"location":"modulos/mod_4/mod4_uni001l1/","text":"Unidad 1: Introducci\u00f3n a Java Servlets y JSP Introducci\u00f3n a Java Servlets y JSP - Parte I Competencias Conocer herramientas involucradas. Instalar el kit de desarrollo de java (JDK) en mac. Instalar el kit de desarrollo de java (JDK) en Windows. Conocer e instalar el entorno de desarrollo Eclipse. Conocer e instalar el contenedor web Apache. Comprobar el correcto funcionamiento del servidor Tomcat . Introducci\u00f3n Para comenzar con las labores de desarrollo es necesario contar con un ambiente perfectamente instalado y con\ufb01gurado para poder trabajar de forma c\u00f3moda y productiva. El stack de tecnolog\u00edas que utilizaremos se pueden observar en la imagen 1. JDK instalaci\u00f3n La JDK ( Java Developed Kit ) es la biblioteca esencial de java. Nos proporciona la biblioteca de clases java, la Java Virtual Machine , el compilador, documentaci\u00f3n, entre otros. Para instalarlo en cualquier entorno ya sea mac, Windows o Linux, primero hay que descargarla desde la pagina web o\ufb01cial. \u00bfQu\u00e9 paquete Java necesito? Desarrolladores de software: JDK (Java SE Development Kit) Para desarrolladores de Java. Incluye un JRE completo m\u00e1s herramientas para desarrollar, depurar y monitoreo de aplicaciones Java. Administradores que ejecutan aplicaciones en un servidor: Servidor JRE (Server Java Runtime Environment) Para desplegar aplicaciones Java en servidores. Incluye herramientas para el monitoreo de JVM y herramientas com\u00fanmente requeridas para aplicaciones de servidor, pero no incluye integraci\u00f3n de navegador (el complemento de Java), actualizaci\u00f3n autom\u00e1tica ni un instalador. Usuario \ufb01nal que ejecuta Java en un escritorio: JRE (Java Runtime Environment) . Cubre la mayor\u00eda de las necesidades de los usuarios \ufb01nales. Contiene todo lo necesario para ejecutar aplicaciones Java en su sistema. Instalaci\u00f3n JDK en MAC El primer paso es descargar el jdk desde el link adjunto. Nos mostrar\u00e1 una p\u00e1gina con las opciones de descarga: Seleccionamos la versi\u00f3n correspondiente a la de nuestro sistema operativo. En caso de utilizar mac obtendr\u00e1s el archivo jdk-8u201-macosx-x64.dgm . Para instalar solamente ejecuta el archivo .dmg y sigue las instrucciones siguiente siguiente para terminar con la instalaci\u00f3n. En mac no es necesario con\ufb01gurar variables de entorno. Para veri\ufb01car la versi\u00f3n del jdk que tenemos instalada, abre una consola e ingresa el comando java \u2013versi\u00f3n . \u279c java -version java version \"1.8.0_181\" Java(TM) SE Runtime Environment (build 1.8.0_181-b13) Java HotSpot(TM) 64-Bit Server VM (build 25.181-b13, mixed mode) En caso de no tener el JDK, la consola lanzar\u00e1 un error indicando que no se encuentra el java developer kit . Instalaci\u00f3n JDK en Windows Plataformas: Windows 2008 Server Windows 7 Windows 8 Windows XP Windows Server 2012 Windows Vista Windows 10. Veri\ufb01car la instalaci\u00f3n actual en tu Windows. Abrir una ventana CMD utilizando el men\u00fa contextual. Ejecutar: java -version javac -version Si esto no funciona, se debe descargar el JDK indicado para el sistema operativo que se posee en el siguiente link Instalaci\u00f3n de ide Eclipse Para el correcto seguimiento de los ejercicios utilizaremos Eclipse, ide para java con muchas caracter\u00edsticas que lo hacen uno de los m\u00e1s usados. Es multiplataforma por estar escrito en java, y solo hay que descargarlo y dejarlo en una ubicaci\u00f3n en tu equipo. Perfectamente podr\u00edas utilizar otro ide como netbeans o intellij, pero correr\u00eda por tu cuenta su funcionamiento particular. Para descargar el ide, dirigirse a la p\u00e1gina de descargas de Eclipse . Esperar a que la descarga se complete. Terminar\u00e1s con un archivo comprimido, el cual,se debe ubicar en alguna carpeta de tu equipo a elecci\u00f3n. Se sugiere crear una carpeta independiente para el ide. Dentro de archivo de descarga ver\u00e1s un icono de Eclipse, el cual debes ejecutar con doble click. Con esa acci\u00f3n basta para ejecutar el ide. Para los equipos mac, el archivo descargado es de tipo .dmg y para Windows el archivo es de tipo .exe. Al ejecutar el instalador, se nos mostrar\u00e1 una pantalla en donde nos pide seleccionar la versi\u00f3n de Eclipse que deseamos instalar. En este caso debemos pinchar la opci\u00f3n de Eclipse IDE for java EE developers \ud83d\udc40. Esta versi\u00f3n es la indicada para programar con Java Enterprise Edition. Instalaci\u00f3n del contenedor Apache En esta etapa debemos instalar el servidor que har\u00e1 que las aplicaciones puedan ejecutarse en entorno local . El contenedor de aplicaciones es el software que otorga los servicios necesarios a los artefactos que generamos en este curso, y en esta ocasi\u00f3n utilizaremos el contenedor de servlets Apache Tomcat . Debemos entonces descargar el contenedor desde la siguiente URL . En la ventana, en la secci\u00f3n de nombre Binary Distributions descargamos desde la secci\u00f3n Core la versi\u00f3n del comprimido de Tomcat. Descargar el archivo zip (pgp, sha512) y crear en una carpeta de nombre contenedor en nuestro equipo. Se recomienda dejar la carpeta en C:/ en Windows, o en Aplicaciones en mac. El archivo descargado es un archivo comprimido que debemos descomprimir en la carpeta reci\u00e9n creada. Tanto en Mac como en Windows, el contenido de la carpeta no var\u00eda , manteniendo la misma estructura de carpetas. En este ejemplo se muestra la ubicaci\u00f3n en un equipo Mac. Teniendo en nuestro poder el contenedor Tomcat, es tiempo de con\ufb01gurarlo. Cabe decir que existen dos formas de con\ufb01guraci\u00f3n en un entorno de desarrollo. Con\ufb01gurado directamente en Eclipse. Con\ufb01gurado de forma manual en el equipo. Con\ufb01guraremos el contenedor directamente en Eclipse , ya que nos evita tener que ejecutar con\ufb01guraciones extras que si tendr\u00edamos que hacer en una con\ufb01guraci\u00f3n est\u00e1ndar. Otra ventaja que Eclipse integra una vista de servidores la cual nos permite levantar, apagar, limpiar y dar mantenci\u00f3n al contenedor Tomcat. De forma manual todas estas acciones b\u00e1sicas deben hacerse mediante consola de comandos. En la secci\u00f3n de proyectos, ejecutamos command + n y escribimos server . Esto nos lleva a la secci\u00f3n de configuraci\u00f3n de servidores para eclipse. La versi\u00f3n descargada fue la 9.0.31 , es por eso que debemos ir a: Apache -> Tomcat v9.0 Server Luego, debemos indicar donde se encuentra nuestro Apache Tomcat , en mi caso est\u00e1 en aplicaciones, dentro de una carpeta llamada contenedor . /Applications/contenedor/apache-tomcat-9.0.31 . Se recomienda seleccionar el JDK versi\u00f3n 1.8, por defecto para evitar en el caso que tengamos otra instalaci\u00f3n que se ejecute nuestro server en un JDK que no queremos. Al \ufb01nalizar, Eclipse enlazara el servidor Tomcat a la vista de servidores de Eclipse. Para poder probar si es que tenemos el servidor bien configurado nos vamos a la perspectiva WEB , y en la pesta\u00f1a servers, presionamos play. Adicional a esto, podremos crear una prueba, para poder comprobar el correcto servicio de Apache Tomcat . Es por esto que vamos a crear un proyecto de web din\u00e1mica. Dejamos las configuraciones por defecto, aunque para este caso se escoge la opci\u00f3n de la configuraci\u00f3n por defecto de Apache Tomcat 9.0. En /proyectoPrueba/WebContent/ , creamos un index.html . Luego ejecutamos desde el servidor, no como aplicaci\u00f3n. Con esto deber\u00edamos tener nuestra web funcionando correctamente. Contenedor Tomcat Competencias Conocer caracter\u00edsticas del contenedor Tomcat Desplegar aplicaciones en Tomcat Con\ufb01gurar puerto de funcionamiento Introducci\u00f3n El software Apache Tomcat es una implementaci\u00f3n de c\u00f3digo abierto de: Java Servlet JavaServer Pages Java Expression Language Java WebSocket. Las especi\ufb01caciones de Java Servlet, JavaServer Pages, Java Expression Language y Java WebSocket se desarrollan bajo el Proceso de la Comunidad Java. Tomcat cumple la funci\u00f3n de contenedor de servlets y est\u00e1 desarrollado en java, lo que signi\ufb01ca que puede correr en distintas arquitecturas , ya sea windows, linux o mac, siempre y cuando exista una m\u00e1quina virtual instalada . Aparte de ser un contenedor de servlets, tambi\u00e9n es un servidor web , por lo cual es posible subir sitios web din\u00e1micos a su infraestructura. Estructura Para conocer el funcionamiento de Tomcat, es necesario conocer su estructura de carpetas, la cual en la con\ufb01guraci\u00f3n inicial ya hemos visto. La descripci\u00f3n de las carpetas m\u00e1s importantes de Tomcat son las siguientes: bin: Archivos ejecutables, como por ejemplo los script para ejecutar el server o detenerlo . common: Clases comunes, son compartidas por el motor Tomcat (Catalina) o por las aplicaciones web. logs: Muestra los logs del servidor . webapps: Archivo que contiene las aplicaciones web (los artefactos). Instalar aplicaciones en Tomcat En el ejercicio anterior de prueba de funcionamiento de Tomcat, al momento de crear el html y encender el servidor mediante Eclipse, se vio la siguiente pantalla: La imagen muestra el \u00e1rea en donde Tomcat guarda las aplicaciones que va a levantar . Es el s\u00edmil de la carpeta webApps de la ubicaci\u00f3n de Tomcat , pero en este caso Eclipse se encarga de alojar la carpeta del proyecto en la ubicaci\u00f3n correcta . Al momento de subir el sitio mediante Eclipse, el contenedor est\u00e1 con\ufb01gurado para levantar el proyecto y generar los recursos necesarios para publicar el sistema y as\u00ed puede ser accedido mediante http. Cambiar puerto de Tomcat Hay ocasiones, en que el puerto por defecto de Tomcat no es posible utilizarlo( 8080 ), o simplemente est\u00e1 ocupado por otras aplicaciones. La soluci\u00f3n es cerrar esas aplicaciones para liberar el puerto, pero existe otra alternativa que consta de cambiar el puerto por defecto del contenedor. Macintosh HD\u2069 \u25b8 \u2068Aplicaciones\u2069 \u25b8 \u2068contenedor\u2069 \u25b8 \u2068apache-tomcat-9.0.31\u2069 \u25b8 \u2068conf\u2069 Para generar el cambio, debemos dirigirnos dentro de la carpeta de instalaci\u00f3n de Tomcat en la carpeta: /conf . En la carpeta, debemos ubicar el archivo server.xml el cual tiene las con\ufb01guraciones globales del servidor Tomcat. Ver\u00e1s que es un archivo con bastantes l\u00edneas de c\u00f3digos, en donde lo importante para el cambio de puerto es la l\u00ednea: ... <Connector port=\"8080\" protocol=\"HTTP/1.1\" connectionTimeout=\"20000\" redirectPort=\"8443\" /> ... Simplemente tenemos que cambiar el puerto por defecto a alg\u00fan otro, guardar y reiniciar Tomcat, para utilizar el puerto con\ufb01gurado. Protocolo http Competencias Utilizar protocolos http Entender el concepto de arquitectura web Entender request y response http Introducci\u00f3n Cuando un servidor web genera un request hacia un cliente, por lo general env\u00eda alg\u00fan tipo de contenido para que el navegador lo interprete y lo pueda mostrar al usuario. En la mayor\u00eda de los casos el servidor env\u00eda un set de instrucciones en formato de c\u00f3digo HTML (Hyper Text Markup Languaje). El HTML le indica al cliente c\u00f3mo debe visualizarse el recurso web que fue solicitado. Veremos la base para entender c\u00f3mo funciona el protocolo de transferencia de hiper texto . El protocolo http Sus siglas signi\ufb01can Hyper Text Transfer Protocol , o mejor dicho en espa\u00f1ol Protocolo de transferencia de hipertexto . Toda la interacci\u00f3n entre cliente y servidor es mediante este protocolo de comunicaci\u00f3n . El cliente env\u00eda un http-request y el servidor responde con un http-request . HTTP es un protocolo perteneciente a la capa de aplicaci\u00f3n y corre sobre otro protocolo llamado TCP. Es un protocolo ampliable, lo que signi\ufb01ca que en su evoluci\u00f3n ha sido capaz de transmitir no solo p\u00e1ginas web mediante html, si no que tambi\u00e9n es capaz de transmitir im\u00e1genes, audio, video, etc. El modelo request/response en HTTP El protocolo http, y todos los protocolos que est\u00e1n basados en \u00e9l, est\u00e1n construidos bajo el mismo modelo de comunicaci\u00f3n. Este modelo de comunicaci\u00f3n trabaja de la siguiente manera: Un cliente, t\u00edpicamente un navegador web, env\u00eda un request para que el servidor le devuelva cierto recurso. Cuando el server recibe el request, lo analiza, lo gestiona para luego enviar de vuelta un objeto response. Mensajes http-Request Veamos un ejemplo de request, en este caso inspeccionamos la p\u00e1gina de Desaf\u00edo Latam , para veri\ufb01car c\u00f3mo se env\u00eda la petici\u00f3n mediante http. En este ejemplo hacemos seguimiento a un archivo .css. Para abrir la consola del desarrollador, debes pinchar con bot\u00f3n derecho sobre la p\u00e1gina web y buscar la opci\u00f3n Inspeccionar. Al momento de presionar la opci\u00f3n, se abrir\u00e1 un sector en la parte inferior de la pantalla, con una serie de herramientas \u00fatiles para los desarrolladores: En el sector izquierdo, se puede apreciar el c\u00f3digo html que el navegador interpret\u00f3. Sirve mucho para veri\ufb01car las posiciones de tus elementos e inspeccionar errores de c\u00f3digo. Para poder ver los contenidos de los request y response de la p\u00e1gina web, debes pinchar la pesta\u00f1a Network y en su pantalla principal, al lado izquierdo en la columna name, seleccionar el recurso que se desea comprobar Al seleccionarlo, se ver\u00e1 toda la informaci\u00f3n del request en el lado derecho de la pantalla. Con esos pasos es posible investigar la mayor\u00eda de elementos que hacen que la p\u00e1gina web se despliegue. Vemos que la secci\u00f3n general, contiene una direcci\u00f3n URL, la cual est\u00e1 formada por: El protocolo La direcci\u00f3n del servidor La ubicaci\u00f3n del archivo css solicitado. Miremos la imagen de nuevo, vemos un sector que tiene el t\u00edtulo de REQUEST METHOD y su valor es GET . El valor get es un verbo http, y aparte del anterior existen varios m\u00e1s. Un verbo se utiliza para indicar de qu\u00e9 forma el request pide el recurso (m\u00e1s adelante veremos los verbos). Podemos ver tambi\u00e9n la direcci\u00f3n remota del servidor y la url de destino. Mensaje http-response Luego de generar un request a un servidor remoto, este nos devuelve nuestro recurso. La siguiente imagen muestra como es la respuesta: Lo importante de aqu\u00ed, es que el request internamente nos entrega bastante informaci\u00f3n sobre el recurso como: M\u00e9todo de respuesta, en este caso GET Content Type, en este caso un archivo .css La fecha. C\u00f3digos de error http Los request y los response vienen con un c\u00f3digo de respuesta, el cual es generado por el servidor para indicar el resultado de los mensajes. HTTP, de\ufb01ne varios c\u00f3digos de error, pero los m\u00e1s conocidos son: C\u00f3digo de respuesta HTTP Ejemplo de c\u00f3digo de error IBM\u00ae Ejemplo de descripci\u00f3n 200 OK Ninguno Se ha manejado correctamente una solicitud v\u00e1lida y, opcionalmente, se ha proporcionado una respuesta al usuario. 202 Accepted Ninguno Se ha manejado correctamente una solicitud v\u00e1lida pero no garantiza que la acci\u00f3n solicitada se haya completado. 400 Bad Request BFGWI0001 El URI no es v\u00e1lido porque le falta un tipo de recurso. 403 Forbidden BFGWI0056 No se ha de\ufb01nido ning\u00fan identi\ufb01cador de usuario. 404 Not Found BFGWI0015 No se puede encontrar el recurso solicitado. 405 Method Not Allowed BFGWI0016 El recurso solicitado no da soporte al verbo HTTP que se ha utilizado en la solicitud.Por ejemplo, se ha utilizado GET con un recurso que s\u00f3lo permite POST o DELETE. 410 Resource Gone BFGWI0031 El recurso solicitado ya no est\u00e1 disponible. Por ejemplo, el archivo solicitado ha sido suprimido del espacio de archivos. 413 Request Entity Too Large BFGWI0026 La solicitud contiene un archivo que es demasiado grande para ser manejado por el servidor. 415 Unsupported Media Type BFGWI0017 Se ha recibido una solicitud con un tipo de medio, especi\ufb01cado por la cabecera HTTP Content-type, que no est\u00e1 soportado. 500 Internal Server Error BFGWI0018 Se ha encontrado un error interno al gestionar la solicitud. Se ha producido un archivo FFDC o ABEND. (Archivos que genera IBM para manejar los errores). 502 Bad Gateway BFGWI0019 La solicitud no se puede completar porque se ha producido un error. 503 Service Unavailable BFGWI0020 El destino no est\u00e1 disponible temporalmente. 504 Gateway Timeout BFGWI0021 Un intento de completar la solicitud ha sobrepasado el tiempo de espera debido a los l\u00edmites de tiempo. Todos estos c\u00f3digos de error son generados de forma autom\u00e1tica por el servidor, y nos permite como desarrolladores saber cual es el tipo de problema que est\u00e1 afectando el correcto funcionamiento de nuestros sistemas . Por ejemplo, pensemos que nuestro sitio web tiene un banner con la imagen de nuestra empresa y necesitamos que se despliegue, pero por alg\u00fan motivo ajeno a nosotros, tal imagen se borr\u00f3 del servidor. El servidor detectar\u00e1 que el recurso que estamos pidiendo no existe y autom\u00e1ticamente enviar\u00e1 un error 404. Nosotros recibimos el c\u00f3digo de error y podemos avisar al usuario mediante alg\u00fan mensaje o alguna otra acci\u00f3n. La URL Su sigla signi\ufb01ca Uniform Resource Locators , y se encarga de identi\ufb01car las direcciones en donde se alojan los recursos web. Veamos su estructura: https://www.desafiolatam.com:8927/java/inicio Https: Indica al navegador el protocolo que utiliza en el requerimiento. En este ejemplo es https://www.desafiolatam.cl: direccion_del_servidor . Es la ubicaci\u00f3n f\u00edsica de la m\u00e1quina en la cual esta alojado el sitio. Puerto: puerto de escucha del servidor. Path: Es la ubicaci\u00f3n f\u00edsica de los documentos que estamos solicitando, en el servidor. Introducci\u00f3n a los servlets Competencias Conocer la teor\u00eda detr\u00e1s de los servlets. Conocer el ciclo de Vida de los servlets. Aplicar ejemplo de uso del ciclo de vida. Introducci\u00f3n Los servlets, son componentes java que tienen la capacidad de generar contenido web din\u00e1mico mediante request y response http. Esta tecnolog\u00eda extiende las capacidades de un sistema web que reside dentro de un contenedor web , el cual le otorga una serie de servicios de plataforma. Utilizando servlets, puedes perfectamente generar una p\u00e1gina web completa solamente con c\u00f3digo java y adem\u00e1s utilizar todo el poder\u00edo de la orientaci\u00f3n a objetos y la vasta biblioteca de clases que ofrece el jdk. Esto se traduce en que puedes armar un sistema web din\u00e1mico, con manejo de variables y funciones java como si fuera una aplicaci\u00f3n de consola, pero con una salida web mediante http y p\u00e1gina html . Los servlets Como mencionamos hace poco, un servlet no es m\u00e1s que una clase java que trabaja dentro de un contenedor de servlets como Apache Tomcat, el cual es el encargado de extender la funcionalidad de la clase y darle m\u00e1s \"poder\" por decirlo de una forma. El servlet fuera del contenedor Tomcat pierde todo su poder y se convierte en un archivo de texto m\u00e1s , con extensi\u00f3n java imposible de ejecutar, ya que esta clase no cuenta con un m\u00e9todo \"Main\" que ejecute la rutina. Para gra\ufb01car el \ufb02ujo de trabajo de una petici\u00f3n web, pensemos en una p\u00e1gina web que solicita alg\u00fan tipo de recurso (puede ser desde un formulario web hasta una galer\u00eda de fotos, como tambi\u00e9n el c\u00e1lculo del iva de alg\u00fan valor) a un servlet. El servlet recibe la petici\u00f3n mediante el protocolo HTTP y hace su trabajo (puede ser crear los campos del formulario web, ir a buscar una imagen de la galer\u00eda de fotos o hacer el c\u00e1lculo del iva, etc...) para luego mediante el response (la respuesta) devuelve el recurso al navegador. La imagen, muestra el \ufb02ujo normal de petici\u00f3n entre clientes (navegador web) y servidor (contenedor de servlets, aqu\u00ed est\u00e1n los servlets). Esta es, la arquitectura t\u00edpica de un sistema web, la cual es conocida como cliente-servidor . Ciclo de vida de un Servlet El ciclo de vida completo de un servlet es administrado por el contenedor de servlet y, antes de empezar a programarlos, hay que entender c\u00f3mo funciona la creaci\u00f3n y el funcionamiento de estos elementos de software. El ciclo de vida se divide en 4 pasos bien de\ufb01nidos: Carga del servlet. Inicializaci\u00f3n del servlet. Captura del request. Destrucci\u00f3n el request. Carga del servlet La primera etapa del ciclo de vida de un servlet parte con su inicializaci\u00f3n gracias al servidor Tomcat. El servidor ejecuta dos pasos en esta etapa: Loading : Carga de la clase servlet Instantiation : Creaci\u00f3n de una instancia del servlet. Para crear una nueva instancia del servlet, el contenedor utiliza un constructor sin par\u00e1metros. Inicializaci\u00f3n de Servlets Despu\u00e9s de que el servlet fue instanciado correctamente, el contenedor se encarga inicializarlo. \u00c9sto lo realiza invocando al m\u00e9todo Servlet.init() , que acepta la referencia del objeto ServletCon\ufb01g como par\u00e1metro. El m\u00e9todo Servlet.init() es invocado por el servidor solamente una vez, inmediatamente despu\u00e9s de que el objeto Servlet.init(ServletConfig) sea instanciado correctamente. En caso de que el servlet falle en su inicializaci\u00f3n, el contenedor lanza las excepciones: ServletException y UnavailableException . Captura del Request Despu\u00e9s de la inicializaci\u00f3n, la instancia del servlet est\u00e1 lista para atender los request del cliente. El contenedor de servlet realiza las siguientes operaciones cuando la instancia del servlet est\u00e1 lista: Crea los objetos ServletRequest y ServletResponse. Despu\u00e9s de crear los objetos ServletRequest y ServletResponse, se invoca al m\u00e9todo Servlet.service (ServletRequest, ServletResponse) al pasar los objetos de solicitud y respuesta. Mientras el m\u00e9todo service() procesa el request puede lanzar las excepciones ServletException, UnavailableException, e IOException. Destruir el Servlets Cuando el contenedor decide destruir el servlet, ejecuta las siguientes acciones: Permite que todos los subprocesos que se ejecutan actualmente en el m\u00e9todo de servicio de la instancia de Servlet completen sus trabajos y sean liberados. Despu\u00e9s de que los procesos en ejecuci\u00f3n hayan completado sus trabajos, el contenedor Servlet llama al m\u00e9todo destroy() en la instancia de Servlet. Una vez ejecutado el m\u00e9todo destroy() , El Servlet container libera todas las referencias de esta instancia de Servlet para que sea elegible para el garbage collector. Se grafica un ejemplo de un servlet simple en la siguiente imagen. Creaci\u00f3n del primer servlet Competencias Entender c\u00f3mo se compone un servlet. Compilaci\u00f3n de un servlet. Probar servlets en el contenedor. Conocer los m\u00e9todos de los servlets. Introducci\u00f3n En una arquitectura web, la comunicaci\u00f3n entre cliente y servidor es crucial para un funcionamiento colaborativo, y dentro de la tecnolog\u00eda JEE, un servlet, es uno de los principales actores. Ya estudiamos qu\u00e9 es un servlet y cual es su ciclo de vida, por lo que ahora es tiempo de empezar a implementarlos para descubrir poco a poco cuales son sus funciones y que nos permiten hacer. Composici\u00f3n de un servlets. Los servlets se construyen basados en la herencia de su clase padre Http Servlets, clase p\u00fablica y abstracta que permite que una clase herede los m\u00e9todos y atributos que hacen que se convierta en un servlets. La clase que herede de esta clase abstracta, debe sobreescribir al menos: + M\u00e9todo doGet + M\u00e9todo doPost + M\u00e9todo doDelete Esta regla es de oro y, teniendo esto en mente, comenzaremos a generar el primer servlet. Creaci\u00f3n de un servlet. Creamos un nuevo proyecto de tipo Dinamic Web Proyect y nombramos al mismo como PrimerServlet. Avanzamos en el wizard con next y \ufb01nish. Por el momento dejamos las opciones de web.xml por defecto. Al \ufb01nal Eclipse nos genera una estructura de Proyecto, la cual usaremos como base para nuestro trabajo. Por el momento la carpeta importante para nosotros es la Java Resources , que contendr\u00e1 el c\u00f3digo fuente de nuestro programa. Se compone de: La carpeta src , que aloja las clases java y la estructura de paquetes de la aplicaci\u00f3n. La carpeta libraries , que mantiene las librer\u00edas utilitarias. La carpeta build , que mantiene las clases autogeneradas. Luego de generar el Proyecto, vamos a crear nuestra primera clase. Para hacer esta labor, tenemos que seleccionar el nombre del proyecto con bot\u00f3n derecho, y presionar new, class. Una vez creado el proyecto, podemos ver que en: /PrimerServlet/src/cl/lherrera/web/servlets/GeneradorIndex.java package cl.lherrera.web.servlets; public class GeneradorIndex { } Esto por si solo no hace nada, hay que segir trabajandolo. @WebServlet(\"/inicio\"), Es una anotaci\u00f3n, que le indica al contenedor de servlets que esta clase es un servlet, que debe ser accedido mediante URL y su path contenedor es /inicio. Recordemos que un servlet es un componente web que ser\u00e1 accedido por internet, por lo que para ubicar el elemento, debemos llamarlo mediante la direcci\u00f3n url del recurso. El primer m\u00e9todo protected es heredado desde la clase HttpServlet y su nombre es doGet() . Por el momento sabemos que este m\u00e9todo permite devolver una respuesta al navegador del cliente mediante el m\u00e9todo get. El resto del c\u00f3digo es java puro, simplemente estamos generando texto y se lo pasamos a un m\u00e9todo. Algo a destacar es la generaci\u00f3n de c\u00f3digo html en el mismo archivo java. Puedes ver que al imprimir c\u00f3digo estamos generando etiquetas html, las cuales el navegador puede interpretar directamente. El servlet nos queda entonces de la siguiente manera: package cl.lherrera.web.servlets; import java.io.IOException; import java.io.PrintWriter; import java.rmi.ServerException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.HttpSession; @WebServlet(\"/inicio\") public class GeneradorIndex extends HttpServlet { protected void doGet( HttpServletRequest request, HttpServletResponse response) throws IOException, ServerException { // variable de sessi\u00f3n HttpSession session = request.getSession(); // creador de contenido web PrintWriter salida = response.getWriter(); // Texto a imprimir, un alert de Javascript (web) StringBuilder textoWeb = new StringBuilder(\"<script type=\\\"text/javascript\\\">\"); textoWeb.append(\"alert('Hola desde GeneradorIndex !!');\"); textoWeb.append(\"</script>\"); // imprime en el documento HTML salida.println(textoWeb.toString()); return; } } No hay que olvidar poner un index.html , para que cargue por defecto al iniciar el servidor. Manejo de informaci\u00f3n entre servlets Competencias: Entender el funcionamiento de m\u00e9todos getParams. Enviar par\u00e1metros desde el cliente. Aplicar el env\u00edo de informaci\u00f3n entre servlets. Introducci\u00f3n Los servlet, no solamente se encarga de devolver recursos a los clientes que lo solicitan, tambi\u00e9n puede comunicarse con otras clases servlets para compartir informaci\u00f3n y articular el \ufb02ujo correcto de un sistema web. Esta capacidad es una gran raz\u00f3n del por que esta tecnolog\u00eda es tan demandada y veremos la forma en la cual estas clases pueden comunicarse entre s\u00ed compartiendo sus variables y dando funcionalidad al sistema. Creaci\u00f3n de servlet de generaci\u00f3n respuesta Los servlets tienen la capacidad de recibir par\u00e1metros desde los clientes, para luego procesarlos y generar salidas. El objeto request, es el encargado de manejar tales par\u00e1metros y gracias a \u00e9l, podemos acceder a los datos enviados. Para entender el funcionamiento de esta caracter\u00edstica vamos a implementar una nueva funcionalidad en un ejemplo. En el ejemplo anterior, le sumamos ahora la captura de par\u00e1metros enviados desde el cliente: package cl.lherrera.web.servlets; import java.io.IOException; import java.io.PrintWriter; import java.rmi.ServerException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.HttpSession; @WebServlet(\"/inicio\") public class GeneradorIndex extends HttpServlet { protected void doGet( HttpServletRequest request, HttpServletResponse response) throws IOException, ServerException { // captura de par\u00e1metros String nombre = request.getParameter(\"nombre\"); String apellido = request.getParameter(\"apellido\"); // variable de sessi\u00f3n HttpSession session = request.getSession(); // creador de contenido web PrintWriter salida = response.getWriter(); // Texto a imprimir, un alert de Javascript (web) StringBuilder textoWeb = new StringBuilder(\"<script type=\\\"text/javascript\\\">\"); textoWeb.append(\"alert('Hola \"+ nombre + \" \" + apellido + \" desde GeneradorIndex !!');\"); textoWeb.append(\"</script>\"); salida.println(textoWeb.toString()); return; } } URL: http://localhost:8080/PrimerServlet/inicio?nombre=Luis&apellido=Herrera Aplicar el env\u00edo de informaci\u00f3n entre Servlets Si bien el \ufb02ujo normal entre un cliente servidor es desde navegador a servidor, hay ocasiones en que se requiere que en la capa de negocio un servlet pueda comunicarse con otro servlet. Para lograr este objetivo, java nos provee de los m\u00e9todos: /** * m\u00e9todo otorgado por HttpRequest, que obtiene el contexto * del servlet que queremos utilizar. */ getRequestDispatcher() /** * luego de obtener el contexto, le enviamos la direcci\u00f3n del servlet. */ getServletContext() Si en nuestro proyecto agregamos otro servlet. Este llamar\u00e1 a nuestro primer servlet, y le pasar\u00e1 el request y response, que le lleg\u00f3. package cl.lherrera.web.servlets; import java.io.IOException; import javax.servlet.RequestDispatcher; import javax.servlet.ServletContext; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; @WebServlet(\"/llamainicio\") public class LlamaAInicio extends HttpServlet { /** * */ private static final long serialVersionUID = 1L; protected void doGet( HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException { // construcci\u00f3n del llamado ServletContext contexto = request.getServletContext(); RequestDispatcher dispatcher = contexto.getRequestDispatcher(\"/inicio\"); dispatcher.forward(request, response); } } http://localhost:8080/PrimerServlet/llamainicio?nombre=Luis&apellido=Herrera Introducci\u00f3n a los Formularios y JSTL con JSP Competencias: Entender la funci\u00f3n de un formulario. Introducci\u00f3n a la tecnolog\u00eda JSP y JSTL. Instalaci\u00f3n de librer\u00edas JSTL. Aplicar envio de variables entre formularios. Introducci\u00f3n Los formularios con JSP est\u00e1n hechos con html puro, lo que signi\ufb01ca que no debemos saber nada extra para generar formularios. Lo que s\u00ed hay que tener en cuenta, es el mecanismo para enviar informaci\u00f3n y recibirla entre distintos archivos jsp. Utilizando JSTL es posible f\u00e1cilmente el env\u00edo de valores de formularios mediante m\u00e9todos post o get. Haremos unos ejemplos que gra\ufb01can este mecanismo. Haremos un acercamiento a la tecnolog\u00eda JSTL y a los JSP, pero no ser\u00e1 muy extenso, ya que esta tecnolog\u00eda se tratar\u00e1 en detalle en unidades posteriores. El objetivo real es entender c\u00f3mo es el proceso de envio de informacion entre formularios y servlets. Qu\u00e9 es un formulario web Pensemos un momento en una p\u00e1gina web, con estilos y estructuras que permiten al usuario enterarse de los productos o servicios que una empresa puede ofrecer. Tal p\u00e1gina es solo descriptiva ya que solamente se encarga de desplegar informaci\u00f3n y mostrarla de manera ordenada y atractiva. Pero hay un tema pendiente el cual es la interacci\u00f3n con el usuario . La persona que usa la web no tiene ninguna forma de alimentar con datos al sitio web, y por consiguiente no hay forma de procesar datos ni tampoco de generar conocimientos. Aqu\u00ed entran en juego los formularios web, que son el primer puente entre el usuario y las bases de datos, o la l\u00f3gica real de la empresa . Estos elementos web poseen componentes, que capturan los datos del usuario mediante cajas de texto, listas desplegables, combos de opciones y una serie de componentes html, y gracias a ellos una simple p\u00e1gina web est\u00e1tica se puede convertir en un real sistema web (acompa\u00f1ado de alg\u00fan lenguaje de programaci\u00f3n por el lado del servidor y una base de datos obviamente). Introducci\u00f3n a los JSP y JSTL . JSP Java Server Page , m\u00e1s conocido simplemente como jsp, es una tecnolog\u00eda del stack Java JEE que se encarga de proveer herramientas para que los desarrolladores puedan construir p\u00e1ginas web generadas din\u00e1micamente, basadas en el lenguaje de marcado HTML, XML u otro tipo de documentos. Fue lanzado en el a\u00f1o 1999 por Sun Microsystem. Tiene muchas similitudes con otras tecnolog\u00edas como lo son PHP o ASP , pero implementando el lenguaje de programaci\u00f3n Java. Para poder utilizar esta tecnolog\u00eda JSP, es necesario contar con un servidor web compatible con un contenedor de servlets como apache, el cual ya fue utilizado en unidades anteriores. Si analizamos la arquitectura, JSP est\u00e1 basada en el funcionamiento de los servlets, ya que al ser ejecutados, las p\u00e1ginas JSP se convierten internamente en servlets en tiempo de ejecuci\u00f3n , por lo tanto se podr\u00eda decir que una p\u00e1gina JSP es en realidad un servlet . Una p\u00e1gina JSP se puede utilizar utilizando dos mec\u00e1nicas: Como componente de vista de un dise\u00f1o del lado del servidor , trabajando codo a codo con clases Java Bean como el modelo y con servlets como controlador. Posteriormente profundizaremos en la arquitectura cliente servidor. Como un componente independiente , con JSP, podemos incrustar c\u00f3digo java y ciertas acciones prede\ufb01nidas como inicializaci\u00f3n de variables e importaciones en una p\u00e1gina web con HTML (mezclamos contenido din\u00e1mico y contenido est\u00e1tico) . La p\u00e1gina pasa por una etapa de compilaci\u00f3n y ejecuci\u00f3n dentro del servidor para poder entregar un documento . Las p\u00e1ginas compiladas, al igual que las bibliotecas java contienen el c\u00f3digo en formato de ByteCode en vez de c\u00f3digo de m\u00e1quina. Al igual que otro programa en java, el archivo debe ejecutarse dentro de una m\u00e1quina virtual Java (JVM) que interact\u00faa con el sistema operativo host del servidor para proporcionar un entorno neutral para la plataforma. Los JSP se utilizan para generar documentos HTML y XML, pero a trav\u00e9s del uso de OutPutStream, tambi\u00e9n son capaces de entregar otros tipos de datos. El contenedor web, crea objetos JSP impl\u00edcitos como request, response, sesiones, aplicaciones, con\ufb01guraciones, p\u00e1ginas html, salidas y excepciones. El motor de las java Servlets Page crea estos objetos durante la fase de traducci\u00f3n (al igual que los servlets, las p\u00e1ginas JSP tienen el mismo ciclo de vida). JSTL (JavaServer Pages Standard Tag Library) La librer\u00eda JSTL, es un componente dentro de la especificaci\u00f3n del Java 2 Enterprise Edition (J2EE), JSTL no es m\u00e1s que un conjunto de librer\u00edas de etiquetas simples y est\u00e1ndares que encapsulan la funcionalidad principal que es usada com\u00fanmente para escribir p\u00e1ginas JSP. Las etiquetas JSTL est\u00e1n organizadas en 4 librer\u00edas: core : Comprende las funciones script b\u00e1sicas como loops, condicionales, y entrada/salida. xml : Comprende el procesamiento de xml fmt : Comprende la internacionalizaci\u00f3n y formato de valores como de moneda y fechas. sql : Comprende el acceso a base de datos. Utilizando estos componentes, podemos entregar mucha m\u00e1s potencia a nuestros documentos web, por ejemplo, podemos usar un loop de core , para desplegar una grilla, iterando con los resultados. Caracter\u00edsticas m\u00e1s signi\ufb01cativas de JSTL JSTL tambi\u00e9n es JSP, siendo un conjunto complementario de este. Utiliza 4 librer\u00edas est\u00e1ndar: SQL, XML, CORE, INTERNALIZACI\u00d3N JSTL de\ufb01ne un nuevo lenguaje de expresiones llamado EL. Al usar una etiqueta JSTL, lo que hacemos en a\u00f1adir una acci\u00f3n. Una etiqueta JSTL est\u00e1 delimitada por ${ } . Agregar JSTL a un proyecto (manualmente) JSTL, no est\u00e1 en el api oficial, por lo tanto hay que descargarlo, para la descarga utilizamos la siguiente URL: jstl-standard , jstl.jar , jstl-impl.jar . Luego de eso, debemos dejar los archivos en una carpeta en el pc, en mi caso la he dejado en la carpeta aplicaciones junto a Apache Tomcat , pero el destino no importa mientras no eliminemos los jars . Con los archivos en una carpeta, accedemos al proyecto y en las propiedades ir a, Java Build Path, agregar las librer\u00edas externas, aplicar y cerrar. Una vez relizado esto, debemos agregar manualmente las librer\u00edas a /PrimerServlet/WebContent/WEB-INF/lib/ , las tres, simplemente copiando y pegando desde donde las tenemos. Finalmente creamos un archivo JSP , llamado PrimerUsoJstl.jsp , lo creamos en WebContent , con el siguiente contenido: /PrimerServlet/WebContent/PrimerUsoJstl.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\"%> <%@ taglib prefix=\"x\" uri=\"http://java.sun.com/jsp/jstl/xml\"%> <%@ taglib prefix=\"fmt\" uri=\"http://java.sun.com/jsp/jstl/fmt\"%> <%@ taglib prefix=\"sql\" uri=\"http://java.sun.com/jsp/jstl/sql\"%> <title>Usando JSTL</title> </head> <body> <p>Cadena de caracteres: <strong> <!-- ac\u00e1 se hace uso del core, es como un System.out.println() --> <c:out value=\"1+2+3\" /> </strong> </p> </body> </html> Ejecutamos la aplicaci\u00f3n con el servidor obteniendo el siguiente resultado: Tags JSTL Para referenciar la librer\u00eda JSTL Core en una p\u00e1gina JSP, debemos declarar la cabecera del documento como a continuaci\u00f3n: <%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %> Lo m\u00e1s signi\ufb01cativo es el prefix=\"c\" , que especi\ufb01ca el tipo de etiqueta y el contexto (conjunto de variables que se poseen, el contexto de la sesi\u00f3n, solamente posee las variables asociadas a la sesi\u00f3n) que se necesita utilizar mediante JSTL. JSTL incluye una gran variedad de tags que engloban distintas \u00e1reas funcionales. Para segmentar estas \u00e1reas, se utilizan namespaces. JSTL expone m\u00faltiples tags en estas url (no son links, son la ubicaci\u00f3n del recurso uri ): Core: http://java.sun.com/jsp/jstl/core XML: http://java.sun.com/jsp/jstl/xml Internationalization: http://java.sun.com/jsp/jstl/fmt SQL: http://java.sun.com/jsp/jstl/sql Functions: http://java.sun.com/jsp/jstl/functions Esta tabla nos expone las opciones disponibles de JSTL: Ejemplos finales Ejemplo usando JSTL (Uso de ${} ) Creamos un nuevo .jsp : /PrimerServlet/WebContent/ejemplo001.jsp , esto no solamente imprimir\u00e1 una cadena, si no que adem\u00e1s realizar\u00e1 operaciones aritm\u00e9ticas como si lo estubieramos realizando desde Java. <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %> <%@ taglib prefix=\"x\" uri=\"http://java.sun.com/jsp/jstl/xml\" %> <%@ taglib prefix=\"fmt\" uri=\"http://java.sun.com/jsp/jstl/fmt\" %> <%@ taglib prefix=\"sql\" uri=\"http://java.sun.com/jsp/jstl/sql\" %> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Usando JSTL</title> <style> p {} #texto { margin: 0 auto; width: 300px; height: 100px; border: solid 1px black; padding-left: 30px; } #cabecera { margin: 0 auto; width: 300px; border: solid 1px black; padding-left: 30px; background-color: green; color: white; } </style> </head> <body> <div id=\"cabecera\"> <h3>Ejemplos con JSTL salida estandar </h3> </div> <div id=\"texto\"> <p>Cadena de caracteres: <c:out value=\"1+2+3\" /> </p> <p>Suma de caracteres: <c:out value=\"${1+2+3}\" /> </p> </div> </body> </html> Ejemplo: Env\u00edo de valores entre jsp En este ejercicio crearemos un simple formulario, con la entrada de dos valores nombre y apellido, que luego de ser enviados ser\u00e1n recibidos por un jsp con las etiquetas c: out . Es decir que ingresaremos valores en un formulario y estos valores ser\u00e1n luego mostrados. El env\u00edo en este caso, puede ser realizado por get o por post. El verdadero poder de core radica en poder tener acceso a los par\u00e1metros de manera r\u00e1pida y sencilla. Creamos dos archivos `jsp`` /PrimerServlet/WebContent/ejemplo002.jsp /PrimerServlet/WebContent/muestraRespuesta.jsp ejemplo002.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %> <%@ taglib prefix=\"x\" uri=\"http://java.sun.com/jsp/jstl/xml\" %> <%@ taglib prefix=\"fmt\" uri=\"http://java.sun.com/jsp/jstl/fmt\" %> <%@ taglib prefix=\"sql\" uri=\"http://java.sun.com/jsp/jstl/sql\" %> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Usando JSTL</title> <style> p {} #texto { margin: 0 auto; width: 300px; height: 100px; border: solid 1px black; padding-left: 30px; } #cabecera { margin: 0 auto; width: 300px; border: solid 1px black; padding-left: 30px; background-color: green; color: white; } </style> </head> <body> <div id=\"cabecera\"> <h3>FORMULARIO DE ENV\u00cdO</h3> </div> <div id=\"texto\"> <form action=\"muestraRespuesta.jsp\" method=\"get\"> <label for=\"nombre\">Nombre</label> <input type=\"text\" placeholder=\"Ingrese nombre\" id=\"nombre\" name=\"nombre\"><br /> <label for=\"apellido\">Apellido</label> <input type=\"text\" placeholder=\"Ingrese apellido\" id=\"apellido\" name=\"apellido\"> <input type=\"submit\" value=\"Enviar\"> </form> </div> </body> </html> muestraRespuesta.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %> <%@ taglib prefix=\"x\" uri=\"http://java.sun.com/jsp/jstl/xml\" %> <%@ taglib prefix=\"fmt\" uri=\"http://java.sun.com/jsp/jstl/fmt\" %> <%@ taglib prefix=\"sql\" uri=\"http://java.sun.com/jsp/jstl/sql\" %> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Usando JSTL</title> <style> p {} #texto { margin: 0 auto; width: 300px; height: 100px; border: solid 1px black; padding-left: 30px; } #cabecera { margin: 0 auto; width: 300px; border: solid 1px black; padding-left: 30px; background-color: green; color: white; } </style> </head> <body> <div id=\"cabecera\"> <h3>Ejemplo JSTL salida estandar</h3> </div> <div id=\"texto\"> <p>Nombre: <c:out value=\"${ param.nombre }\"/></p> <p>Apellido: <c:out value=\"${ param.apellido }\"/></p> </div> </body> </html> Queda de ejercicio hacerlo con bootstrap. Como se ha visto en las pr\u00e1cticas, con el uso de jstl y jsp es muy simple generar una comunicaci\u00f3n \ufb02uida entre elementos de una aplicaci\u00f3n web. Por el momento solo se reviso lo m\u00e1s b\u00e1sico de los tags JSTL , ya que adem\u00e1s de permitir el env\u00edo de datos entre formularios jsp, tambi\u00e9n cuentan con iteraciones, decisiones, tags de manejos de informaci\u00f3n y m\u00e1s, pero para comenzar a entender las arquitecturas y la comunicaci\u00f3n entre componentes es un muy buen comienzo.","title":"Unidad 1: Introducci\u00f3n a Java Servlets y JSP"},{"location":"modulos/mod_4/mod4_uni001l1/#unidad-1-introduccion-a-java-servlets-y-jsp","text":"","title":"Unidad 1: Introducci\u00f3n a Java Servlets y JSP"},{"location":"modulos/mod_4/mod4_uni001l1/#introduccion-a-java-servlets-y-jsp-parte-i","text":"","title":"Introducci\u00f3n a Java Servlets y JSP - Parte I"},{"location":"modulos/mod_4/mod4_uni001l1/#competencias","text":"Conocer herramientas involucradas. Instalar el kit de desarrollo de java (JDK) en mac. Instalar el kit de desarrollo de java (JDK) en Windows. Conocer e instalar el entorno de desarrollo Eclipse. Conocer e instalar el contenedor web Apache. Comprobar el correcto funcionamiento del servidor Tomcat .","title":"Competencias"},{"location":"modulos/mod_4/mod4_uni001l1/#introduccion","text":"Para comenzar con las labores de desarrollo es necesario contar con un ambiente perfectamente instalado y con\ufb01gurado para poder trabajar de forma c\u00f3moda y productiva. El stack de tecnolog\u00edas que utilizaremos se pueden observar en la imagen 1.","title":"Introducci\u00f3n"},{"location":"modulos/mod_4/mod4_uni001l1/#jdk-instalacion","text":"La JDK ( Java Developed Kit ) es la biblioteca esencial de java. Nos proporciona la biblioteca de clases java, la Java Virtual Machine , el compilador, documentaci\u00f3n, entre otros. Para instalarlo en cualquier entorno ya sea mac, Windows o Linux, primero hay que descargarla desde la pagina web o\ufb01cial.","title":"JDK instalaci\u00f3n"},{"location":"modulos/mod_4/mod4_uni001l1/#que-paquete-java-necesito","text":"Desarrolladores de software: JDK (Java SE Development Kit) Para desarrolladores de Java. Incluye un JRE completo m\u00e1s herramientas para desarrollar, depurar y monitoreo de aplicaciones Java. Administradores que ejecutan aplicaciones en un servidor: Servidor JRE (Server Java Runtime Environment) Para desplegar aplicaciones Java en servidores. Incluye herramientas para el monitoreo de JVM y herramientas com\u00fanmente requeridas para aplicaciones de servidor, pero no incluye integraci\u00f3n de navegador (el complemento de Java), actualizaci\u00f3n autom\u00e1tica ni un instalador. Usuario \ufb01nal que ejecuta Java en un escritorio: JRE (Java Runtime Environment) . Cubre la mayor\u00eda de las necesidades de los usuarios \ufb01nales. Contiene todo lo necesario para ejecutar aplicaciones Java en su sistema.","title":"\u00bfQu\u00e9 paquete Java necesito?"},{"location":"modulos/mod_4/mod4_uni001l1/#instalacion-jdk-en-mac","text":"El primer paso es descargar el jdk desde el link adjunto. Nos mostrar\u00e1 una p\u00e1gina con las opciones de descarga: Seleccionamos la versi\u00f3n correspondiente a la de nuestro sistema operativo. En caso de utilizar mac obtendr\u00e1s el archivo jdk-8u201-macosx-x64.dgm . Para instalar solamente ejecuta el archivo .dmg y sigue las instrucciones siguiente siguiente para terminar con la instalaci\u00f3n. En mac no es necesario con\ufb01gurar variables de entorno. Para veri\ufb01car la versi\u00f3n del jdk que tenemos instalada, abre una consola e ingresa el comando java \u2013versi\u00f3n . \u279c java -version java version \"1.8.0_181\" Java(TM) SE Runtime Environment (build 1.8.0_181-b13) Java HotSpot(TM) 64-Bit Server VM (build 25.181-b13, mixed mode) En caso de no tener el JDK, la consola lanzar\u00e1 un error indicando que no se encuentra el java developer kit .","title":"Instalaci\u00f3n JDK en MAC"},{"location":"modulos/mod_4/mod4_uni001l1/#instalacion-jdk-en-windows","text":"Plataformas: Windows 2008 Server Windows 7 Windows 8 Windows XP Windows Server 2012 Windows Vista Windows 10. Veri\ufb01car la instalaci\u00f3n actual en tu Windows. Abrir una ventana CMD utilizando el men\u00fa contextual. Ejecutar: java -version javac -version Si esto no funciona, se debe descargar el JDK indicado para el sistema operativo que se posee en el siguiente link","title":"Instalaci\u00f3n JDK en Windows"},{"location":"modulos/mod_4/mod4_uni001l1/#instalacion-de-ide-eclipse","text":"Para el correcto seguimiento de los ejercicios utilizaremos Eclipse, ide para java con muchas caracter\u00edsticas que lo hacen uno de los m\u00e1s usados. Es multiplataforma por estar escrito en java, y solo hay que descargarlo y dejarlo en una ubicaci\u00f3n en tu equipo. Perfectamente podr\u00edas utilizar otro ide como netbeans o intellij, pero correr\u00eda por tu cuenta su funcionamiento particular. Para descargar el ide, dirigirse a la p\u00e1gina de descargas de Eclipse . Esperar a que la descarga se complete. Terminar\u00e1s con un archivo comprimido, el cual,se debe ubicar en alguna carpeta de tu equipo a elecci\u00f3n. Se sugiere crear una carpeta independiente para el ide. Dentro de archivo de descarga ver\u00e1s un icono de Eclipse, el cual debes ejecutar con doble click. Con esa acci\u00f3n basta para ejecutar el ide. Para los equipos mac, el archivo descargado es de tipo .dmg y para Windows el archivo es de tipo .exe. Al ejecutar el instalador, se nos mostrar\u00e1 una pantalla en donde nos pide seleccionar la versi\u00f3n de Eclipse que deseamos instalar. En este caso debemos pinchar la opci\u00f3n de Eclipse IDE for java EE developers \ud83d\udc40. Esta versi\u00f3n es la indicada para programar con Java Enterprise Edition.","title":"Instalaci\u00f3n de ide Eclipse"},{"location":"modulos/mod_4/mod4_uni001l1/#instalacion-del-contenedor-apache","text":"En esta etapa debemos instalar el servidor que har\u00e1 que las aplicaciones puedan ejecutarse en entorno local . El contenedor de aplicaciones es el software que otorga los servicios necesarios a los artefactos que generamos en este curso, y en esta ocasi\u00f3n utilizaremos el contenedor de servlets Apache Tomcat . Debemos entonces descargar el contenedor desde la siguiente URL . En la ventana, en la secci\u00f3n de nombre Binary Distributions descargamos desde la secci\u00f3n Core la versi\u00f3n del comprimido de Tomcat. Descargar el archivo zip (pgp, sha512) y crear en una carpeta de nombre contenedor en nuestro equipo. Se recomienda dejar la carpeta en C:/ en Windows, o en Aplicaciones en mac. El archivo descargado es un archivo comprimido que debemos descomprimir en la carpeta reci\u00e9n creada. Tanto en Mac como en Windows, el contenido de la carpeta no var\u00eda , manteniendo la misma estructura de carpetas. En este ejemplo se muestra la ubicaci\u00f3n en un equipo Mac. Teniendo en nuestro poder el contenedor Tomcat, es tiempo de con\ufb01gurarlo. Cabe decir que existen dos formas de con\ufb01guraci\u00f3n en un entorno de desarrollo. Con\ufb01gurado directamente en Eclipse. Con\ufb01gurado de forma manual en el equipo. Con\ufb01guraremos el contenedor directamente en Eclipse , ya que nos evita tener que ejecutar con\ufb01guraciones extras que si tendr\u00edamos que hacer en una con\ufb01guraci\u00f3n est\u00e1ndar. Otra ventaja que Eclipse integra una vista de servidores la cual nos permite levantar, apagar, limpiar y dar mantenci\u00f3n al contenedor Tomcat. De forma manual todas estas acciones b\u00e1sicas deben hacerse mediante consola de comandos. En la secci\u00f3n de proyectos, ejecutamos command + n y escribimos server . Esto nos lleva a la secci\u00f3n de configuraci\u00f3n de servidores para eclipse. La versi\u00f3n descargada fue la 9.0.31 , es por eso que debemos ir a: Apache -> Tomcat v9.0 Server Luego, debemos indicar donde se encuentra nuestro Apache Tomcat , en mi caso est\u00e1 en aplicaciones, dentro de una carpeta llamada contenedor . /Applications/contenedor/apache-tomcat-9.0.31 . Se recomienda seleccionar el JDK versi\u00f3n 1.8, por defecto para evitar en el caso que tengamos otra instalaci\u00f3n que se ejecute nuestro server en un JDK que no queremos. Al \ufb01nalizar, Eclipse enlazara el servidor Tomcat a la vista de servidores de Eclipse. Para poder probar si es que tenemos el servidor bien configurado nos vamos a la perspectiva WEB , y en la pesta\u00f1a servers, presionamos play. Adicional a esto, podremos crear una prueba, para poder comprobar el correcto servicio de Apache Tomcat . Es por esto que vamos a crear un proyecto de web din\u00e1mica. Dejamos las configuraciones por defecto, aunque para este caso se escoge la opci\u00f3n de la configuraci\u00f3n por defecto de Apache Tomcat 9.0. En /proyectoPrueba/WebContent/ , creamos un index.html . Luego ejecutamos desde el servidor, no como aplicaci\u00f3n. Con esto deber\u00edamos tener nuestra web funcionando correctamente.","title":"Instalaci\u00f3n del contenedor Apache"},{"location":"modulos/mod_4/mod4_uni001l1/#contenedor-tomcat","text":"","title":"Contenedor Tomcat"},{"location":"modulos/mod_4/mod4_uni001l1/#competencias_1","text":"Conocer caracter\u00edsticas del contenedor Tomcat Desplegar aplicaciones en Tomcat Con\ufb01gurar puerto de funcionamiento","title":"Competencias"},{"location":"modulos/mod_4/mod4_uni001l1/#introduccion_1","text":"El software Apache Tomcat es una implementaci\u00f3n de c\u00f3digo abierto de: Java Servlet JavaServer Pages Java Expression Language Java WebSocket. Las especi\ufb01caciones de Java Servlet, JavaServer Pages, Java Expression Language y Java WebSocket se desarrollan bajo el Proceso de la Comunidad Java. Tomcat cumple la funci\u00f3n de contenedor de servlets y est\u00e1 desarrollado en java, lo que signi\ufb01ca que puede correr en distintas arquitecturas , ya sea windows, linux o mac, siempre y cuando exista una m\u00e1quina virtual instalada . Aparte de ser un contenedor de servlets, tambi\u00e9n es un servidor web , por lo cual es posible subir sitios web din\u00e1micos a su infraestructura.","title":"Introducci\u00f3n"},{"location":"modulos/mod_4/mod4_uni001l1/#estructura","text":"Para conocer el funcionamiento de Tomcat, es necesario conocer su estructura de carpetas, la cual en la con\ufb01guraci\u00f3n inicial ya hemos visto. La descripci\u00f3n de las carpetas m\u00e1s importantes de Tomcat son las siguientes: bin: Archivos ejecutables, como por ejemplo los script para ejecutar el server o detenerlo . common: Clases comunes, son compartidas por el motor Tomcat (Catalina) o por las aplicaciones web. logs: Muestra los logs del servidor . webapps: Archivo que contiene las aplicaciones web (los artefactos).","title":"Estructura"},{"location":"modulos/mod_4/mod4_uni001l1/#instalar-aplicaciones-en-tomcat","text":"En el ejercicio anterior de prueba de funcionamiento de Tomcat, al momento de crear el html y encender el servidor mediante Eclipse, se vio la siguiente pantalla: La imagen muestra el \u00e1rea en donde Tomcat guarda las aplicaciones que va a levantar . Es el s\u00edmil de la carpeta webApps de la ubicaci\u00f3n de Tomcat , pero en este caso Eclipse se encarga de alojar la carpeta del proyecto en la ubicaci\u00f3n correcta . Al momento de subir el sitio mediante Eclipse, el contenedor est\u00e1 con\ufb01gurado para levantar el proyecto y generar los recursos necesarios para publicar el sistema y as\u00ed puede ser accedido mediante http.","title":"Instalar aplicaciones en Tomcat"},{"location":"modulos/mod_4/mod4_uni001l1/#cambiar-puerto-de-tomcat","text":"Hay ocasiones, en que el puerto por defecto de Tomcat no es posible utilizarlo( 8080 ), o simplemente est\u00e1 ocupado por otras aplicaciones. La soluci\u00f3n es cerrar esas aplicaciones para liberar el puerto, pero existe otra alternativa que consta de cambiar el puerto por defecto del contenedor. Macintosh HD\u2069 \u25b8 \u2068Aplicaciones\u2069 \u25b8 \u2068contenedor\u2069 \u25b8 \u2068apache-tomcat-9.0.31\u2069 \u25b8 \u2068conf\u2069 Para generar el cambio, debemos dirigirnos dentro de la carpeta de instalaci\u00f3n de Tomcat en la carpeta: /conf . En la carpeta, debemos ubicar el archivo server.xml el cual tiene las con\ufb01guraciones globales del servidor Tomcat. Ver\u00e1s que es un archivo con bastantes l\u00edneas de c\u00f3digos, en donde lo importante para el cambio de puerto es la l\u00ednea: ... <Connector port=\"8080\" protocol=\"HTTP/1.1\" connectionTimeout=\"20000\" redirectPort=\"8443\" /> ... Simplemente tenemos que cambiar el puerto por defecto a alg\u00fan otro, guardar y reiniciar Tomcat, para utilizar el puerto con\ufb01gurado.","title":"Cambiar puerto de Tomcat"},{"location":"modulos/mod_4/mod4_uni001l1/#protocolo-http","text":"","title":"Protocolo http"},{"location":"modulos/mod_4/mod4_uni001l1/#competencias_2","text":"Utilizar protocolos http Entender el concepto de arquitectura web Entender request y response http","title":"Competencias"},{"location":"modulos/mod_4/mod4_uni001l1/#introduccion_2","text":"Cuando un servidor web genera un request hacia un cliente, por lo general env\u00eda alg\u00fan tipo de contenido para que el navegador lo interprete y lo pueda mostrar al usuario. En la mayor\u00eda de los casos el servidor env\u00eda un set de instrucciones en formato de c\u00f3digo HTML (Hyper Text Markup Languaje). El HTML le indica al cliente c\u00f3mo debe visualizarse el recurso web que fue solicitado. Veremos la base para entender c\u00f3mo funciona el protocolo de transferencia de hiper texto .","title":"Introducci\u00f3n"},{"location":"modulos/mod_4/mod4_uni001l1/#el-protocolo-http","text":"Sus siglas signi\ufb01can Hyper Text Transfer Protocol , o mejor dicho en espa\u00f1ol Protocolo de transferencia de hipertexto . Toda la interacci\u00f3n entre cliente y servidor es mediante este protocolo de comunicaci\u00f3n . El cliente env\u00eda un http-request y el servidor responde con un http-request . HTTP es un protocolo perteneciente a la capa de aplicaci\u00f3n y corre sobre otro protocolo llamado TCP. Es un protocolo ampliable, lo que signi\ufb01ca que en su evoluci\u00f3n ha sido capaz de transmitir no solo p\u00e1ginas web mediante html, si no que tambi\u00e9n es capaz de transmitir im\u00e1genes, audio, video, etc.","title":"El protocolo http"},{"location":"modulos/mod_4/mod4_uni001l1/#el-modelo-requestresponse-en-http","text":"El protocolo http, y todos los protocolos que est\u00e1n basados en \u00e9l, est\u00e1n construidos bajo el mismo modelo de comunicaci\u00f3n. Este modelo de comunicaci\u00f3n trabaja de la siguiente manera: Un cliente, t\u00edpicamente un navegador web, env\u00eda un request para que el servidor le devuelva cierto recurso. Cuando el server recibe el request, lo analiza, lo gestiona para luego enviar de vuelta un objeto response.","title":"El modelo request/response en HTTP"},{"location":"modulos/mod_4/mod4_uni001l1/#mensajes-http-request","text":"Veamos un ejemplo de request, en este caso inspeccionamos la p\u00e1gina de Desaf\u00edo Latam , para veri\ufb01car c\u00f3mo se env\u00eda la petici\u00f3n mediante http. En este ejemplo hacemos seguimiento a un archivo .css. Para abrir la consola del desarrollador, debes pinchar con bot\u00f3n derecho sobre la p\u00e1gina web y buscar la opci\u00f3n Inspeccionar. Al momento de presionar la opci\u00f3n, se abrir\u00e1 un sector en la parte inferior de la pantalla, con una serie de herramientas \u00fatiles para los desarrolladores: En el sector izquierdo, se puede apreciar el c\u00f3digo html que el navegador interpret\u00f3. Sirve mucho para veri\ufb01car las posiciones de tus elementos e inspeccionar errores de c\u00f3digo. Para poder ver los contenidos de los request y response de la p\u00e1gina web, debes pinchar la pesta\u00f1a Network y en su pantalla principal, al lado izquierdo en la columna name, seleccionar el recurso que se desea comprobar Al seleccionarlo, se ver\u00e1 toda la informaci\u00f3n del request en el lado derecho de la pantalla. Con esos pasos es posible investigar la mayor\u00eda de elementos que hacen que la p\u00e1gina web se despliegue. Vemos que la secci\u00f3n general, contiene una direcci\u00f3n URL, la cual est\u00e1 formada por: El protocolo La direcci\u00f3n del servidor La ubicaci\u00f3n del archivo css solicitado. Miremos la imagen de nuevo, vemos un sector que tiene el t\u00edtulo de REQUEST METHOD y su valor es GET . El valor get es un verbo http, y aparte del anterior existen varios m\u00e1s. Un verbo se utiliza para indicar de qu\u00e9 forma el request pide el recurso (m\u00e1s adelante veremos los verbos). Podemos ver tambi\u00e9n la direcci\u00f3n remota del servidor y la url de destino.","title":"Mensajes http-Request"},{"location":"modulos/mod_4/mod4_uni001l1/#mensaje-http-response","text":"Luego de generar un request a un servidor remoto, este nos devuelve nuestro recurso. La siguiente imagen muestra como es la respuesta: Lo importante de aqu\u00ed, es que el request internamente nos entrega bastante informaci\u00f3n sobre el recurso como: M\u00e9todo de respuesta, en este caso GET Content Type, en este caso un archivo .css La fecha.","title":"Mensaje http-response"},{"location":"modulos/mod_4/mod4_uni001l1/#codigos-de-error-http","text":"Los request y los response vienen con un c\u00f3digo de respuesta, el cual es generado por el servidor para indicar el resultado de los mensajes. HTTP, de\ufb01ne varios c\u00f3digos de error, pero los m\u00e1s conocidos son: C\u00f3digo de respuesta HTTP Ejemplo de c\u00f3digo de error IBM\u00ae Ejemplo de descripci\u00f3n 200 OK Ninguno Se ha manejado correctamente una solicitud v\u00e1lida y, opcionalmente, se ha proporcionado una respuesta al usuario. 202 Accepted Ninguno Se ha manejado correctamente una solicitud v\u00e1lida pero no garantiza que la acci\u00f3n solicitada se haya completado. 400 Bad Request BFGWI0001 El URI no es v\u00e1lido porque le falta un tipo de recurso. 403 Forbidden BFGWI0056 No se ha de\ufb01nido ning\u00fan identi\ufb01cador de usuario. 404 Not Found BFGWI0015 No se puede encontrar el recurso solicitado. 405 Method Not Allowed BFGWI0016 El recurso solicitado no da soporte al verbo HTTP que se ha utilizado en la solicitud.Por ejemplo, se ha utilizado GET con un recurso que s\u00f3lo permite POST o DELETE. 410 Resource Gone BFGWI0031 El recurso solicitado ya no est\u00e1 disponible. Por ejemplo, el archivo solicitado ha sido suprimido del espacio de archivos. 413 Request Entity Too Large BFGWI0026 La solicitud contiene un archivo que es demasiado grande para ser manejado por el servidor. 415 Unsupported Media Type BFGWI0017 Se ha recibido una solicitud con un tipo de medio, especi\ufb01cado por la cabecera HTTP Content-type, que no est\u00e1 soportado. 500 Internal Server Error BFGWI0018 Se ha encontrado un error interno al gestionar la solicitud. Se ha producido un archivo FFDC o ABEND. (Archivos que genera IBM para manejar los errores). 502 Bad Gateway BFGWI0019 La solicitud no se puede completar porque se ha producido un error. 503 Service Unavailable BFGWI0020 El destino no est\u00e1 disponible temporalmente. 504 Gateway Timeout BFGWI0021 Un intento de completar la solicitud ha sobrepasado el tiempo de espera debido a los l\u00edmites de tiempo. Todos estos c\u00f3digos de error son generados de forma autom\u00e1tica por el servidor, y nos permite como desarrolladores saber cual es el tipo de problema que est\u00e1 afectando el correcto funcionamiento de nuestros sistemas . Por ejemplo, pensemos que nuestro sitio web tiene un banner con la imagen de nuestra empresa y necesitamos que se despliegue, pero por alg\u00fan motivo ajeno a nosotros, tal imagen se borr\u00f3 del servidor. El servidor detectar\u00e1 que el recurso que estamos pidiendo no existe y autom\u00e1ticamente enviar\u00e1 un error 404. Nosotros recibimos el c\u00f3digo de error y podemos avisar al usuario mediante alg\u00fan mensaje o alguna otra acci\u00f3n.","title":"C\u00f3digos de error http"},{"location":"modulos/mod_4/mod4_uni001l1/#la-url","text":"Su sigla signi\ufb01ca Uniform Resource Locators , y se encarga de identi\ufb01car las direcciones en donde se alojan los recursos web. Veamos su estructura: https://www.desafiolatam.com:8927/java/inicio Https: Indica al navegador el protocolo que utiliza en el requerimiento. En este ejemplo es https://www.desafiolatam.cl: direccion_del_servidor . Es la ubicaci\u00f3n f\u00edsica de la m\u00e1quina en la cual esta alojado el sitio. Puerto: puerto de escucha del servidor. Path: Es la ubicaci\u00f3n f\u00edsica de los documentos que estamos solicitando, en el servidor.","title":"La URL"},{"location":"modulos/mod_4/mod4_uni001l1/#introduccion-a-los-servlets","text":"","title":"Introducci\u00f3n a los servlets"},{"location":"modulos/mod_4/mod4_uni001l1/#competencias_3","text":"Conocer la teor\u00eda detr\u00e1s de los servlets. Conocer el ciclo de Vida de los servlets. Aplicar ejemplo de uso del ciclo de vida.","title":"Competencias"},{"location":"modulos/mod_4/mod4_uni001l1/#introduccion_3","text":"Los servlets, son componentes java que tienen la capacidad de generar contenido web din\u00e1mico mediante request y response http. Esta tecnolog\u00eda extiende las capacidades de un sistema web que reside dentro de un contenedor web , el cual le otorga una serie de servicios de plataforma. Utilizando servlets, puedes perfectamente generar una p\u00e1gina web completa solamente con c\u00f3digo java y adem\u00e1s utilizar todo el poder\u00edo de la orientaci\u00f3n a objetos y la vasta biblioteca de clases que ofrece el jdk. Esto se traduce en que puedes armar un sistema web din\u00e1mico, con manejo de variables y funciones java como si fuera una aplicaci\u00f3n de consola, pero con una salida web mediante http y p\u00e1gina html .","title":"Introducci\u00f3n"},{"location":"modulos/mod_4/mod4_uni001l1/#los-servlets","text":"Como mencionamos hace poco, un servlet no es m\u00e1s que una clase java que trabaja dentro de un contenedor de servlets como Apache Tomcat, el cual es el encargado de extender la funcionalidad de la clase y darle m\u00e1s \"poder\" por decirlo de una forma. El servlet fuera del contenedor Tomcat pierde todo su poder y se convierte en un archivo de texto m\u00e1s , con extensi\u00f3n java imposible de ejecutar, ya que esta clase no cuenta con un m\u00e9todo \"Main\" que ejecute la rutina. Para gra\ufb01car el \ufb02ujo de trabajo de una petici\u00f3n web, pensemos en una p\u00e1gina web que solicita alg\u00fan tipo de recurso (puede ser desde un formulario web hasta una galer\u00eda de fotos, como tambi\u00e9n el c\u00e1lculo del iva de alg\u00fan valor) a un servlet. El servlet recibe la petici\u00f3n mediante el protocolo HTTP y hace su trabajo (puede ser crear los campos del formulario web, ir a buscar una imagen de la galer\u00eda de fotos o hacer el c\u00e1lculo del iva, etc...) para luego mediante el response (la respuesta) devuelve el recurso al navegador. La imagen, muestra el \ufb02ujo normal de petici\u00f3n entre clientes (navegador web) y servidor (contenedor de servlets, aqu\u00ed est\u00e1n los servlets). Esta es, la arquitectura t\u00edpica de un sistema web, la cual es conocida como cliente-servidor .","title":"Los servlets"},{"location":"modulos/mod_4/mod4_uni001l1/#ciclo-de-vida-de-un-servlet","text":"El ciclo de vida completo de un servlet es administrado por el contenedor de servlet y, antes de empezar a programarlos, hay que entender c\u00f3mo funciona la creaci\u00f3n y el funcionamiento de estos elementos de software. El ciclo de vida se divide en 4 pasos bien de\ufb01nidos: Carga del servlet. Inicializaci\u00f3n del servlet. Captura del request. Destrucci\u00f3n el request.","title":"Ciclo de vida de un Servlet"},{"location":"modulos/mod_4/mod4_uni001l1/#carga-del-servlet","text":"La primera etapa del ciclo de vida de un servlet parte con su inicializaci\u00f3n gracias al servidor Tomcat. El servidor ejecuta dos pasos en esta etapa: Loading : Carga de la clase servlet Instantiation : Creaci\u00f3n de una instancia del servlet. Para crear una nueva instancia del servlet, el contenedor utiliza un constructor sin par\u00e1metros.","title":"Carga del servlet"},{"location":"modulos/mod_4/mod4_uni001l1/#inicializacion-de-servlets","text":"Despu\u00e9s de que el servlet fue instanciado correctamente, el contenedor se encarga inicializarlo. \u00c9sto lo realiza invocando al m\u00e9todo Servlet.init() , que acepta la referencia del objeto ServletCon\ufb01g como par\u00e1metro. El m\u00e9todo Servlet.init() es invocado por el servidor solamente una vez, inmediatamente despu\u00e9s de que el objeto Servlet.init(ServletConfig) sea instanciado correctamente. En caso de que el servlet falle en su inicializaci\u00f3n, el contenedor lanza las excepciones: ServletException y UnavailableException .","title":"Inicializaci\u00f3n de Servlets"},{"location":"modulos/mod_4/mod4_uni001l1/#captura-del-request","text":"Despu\u00e9s de la inicializaci\u00f3n, la instancia del servlet est\u00e1 lista para atender los request del cliente. El contenedor de servlet realiza las siguientes operaciones cuando la instancia del servlet est\u00e1 lista: Crea los objetos ServletRequest y ServletResponse. Despu\u00e9s de crear los objetos ServletRequest y ServletResponse, se invoca al m\u00e9todo Servlet.service (ServletRequest, ServletResponse) al pasar los objetos de solicitud y respuesta. Mientras el m\u00e9todo service() procesa el request puede lanzar las excepciones ServletException, UnavailableException, e IOException.","title":"Captura del Request"},{"location":"modulos/mod_4/mod4_uni001l1/#destruir-el-servlets","text":"Cuando el contenedor decide destruir el servlet, ejecuta las siguientes acciones: Permite que todos los subprocesos que se ejecutan actualmente en el m\u00e9todo de servicio de la instancia de Servlet completen sus trabajos y sean liberados. Despu\u00e9s de que los procesos en ejecuci\u00f3n hayan completado sus trabajos, el contenedor Servlet llama al m\u00e9todo destroy() en la instancia de Servlet. Una vez ejecutado el m\u00e9todo destroy() , El Servlet container libera todas las referencias de esta instancia de Servlet para que sea elegible para el garbage collector. Se grafica un ejemplo de un servlet simple en la siguiente imagen.","title":"Destruir el Servlets"},{"location":"modulos/mod_4/mod4_uni001l1/#creacion-del-primer-servlet","text":"","title":"Creaci\u00f3n del primer servlet"},{"location":"modulos/mod_4/mod4_uni001l1/#competencias_4","text":"Entender c\u00f3mo se compone un servlet. Compilaci\u00f3n de un servlet. Probar servlets en el contenedor. Conocer los m\u00e9todos de los servlets.","title":"Competencias"},{"location":"modulos/mod_4/mod4_uni001l1/#introduccion_4","text":"En una arquitectura web, la comunicaci\u00f3n entre cliente y servidor es crucial para un funcionamiento colaborativo, y dentro de la tecnolog\u00eda JEE, un servlet, es uno de los principales actores. Ya estudiamos qu\u00e9 es un servlet y cual es su ciclo de vida, por lo que ahora es tiempo de empezar a implementarlos para descubrir poco a poco cuales son sus funciones y que nos permiten hacer.","title":"Introducci\u00f3n"},{"location":"modulos/mod_4/mod4_uni001l1/#composicion-de-un-servlets","text":"Los servlets se construyen basados en la herencia de su clase padre Http Servlets, clase p\u00fablica y abstracta que permite que una clase herede los m\u00e9todos y atributos que hacen que se convierta en un servlets. La clase que herede de esta clase abstracta, debe sobreescribir al menos: + M\u00e9todo doGet + M\u00e9todo doPost + M\u00e9todo doDelete Esta regla es de oro y, teniendo esto en mente, comenzaremos a generar el primer servlet.","title":"Composici\u00f3n de un servlets."},{"location":"modulos/mod_4/mod4_uni001l1/#creacion-de-un-servlet","text":"Creamos un nuevo proyecto de tipo Dinamic Web Proyect y nombramos al mismo como PrimerServlet. Avanzamos en el wizard con next y \ufb01nish. Por el momento dejamos las opciones de web.xml por defecto. Al \ufb01nal Eclipse nos genera una estructura de Proyecto, la cual usaremos como base para nuestro trabajo. Por el momento la carpeta importante para nosotros es la Java Resources , que contendr\u00e1 el c\u00f3digo fuente de nuestro programa. Se compone de: La carpeta src , que aloja las clases java y la estructura de paquetes de la aplicaci\u00f3n. La carpeta libraries , que mantiene las librer\u00edas utilitarias. La carpeta build , que mantiene las clases autogeneradas. Luego de generar el Proyecto, vamos a crear nuestra primera clase. Para hacer esta labor, tenemos que seleccionar el nombre del proyecto con bot\u00f3n derecho, y presionar new, class. Una vez creado el proyecto, podemos ver que en: /PrimerServlet/src/cl/lherrera/web/servlets/GeneradorIndex.java package cl.lherrera.web.servlets; public class GeneradorIndex { } Esto por si solo no hace nada, hay que segir trabajandolo. @WebServlet(\"/inicio\"), Es una anotaci\u00f3n, que le indica al contenedor de servlets que esta clase es un servlet, que debe ser accedido mediante URL y su path contenedor es /inicio. Recordemos que un servlet es un componente web que ser\u00e1 accedido por internet, por lo que para ubicar el elemento, debemos llamarlo mediante la direcci\u00f3n url del recurso. El primer m\u00e9todo protected es heredado desde la clase HttpServlet y su nombre es doGet() . Por el momento sabemos que este m\u00e9todo permite devolver una respuesta al navegador del cliente mediante el m\u00e9todo get. El resto del c\u00f3digo es java puro, simplemente estamos generando texto y se lo pasamos a un m\u00e9todo. Algo a destacar es la generaci\u00f3n de c\u00f3digo html en el mismo archivo java. Puedes ver que al imprimir c\u00f3digo estamos generando etiquetas html, las cuales el navegador puede interpretar directamente. El servlet nos queda entonces de la siguiente manera: package cl.lherrera.web.servlets; import java.io.IOException; import java.io.PrintWriter; import java.rmi.ServerException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.HttpSession; @WebServlet(\"/inicio\") public class GeneradorIndex extends HttpServlet { protected void doGet( HttpServletRequest request, HttpServletResponse response) throws IOException, ServerException { // variable de sessi\u00f3n HttpSession session = request.getSession(); // creador de contenido web PrintWriter salida = response.getWriter(); // Texto a imprimir, un alert de Javascript (web) StringBuilder textoWeb = new StringBuilder(\"<script type=\\\"text/javascript\\\">\"); textoWeb.append(\"alert('Hola desde GeneradorIndex !!');\"); textoWeb.append(\"</script>\"); // imprime en el documento HTML salida.println(textoWeb.toString()); return; } } No hay que olvidar poner un index.html , para que cargue por defecto al iniciar el servidor.","title":"Creaci\u00f3n de un servlet."},{"location":"modulos/mod_4/mod4_uni001l1/#manejo-de-informacion-entre-servlets","text":"","title":"Manejo de informaci\u00f3n entre servlets"},{"location":"modulos/mod_4/mod4_uni001l1/#competencias_5","text":"Entender el funcionamiento de m\u00e9todos getParams. Enviar par\u00e1metros desde el cliente. Aplicar el env\u00edo de informaci\u00f3n entre servlets.","title":"Competencias:"},{"location":"modulos/mod_4/mod4_uni001l1/#introduccion_5","text":"Los servlet, no solamente se encarga de devolver recursos a los clientes que lo solicitan, tambi\u00e9n puede comunicarse con otras clases servlets para compartir informaci\u00f3n y articular el \ufb02ujo correcto de un sistema web. Esta capacidad es una gran raz\u00f3n del por que esta tecnolog\u00eda es tan demandada y veremos la forma en la cual estas clases pueden comunicarse entre s\u00ed compartiendo sus variables y dando funcionalidad al sistema.","title":"Introducci\u00f3n"},{"location":"modulos/mod_4/mod4_uni001l1/#creacion-de-servlet-de-generacion-respuesta","text":"Los servlets tienen la capacidad de recibir par\u00e1metros desde los clientes, para luego procesarlos y generar salidas. El objeto request, es el encargado de manejar tales par\u00e1metros y gracias a \u00e9l, podemos acceder a los datos enviados. Para entender el funcionamiento de esta caracter\u00edstica vamos a implementar una nueva funcionalidad en un ejemplo. En el ejemplo anterior, le sumamos ahora la captura de par\u00e1metros enviados desde el cliente: package cl.lherrera.web.servlets; import java.io.IOException; import java.io.PrintWriter; import java.rmi.ServerException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.HttpSession; @WebServlet(\"/inicio\") public class GeneradorIndex extends HttpServlet { protected void doGet( HttpServletRequest request, HttpServletResponse response) throws IOException, ServerException { // captura de par\u00e1metros String nombre = request.getParameter(\"nombre\"); String apellido = request.getParameter(\"apellido\"); // variable de sessi\u00f3n HttpSession session = request.getSession(); // creador de contenido web PrintWriter salida = response.getWriter(); // Texto a imprimir, un alert de Javascript (web) StringBuilder textoWeb = new StringBuilder(\"<script type=\\\"text/javascript\\\">\"); textoWeb.append(\"alert('Hola \"+ nombre + \" \" + apellido + \" desde GeneradorIndex !!');\"); textoWeb.append(\"</script>\"); salida.println(textoWeb.toString()); return; } } URL: http://localhost:8080/PrimerServlet/inicio?nombre=Luis&apellido=Herrera","title":"Creaci\u00f3n de servlet de generaci\u00f3n respuesta"},{"location":"modulos/mod_4/mod4_uni001l1/#aplicar-el-envio-de-informacion-entre-servlets","text":"Si bien el \ufb02ujo normal entre un cliente servidor es desde navegador a servidor, hay ocasiones en que se requiere que en la capa de negocio un servlet pueda comunicarse con otro servlet. Para lograr este objetivo, java nos provee de los m\u00e9todos: /** * m\u00e9todo otorgado por HttpRequest, que obtiene el contexto * del servlet que queremos utilizar. */ getRequestDispatcher() /** * luego de obtener el contexto, le enviamos la direcci\u00f3n del servlet. */ getServletContext() Si en nuestro proyecto agregamos otro servlet. Este llamar\u00e1 a nuestro primer servlet, y le pasar\u00e1 el request y response, que le lleg\u00f3. package cl.lherrera.web.servlets; import java.io.IOException; import javax.servlet.RequestDispatcher; import javax.servlet.ServletContext; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; @WebServlet(\"/llamainicio\") public class LlamaAInicio extends HttpServlet { /** * */ private static final long serialVersionUID = 1L; protected void doGet( HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException { // construcci\u00f3n del llamado ServletContext contexto = request.getServletContext(); RequestDispatcher dispatcher = contexto.getRequestDispatcher(\"/inicio\"); dispatcher.forward(request, response); } } http://localhost:8080/PrimerServlet/llamainicio?nombre=Luis&apellido=Herrera","title":"Aplicar el env\u00edo de informaci\u00f3n entre Servlets"},{"location":"modulos/mod_4/mod4_uni001l1/#introduccion-a-los-formularios-y-jstl-con-jsp","text":"","title":"Introducci\u00f3n a los Formularios y JSTL con JSP"},{"location":"modulos/mod_4/mod4_uni001l1/#competencias_6","text":"Entender la funci\u00f3n de un formulario. Introducci\u00f3n a la tecnolog\u00eda JSP y JSTL. Instalaci\u00f3n de librer\u00edas JSTL. Aplicar envio de variables entre formularios.","title":"Competencias:"},{"location":"modulos/mod_4/mod4_uni001l1/#introduccion_6","text":"Los formularios con JSP est\u00e1n hechos con html puro, lo que signi\ufb01ca que no debemos saber nada extra para generar formularios. Lo que s\u00ed hay que tener en cuenta, es el mecanismo para enviar informaci\u00f3n y recibirla entre distintos archivos jsp. Utilizando JSTL es posible f\u00e1cilmente el env\u00edo de valores de formularios mediante m\u00e9todos post o get. Haremos unos ejemplos que gra\ufb01can este mecanismo. Haremos un acercamiento a la tecnolog\u00eda JSTL y a los JSP, pero no ser\u00e1 muy extenso, ya que esta tecnolog\u00eda se tratar\u00e1 en detalle en unidades posteriores. El objetivo real es entender c\u00f3mo es el proceso de envio de informacion entre formularios y servlets.","title":"Introducci\u00f3n"},{"location":"modulos/mod_4/mod4_uni001l1/#que-es-un-formulario-web","text":"Pensemos un momento en una p\u00e1gina web, con estilos y estructuras que permiten al usuario enterarse de los productos o servicios que una empresa puede ofrecer. Tal p\u00e1gina es solo descriptiva ya que solamente se encarga de desplegar informaci\u00f3n y mostrarla de manera ordenada y atractiva. Pero hay un tema pendiente el cual es la interacci\u00f3n con el usuario . La persona que usa la web no tiene ninguna forma de alimentar con datos al sitio web, y por consiguiente no hay forma de procesar datos ni tampoco de generar conocimientos. Aqu\u00ed entran en juego los formularios web, que son el primer puente entre el usuario y las bases de datos, o la l\u00f3gica real de la empresa . Estos elementos web poseen componentes, que capturan los datos del usuario mediante cajas de texto, listas desplegables, combos de opciones y una serie de componentes html, y gracias a ellos una simple p\u00e1gina web est\u00e1tica se puede convertir en un real sistema web (acompa\u00f1ado de alg\u00fan lenguaje de programaci\u00f3n por el lado del servidor y una base de datos obviamente).","title":"Qu\u00e9 es un formulario web"},{"location":"modulos/mod_4/mod4_uni001l1/#introduccion-a-los-jsp-y-jstl","text":"","title":"Introducci\u00f3n a los JSP y JSTL."},{"location":"modulos/mod_4/mod4_uni001l1/#jsp","text":"Java Server Page , m\u00e1s conocido simplemente como jsp, es una tecnolog\u00eda del stack Java JEE que se encarga de proveer herramientas para que los desarrolladores puedan construir p\u00e1ginas web generadas din\u00e1micamente, basadas en el lenguaje de marcado HTML, XML u otro tipo de documentos. Fue lanzado en el a\u00f1o 1999 por Sun Microsystem. Tiene muchas similitudes con otras tecnolog\u00edas como lo son PHP o ASP , pero implementando el lenguaje de programaci\u00f3n Java. Para poder utilizar esta tecnolog\u00eda JSP, es necesario contar con un servidor web compatible con un contenedor de servlets como apache, el cual ya fue utilizado en unidades anteriores. Si analizamos la arquitectura, JSP est\u00e1 basada en el funcionamiento de los servlets, ya que al ser ejecutados, las p\u00e1ginas JSP se convierten internamente en servlets en tiempo de ejecuci\u00f3n , por lo tanto se podr\u00eda decir que una p\u00e1gina JSP es en realidad un servlet . Una p\u00e1gina JSP se puede utilizar utilizando dos mec\u00e1nicas: Como componente de vista de un dise\u00f1o del lado del servidor , trabajando codo a codo con clases Java Bean como el modelo y con servlets como controlador. Posteriormente profundizaremos en la arquitectura cliente servidor. Como un componente independiente , con JSP, podemos incrustar c\u00f3digo java y ciertas acciones prede\ufb01nidas como inicializaci\u00f3n de variables e importaciones en una p\u00e1gina web con HTML (mezclamos contenido din\u00e1mico y contenido est\u00e1tico) . La p\u00e1gina pasa por una etapa de compilaci\u00f3n y ejecuci\u00f3n dentro del servidor para poder entregar un documento . Las p\u00e1ginas compiladas, al igual que las bibliotecas java contienen el c\u00f3digo en formato de ByteCode en vez de c\u00f3digo de m\u00e1quina. Al igual que otro programa en java, el archivo debe ejecutarse dentro de una m\u00e1quina virtual Java (JVM) que interact\u00faa con el sistema operativo host del servidor para proporcionar un entorno neutral para la plataforma. Los JSP se utilizan para generar documentos HTML y XML, pero a trav\u00e9s del uso de OutPutStream, tambi\u00e9n son capaces de entregar otros tipos de datos. El contenedor web, crea objetos JSP impl\u00edcitos como request, response, sesiones, aplicaciones, con\ufb01guraciones, p\u00e1ginas html, salidas y excepciones. El motor de las java Servlets Page crea estos objetos durante la fase de traducci\u00f3n (al igual que los servlets, las p\u00e1ginas JSP tienen el mismo ciclo de vida).","title":"JSP"},{"location":"modulos/mod_4/mod4_uni001l1/#jstl-javaserver-pages-standard-tag-library","text":"La librer\u00eda JSTL, es un componente dentro de la especificaci\u00f3n del Java 2 Enterprise Edition (J2EE), JSTL no es m\u00e1s que un conjunto de librer\u00edas de etiquetas simples y est\u00e1ndares que encapsulan la funcionalidad principal que es usada com\u00fanmente para escribir p\u00e1ginas JSP. Las etiquetas JSTL est\u00e1n organizadas en 4 librer\u00edas: core : Comprende las funciones script b\u00e1sicas como loops, condicionales, y entrada/salida. xml : Comprende el procesamiento de xml fmt : Comprende la internacionalizaci\u00f3n y formato de valores como de moneda y fechas. sql : Comprende el acceso a base de datos. Utilizando estos componentes, podemos entregar mucha m\u00e1s potencia a nuestros documentos web, por ejemplo, podemos usar un loop de core , para desplegar una grilla, iterando con los resultados.","title":"JSTL (JavaServer Pages Standard Tag Library)"},{"location":"modulos/mod_4/mod4_uni001l1/#caracteristicas-mas-significativas-de-jstl","text":"JSTL tambi\u00e9n es JSP, siendo un conjunto complementario de este. Utiliza 4 librer\u00edas est\u00e1ndar: SQL, XML, CORE, INTERNALIZACI\u00d3N JSTL de\ufb01ne un nuevo lenguaje de expresiones llamado EL. Al usar una etiqueta JSTL, lo que hacemos en a\u00f1adir una acci\u00f3n. Una etiqueta JSTL est\u00e1 delimitada por ${ } .","title":"Caracter\u00edsticas m\u00e1s signi\ufb01cativas de JSTL"},{"location":"modulos/mod_4/mod4_uni001l1/#agregar-jstl-a-un-proyecto-manualmente","text":"JSTL, no est\u00e1 en el api oficial, por lo tanto hay que descargarlo, para la descarga utilizamos la siguiente URL: jstl-standard , jstl.jar , jstl-impl.jar . Luego de eso, debemos dejar los archivos en una carpeta en el pc, en mi caso la he dejado en la carpeta aplicaciones junto a Apache Tomcat , pero el destino no importa mientras no eliminemos los jars . Con los archivos en una carpeta, accedemos al proyecto y en las propiedades ir a, Java Build Path, agregar las librer\u00edas externas, aplicar y cerrar. Una vez relizado esto, debemos agregar manualmente las librer\u00edas a /PrimerServlet/WebContent/WEB-INF/lib/ , las tres, simplemente copiando y pegando desde donde las tenemos. Finalmente creamos un archivo JSP , llamado PrimerUsoJstl.jsp , lo creamos en WebContent , con el siguiente contenido: /PrimerServlet/WebContent/PrimerUsoJstl.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\"%> <%@ taglib prefix=\"x\" uri=\"http://java.sun.com/jsp/jstl/xml\"%> <%@ taglib prefix=\"fmt\" uri=\"http://java.sun.com/jsp/jstl/fmt\"%> <%@ taglib prefix=\"sql\" uri=\"http://java.sun.com/jsp/jstl/sql\"%> <title>Usando JSTL</title> </head> <body> <p>Cadena de caracteres: <strong> <!-- ac\u00e1 se hace uso del core, es como un System.out.println() --> <c:out value=\"1+2+3\" /> </strong> </p> </body> </html> Ejecutamos la aplicaci\u00f3n con el servidor obteniendo el siguiente resultado:","title":"Agregar JSTL a un proyecto (manualmente)"},{"location":"modulos/mod_4/mod4_uni001l1/#tags-jstl","text":"Para referenciar la librer\u00eda JSTL Core en una p\u00e1gina JSP, debemos declarar la cabecera del documento como a continuaci\u00f3n: <%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %> Lo m\u00e1s signi\ufb01cativo es el prefix=\"c\" , que especi\ufb01ca el tipo de etiqueta y el contexto (conjunto de variables que se poseen, el contexto de la sesi\u00f3n, solamente posee las variables asociadas a la sesi\u00f3n) que se necesita utilizar mediante JSTL. JSTL incluye una gran variedad de tags que engloban distintas \u00e1reas funcionales. Para segmentar estas \u00e1reas, se utilizan namespaces. JSTL expone m\u00faltiples tags en estas url (no son links, son la ubicaci\u00f3n del recurso uri ): Core: http://java.sun.com/jsp/jstl/core XML: http://java.sun.com/jsp/jstl/xml Internationalization: http://java.sun.com/jsp/jstl/fmt SQL: http://java.sun.com/jsp/jstl/sql Functions: http://java.sun.com/jsp/jstl/functions Esta tabla nos expone las opciones disponibles de JSTL:","title":"Tags JSTL"},{"location":"modulos/mod_4/mod4_uni001l1/#ejemplos-finales","text":"","title":"Ejemplos finales"},{"location":"modulos/mod_4/mod4_uni001l1/#ejemplo-usando-jstl-uso-de","text":"Creamos un nuevo .jsp : /PrimerServlet/WebContent/ejemplo001.jsp , esto no solamente imprimir\u00e1 una cadena, si no que adem\u00e1s realizar\u00e1 operaciones aritm\u00e9ticas como si lo estubieramos realizando desde Java. <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %> <%@ taglib prefix=\"x\" uri=\"http://java.sun.com/jsp/jstl/xml\" %> <%@ taglib prefix=\"fmt\" uri=\"http://java.sun.com/jsp/jstl/fmt\" %> <%@ taglib prefix=\"sql\" uri=\"http://java.sun.com/jsp/jstl/sql\" %> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Usando JSTL</title> <style> p {} #texto { margin: 0 auto; width: 300px; height: 100px; border: solid 1px black; padding-left: 30px; } #cabecera { margin: 0 auto; width: 300px; border: solid 1px black; padding-left: 30px; background-color: green; color: white; } </style> </head> <body> <div id=\"cabecera\"> <h3>Ejemplos con JSTL salida estandar </h3> </div> <div id=\"texto\"> <p>Cadena de caracteres: <c:out value=\"1+2+3\" /> </p> <p>Suma de caracteres: <c:out value=\"${1+2+3}\" /> </p> </div> </body> </html>","title":"Ejemplo usando JSTL (Uso de ${})"},{"location":"modulos/mod_4/mod4_uni001l1/#ejemplo-envio-de-valores-entre-jsp","text":"En este ejercicio crearemos un simple formulario, con la entrada de dos valores nombre y apellido, que luego de ser enviados ser\u00e1n recibidos por un jsp con las etiquetas c: out . Es decir que ingresaremos valores en un formulario y estos valores ser\u00e1n luego mostrados. El env\u00edo en este caso, puede ser realizado por get o por post. El verdadero poder de core radica en poder tener acceso a los par\u00e1metros de manera r\u00e1pida y sencilla. Creamos dos archivos `jsp`` /PrimerServlet/WebContent/ejemplo002.jsp /PrimerServlet/WebContent/muestraRespuesta.jsp ejemplo002.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %> <%@ taglib prefix=\"x\" uri=\"http://java.sun.com/jsp/jstl/xml\" %> <%@ taglib prefix=\"fmt\" uri=\"http://java.sun.com/jsp/jstl/fmt\" %> <%@ taglib prefix=\"sql\" uri=\"http://java.sun.com/jsp/jstl/sql\" %> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Usando JSTL</title> <style> p {} #texto { margin: 0 auto; width: 300px; height: 100px; border: solid 1px black; padding-left: 30px; } #cabecera { margin: 0 auto; width: 300px; border: solid 1px black; padding-left: 30px; background-color: green; color: white; } </style> </head> <body> <div id=\"cabecera\"> <h3>FORMULARIO DE ENV\u00cdO</h3> </div> <div id=\"texto\"> <form action=\"muestraRespuesta.jsp\" method=\"get\"> <label for=\"nombre\">Nombre</label> <input type=\"text\" placeholder=\"Ingrese nombre\" id=\"nombre\" name=\"nombre\"><br /> <label for=\"apellido\">Apellido</label> <input type=\"text\" placeholder=\"Ingrese apellido\" id=\"apellido\" name=\"apellido\"> <input type=\"submit\" value=\"Enviar\"> </form> </div> </body> </html> muestraRespuesta.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %> <%@ taglib prefix=\"x\" uri=\"http://java.sun.com/jsp/jstl/xml\" %> <%@ taglib prefix=\"fmt\" uri=\"http://java.sun.com/jsp/jstl/fmt\" %> <%@ taglib prefix=\"sql\" uri=\"http://java.sun.com/jsp/jstl/sql\" %> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Usando JSTL</title> <style> p {} #texto { margin: 0 auto; width: 300px; height: 100px; border: solid 1px black; padding-left: 30px; } #cabecera { margin: 0 auto; width: 300px; border: solid 1px black; padding-left: 30px; background-color: green; color: white; } </style> </head> <body> <div id=\"cabecera\"> <h3>Ejemplo JSTL salida estandar</h3> </div> <div id=\"texto\"> <p>Nombre: <c:out value=\"${ param.nombre }\"/></p> <p>Apellido: <c:out value=\"${ param.apellido }\"/></p> </div> </body> </html> Queda de ejercicio hacerlo con bootstrap. Como se ha visto en las pr\u00e1cticas, con el uso de jstl y jsp es muy simple generar una comunicaci\u00f3n \ufb02uida entre elementos de una aplicaci\u00f3n web. Por el momento solo se reviso lo m\u00e1s b\u00e1sico de los tags JSTL , ya que adem\u00e1s de permitir el env\u00edo de datos entre formularios jsp, tambi\u00e9n cuentan con iteraciones, decisiones, tags de manejos de informaci\u00f3n y m\u00e1s, pero para comenzar a entender las arquitecturas y la comunicaci\u00f3n entre componentes es un muy buen comienzo.","title":"Ejemplo: Env\u00edo de valores entre jsp"},{"location":"modulos/mod_4/mod4_uni001l2/","text":"Introducci\u00f3n a Java Servlets y JSP - Parte II Manejo de sesiones Competencias: Entender diferencia entre cookie y sesi\u00f3n. Aplicaci\u00f3n de variables de sesi\u00f3n en entorno de prueba. Introducci\u00f3n El protocolo http t\u00e9cnicamente no mantiene el estado en la aplicaci\u00f3n , esto quiere decir que olvidara los datos de los request y de los response a medida que el usuario interact\u00fae con la p\u00e1gina. Esto es un grave problema teniendo en cuenta la naturaleza de un sistema web, ya que no tendr\u00eda sentido estar preguntando al usuario cada vez que se llama una p\u00e1gina , o que par\u00e1metros envi\u00f3 en los formularios. Imagina c\u00f3mo trabaja un sitio real del calibre de Mercado Libre, por ejemplo; inicias sesi\u00f3n solo una vez y, a medida que vas navegando en el sitio, puedes ver que tu nombre de usuario se mantiene \u201cvivo\u201d entre p\u00e1gina y p\u00e1gina, permitiendo que agregues productos a tu carrito de compra. Esos productos est\u00e1n siendo a\u00f1adidos bajo el alero de tu nombre de usuario (de tu sesi\u00f3n) y no se perder\u00e1n, incluso si cambias de pesta\u00f1a. Esto asegura la compra y la \ufb01abilidad de los datos que se van almacenando. Este funcionamiento es posible gracias al manejo de sesiones , en una aplicaci\u00f3n web y a las cookies . En la terminolog\u00eda web, una sesi\u00f3n es simplemente el intervalo de tiempo l\u00edmite en que dos sistemas se comunican entre s\u00ed . Los dos sistemas pueden compartir informaci\u00f3n mediante arquitectura cliente servidor o arquitectura punto a punto. Sin embargo, con el protocolo http el estado de la comunicaci\u00f3n no se mantiene. A causa de esto, las aplicaciones web tienen que utilizar una serie de t\u00e9cnicas que permitan mantener el estado entre cliente y servidor en el transcurso del tiempo. Cuando hablamos de \"mantener el estado\" nos referimos a guardar los datos del usuario y su informaci\u00f3n relacionada , para que independiente de la navegaci\u00f3n del sitio, se siga reconociendo. Las cookies son la t\u00e9cnica m\u00e1s com\u00fanmente usada para mantener los valores del usuario en sesi\u00f3n, pero si bien cumple con su funci\u00f3n no estamos exentos de desventajas: Las cookies s\u00f3lo pueden mantener informaci\u00f3n textual. Son dependientes del navegador, esto signi\ufb01ca que si el cliente deshabilita las cookies , ya no ser\u00e1 posible utilizarlas. No puede almacenar m\u00e1s de 4kb de informaci\u00f3n. Para solventar estos problemas, los servlets implementan su propio mecanismo de manejo de sesiones. La imagen siguiente gra\ufb01ca como trabaja la sesi\u00f3n la tecnolog\u00eda java con servlets: La biblioteca de java nos provee de las clases HttpSession , la cual nos permite manejar y almacenar variables de sesi\u00f3n en torno a las acciones del usuario . Cuando hablamos de variables de sesi\u00f3n, estamos diciendo que esta clase puede almacenar cualquier tipo de elemento , incluidas las clases de la aplicaci\u00f3n (entidades de negocio). Vamos a analizar un ejemplo sencillo del manejo de sesi\u00f3n y el almacenamiento de variables asociados a un usuario: La siguiente clase, es solamente una entidad de negocio de tipo EntradasConcierto , la cual representa la venta de tickets para un evento musical y nos servir\u00e1 para simular la compra: Ejemplo de consulta de sesi\u00f3n Para este ejemplo necesitamos crear tres archivos en un Dynamic Web Project , al que he llamado: ventaEntradas . /ventaEntradas/src/cl/lherrera/modelos/EntradaConcierto.java /ventaEntradas/src/cl/lherrera/servlets/EjemploSesion.java /ventaEntradas/src/cl/lherrera/servlets/ObtieneSesion.java EntradaConcierto.java Este archivo es el modelo que se usar\u00e1 para almacenar la informaci\u00f3n package cl.lherrera.modelos; import java.util.Date; public class EntradaConcierto { private String titularEntrada; private String nombreArtista; private String ubicacion; private Date fechaConcierto; public String getTitularEntrada() { return titularEntrada; } public void setTitularEntrada(String titularEntrada) { this.titularEntrada = titularEntrada; } public String getNombreArtista() { return nombreArtista; } public void setNombreArtista(String nombreArtista) { this.nombreArtista = nombreArtista; } public String getUbicacion() { return ubicacion; } public void setUbicacion(String ubicacion) { this.ubicacion = ubicacion; } public Date getFechaConcierto() { return fechaConcierto; } public void setFechaConcierto(Date fechaConcierto) { this.fechaConcierto = fechaConcierto; } } EjemploSesion.java Esta clase, es la encargada de iniciar la sesi\u00f3n, es ac\u00e1 donde se inician algunos valores que luego ser\u00e1n consultados en otros contextos. package cl.lherrera.servlets; import java.io.IOException; import java.io.PrintWriter; import java.util.Date; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.HttpSession; import cl.lherrera.modelos.EntradaConcierto; @WebServlet(\"/creaSesion\") public class EjemploSesion extends HttpServlet { /** * */ private static final long serialVersionUID = 1L; private String textoHTML(EntradaConcierto entrada) { StringBuilder retorno = new StringBuilder(); retorno.append(\"<!DOCTYPE html> \"); retorno.append(\"<html lang=\\\"en\\\"> \"); retorno.append(\"<head> \"); retorno.append(\" <meta charset=\\\"UTF-8\\\"> \"); retorno.append(\" <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> \"); retorno.append(\" <title>Document</title> \"); retorno.append(\"</head> \"); retorno.append(\"<body> \"); retorno.append(\" <h1>Entradas para: \" + entrada.getNombreArtista() + \"</h1> \"); retorno.append(\" <h1>A nombre de: \" + entrada.getTitularEntrada() + \"</h1> \"); retorno.append(\"</body> \"); retorno.append(\"</html> \"); return retorno.toString(); } @Override protected void doGet( HttpServletRequest request, HttpServletResponse response) throws IOException { String usuario = request.getParameter(\"nombre\"); EntradaConcierto entrada = new EntradaConcierto(); // obtenemos la sesi\u00f3n del request. HttpSession sesion = request.getSession(true); // llenamos el objeto modelo con informaci\u00f3n de prueba entrada.setTitularEntrada(usuario); entrada.setNombreArtista(\"Adam Levine\"); entrada.setFechaConcierto(new Date()); entrada.setUbicacion(\"desubicado\"); // agregamos atributos en la sesi\u00f3n, (\"clave\": valor) sesion.setAttribute(\"datosCompra\", entrada); // seteamos informaci\u00f3n en el response PrintWriter writer = response.getWriter(); writer.println(textoHTML(entrada)); } } ObtieneSesion.java Finalmente, el servlet , que tomar\u00e1 los datos de la sesi\u00f3n y le dar\u00e1 dinamismo al sitio. package cl.lherrera.servlets; import java.io.IOException; import java.io.PrintWriter; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.HttpSession; import cl.lherrera.modelos.EntradaConcierto; @WebServlet(\"/obtieneSesion\") public class ObtieneSesion extends HttpServlet{ /** * */ private static final long serialVersionUID = 1L; private String textoHTML(EntradaConcierto entrada) { StringBuilder retorno = new StringBuilder(); retorno.append(\"<!DOCTYPE html> \"); retorno.append(\"<html lang=\\\"es\\\"> \"); retorno.append(\" \"); retorno.append(\"<head> \"); retorno.append(\" <meta charset=\\\"UTF-8\\\"> \"); retorno.append(\" <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> \"); retorno.append(\" <title>Document</title> \"); retorno.append(\" <link rel=\\\"stylesheet\\\" href=\\\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\\\" \"); retorno.append(\" integrity=\\\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\\\" crossorigin=\\\"anonymous\\\"> \"); retorno.append(\"</head> \"); retorno.append(\" \"); retorno.append(\"<body> \"); retorno.append(\" <div class=\\\"container my-5\\\"> \"); retorno.append(\" <div class=\\\"row\\\"> \"); retorno.append(\" <div class=\\\"col-2\\\"></div> \"); retorno.append(\" <div class=\\\"col-8\\\"> \"); retorno.append(\" \"); retorno.append(\" <div class=\\\"jumbotron\\\"> \"); retorno.append(\" <h1 class=\\\"display-4\\\">\" + entrada.getNombreArtista() + \"</h1> \"); retorno.append(\" <p class=\\\"lead\\\">Detalles:</p> \"); retorno.append(\" <hr class=\\\"my-4\\\"> \"); retorno.append(\" <ul> \"); retorno.append(\" <li>Fecha: \" + entrada.getFechaConcierto() + \"</li> \"); retorno.append(\" <li>Titular: \" + entrada.getTitularEntrada() + \"</li> \"); retorno.append(\" <li>Ubicaci&oacute;n: \" + entrada.getUbicacion() + \"</li> \"); retorno.append(\" </ul> \"); retorno.append(\" <a class=\\\"btn btn-primary btn-lg\\\" href=\\\"#\\\" role=\\\"button\\\">Apretar</a> \"); retorno.append(\" </div> \"); retorno.append(\" \"); retorno.append(\" </div> \"); retorno.append(\" <div class=\\\"col-2\\\"></div> \"); retorno.append(\" </div> \"); retorno.append(\" </div> \"); retorno.append(\" \"); retorno.append(\" \"); retorno.append(\" \"); retorno.append(\" <script src=\\\"https://code.jquery.com/jquery-3.4.1.slim.min.js\\\" \"); retorno.append(\" integrity=\\\"sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n\\\" \"); retorno.append(\" crossorigin=\\\"anonymous\\\"></script> \"); retorno.append(\" <script src=\\\"https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js\\\" \"); retorno.append(\" integrity=\\\"sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo\\\" \"); retorno.append(\" crossorigin=\\\"anonymous\\\"></script> \"); retorno.append(\" <script src=\\\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js\\\" \"); retorno.append(\" integrity=\\\"sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6\\\" \"); retorno.append(\" crossorigin=\\\"anonymous\\\"></script> \"); retorno.append(\"</body> \"); retorno.append(\" \"); retorno.append(\"</html> \"); return retorno.toString(); } @Override protected void doGet( HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { // capturando la session del request HttpSession sesion = req.getSession(); // obtenemos datos de la sesi\u00f3n, este atributo, debe esta previamente seteado. EntradaConcierto entrada = (EntradaConcierto) sesion.getAttribute(\"datosCompra\"); // seteamos informaci\u00f3n en el response PrintWriter writer = resp.getWriter(); writer.println(textoHTML(entrada)); } } Refactorizaci\u00f3n, utilizando archivos jsp En el ejemplo anterior se utilizaron servlets; pero ahora veremos como podemos quitar c\u00f3digos de las unidades de compilaci\u00f3n, separandolo en una capa de vista. Estructura del proyecto: . \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u251c\u2500\u2500 WEB-INF \u2502 \u2502 \u2514\u2500\u2500 lib \u2502 \u2502 \u251c\u2500\u2500 jstl-impl.jar \u2502 \u2502 \u251c\u2500\u2500 jstl-standard.jar \u2502 \u2502 \u2514\u2500\u2500 jstl.jar \u2502 \u251c\u2500\u2500 captura.jsp \u2502 \u2514\u2500\u2500 index.jsp \u251c\u2500\u2500 build \u2502 \u2514\u2500\u2500 classes \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u251c\u2500\u2500 modelos \u2502 \u2502 \u2514\u2500\u2500 EntradaConcierto.class \u2502 \u2514\u2500\u2500 servlets \u2502 \u251c\u2500\u2500 EjemploSesion.class \u2502 \u2514\u2500\u2500 ObtieneSesion.class \u2514\u2500\u2500 src \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u251c\u2500\u2500 modelos \u2502 \u2514\u2500\u2500 EntradaConcierto.java \u2514\u2500\u2500 servlets \u251c\u2500\u2500 EjemploSesion.java \u2514\u2500\u2500 ObtieneSesion.java El modelo: EntradaConcierto.java package cl.lherrera.modelos; import java.util.Date; public class EntradaConcierto { private String titularEntrada; private String nombreArtista; private String ubicacion; private Date fechaConcierto; public String getTitularEntrada() { return titularEntrada; } public void setTitularEntrada(String titularEntrada) { this.titularEntrada = titularEntrada; } public String getNombreArtista() { return nombreArtista; } public void setNombreArtista(String nombreArtista) { this.nombreArtista = nombreArtista; } public String getUbicacion() { return ubicacion; } public void setUbicacion(String ubicacion) { this.ubicacion = ubicacion; } public Date getFechaConcierto() { return fechaConcierto; } public void setFechaConcierto(Date fechaConcierto) { this.fechaConcierto = fechaConcierto; } } Servlets: EjemploSesion.java ObtieneSesion.java package cl.lherrera.servlets; import java.io.IOException; import java.io.PrintWriter; import java.util.Date; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.HttpSession; import cl.lherrera.modelos.EntradaConcierto; @WebServlet(\"/creaSesion\") public class EjemploSesion extends HttpServlet { /** * */ private static final long serialVersionUID = 1L; @Override protected void doGet( HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException { String usuario = request.getParameter(\"nombre\"); EntradaConcierto entrada = new EntradaConcierto(); // obtenemos la sesi\u00f3n del request. HttpSession sesion = request.getSession(true); // llenamos el objeto modelo con informaci\u00f3n de prueba entrada.setTitularEntrada(usuario); entrada.setNombreArtista(\"Adam Levine\"); entrada.setFechaConcierto(new Date()); entrada.setUbicacion(\"desubicado\"); // agregamos atributos en la sesi\u00f3n, (\"clave\": valor) sesion.setAttribute(\"datosCompra\", entrada); // asignamos el valor del atributo para el jsp request.setAttribute(\"entrada\", entrada); // capturamos el contexto del jsp request.getRequestDispatcher(\"index.jsp\").forward(request, response); } } package cl.lherrera.servlets; import java.io.IOException; import java.io.PrintWriter; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.HttpSession; import cl.lherrera.modelos.EntradaConcierto; @WebServlet(\"/obtieneSesion\") public class ObtieneSesion extends HttpServlet{ /** * */ private static final long serialVersionUID = 1L; @Override protected void doGet( HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { // capturando la session del request HttpSession sesion = req.getSession(); // obtenemos datos de la sesi\u00f3n, este atributo, debe esta previamente seteado. EntradaConcierto entrada = (EntradaConcierto) sesion.getAttribute(\"datosCompra\"); // asignamos el valor del atributo para el jsp req.setAttribute(\"entrada\", entrada); // enviamos los valores a una p\u00e1gina jsp req.getRequestDispatcher(\"captura.jsp\").forward(req, resp); } } WebContent: captura.jsp index.jsp No olvidar agregar [jstl-impl.jar, jstl-standard.jar, jstl.jar] al buildPath del proyecto, adem\u00e1s de la carpeta lib ubicada en web-inf. index.jsp <%@page import=\"java.util.Enumeration\"%> <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %> <!DOCTYPE html> <html lang=\"es\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Document</title> </head> <body> <h1> <c:out value=\"Entradas para: ${ entrada.getNombreArtista() }\" /> </h1> <h1> <c:out value=\"A nombre de: ${ entrada.getTitularEntrada() }\" /> </h1> </body> </html> captura.jsp <%@page import=\"java.util.Enumeration\"%> <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %> <!DOCTYPE html> <html lang=\"es\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Document</title> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\"> </head> <body> <div class=\"container my-5\"> <div class=\"row\"> <div class=\"col-2\"></div> <div class=\"col-8\"> <div class=\"jumbotron\"> <h1 class=\"display-4\"> <c:out value=\"${entrada.getNombreArtista()}\" /></h1> <p class=\"lead\">Detalles:</p> <hr class=\"my-4\"> <ul> <li><c:out value=\"Fecha: ${entrada.getFechaConcierto()}\" /></li> <li><c:out value=\"Titular: ${entrada.getTitularEntrada()}\" /></li> <li><c:out value=\"Ubicaci\u00f3n: ${entrada.getUbicacion()}\" /></li> </ul> <a class=\"btn btn-primary btn-lg\" href=\"#\" role=\"button\">Apretar</a> </div> </div> <div class=\"col-2\"></div> </div> </div> <script src=\"https://code.jquery.com/jquery-3.4.1.slim.min.js\" integrity=\"sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n\" crossorigin=\"anonymous\"></script> <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js\" integrity=\"sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo\" crossorigin=\"anonymous\"></script> <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js\" integrity=\"sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6\" crossorigin=\"anonymous\"></script> </body> </html> Las llamadas son las siguientes: # primera llamada, es en esta llamada donde se inicia la sesi\u00f3n y se guardan # las variables que se mantendr\u00e1n en las variables de sesi\u00f3n. http://localhost:8080/ventaEntradas/creaSesion?nombre=Luis%20Herrera # segunda llamada, es ac\u00e1 donde podemos ver que ocupamos las variables # de sesi\u00f3n y se comprueba que realmente las estamos utilizando. http://localhost:8080/ventaEntradas/obtieneSesion Vanilla - JSP (scriptlet) Hay que demostrar que el uso de JSTL, es la forma en que se trabajar\u00e1 con JSP; pero en muchas ocaciones, nos encontraremos con desarrollos que no poseen implementaci\u00f3n de estas librer\u00edas, es por ese motivo que debemos saber como utilizar java, en un archivo JSP. La forma de insertar c\u00f3digo en un archivo JSP, es usando: <% // todo el c\u00f3digo de java ac\u00e1 ... %> De esta forma, podemos en nuestros archivos jsp, insertar l\u00f3gica, utilizando el lenguage Java, de forma \"imperativa\" + (um poco de composici\u00f3n). Es importante recordar que un JSP, es verdaderamente un Servlet en tiempo de ejecuci\u00f3n. Es por esta raz\u00f3n que podemos incluir codigo Java junto a las etiquetas HTML, pero debemos indicar esta informaci\u00f3n, utilizando las etiquetas <%%> Para imprimir un mensaje por consola: <% System.out.println(\"Hola mundo\"); %> Para imprimir HTML <%=\"Hola mundo\" %> No debemos confundir un c\u00f3digo que imprime por pantalla del que imprime en la p\u00e1gina HTML, es decir que: <% System.out.println(\"Hola mundo\"); %> != <%=\"Hola mundo\" %> Ejemplo en \"vanilla JSP\". Sin cambiar la l\u00f3gica anterior, transformemos las funcionalidades anteriores sin usar JSTL. index.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@ page import=\"cl.lherrera.modelos.EntradaConcierto\"%> <!DOCTYPE html> <html lang=\"es\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Document</title> </head> <body> <% EntradaConcierto entrada = (EntradaConcierto) request.getAttribute(\"entrada\"); String nombreArtista = entrada.getNombreArtista(); String titularEntrada = entrada.getTitularEntrada(); %> <h1>Entradas para: <%=nombreArtista %></h1> <h1>A nombre de: <%=titularEntrada %></h1> </body> </html> captura.jsp Se puede ver que en este sitio existe <%@page import=\"java.util.Enumeration\"%> , que es la forma de importar en jsp. <%@page import=\"java.util.Enumeration\"%> <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %> <!DOCTYPE html> <html lang=\"es\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Document</title> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\"> </head> <body> <div class=\"container my-5\"> <div class=\"row\"> <div class=\"col-2\"></div> <div class=\"col-8\"> <div class=\"jumbotron\"> <h1 class=\"display-4\"> <c:out value=\"${entrada.getNombreArtista()}\" /></h1> <p class=\"lead\">Detalles:</p> <hr class=\"my-4\"> <ul> <li><c:out value=\"Fecha: ${entrada.getFechaConcierto()}\" /></li> <li><c:out value=\"Titular: ${entrada.getTitularEntrada()}\" /></li> <li><c:out value=\"Ubicaci\u00f3n: ${entrada.getUbicacion()}\" /></li> </ul> <a class=\"btn btn-primary btn-lg\" href=\"#\" role=\"button\">Apretar</a> </div> </div> <div class=\"col-2\"></div> </div> </div> <script src=\"https://code.jquery.com/jquery-3.4.1.slim.min.js\" integrity=\"sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n\" crossorigin=\"anonymous\"></script> <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js\" integrity=\"sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo\" crossorigin=\"anonymous\"></script> <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js\" integrity=\"sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6\" crossorigin=\"anonymous\"></script> </body> </html>","title":"Introducci\u00f3n a Java Servlets y JSP - Parte II"},{"location":"modulos/mod_4/mod4_uni001l2/#introduccion-a-java-servlets-y-jsp-parte-ii","text":"","title":"Introducci\u00f3n a Java Servlets y JSP - Parte II"},{"location":"modulos/mod_4/mod4_uni001l2/#manejo-de-sesiones","text":"","title":"Manejo de sesiones"},{"location":"modulos/mod_4/mod4_uni001l2/#competencias","text":"Entender diferencia entre cookie y sesi\u00f3n. Aplicaci\u00f3n de variables de sesi\u00f3n en entorno de prueba.","title":"Competencias:"},{"location":"modulos/mod_4/mod4_uni001l2/#introduccion","text":"El protocolo http t\u00e9cnicamente no mantiene el estado en la aplicaci\u00f3n , esto quiere decir que olvidara los datos de los request y de los response a medida que el usuario interact\u00fae con la p\u00e1gina. Esto es un grave problema teniendo en cuenta la naturaleza de un sistema web, ya que no tendr\u00eda sentido estar preguntando al usuario cada vez que se llama una p\u00e1gina , o que par\u00e1metros envi\u00f3 en los formularios. Imagina c\u00f3mo trabaja un sitio real del calibre de Mercado Libre, por ejemplo; inicias sesi\u00f3n solo una vez y, a medida que vas navegando en el sitio, puedes ver que tu nombre de usuario se mantiene \u201cvivo\u201d entre p\u00e1gina y p\u00e1gina, permitiendo que agregues productos a tu carrito de compra. Esos productos est\u00e1n siendo a\u00f1adidos bajo el alero de tu nombre de usuario (de tu sesi\u00f3n) y no se perder\u00e1n, incluso si cambias de pesta\u00f1a. Esto asegura la compra y la \ufb01abilidad de los datos que se van almacenando. Este funcionamiento es posible gracias al manejo de sesiones , en una aplicaci\u00f3n web y a las cookies . En la terminolog\u00eda web, una sesi\u00f3n es simplemente el intervalo de tiempo l\u00edmite en que dos sistemas se comunican entre s\u00ed . Los dos sistemas pueden compartir informaci\u00f3n mediante arquitectura cliente servidor o arquitectura punto a punto. Sin embargo, con el protocolo http el estado de la comunicaci\u00f3n no se mantiene. A causa de esto, las aplicaciones web tienen que utilizar una serie de t\u00e9cnicas que permitan mantener el estado entre cliente y servidor en el transcurso del tiempo. Cuando hablamos de \"mantener el estado\" nos referimos a guardar los datos del usuario y su informaci\u00f3n relacionada , para que independiente de la navegaci\u00f3n del sitio, se siga reconociendo. Las cookies son la t\u00e9cnica m\u00e1s com\u00fanmente usada para mantener los valores del usuario en sesi\u00f3n, pero si bien cumple con su funci\u00f3n no estamos exentos de desventajas: Las cookies s\u00f3lo pueden mantener informaci\u00f3n textual. Son dependientes del navegador, esto signi\ufb01ca que si el cliente deshabilita las cookies , ya no ser\u00e1 posible utilizarlas. No puede almacenar m\u00e1s de 4kb de informaci\u00f3n. Para solventar estos problemas, los servlets implementan su propio mecanismo de manejo de sesiones. La imagen siguiente gra\ufb01ca como trabaja la sesi\u00f3n la tecnolog\u00eda java con servlets: La biblioteca de java nos provee de las clases HttpSession , la cual nos permite manejar y almacenar variables de sesi\u00f3n en torno a las acciones del usuario . Cuando hablamos de variables de sesi\u00f3n, estamos diciendo que esta clase puede almacenar cualquier tipo de elemento , incluidas las clases de la aplicaci\u00f3n (entidades de negocio). Vamos a analizar un ejemplo sencillo del manejo de sesi\u00f3n y el almacenamiento de variables asociados a un usuario: La siguiente clase, es solamente una entidad de negocio de tipo EntradasConcierto , la cual representa la venta de tickets para un evento musical y nos servir\u00e1 para simular la compra:","title":"Introducci\u00f3n"},{"location":"modulos/mod_4/mod4_uni001l2/#ejemplo-de-consulta-de-sesion","text":"Para este ejemplo necesitamos crear tres archivos en un Dynamic Web Project , al que he llamado: ventaEntradas . /ventaEntradas/src/cl/lherrera/modelos/EntradaConcierto.java /ventaEntradas/src/cl/lherrera/servlets/EjemploSesion.java /ventaEntradas/src/cl/lherrera/servlets/ObtieneSesion.java EntradaConcierto.java Este archivo es el modelo que se usar\u00e1 para almacenar la informaci\u00f3n package cl.lherrera.modelos; import java.util.Date; public class EntradaConcierto { private String titularEntrada; private String nombreArtista; private String ubicacion; private Date fechaConcierto; public String getTitularEntrada() { return titularEntrada; } public void setTitularEntrada(String titularEntrada) { this.titularEntrada = titularEntrada; } public String getNombreArtista() { return nombreArtista; } public void setNombreArtista(String nombreArtista) { this.nombreArtista = nombreArtista; } public String getUbicacion() { return ubicacion; } public void setUbicacion(String ubicacion) { this.ubicacion = ubicacion; } public Date getFechaConcierto() { return fechaConcierto; } public void setFechaConcierto(Date fechaConcierto) { this.fechaConcierto = fechaConcierto; } } EjemploSesion.java Esta clase, es la encargada de iniciar la sesi\u00f3n, es ac\u00e1 donde se inician algunos valores que luego ser\u00e1n consultados en otros contextos. package cl.lherrera.servlets; import java.io.IOException; import java.io.PrintWriter; import java.util.Date; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.HttpSession; import cl.lherrera.modelos.EntradaConcierto; @WebServlet(\"/creaSesion\") public class EjemploSesion extends HttpServlet { /** * */ private static final long serialVersionUID = 1L; private String textoHTML(EntradaConcierto entrada) { StringBuilder retorno = new StringBuilder(); retorno.append(\"<!DOCTYPE html> \"); retorno.append(\"<html lang=\\\"en\\\"> \"); retorno.append(\"<head> \"); retorno.append(\" <meta charset=\\\"UTF-8\\\"> \"); retorno.append(\" <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> \"); retorno.append(\" <title>Document</title> \"); retorno.append(\"</head> \"); retorno.append(\"<body> \"); retorno.append(\" <h1>Entradas para: \" + entrada.getNombreArtista() + \"</h1> \"); retorno.append(\" <h1>A nombre de: \" + entrada.getTitularEntrada() + \"</h1> \"); retorno.append(\"</body> \"); retorno.append(\"</html> \"); return retorno.toString(); } @Override protected void doGet( HttpServletRequest request, HttpServletResponse response) throws IOException { String usuario = request.getParameter(\"nombre\"); EntradaConcierto entrada = new EntradaConcierto(); // obtenemos la sesi\u00f3n del request. HttpSession sesion = request.getSession(true); // llenamos el objeto modelo con informaci\u00f3n de prueba entrada.setTitularEntrada(usuario); entrada.setNombreArtista(\"Adam Levine\"); entrada.setFechaConcierto(new Date()); entrada.setUbicacion(\"desubicado\"); // agregamos atributos en la sesi\u00f3n, (\"clave\": valor) sesion.setAttribute(\"datosCompra\", entrada); // seteamos informaci\u00f3n en el response PrintWriter writer = response.getWriter(); writer.println(textoHTML(entrada)); } } ObtieneSesion.java Finalmente, el servlet , que tomar\u00e1 los datos de la sesi\u00f3n y le dar\u00e1 dinamismo al sitio. package cl.lherrera.servlets; import java.io.IOException; import java.io.PrintWriter; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.HttpSession; import cl.lherrera.modelos.EntradaConcierto; @WebServlet(\"/obtieneSesion\") public class ObtieneSesion extends HttpServlet{ /** * */ private static final long serialVersionUID = 1L; private String textoHTML(EntradaConcierto entrada) { StringBuilder retorno = new StringBuilder(); retorno.append(\"<!DOCTYPE html> \"); retorno.append(\"<html lang=\\\"es\\\"> \"); retorno.append(\" \"); retorno.append(\"<head> \"); retorno.append(\" <meta charset=\\\"UTF-8\\\"> \"); retorno.append(\" <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> \"); retorno.append(\" <title>Document</title> \"); retorno.append(\" <link rel=\\\"stylesheet\\\" href=\\\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\\\" \"); retorno.append(\" integrity=\\\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\\\" crossorigin=\\\"anonymous\\\"> \"); retorno.append(\"</head> \"); retorno.append(\" \"); retorno.append(\"<body> \"); retorno.append(\" <div class=\\\"container my-5\\\"> \"); retorno.append(\" <div class=\\\"row\\\"> \"); retorno.append(\" <div class=\\\"col-2\\\"></div> \"); retorno.append(\" <div class=\\\"col-8\\\"> \"); retorno.append(\" \"); retorno.append(\" <div class=\\\"jumbotron\\\"> \"); retorno.append(\" <h1 class=\\\"display-4\\\">\" + entrada.getNombreArtista() + \"</h1> \"); retorno.append(\" <p class=\\\"lead\\\">Detalles:</p> \"); retorno.append(\" <hr class=\\\"my-4\\\"> \"); retorno.append(\" <ul> \"); retorno.append(\" <li>Fecha: \" + entrada.getFechaConcierto() + \"</li> \"); retorno.append(\" <li>Titular: \" + entrada.getTitularEntrada() + \"</li> \"); retorno.append(\" <li>Ubicaci&oacute;n: \" + entrada.getUbicacion() + \"</li> \"); retorno.append(\" </ul> \"); retorno.append(\" <a class=\\\"btn btn-primary btn-lg\\\" href=\\\"#\\\" role=\\\"button\\\">Apretar</a> \"); retorno.append(\" </div> \"); retorno.append(\" \"); retorno.append(\" </div> \"); retorno.append(\" <div class=\\\"col-2\\\"></div> \"); retorno.append(\" </div> \"); retorno.append(\" </div> \"); retorno.append(\" \"); retorno.append(\" \"); retorno.append(\" \"); retorno.append(\" <script src=\\\"https://code.jquery.com/jquery-3.4.1.slim.min.js\\\" \"); retorno.append(\" integrity=\\\"sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n\\\" \"); retorno.append(\" crossorigin=\\\"anonymous\\\"></script> \"); retorno.append(\" <script src=\\\"https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js\\\" \"); retorno.append(\" integrity=\\\"sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo\\\" \"); retorno.append(\" crossorigin=\\\"anonymous\\\"></script> \"); retorno.append(\" <script src=\\\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js\\\" \"); retorno.append(\" integrity=\\\"sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6\\\" \"); retorno.append(\" crossorigin=\\\"anonymous\\\"></script> \"); retorno.append(\"</body> \"); retorno.append(\" \"); retorno.append(\"</html> \"); return retorno.toString(); } @Override protected void doGet( HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { // capturando la session del request HttpSession sesion = req.getSession(); // obtenemos datos de la sesi\u00f3n, este atributo, debe esta previamente seteado. EntradaConcierto entrada = (EntradaConcierto) sesion.getAttribute(\"datosCompra\"); // seteamos informaci\u00f3n en el response PrintWriter writer = resp.getWriter(); writer.println(textoHTML(entrada)); } }","title":"Ejemplo de consulta de sesi\u00f3n"},{"location":"modulos/mod_4/mod4_uni001l2/#refactorizacion-utilizando-archivos-jsp","text":"En el ejemplo anterior se utilizaron servlets; pero ahora veremos como podemos quitar c\u00f3digos de las unidades de compilaci\u00f3n, separandolo en una capa de vista. Estructura del proyecto: . \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u251c\u2500\u2500 WEB-INF \u2502 \u2502 \u2514\u2500\u2500 lib \u2502 \u2502 \u251c\u2500\u2500 jstl-impl.jar \u2502 \u2502 \u251c\u2500\u2500 jstl-standard.jar \u2502 \u2502 \u2514\u2500\u2500 jstl.jar \u2502 \u251c\u2500\u2500 captura.jsp \u2502 \u2514\u2500\u2500 index.jsp \u251c\u2500\u2500 build \u2502 \u2514\u2500\u2500 classes \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u251c\u2500\u2500 modelos \u2502 \u2502 \u2514\u2500\u2500 EntradaConcierto.class \u2502 \u2514\u2500\u2500 servlets \u2502 \u251c\u2500\u2500 EjemploSesion.class \u2502 \u2514\u2500\u2500 ObtieneSesion.class \u2514\u2500\u2500 src \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u251c\u2500\u2500 modelos \u2502 \u2514\u2500\u2500 EntradaConcierto.java \u2514\u2500\u2500 servlets \u251c\u2500\u2500 EjemploSesion.java \u2514\u2500\u2500 ObtieneSesion.java","title":"Refactorizaci\u00f3n, utilizando archivos jsp"},{"location":"modulos/mod_4/mod4_uni001l2/#el-modelo","text":"EntradaConcierto.java package cl.lherrera.modelos; import java.util.Date; public class EntradaConcierto { private String titularEntrada; private String nombreArtista; private String ubicacion; private Date fechaConcierto; public String getTitularEntrada() { return titularEntrada; } public void setTitularEntrada(String titularEntrada) { this.titularEntrada = titularEntrada; } public String getNombreArtista() { return nombreArtista; } public void setNombreArtista(String nombreArtista) { this.nombreArtista = nombreArtista; } public String getUbicacion() { return ubicacion; } public void setUbicacion(String ubicacion) { this.ubicacion = ubicacion; } public Date getFechaConcierto() { return fechaConcierto; } public void setFechaConcierto(Date fechaConcierto) { this.fechaConcierto = fechaConcierto; } }","title":"El modelo:"},{"location":"modulos/mod_4/mod4_uni001l2/#servlets","text":"EjemploSesion.java ObtieneSesion.java package cl.lherrera.servlets; import java.io.IOException; import java.io.PrintWriter; import java.util.Date; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.HttpSession; import cl.lherrera.modelos.EntradaConcierto; @WebServlet(\"/creaSesion\") public class EjemploSesion extends HttpServlet { /** * */ private static final long serialVersionUID = 1L; @Override protected void doGet( HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException { String usuario = request.getParameter(\"nombre\"); EntradaConcierto entrada = new EntradaConcierto(); // obtenemos la sesi\u00f3n del request. HttpSession sesion = request.getSession(true); // llenamos el objeto modelo con informaci\u00f3n de prueba entrada.setTitularEntrada(usuario); entrada.setNombreArtista(\"Adam Levine\"); entrada.setFechaConcierto(new Date()); entrada.setUbicacion(\"desubicado\"); // agregamos atributos en la sesi\u00f3n, (\"clave\": valor) sesion.setAttribute(\"datosCompra\", entrada); // asignamos el valor del atributo para el jsp request.setAttribute(\"entrada\", entrada); // capturamos el contexto del jsp request.getRequestDispatcher(\"index.jsp\").forward(request, response); } } package cl.lherrera.servlets; import java.io.IOException; import java.io.PrintWriter; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.HttpSession; import cl.lherrera.modelos.EntradaConcierto; @WebServlet(\"/obtieneSesion\") public class ObtieneSesion extends HttpServlet{ /** * */ private static final long serialVersionUID = 1L; @Override protected void doGet( HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { // capturando la session del request HttpSession sesion = req.getSession(); // obtenemos datos de la sesi\u00f3n, este atributo, debe esta previamente seteado. EntradaConcierto entrada = (EntradaConcierto) sesion.getAttribute(\"datosCompra\"); // asignamos el valor del atributo para el jsp req.setAttribute(\"entrada\", entrada); // enviamos los valores a una p\u00e1gina jsp req.getRequestDispatcher(\"captura.jsp\").forward(req, resp); } }","title":"Servlets:"},{"location":"modulos/mod_4/mod4_uni001l2/#webcontent","text":"captura.jsp index.jsp No olvidar agregar [jstl-impl.jar, jstl-standard.jar, jstl.jar] al buildPath del proyecto, adem\u00e1s de la carpeta lib ubicada en web-inf. index.jsp <%@page import=\"java.util.Enumeration\"%> <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %> <!DOCTYPE html> <html lang=\"es\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Document</title> </head> <body> <h1> <c:out value=\"Entradas para: ${ entrada.getNombreArtista() }\" /> </h1> <h1> <c:out value=\"A nombre de: ${ entrada.getTitularEntrada() }\" /> </h1> </body> </html> captura.jsp <%@page import=\"java.util.Enumeration\"%> <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %> <!DOCTYPE html> <html lang=\"es\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Document</title> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\"> </head> <body> <div class=\"container my-5\"> <div class=\"row\"> <div class=\"col-2\"></div> <div class=\"col-8\"> <div class=\"jumbotron\"> <h1 class=\"display-4\"> <c:out value=\"${entrada.getNombreArtista()}\" /></h1> <p class=\"lead\">Detalles:</p> <hr class=\"my-4\"> <ul> <li><c:out value=\"Fecha: ${entrada.getFechaConcierto()}\" /></li> <li><c:out value=\"Titular: ${entrada.getTitularEntrada()}\" /></li> <li><c:out value=\"Ubicaci\u00f3n: ${entrada.getUbicacion()}\" /></li> </ul> <a class=\"btn btn-primary btn-lg\" href=\"#\" role=\"button\">Apretar</a> </div> </div> <div class=\"col-2\"></div> </div> </div> <script src=\"https://code.jquery.com/jquery-3.4.1.slim.min.js\" integrity=\"sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n\" crossorigin=\"anonymous\"></script> <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js\" integrity=\"sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo\" crossorigin=\"anonymous\"></script> <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js\" integrity=\"sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6\" crossorigin=\"anonymous\"></script> </body> </html> Las llamadas son las siguientes: # primera llamada, es en esta llamada donde se inicia la sesi\u00f3n y se guardan # las variables que se mantendr\u00e1n en las variables de sesi\u00f3n. http://localhost:8080/ventaEntradas/creaSesion?nombre=Luis%20Herrera # segunda llamada, es ac\u00e1 donde podemos ver que ocupamos las variables # de sesi\u00f3n y se comprueba que realmente las estamos utilizando. http://localhost:8080/ventaEntradas/obtieneSesion","title":"WebContent:"},{"location":"modulos/mod_4/mod4_uni001l2/#vanilla-jsp-scriptlet","text":"Hay que demostrar que el uso de JSTL, es la forma en que se trabajar\u00e1 con JSP; pero en muchas ocaciones, nos encontraremos con desarrollos que no poseen implementaci\u00f3n de estas librer\u00edas, es por ese motivo que debemos saber como utilizar java, en un archivo JSP. La forma de insertar c\u00f3digo en un archivo JSP, es usando: <% // todo el c\u00f3digo de java ac\u00e1 ... %> De esta forma, podemos en nuestros archivos jsp, insertar l\u00f3gica, utilizando el lenguage Java, de forma \"imperativa\" + (um poco de composici\u00f3n). Es importante recordar que un JSP, es verdaderamente un Servlet en tiempo de ejecuci\u00f3n. Es por esta raz\u00f3n que podemos incluir codigo Java junto a las etiquetas HTML, pero debemos indicar esta informaci\u00f3n, utilizando las etiquetas <%%> Para imprimir un mensaje por consola: <% System.out.println(\"Hola mundo\"); %> Para imprimir HTML <%=\"Hola mundo\" %> No debemos confundir un c\u00f3digo que imprime por pantalla del que imprime en la p\u00e1gina HTML, es decir que: <% System.out.println(\"Hola mundo\"); %> != <%=\"Hola mundo\" %>","title":"Vanilla - JSP (scriptlet)"},{"location":"modulos/mod_4/mod4_uni001l2/#ejemplo-en-vanilla-jsp","text":"Sin cambiar la l\u00f3gica anterior, transformemos las funcionalidades anteriores sin usar JSTL. index.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@ page import=\"cl.lherrera.modelos.EntradaConcierto\"%> <!DOCTYPE html> <html lang=\"es\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Document</title> </head> <body> <% EntradaConcierto entrada = (EntradaConcierto) request.getAttribute(\"entrada\"); String nombreArtista = entrada.getNombreArtista(); String titularEntrada = entrada.getTitularEntrada(); %> <h1>Entradas para: <%=nombreArtista %></h1> <h1>A nombre de: <%=titularEntrada %></h1> </body> </html> captura.jsp Se puede ver que en este sitio existe <%@page import=\"java.util.Enumeration\"%> , que es la forma de importar en jsp. <%@page import=\"java.util.Enumeration\"%> <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %> <!DOCTYPE html> <html lang=\"es\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Document</title> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\"> </head> <body> <div class=\"container my-5\"> <div class=\"row\"> <div class=\"col-2\"></div> <div class=\"col-8\"> <div class=\"jumbotron\"> <h1 class=\"display-4\"> <c:out value=\"${entrada.getNombreArtista()}\" /></h1> <p class=\"lead\">Detalles:</p> <hr class=\"my-4\"> <ul> <li><c:out value=\"Fecha: ${entrada.getFechaConcierto()}\" /></li> <li><c:out value=\"Titular: ${entrada.getTitularEntrada()}\" /></li> <li><c:out value=\"Ubicaci\u00f3n: ${entrada.getUbicacion()}\" /></li> </ul> <a class=\"btn btn-primary btn-lg\" href=\"#\" role=\"button\">Apretar</a> </div> </div> <div class=\"col-2\"></div> </div> </div> <script src=\"https://code.jquery.com/jquery-3.4.1.slim.min.js\" integrity=\"sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n\" crossorigin=\"anonymous\"></script> <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js\" integrity=\"sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo\" crossorigin=\"anonymous\"></script> <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js\" integrity=\"sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6\" crossorigin=\"anonymous\"></script> </body> </html>","title":"Ejemplo en \"vanilla JSP\"."},{"location":"modulos/mod_4/exs/jdbc_exs/","text":"Mantenedor de personas Se necesita implementar un sistema que pueda mantener personas de forma persistente. Precondiciones Hasta el momento se ha utilizado el motor Oracle 11g; pero para poder trabajar con maven, debemos agregar manualmente (manual ac\u00e1 ); pero la idea es crear un proyecto usando las herramientas que no requieran mayor configuraci\u00f3n. Es por este motivo y para mantener el foco en lo que importa, es que se usar\u00e1 SQLITE. DDL - tabla personas CREATE TABLE JDBC001.PERSONA ( ID INTEGER, NOMBRE VARCHAR2(200), APELLIDO VARCHAR2(100), RUT INTEGER, IDX CHAR(1), CONSTRAINT PERSONA_PK PRIMARY KEY (ID) );","title":"Mantenedor de personas"},{"location":"modulos/mod_4/exs/jdbc_exs/#mantenedor-de-personas","text":"Se necesita implementar un sistema que pueda mantener personas de forma persistente.","title":"Mantenedor de personas"},{"location":"modulos/mod_4/exs/jdbc_exs/#precondiciones","text":"Hasta el momento se ha utilizado el motor Oracle 11g; pero para poder trabajar con maven, debemos agregar manualmente (manual ac\u00e1 ); pero la idea es crear un proyecto usando las herramientas que no requieran mayor configuraci\u00f3n. Es por este motivo y para mantener el foco en lo que importa, es que se usar\u00e1 SQLITE.","title":"Precondiciones"},{"location":"modulos/mod_4/exs/jdbc_exs/#ddl-tabla-personas","text":"CREATE TABLE JDBC001.PERSONA ( ID INTEGER, NOMBRE VARCHAR2(200), APELLIDO VARCHAR2(100), RUT INTEGER, IDX CHAR(1), CONSTRAINT PERSONA_PK PRIMARY KEY (ID) );","title":"DDL - tabla personas"},{"location":"modulos/mod_4/uni002/mod4_uni002l1/","text":"Glosario ClassPath : En el lenguaje de programaci\u00f3n Java, se entiende por Classpath, a una opci\u00f3n admitida en la l\u00ednea de \u00f3rdenes o mediante variable de entorno. Indica a la M\u00e1quina Virtual de Java d\u00f3nde buscar paquetes y clases, definidas por el usuario a la hora de ejecutar programas. Datos Hardcodeados : Codigo que deberia ser din\u00e1mico, pero por apuro en el proyecto o desconocimiento se declara en el archivo de forma expl\u00edcita, por ejemplo asignar a la variable uf el valor de la misma todos los d\u00edas en el c\u00f3digo cada vez que cambie. Formularios : El elemento HTML form , representa una secci\u00f3n de un documento que contiene controles interactivos, que permiten a un usuario enviar informaci\u00f3n a un servidor web. JAR : Un archivo JAR (por sus siglas en ingl\u00e9s, Java ARchive) es un tipo de archivo que permite ejecutar aplicaciones y herramientas escritas en el lenguaje Java. Javabean : Los JavaBeans son un modelo de componentes creado por Sun Microsystems para la construcci\u00f3n de aplicaciones en Java. Se usan para encapsular varios objetos en un \u00fanico objeto. Jstl : La tecnolog\u00eda JavaServer Pages Standard Tag Library (JSTL) es un componente de Java EE. Extiende las ya conocidas JavaServer Pages (JSP) proporcionando cuatro bibliotecas de etiquetas (Tag Libraries) con utilidades ampliamente utilizadas en el desarrollo de p\u00e1ginas web din\u00e1micas. Modelo-vista-controlador (MVC) : es un patr\u00f3n de dise\u00f1o de arquitectura de software, que separa los datos y la l\u00f3gica de negocio de una aplicaci\u00f3n de su representaci\u00f3n y el m\u00f3dulo encargado de gestionar los eventos y las comunicaciones. ORM (mapeo objeto-relacional) : Es una t\u00e9cnica de programaci\u00f3n para convertir datos entre el sistema de tipos, utilizado en un lenguaje de programaci\u00f3n orientado a objetos y la utilizaci\u00f3n de una base de datos relacional. (B\u00e1sicamente, tratar las relaciones en los modelos, con objetos). Pojos (Plain Old Java Object) : Es una sigla creada por Martin Fowler, Rebecca Parsons y Josh MacKenzie en septiembre de 2000 y utilizada por programadores Java para enfatizar el uso de clases simples y que no dependen de un framework en especial. Scriptlets : En la tecnolog\u00eda JavaServer Pages (JSP), un scriptlet es una pieza de c\u00f3digo Java incrustado en el c\u00f3digo JSP similar a HTML. El scriptlet es todo dentro de las etiquetas <%%> . Entre estos, el usuario puede agregar cualquier Scriptlet v\u00e1lido, es decir, cualquier c\u00f3digo Java v\u00e1lido. Sql(Structure Query Languaje) : Es el lenguaje de manipulaci\u00f3n para bases de datos m\u00e1s extendido en la actualidad. XML : Es un lenguaje de marcado similar a HTML. is a markup language similar a HTML. Significa Extensible Markup Language (Lenguaje de Marcado Extensible ) y es una especificaci\u00f3n de W3C como lenguaje de marcado de prop\u00f3sito general. Introducci\u00f3n. En el mundo del desarrollo JEE, la capa de cliente es un pilar fundamental que sustenta el uso prolongado de los clientes hacia nuestras aplicaciones. En esta capa trabaja la tecnolog\u00eda JSP (Java Server Page) la cual provee al programador una mec\u00e1nica de trabajo \u00e1gil, r\u00e1pida simple para presentar datos al usuario. En esta unidad se estudiar\u00e1n los fundamentos de esta tecnolog\u00eda, sus caracter\u00edsticas y por sobre todo su uso en el desarrollo de sistemas empresariales. Conociendo la tecnolog\u00eda JSP Bene\ufb01cios para los desarrolladores Las ventajas de utilizar JSP en una aplicaci\u00f3n empresarial para los desarrolladores se pueden enumerar en: + JSP no es solo una p\u00e1gina HTML, si no que es una completa implementaci\u00f3n de todas las caracter\u00edsticas de un servlets. En una p\u00e1gina JSP se pueden utilizar todas las funcionalidades de la biblioteca de clases java, adem\u00e1s de usar tags de funcionalidades y desplegar informaci\u00f3n al usuario. Con JSP es mucho m\u00e1s f\u00e1cil hacer la separaci\u00f3n entre c\u00f3digo de programaci\u00f3n java y c\u00f3digo de presentaci\u00f3n HTML (En servlets, generar c\u00f3digo html es dif\u00edcil). Usando JSP ya no es necesario recompilar y construir el proyecto cada vez que se haga un cambio. En terminos practicos esto signi\ufb01ca que si modi\ufb01cas un t\u00edtulo a tu JSP, basta con guardar el cambio y refrescar el navegador. Esto aumenta la rapidez de desarrollo en comparaci\u00f3n con los servlets. Con JSP se utiliza menos c\u00f3digo para hacer cosas similares que en un servlet. JSP vs Servlets. Estos dos componentes de la tecnolog\u00eda java, generan contenido din\u00e1micamente desde un servidor con contenedor de servlets a una p\u00e1gina web , pero de una manera distinta. Ambas tecnolog\u00edas se complementan entre s\u00ed , as\u00ed que no es posible elegir un camino u otro , ya que juntas alcanzan su mayor potencial . La mayor diferencia que encontramos es que un servlet es un programa java simple con una herencia de clases caracter\u00edstica (HttpServlet) que se incrusta en una p\u00e1gina web simple. El programa java se ejecuta en el lado del servidor y muestra el resultado en el navegador incrustado html que se env\u00eda al navegador. El servlet incrusta HTML en el c\u00f3digo java a trav\u00e9s de las declaraciones out.println . Ventajas de los JSP frente a otras tecnolog\u00edas. P\u00e1ginas Active Server Pages (ASP) : La tecnolog\u00eda web de Microsoft. La parte din\u00e1mica de los JSP est\u00e1 escrita en java, por lo que es m\u00e1s potente y f\u00e1cil de usar. En segundo lugar, JSP es una plataforma independiente, mientras que ASP no lo es. Servlets Puros : es m\u00e1s conveniente escribir HTML normal en vez de tener declaraciones de impresi\u00f3n o expresiones de servlets. Permite generar la separaci\u00f3n de contenido. En un jsp el dise\u00f1ador web puede enfocarse solamente en el html de la p\u00e1gina y los programadores pueden insertar c\u00f3digo din\u00e1mico por separado, evitando problemas. Server Side include (SSI) : SSI es una tecnolog\u00eda ampliamente soportada para incluir piezas de\ufb01nidas externamente en una p\u00e1gina web est\u00e1tica. JSP es mejor porque le permite usar servlets en lugar de un programa separado para generar esa parte din\u00e1mica. Adem\u00e1s, SSI s\u00f3lo est\u00e1 destinado a inclusiones simples, no a programas reales que usan datos de formularios, hacen una conexi\u00f3n de base de datos. JavaScript : Javascript tambi\u00e9n puede generar HTML din\u00e1micamente en el cliente, pero est\u00e1 limitado solo a la capa del cliente por lo que no \"puede\" acceder a los recursos del lado del servidor como base de datos , cat\u00e1logos, informaci\u00f3n de l\u00f3gica de negocios, etc. HTML est\u00e1tico : La gran diferencia est\u00e1 a la vista, el html puro solamente presenta informaci\u00f3n y no provee ning\u00fan mecanismo de comunicaci\u00f3n entre capas , por lo que no existe la colaboraci\u00f3n ni el env\u00edo de mensajes. Elementos de los JSP Una p\u00e1gina JSP est\u00e1 hecha sobre una plantilla HTML, que est\u00e1 compuesta por etiquetas html y elementos java server page como scriptlets, elementos de directivas y elementos de action. En el cap\u00edtulo anterior se dio una introducci\u00f3n a la implementaci\u00f3n de p\u00e1ginas JSP a nivel basico, en el presente se analizaran en los detalles de la construcci\u00f3n. Scriptlets Estos elementos en una p\u00e1gina JSP, delimitan el \u00e1rea en que el c\u00f3digo java es interpretado y por consiguiente permite que se pueda utilizar l\u00f3gica utilizando las caracter\u00edsticas del lenguaje. Dentro del \u00e1rea de scriptlet es posible usar y manipular clases java, generar excepciones, conectar a bases de datos, validar variables y utilizar todos los m\u00e9todos disponibles de la API de java. En el ejemplo anterior se utilizaron los tags <% %> los cuales con un tipo de scriptlet, ya que existen 3 a nuestra disposici\u00f3n. El resto de scriptlets son declaraciones y expresiones. <% %> : Estas etiquetas son de delimitaci\u00f3n. Todo lo que pongamos en su interior, corresponde a c\u00f3digo Java. (estilo imperativo) <%= %> : Imprime en la web el contenido de alg\u00fan valor. No es lo mismo que System.out.println() , ya que este muestra informaci\u00f3n por consola. <%! %> : Hecho para poder dar un scope seguro a todo el documento, cuando se realiza una declaraci\u00f3n, por ejemplo String saludo = \"hola\"; . Luego saludo estar\u00e1 disponible en todo el documento. Proyecto 1 JSP b\u00e1sico. Proyecto simple, utilizando jsp. Estructura: \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 HolaMundo.jsp \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 WEB-INF \u2502 \u2514\u2500\u2500 lib \u251c\u2500\u2500 build \u2502 \u2514\u2500\u2500 classes \u2514\u2500\u2500 src HolaMundo.jsp <%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\" pageEncoding=\"ISO-8859-1\"%> <!DOCTYPE html> <html> <head> <meta charset=\"ISO-8859-1\"> <title>Insert title here</title> </head> <%@ page import=\"java.util.Date\"%> <body> <h3>Hola Humano</h3> <br> <strong>La fecha actual es:</strong>: <%=new Date()%> </body> </html> Llamada: http://localhost:8080/servletPrueba/HolaMundo.jsp Proyecto 2 JSP comprobando su funcionamiento. En el siguiente proyecto, se demuestra el funcionamiento din\u00e1mico entre Java y JSP. Mostrando detalles que contiene el objeto request que se crea en el contenedor de servlets. Estructura: \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 ContenidoDinamico.jsp \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 WEB-INF \u2502 \u2514\u2500\u2500 lib \u251c\u2500\u2500 build \u2502 \u2514\u2500\u2500 classes \u2514\u2500\u2500 src ContenidoDinamico.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>The real power of JSP</title> </head> <body> <h2>Bienvenido al desafio :P</h2> <% out.println(\"<br/>Tu direcci\u00f3n IP es \" + request.getRemoteAddr()); String userAgent = request.getHeader(\"user-agent\"); String browser = \"desconocido\"; String protocolo = \"Estas usando el protocolo \" + request.getProtocol(); String saltoLinea = \"<br>\"; out.print(\"<br/> estas navegando con \"); if (userAgent != null) { if (userAgent.indexOf(\"MSIE\") > -1) { browser = \"MS Internet Explorer\"; } else if (userAgent.indexOf(\"Firefox\") > -1) { browser = \"Mozilla Firefox\"; } else if (userAgent.indexOf(\"Opera\") > -1) { browser = \"Opera\"; } else if (userAgent.indexOf(\"Chrome\") > -1) { browser = \"Google Chrome\"; } else if (userAgent.indexOf(\"Safari\") > -1) { browser = \"Apple Safari\"; } } out.println(browser); out.println(saltoLinea); out.println(protocolo); %> </body> </html> Llamada: http://localhost:8080/servletPrueba/ContenidoDinamico.jsp Domumentaci\u00f3n para profundizar: Ac\u00e1 Proyecto 3 JSP (usando ciclos). En el siguiente proyecto, se utilizar\u00e1n ciclos para recorrer una lista. Estos ciclos ser\u00e1n utilizados para llenar datos, din\u00e1micamente en una tabla. Estructura: \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 ListadoAutos.jsp \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 WEB-INF \u2502 \u2514\u2500\u2500 lib \u251c\u2500\u2500 build \u2502 \u2514\u2500\u2500 classes \u2514\u2500\u2500 src ListadoAutos.jsp <%@page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@page import=\"java.util.*\" %> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Insert title here</title> <style> table,thead,tbody,tr,td{ border: 1px solid; collapse:collapse; text-align: center; background-color:orange; } #contenido{ width: 600px; heigth: 300px; margin:0 auto; background-color:silver; text-align:center; } </style> </head> <body> <% //declaracion de una lista de marcas de vehiculos List<String> autos = new ArrayList<String>(); autos.add(\"Chevlolet\"); autos.add(\"Mazda\"); autos.add(\"Toyota\"); autos.add(\"Subaru\"); autos.add(\"Skoda\"); autos.add(\"Fiat\"); %> <!-- comienza el HTML --> <div id=\"contenido\"> <p>Contenido de tabla generado con java ;)</p> <table> <thead> <tr> <td>Marca mas vendida</td> <td>Marca mas revendida</td> <td>Marca mas famosa</td> <td>Marca mas robada</td> <td>Marca mas arrendada</td> <td>Marca mas segura</td> </tr> </thead> <tbody> <tr> <% for(int i = 0; i < autos.size(); i ++){ out.println(\"<td>\" + autos.get(i)+ \"</td>\"); } %> </tr> </tbody> </table> </div> </body> </html> Llamada: http://localhost:8080/servletPrueba/ListadoAutos.jsp","title":"Mod4 uni002l1"},{"location":"modulos/mod_4/uni002/mod4_uni002l1/#glosario","text":"ClassPath : En el lenguaje de programaci\u00f3n Java, se entiende por Classpath, a una opci\u00f3n admitida en la l\u00ednea de \u00f3rdenes o mediante variable de entorno. Indica a la M\u00e1quina Virtual de Java d\u00f3nde buscar paquetes y clases, definidas por el usuario a la hora de ejecutar programas. Datos Hardcodeados : Codigo que deberia ser din\u00e1mico, pero por apuro en el proyecto o desconocimiento se declara en el archivo de forma expl\u00edcita, por ejemplo asignar a la variable uf el valor de la misma todos los d\u00edas en el c\u00f3digo cada vez que cambie. Formularios : El elemento HTML form , representa una secci\u00f3n de un documento que contiene controles interactivos, que permiten a un usuario enviar informaci\u00f3n a un servidor web. JAR : Un archivo JAR (por sus siglas en ingl\u00e9s, Java ARchive) es un tipo de archivo que permite ejecutar aplicaciones y herramientas escritas en el lenguaje Java. Javabean : Los JavaBeans son un modelo de componentes creado por Sun Microsystems para la construcci\u00f3n de aplicaciones en Java. Se usan para encapsular varios objetos en un \u00fanico objeto. Jstl : La tecnolog\u00eda JavaServer Pages Standard Tag Library (JSTL) es un componente de Java EE. Extiende las ya conocidas JavaServer Pages (JSP) proporcionando cuatro bibliotecas de etiquetas (Tag Libraries) con utilidades ampliamente utilizadas en el desarrollo de p\u00e1ginas web din\u00e1micas. Modelo-vista-controlador (MVC) : es un patr\u00f3n de dise\u00f1o de arquitectura de software, que separa los datos y la l\u00f3gica de negocio de una aplicaci\u00f3n de su representaci\u00f3n y el m\u00f3dulo encargado de gestionar los eventos y las comunicaciones. ORM (mapeo objeto-relacional) : Es una t\u00e9cnica de programaci\u00f3n para convertir datos entre el sistema de tipos, utilizado en un lenguaje de programaci\u00f3n orientado a objetos y la utilizaci\u00f3n de una base de datos relacional. (B\u00e1sicamente, tratar las relaciones en los modelos, con objetos). Pojos (Plain Old Java Object) : Es una sigla creada por Martin Fowler, Rebecca Parsons y Josh MacKenzie en septiembre de 2000 y utilizada por programadores Java para enfatizar el uso de clases simples y que no dependen de un framework en especial. Scriptlets : En la tecnolog\u00eda JavaServer Pages (JSP), un scriptlet es una pieza de c\u00f3digo Java incrustado en el c\u00f3digo JSP similar a HTML. El scriptlet es todo dentro de las etiquetas <%%> . Entre estos, el usuario puede agregar cualquier Scriptlet v\u00e1lido, es decir, cualquier c\u00f3digo Java v\u00e1lido. Sql(Structure Query Languaje) : Es el lenguaje de manipulaci\u00f3n para bases de datos m\u00e1s extendido en la actualidad. XML : Es un lenguaje de marcado similar a HTML. is a markup language similar a HTML. Significa Extensible Markup Language (Lenguaje de Marcado Extensible ) y es una especificaci\u00f3n de W3C como lenguaje de marcado de prop\u00f3sito general.","title":"Glosario"},{"location":"modulos/mod_4/uni002/mod4_uni002l1/#introduccion","text":"En el mundo del desarrollo JEE, la capa de cliente es un pilar fundamental que sustenta el uso prolongado de los clientes hacia nuestras aplicaciones. En esta capa trabaja la tecnolog\u00eda JSP (Java Server Page) la cual provee al programador una mec\u00e1nica de trabajo \u00e1gil, r\u00e1pida simple para presentar datos al usuario. En esta unidad se estudiar\u00e1n los fundamentos de esta tecnolog\u00eda, sus caracter\u00edsticas y por sobre todo su uso en el desarrollo de sistemas empresariales.","title":"Introducci\u00f3n."},{"location":"modulos/mod_4/uni002/mod4_uni002l1/#conociendo-la-tecnologia-jsp","text":"","title":"Conociendo la tecnolog\u00eda JSP"},{"location":"modulos/mod_4/uni002/mod4_uni002l1/#beneficios-para-los-desarrolladores","text":"Las ventajas de utilizar JSP en una aplicaci\u00f3n empresarial para los desarrolladores se pueden enumerar en: + JSP no es solo una p\u00e1gina HTML, si no que es una completa implementaci\u00f3n de todas las caracter\u00edsticas de un servlets. En una p\u00e1gina JSP se pueden utilizar todas las funcionalidades de la biblioteca de clases java, adem\u00e1s de usar tags de funcionalidades y desplegar informaci\u00f3n al usuario. Con JSP es mucho m\u00e1s f\u00e1cil hacer la separaci\u00f3n entre c\u00f3digo de programaci\u00f3n java y c\u00f3digo de presentaci\u00f3n HTML (En servlets, generar c\u00f3digo html es dif\u00edcil). Usando JSP ya no es necesario recompilar y construir el proyecto cada vez que se haga un cambio. En terminos practicos esto signi\ufb01ca que si modi\ufb01cas un t\u00edtulo a tu JSP, basta con guardar el cambio y refrescar el navegador. Esto aumenta la rapidez de desarrollo en comparaci\u00f3n con los servlets. Con JSP se utiliza menos c\u00f3digo para hacer cosas similares que en un servlet.","title":"Bene\ufb01cios para los desarrolladores"},{"location":"modulos/mod_4/uni002/mod4_uni002l1/#jsp-vs-servlets","text":"Estos dos componentes de la tecnolog\u00eda java, generan contenido din\u00e1micamente desde un servidor con contenedor de servlets a una p\u00e1gina web , pero de una manera distinta. Ambas tecnolog\u00edas se complementan entre s\u00ed , as\u00ed que no es posible elegir un camino u otro , ya que juntas alcanzan su mayor potencial . La mayor diferencia que encontramos es que un servlet es un programa java simple con una herencia de clases caracter\u00edstica (HttpServlet) que se incrusta en una p\u00e1gina web simple. El programa java se ejecuta en el lado del servidor y muestra el resultado en el navegador incrustado html que se env\u00eda al navegador. El servlet incrusta HTML en el c\u00f3digo java a trav\u00e9s de las declaraciones out.println .","title":"JSP vs Servlets."},{"location":"modulos/mod_4/uni002/mod4_uni002l1/#ventajas-de-los-jsp-frente-a-otras-tecnologias","text":"P\u00e1ginas Active Server Pages (ASP) : La tecnolog\u00eda web de Microsoft. La parte din\u00e1mica de los JSP est\u00e1 escrita en java, por lo que es m\u00e1s potente y f\u00e1cil de usar. En segundo lugar, JSP es una plataforma independiente, mientras que ASP no lo es. Servlets Puros : es m\u00e1s conveniente escribir HTML normal en vez de tener declaraciones de impresi\u00f3n o expresiones de servlets. Permite generar la separaci\u00f3n de contenido. En un jsp el dise\u00f1ador web puede enfocarse solamente en el html de la p\u00e1gina y los programadores pueden insertar c\u00f3digo din\u00e1mico por separado, evitando problemas. Server Side include (SSI) : SSI es una tecnolog\u00eda ampliamente soportada para incluir piezas de\ufb01nidas externamente en una p\u00e1gina web est\u00e1tica. JSP es mejor porque le permite usar servlets en lugar de un programa separado para generar esa parte din\u00e1mica. Adem\u00e1s, SSI s\u00f3lo est\u00e1 destinado a inclusiones simples, no a programas reales que usan datos de formularios, hacen una conexi\u00f3n de base de datos. JavaScript : Javascript tambi\u00e9n puede generar HTML din\u00e1micamente en el cliente, pero est\u00e1 limitado solo a la capa del cliente por lo que no \"puede\" acceder a los recursos del lado del servidor como base de datos , cat\u00e1logos, informaci\u00f3n de l\u00f3gica de negocios, etc. HTML est\u00e1tico : La gran diferencia est\u00e1 a la vista, el html puro solamente presenta informaci\u00f3n y no provee ning\u00fan mecanismo de comunicaci\u00f3n entre capas , por lo que no existe la colaboraci\u00f3n ni el env\u00edo de mensajes.","title":"Ventajas de los JSP frente a otras tecnolog\u00edas."},{"location":"modulos/mod_4/uni002/mod4_uni002l1/#elementos-de-los-jsp","text":"Una p\u00e1gina JSP est\u00e1 hecha sobre una plantilla HTML, que est\u00e1 compuesta por etiquetas html y elementos java server page como scriptlets, elementos de directivas y elementos de action. En el cap\u00edtulo anterior se dio una introducci\u00f3n a la implementaci\u00f3n de p\u00e1ginas JSP a nivel basico, en el presente se analizaran en los detalles de la construcci\u00f3n.","title":"Elementos de los JSP"},{"location":"modulos/mod_4/uni002/mod4_uni002l1/#scriptlets","text":"Estos elementos en una p\u00e1gina JSP, delimitan el \u00e1rea en que el c\u00f3digo java es interpretado y por consiguiente permite que se pueda utilizar l\u00f3gica utilizando las caracter\u00edsticas del lenguaje. Dentro del \u00e1rea de scriptlet es posible usar y manipular clases java, generar excepciones, conectar a bases de datos, validar variables y utilizar todos los m\u00e9todos disponibles de la API de java. En el ejemplo anterior se utilizaron los tags <% %> los cuales con un tipo de scriptlet, ya que existen 3 a nuestra disposici\u00f3n. El resto de scriptlets son declaraciones y expresiones. <% %> : Estas etiquetas son de delimitaci\u00f3n. Todo lo que pongamos en su interior, corresponde a c\u00f3digo Java. (estilo imperativo) <%= %> : Imprime en la web el contenido de alg\u00fan valor. No es lo mismo que System.out.println() , ya que este muestra informaci\u00f3n por consola. <%! %> : Hecho para poder dar un scope seguro a todo el documento, cuando se realiza una declaraci\u00f3n, por ejemplo String saludo = \"hola\"; . Luego saludo estar\u00e1 disponible en todo el documento.","title":"Scriptlets"},{"location":"modulos/mod_4/uni002/mod4_uni002l1/#proyecto-1-jsp-basico","text":"Proyecto simple, utilizando jsp. Estructura: \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 HolaMundo.jsp \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 WEB-INF \u2502 \u2514\u2500\u2500 lib \u251c\u2500\u2500 build \u2502 \u2514\u2500\u2500 classes \u2514\u2500\u2500 src HolaMundo.jsp <%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\" pageEncoding=\"ISO-8859-1\"%> <!DOCTYPE html> <html> <head> <meta charset=\"ISO-8859-1\"> <title>Insert title here</title> </head> <%@ page import=\"java.util.Date\"%> <body> <h3>Hola Humano</h3> <br> <strong>La fecha actual es:</strong>: <%=new Date()%> </body> </html> Llamada: http://localhost:8080/servletPrueba/HolaMundo.jsp","title":"Proyecto 1 JSP b\u00e1sico."},{"location":"modulos/mod_4/uni002/mod4_uni002l1/#proyecto-2-jsp-comprobando-su-funcionamiento","text":"En el siguiente proyecto, se demuestra el funcionamiento din\u00e1mico entre Java y JSP. Mostrando detalles que contiene el objeto request que se crea en el contenedor de servlets. Estructura: \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 ContenidoDinamico.jsp \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 WEB-INF \u2502 \u2514\u2500\u2500 lib \u251c\u2500\u2500 build \u2502 \u2514\u2500\u2500 classes \u2514\u2500\u2500 src ContenidoDinamico.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>The real power of JSP</title> </head> <body> <h2>Bienvenido al desafio :P</h2> <% out.println(\"<br/>Tu direcci\u00f3n IP es \" + request.getRemoteAddr()); String userAgent = request.getHeader(\"user-agent\"); String browser = \"desconocido\"; String protocolo = \"Estas usando el protocolo \" + request.getProtocol(); String saltoLinea = \"<br>\"; out.print(\"<br/> estas navegando con \"); if (userAgent != null) { if (userAgent.indexOf(\"MSIE\") > -1) { browser = \"MS Internet Explorer\"; } else if (userAgent.indexOf(\"Firefox\") > -1) { browser = \"Mozilla Firefox\"; } else if (userAgent.indexOf(\"Opera\") > -1) { browser = \"Opera\"; } else if (userAgent.indexOf(\"Chrome\") > -1) { browser = \"Google Chrome\"; } else if (userAgent.indexOf(\"Safari\") > -1) { browser = \"Apple Safari\"; } } out.println(browser); out.println(saltoLinea); out.println(protocolo); %> </body> </html> Llamada: http://localhost:8080/servletPrueba/ContenidoDinamico.jsp Domumentaci\u00f3n para profundizar: Ac\u00e1","title":"Proyecto 2 JSP comprobando su funcionamiento."},{"location":"modulos/mod_4/uni002/mod4_uni002l1/#proyecto-3-jsp-usando-ciclos","text":"En el siguiente proyecto, se utilizar\u00e1n ciclos para recorrer una lista. Estos ciclos ser\u00e1n utilizados para llenar datos, din\u00e1micamente en una tabla. Estructura: \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 ListadoAutos.jsp \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 WEB-INF \u2502 \u2514\u2500\u2500 lib \u251c\u2500\u2500 build \u2502 \u2514\u2500\u2500 classes \u2514\u2500\u2500 src ListadoAutos.jsp <%@page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@page import=\"java.util.*\" %> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Insert title here</title> <style> table,thead,tbody,tr,td{ border: 1px solid; collapse:collapse; text-align: center; background-color:orange; } #contenido{ width: 600px; heigth: 300px; margin:0 auto; background-color:silver; text-align:center; } </style> </head> <body> <% //declaracion de una lista de marcas de vehiculos List<String> autos = new ArrayList<String>(); autos.add(\"Chevlolet\"); autos.add(\"Mazda\"); autos.add(\"Toyota\"); autos.add(\"Subaru\"); autos.add(\"Skoda\"); autos.add(\"Fiat\"); %> <!-- comienza el HTML --> <div id=\"contenido\"> <p>Contenido de tabla generado con java ;)</p> <table> <thead> <tr> <td>Marca mas vendida</td> <td>Marca mas revendida</td> <td>Marca mas famosa</td> <td>Marca mas robada</td> <td>Marca mas arrendada</td> <td>Marca mas segura</td> </tr> </thead> <tbody> <tr> <% for(int i = 0; i < autos.size(); i ++){ out.println(\"<td>\" + autos.get(i)+ \"</td>\"); } %> </tr> </tbody> </table> </div> </body> </html> Llamada: http://localhost:8080/servletPrueba/ListadoAutos.jsp","title":"Proyecto 3 JSP (usando ciclos)."},{"location":"modulos/mod_4/uni002/mod4_uni002l2/","text":"XML - tag En este proyecto, se muestra como se puede leer contenido desde un archivo xml . Las etiquetas se transforman en una lista y pueden ser recorridas con un forEach , para extraer su contenido. Llamada: <%@ taglib prefix=\"x\" uri=\"http://java.sun.com/jsp/jstl/xml\"%> Lista de tags disponibles: Falta forEach , pero se ver\u00e1 en el siguiente ejemplo Proyecto con XML - tag . Estructura: \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u251c\u2500\u2500 WEB-INF \u2502 \u2502 \u2514\u2500\u2500 lib \u2502 \u2502 \u251c\u2500\u2500 jstl-impl.jar \u2502 \u2502 \u251c\u2500\u2500 jstl-standard.jar \u2502 \u2502 \u2514\u2500\u2500 jstl.jar \u2502 \u251c\u2500\u2500 autores.xml \u2502 \u2514\u2500\u2500 index.jsp \u251c\u2500\u2500 build \u2502 \u2514\u2500\u2500 classes \u2514\u2500\u2500 src autores.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <autores> <libros> <autor>William Faulkner</autor> <titulo>El sonido y la furia</titulo> <paginas>300</paginas> </libros> <libros> <autor>Oscar Wilde</autor> <titulo>De profundis</titulo> <paginas>200</paginas> </libros> <libros> <autor>Franz Kafka</autor> <titulo>La Metamorfosi</titulo> <paginas>394</paginas> </libros> <libros> <autor>James Joyce</autor> <titulo>Evelyn</titulo> <paginas>459</paginas> </libros> </autores> index.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\"%> <%@ taglib prefix=\"x\" uri=\"http://java.sun.com/jsp/jstl/xml\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Autores desde xml</title> <!-- Implementacion bootstrap css --> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"> <!-- Fin Implementacion bootstrap css --> </head> <body> <c:import var=\"lib\" url=\"autores.xml\" /> <x:parse var=\"doc\" xml='${lib}' /> <div class=\"container\"> <h2>Estos elementos son leidos desde un archivo XML con jstl</h2> <table class=\"table table-dark\"> <thead> <tr> <th scope=\"col\">Titulo</th> <th scope=\"col\">Autor</th> <th scope=\"col\">Paginas</th> </tr> </thead> <tbody> <x:forEach var=\"ob\" select=\"$doc/autores/libros\"> <tr> <td><x:out select=\"$ob/titulo\" /></td> <td><x:out select=\"$ob/autor\" /></td> <td><x:out select=\"$ob/paginas\" /></td> </tr> </x:forEach> </tbody> </table> </div> <!-- Implementacion bootstrap js --> <script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin=\"anonymous\"></script> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\" integrity=\"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\" crossorigin=\"anonymous\"></script> <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\" integrity=\"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\" crossorigin=\"anonymous\"></script> <!-- Fin Implementacion bootstrap js --> </body> </html> SQL - Tag La librer\u00eda sql provee la capacidad para interactuar con bases de datos . Incluye el manejo de dataSources, querys, updates y transacciones. Usando las etiquetas SQL junto a las capacidades del core que permiten hacer ciclos permiten f\u00e1cilmente manipular datos rescatados de una base de datos. Se muestra un ejemplo de c\u00f3digo de manipulaci\u00f3n de datos. Se expone el siguiente c\u00f3digo a modo de ejemplo, ya que no disponemos de una base de datos real conectada a la aplicaci\u00f3n. En el ejemplo se puede ver que se realiza una consulta y el resultado se almacena en una variable listaLibros , la que se recorre usando un core-tag <sql:query var=\"listaLibros\" dataSource=\"${datasource}\"> SELECT * FROM libros WHERE title = \u2018JSTL\u2019 ORDER BY autor </sql:query> <table> <c:forEach var=\"libro\" items=\"${listaLibros.row}\"> <tr> <td> <c:out value=\"${libro.titulo}\" /> </td> <td> <c:out value=\"${libro.autor}\" /> </td> </tr> </c:forEach> </table> Uso de formularios para captura de informaci\u00f3n. Las formas eran llenadas a mano y estas permanec\u00edan almacenadas f\u00edsicamente. Ahora estas formas, pueden ser llenadas en sitios web, almacenando la informaci\u00f3n dig\u00edtalmente, adem\u00e1s de poder interactuar con otras entidades utilizando la informaci\u00f3n contenida en los ya mencionados formularios. Estructura de un formulario La etiqueta de inicio de un formulario se presenta a continuaci\u00f3n: <form action=\u201dproceso.jsp\u201d method=\u201dPOST\u201d></form> La etiqueta comienza con la palabra form la cual declara el inicio de un formulario en lenguaje HTML (No olvidar que una p\u00e1gina JSP es tambi\u00e9n una p\u00e1gina con html). Todo lo que est\u00e9 dentro de estas etiquetas se considera un formulario y ser\u00e1 procesado como tal. La segunda palabra clave que se ve en el c\u00f3digo es el atributo action, que en palabras simples, dirige los datos que el usuario ingrese en el formulario al archivo que est\u00e1 llamando entre las comillas dobles , en este caso todo lo que el usuario coloque en los formularios se ir\u00e1 a un archivo (que a\u00fan no existe) que se llama proceso.jsp. El atributo method indica qu\u00e9 vervo se usar\u00e1 para el paso de los datos. Inputs type=\"text\" Caja de texto que soporta datos de tipo Texto. <form> <label for=\"fname\">First name:</label><br> <input type=\"text\" id=\"fname\" name=\"fname\"><br> <label for=\"lname\">Last name:</label><br> <input type=\"text\" id=\"lname\" name=\"lname\"> </form> type=\"password\" Caja de texto que soporta datos de tipo Texto; pero oculta la informaci\u00f3n mientras se ingresa. <form> <label for=\"username\">Username:</label><br> <input type=\"text\" id=\"username\" name=\"username\"><br> <label for=\"pwd\">Password:</label><br> <input type=\"password\" id=\"pwd\" name=\"pwd\"> </form> type=\"submit\" Env\u00eda el formulario y sus datos a la direcci\u00f3n indicada en el atributo action de la etiqueta form . <form action=\"/otraPagina.jsp\"> <label for=\"fname\">First name:</label><br> <input type=\"text\" id=\"fname\" name=\"fname\" value=\"John\"><br> <label for=\"lname\">Last name:</label><br> <input type=\"text\" id=\"lname\" name=\"lname\" value=\"Doe\"><br><br> <input type=\"submit\" value=\"Submit\"> </form> type=\"reset\" Retorna los valores del formulario a su estado inicial. <form action=\"/action_page.php\"> <label for=\"fname\">First name:</label><br> <input type=\"text\" id=\"fname\" name=\"fname\" value=\"John\"><br> <label for=\"lname\">Last name:</label><br> <input type=\"text\" id=\"lname\" name=\"lname\" value=\"Doe\"><br><br> <input type=\"submit\" value=\"Submit\"> <input type=\"reset\"> </form> type=\"radio\" C\u00edrculos de selecci\u00f3n, donde solamente se permite seleccionar uno de ellos. El valor guardado ser\u00e1 el valor seleccionado. Hay que notar que el nombre debe ser el mismo para un grupo de radios . <form> <input type=\"radio\" id=\"male\" name=\"gender\" value=\"male\"> <label for=\"male\">Male</label><br> <input type=\"radio\" id=\"female\" name=\"gender\" value=\"female\"> <label for=\"female\">Female</label><br> <input type=\"radio\" id=\"other\" name=\"gender\" value=\"other\"> <label for=\"other\">Other</label> </form> type=\"checkbox\" Cuadros de selecci\u00f3n m\u00faltiple, se env\u00edan todos los valores seleccionados. Difiere del radio , ya que este \u00faltimo solamente permite una selecci\u00f3n a diferencia del checkbox . <form> <input type=\"checkbox\" id=\"vehicle1\" name=\"vehicle1\" value=\"Bike\" checked> <label for=\"vehicle1\"> I have a bike</label><br> <input type=\"checkbox\" id=\"vehicle2\" name=\"vehicle2\" value=\"Car\"> <label for=\"vehicle2\"> I have a car</label><br> <input type=\"checkbox\" id=\"vehicle3\" name=\"vehicle3\" value=\"Boat\"> <label for=\"vehicle3\"> I have a boat</label> </form> type=\"button\" Define un bot\u00f3n. <input type=\"button\" onclick=\"alert('Hello World!')\" value=\"Click Me!\"> type=\"color\" Define una interfaz para poder seleccionar un color, el campo guardar\u00e1 su c\u00f3digo y lo enviar\u00e1. <form> <label for=\"favcolor\">Select your favorite color:</label> <input type=\"color\" id=\"favcolor\" name=\"favcolor\"> </form> type=\"date\" Define una interfaz de selecci\u00f3n de una fecha. Simula un datepicker , pero esta vez ya forma parte del estandart oficial. <form> <label for=\"birthday\">Birthday:</label> <input type=\"date\" id=\"birthday\" name=\"birthday\"> </form> type=\"datetime-local\" Permite ingresar la fecha y la hora <form> <label for=\"birthdaytime\">Birthday (date and time):</label> <input type=\"datetime-local\" id=\"birthdaytime\" name=\"birthdaytime\"> </form> type=\"email\" Permite ingresar correos electr\u00f3nicos, adem\u00e1s de poder validar los correos ingresados, no si existen, pero s\u00ed verifica si la informaci\u00f3n ingresada, tiene la sintaxis de un correo electr\u00f3nico. <form> <label for=\"email\">Enter your email:</label> <input type=\"email\" id=\"email\" name=\"email\"> </form> type=\"file\" Permite seleccionar un archivo a subir del direcctorio del computador. <form action=\"#\"> <label for=\"myfile\">Select a file:</label> <input type=\"file\" id=\"myfile\" name=\"myfile\"> </form> type=\"month\" Es un campo de selecci\u00f3n como el de la fecha, pero este permite seleccionar el mes de un a\u00f1o. <form> <label for=\"bdaymonth\">Birthday (month and year):</label> <input type=\"month\" id=\"bdaymonth\" name=\"bdaymonth\"> </form> type=\"number\" Campo destinado a contener n\u00fameros, con esto aseguramos que lo que se ingrese, sean n\u00fameros. <form> <label for=\"quantity\">Quantity (between 1 and 5):</label> <input type=\"number\" id=\"quantity\" name=\"quantity\" min=\"1\" max=\"5\"> </form> type=\"range\" Similar a un control de volumen, esta interfaz sirve para asignar un rango y el control genera los valores. El rango se asigna con los atributos min y max . <form> <label for=\"vol\">Volume (between 0 and 50):</label> <input type=\"range\" id=\"vol\" name=\"vol\" min=\"0\" max=\"50\"> </form> type=\"search\" Realiza la misma tarea que un tipo text ; pero este campo est\u00e1 especialmente dise\u00f1ado para campos de tipo b\u00fasqueda. <form> <label for=\"gsearch\">Search Google:</label> <input type=\"search\" id=\"gsearch\" name=\"gsearch\"> </form> type=\"tel\" Especialmente dise\u00f1ado para contener n\u00fameros telef\u00f3nicos. Podemos ser espec\u00edficos al indicar un patr\u00f3n de entrada, aunque otros tipos tambi\u00e9n poseen esta capacidad. <form> <label for=\"phone\">Enter your phone number:</label> <input type=\"tel\" id=\"phone\" name=\"phone\" pattern=\"[0-9]{3}-[0-9]{8}\"> </form> type=\"time\" Campo dise\u00f1ado para el ingreso de una hora. Ser\u00e1 enviada como una cadena de texto. <form> <label for=\"appt\">Select a time:</label> <input type=\"time\" id=\"appt\" name=\"appt\"> </form> type=\"url\" Sirve para ingresar una URL, adem\u00e1s valida que sea una URL. <form> <label for=\"homepage\">Add your homepage:</label> <input type=\"url\" id=\"homepage\" name=\"homepage\"> </form> type=\"week\" Permite al usuario seleccionar una semana y un a\u00f1o. <form> <label for=\"week\">Select a week:</label> <input type=\"week\" id=\"week\" name=\"week\"> </form> Elemento select. Permite desplegar una lista de opciones en un formulario, es usualmente llamado combo-box . El valor que ser\u00e1 enviado, ser\u00e1 el que est\u00e9 en value . <select id=\"cars\" name=\"cars\"> <option value=\"volvo\">Volvo</option> <option value=\"saab\">Saab</option> <option value=\"fiat\">Fiat</option> <option value=\"audi\">Audi</option> </select> Elemento textarea. Permite ingresar un texto m\u00e1s extenso. Un ejemplo ser\u00eda el campo en el que se ingresa un comentadio en facebook o en un blog, o los reclamos. Los atributos rows y cols . definen el tama\u00f1o. <textarea name=\"message\" rows=\"10\" cols=\"30\"> The cat was playing in the garden. </textarea> Elemento button. Igual que el type=\"button\" , define un bot\u00f3n. <button type=\"button\" onclick=\"alert('Hello World!')\">Click Me!</button> Elementos fieldset y legend. Definen un grupo. Es una forma de separar contextos en los formulari\u00f3s. De esta forma lo exponemos al usuario, cuando tenemos m\u00e1s de un formulario. <form action=\"/action_page.jsp\"> <fieldset> <legend>Personalia:</legend> <label for=\"fname\">First name:</label><br> <input type=\"text\" id=\"fname\" name=\"fname\" value=\"John\"><br> <label for=\"lname\">Last name:</label><br> <input type=\"text\" id=\"lname\" name=\"lname\" value=\"Doe\"><br><br> <input type=\"submit\" value=\"Submit\"> </fieldset> </form> Elemento datalist. Similar a un select, este elemento, muestra una lista de selecci\u00f3n. Usado para cuando autocompletamos seg\u00fan el usuario va ingresando, de esta forma se filtra una b\u00fasqueda, por ejemplo de direcci\u00f3n. Para eso se necesita una petici\u00f3n as\u00edncrona, pero en el ejemplo se expone est\u00e1ticamente: <form action=\"/action_page.jsp\"> <input list=\"browsers\"> <datalist id=\"browsers\"> <option value=\"Internet Explorer\"> <option value=\"Firefox\"> <option value=\"Chrome\"> <option value=\"Opera\"> <option value=\"Safari\"> </datalist> </form> Elemento output. Un poco de reactividad integrada. Este campo nos calcula el valor de una lista de inputs num\u00e9ricos. <form action=\"/action_page.jsp\" oninput=\"x.value=parseInt(a.value)+parseInt(b.value)\"> 0 <input type=\"range\" id=\"a\" name=\"a\" value=\"50\"> 100 + <input type=\"number\" id=\"b\" name=\"b\" value=\"50\"> = <output name=\"x\" for=\"a b\"></output> <br><br> <input type=\"submit\"> </form> Proyecto 4: form En el siguiente proyecto se enviar\u00e1n datos entre archivos jsp , utilizando un formulario. El primer archivo es el encargado de ingresar los datos y el segundo de procesarlos. Estructura: \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u251c\u2500\u2500 WEB-INF \u2502 \u2502 \u2514\u2500\u2500 lib \u2502 \u251c\u2500\u2500 index.jsp \u2502 \u2514\u2500\u2500 validacion.jsp \u251c\u2500\u2500 build \u2502 \u2514\u2500\u2500 classes \u2514\u2500\u2500 src index.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <!-- bootstrap/4.3.1 --> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\" /> <!-- bootstrap/3.3.7 --> <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\" /> <!-- tema bootstrao --> <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css\" integrity=\"sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp\" crossorigin=\"anonymous\" /> <style> .header { color: #36A0FF; font-size: 27px; padding: 10px; } .bigicon { font-size: 35px; color: #36A0FF; } form { margin: 0 auto; margin-top: 120px; width: 400px; padding: 1em; border: 1px solid #ccc; border-radius: 1em; } form div+div { margin-top: 1em; } label { display: inline-block; width: 90px; text-align: right; } input, textarea { font: 1em san-serif; width: 200px; border: 1px solid #999; } #boton { width: 200px; margin: 0 auto; } </style> <title>CONTACTO</title> </head> <body> <div class=\"container\" style=\"border: 1px solid black; height: 600px;\"> <form action=\"validacion.jsp\" method=\"get\"> <div> <label>Usuario</label> <input type=\"text\" id=\"user\" name=\"user\"> </div> <div> <label>Comentario</label> <textarea id=\"comentario\" name=\"comentario\"></textarea> </div> <div id=\"boton\"> <button type=\"submit\" class=\"btn btn-primary\">Enviar</button> </div> </form> </div> <!-- Implementacion bootstrap js --> <script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin=\"anonymous\"></script> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\" integrity=\"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\" crossorigin=\"anonymous\"></script> <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\" integrity=\"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\" crossorigin=\"anonymous\"></script> <!-- Fin Implementacion bootstrap js --> <!-- Javascript para bootstrap 3.3.7 --> <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\" crossorigin=\"anonymous\"></script> </body> </html> validacion.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <style> .header { color: #36A0FF; font-size: 27px; padding: 10px; } .bigicon { font-size: 35px; color: #36A0FF; } </style> <!-- Implementacion bootstrap css --> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"> <!-- Fin Implementacion bootstrap css --> <title>CONTACTO</title> </head> <body> <head> <!-- archivo css bootstrap --> <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"> <!-- tema bootstrao --> <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css\" integrity=\"sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp\" crossorigin=\"anonymous\"> <!-- Javascript para bootstrap --> <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\" crossorigin=\"anonymous\"></script> <style> form { margin: 0 auto; margin-top: 120px; width: 400px; padding: 1em; border: 1px solid #ccc; border-radius: 1em; } form div+div { margin-top: 1em; } label { display: inline-block; width: 90px; text-align: right; } input, textarea { font: 1em san-serif; width: 200px; border: 1px solid #999; } #boton { width: 200px; margin: 0 auto; } </style> </head> <body> <div class=\"container\" style=\"border:1px solid black;height: 600px;\"> <h2>Recepcion de datos desde Contacto.jsp</h2> <% String nombre = request.getParameter(\"user\"); String comentario = request.getParameter(\"comentario\"); %> <form action=\"index.jsp\" method=\"post\"> <div> <label>Usuario</label> <input type=\"text\" id=\"user\" value=\"<%out.println(nombre);%>\"> </div> <div> <label>Comentario</label> <textarea id=\"comentario\"><%out.println(comentario);%></textarea> </div> <div id=\"boton\"> <button type=\"submit\" class=\"btn btn-secundary\">Volver</button> </div> </form> </div> <!-- Implementacion bootstrap js --> <script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin=\"anonymous\"></script> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\" integrity=\"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\" crossorigin=\"anonymous\"></script> <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\" integrity=\"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\" crossorigin=\"anonymous\"></script> <!-- Fin Implementacion bootstrap js --> </body> </html> Modelo MVC, Arquitectura en Capas Introducci\u00f3n Previamente se ha estudiado el servlet y su funcionamiento, las p\u00e1ginas jsp con t\u00e9cnicas de scriptlets y jstl, el env\u00edo de valores entre formularios y su forma de comunicaci\u00f3n. Con estos ingredientes y un poco de creatividad ya es posible generar peque\u00f1os sistemas que compartan datos entre s\u00ed, y con el lenguaje java es posible dar l\u00f3gica a la informaci\u00f3n para generar un resultado que de valor al usuario, o en su defecto para crear prototipos. En este cap\u00edtulo utilizaremos todo lo aprendido hasta ahora para comprender lo que es una verdadera arquitectura empresarial bajo un estilo arquitect\u00f3nico conocido como MVC. Conocer el patr\u00f3n de dise\u00f1o MVC Hasta el momento, hemos trabajado en lo que se conoce como arquitectura de 1 capa . En este tipo de arquitectura los request son capturados por p\u00e1ginas jsp o servlets que reciben procesan y devuelven la informaci\u00f3n al cliente. En este modelo, un componente web perfectamente combina l\u00f3gica de negocio y l\u00f3gica de presentaci\u00f3n. Existe un segundo estilo de arquitectura de sistemas empresariales que es conocido como arquitectura de MVC (modelo-vista-controlador). En una arquitectura MVC se apuesta por la divisi\u00f3n de responsabilidades y funcionalidades la cual consta de separar la l\u00f3gica de negocio de la l\u00f3gica de presentaci\u00f3n. Componentes del modelo MVC En una aplicaci\u00f3n MVC, los componentes de una aplicaci\u00f3n son divididos en tres categor\u00edas : Modelo : para explicar esta capa, primero tenemos que saber que al programar con java, se utiliza el paradigma orientado a objetos, donde existen entidades expresadas en c\u00f3digo que asemejan a las entidades del mundo real. Por ejemplo si tenemos una aplicaci\u00f3n que simula el funcionamiento de un veh\u00edculo podemos plasmar el proceso de \u201cmover el veh\u00edculo\u201d mediante clases que har\u00e1n el trabajo, como por ejemplo la clase sistema de encendido que tiene el m\u00e9todo encender chispa de buj\u00eda que tiene una serie de pasos l\u00f3gicos para lograr que la buj\u00eda produzca una chispa y logre mover el pist\u00f3n dentro del cilindro. Si bien este peque\u00f1o ejemplo puede ser tan complicado como se pueda imaginar, lo importante es entender que toda la declaraci\u00f3n de los objetos que representan elementos del mundo real y toda su l\u00f3gica deben estar en la capa de modelo. La misma palabra lo dice, el modelo es en donde se modela el problema en t\u00e9rminos de c\u00f3digo. Todo este c\u00f3digo va en el sector denominado backend. Vista : En esta capa es donde se ubica todo lo que se mostrar\u00e1 al usuario , como por ejemplo las p\u00e1ginas html, los archivos javascript y los elementos de estilos. Esta capa es la denominada front-end. Controlador : Si bien tenemos por un lado una capa de modelo en donde se programa la l\u00f3gica de negocio del sistema y la representaci\u00f3n de las entidades de negocio y por el otro la capa de vista que contiene todo lo que el usuario ver\u00e1 en su pantalla, hace falta un intermediario que sepa comunicarse con la capa de vista y tambi\u00e9n con la capa de modelo . Esta capa es el controlador, el cual conoce muy bien c\u00f3mo conversar con el front end y tambi\u00e9n conoce todos los m\u00e9todos del modelo. Arquitectura en capas. En estas arquitecturas cada elemento del sistema se describe y se contiene de acuerdo a su responsabilidad en capas muy bien de\ufb01nidas. En los proyectos empresariales con java que se pueden encontrar en distintas entidades como por ejemplo grandes bancos, tiendas de retail y miner\u00eda por ejemplo se utilizan estas capas para estructurar los sistemas. A continuaci\u00f3n describiremos estas capas. + Capa de datos : Encargada de trabajar con los datos del sistema, comunicando directamente con alg\u00fan sistema de base de datos. Capa de acceso a datos : Esta capa es en donde se representan las entidades de negocios en objetos perfectamente reproducibles en lenguaje java. En cap\u00edtulos posteriores se profundizar\u00e1 en esta capa, la cual es conocida como DAO (Data Access Object). Capa de aplicaci\u00f3n : Corresponde la modelo, pero en terminos practicos en esta capa se programa la l\u00f3gica de negocio de la aplicaci\u00f3n. Capa web : Esta es la capa de presentaci\u00f3n, la cual contiene todos los componentes que presentan los datos al usuario. Cada una de las capas descritas anteriormente se de\ufb01nen de acuerdo a su responsabilidad. Capa de datos : Comenzaremos describiendo la \u00faltima capa, la encargada de los datos. En esta capa se proveen los mecanismos de persistencia que permiten que se almacenen, se consulten modi\ufb01quen y eliminen los datos. Esta capa se implementa junto a alg\u00fan motor de base de datos como oracle, mysql, sqlserver, etc. La capa de acceso a datos DAO : Este sector de la arquitectura interact\u00faa directamente con la capa de datos y se encarga de acceder a ella para poder crear, eliminar, modi\ufb01car y buscar informaci\u00f3n. Esta capa si bien se comunica con la base de datos, tambi\u00e9n cuenta con otro tipo de entidad de nombre DTO (Data Transfer Object). DTO(Data Transfer Object) : Si bien esta clase no aparece en el diagrama ya que trabaja codo a codo con el dao, es necesario dar su descripci\u00f3n. Esta clase est\u00e1 encargada de proveer los objetos que son un \ufb01el re\ufb02ejo de las entidades de base de datos (tablas) que residen en la base de datos. En t\u00e9rminos simples imaginemos que tenemos la tabla usuarios que tienen los atributos nombre, edad y apellidos. Para que el sistema pueda interactuar con la base de datos y con esta tabla, el DTO debe proveer una clase que tenga exactamente la misma estructura que la tabla usuarios. Esto se traduce en una clase java de nombre usuarios con los atributos de nombre edad y apellidos. La capa de negocios : Esta capa como se describi\u00f3 anteriormente es la encargada de procesar los datos y de otorgar la l\u00f3gica de negocios al sistema. En el diagrama se ve el nombre facade, el cual es la denominaci\u00f3n de un patr\u00f3n de dise\u00f1o que al igual que el conserje de un edi\ufb01cio, conoce a todos los residentes y sabe d\u00f3nde viven de acuerdo al n\u00famero de departamento. La capa de negocios es parte importante de una arquitectura en capas. Pensemos que nuestra aplicaci\u00f3n provee la informaci\u00f3n de las ventas del mes y en la capa de daos existen multitud de clases. El facade es quien sabe donde encontrar por ejemplo las ventas con boletas y se comunica con ella sin problemas. Este patr\u00f3n facade provee un acceso ordenado a las clases DAOS o tambien a mas clases de negocios. Esta capa es el controlador si lo extrapolamos a la arquitectura MVC. La capa web : Aqu\u00ed se generan las p\u00e1ginas jsp que se mostraran al usuario \ufb01nal despu\u00e9s de que el requiest pase al controlador y su clase facade, a la capa de datos dao, consulte en la base de datos para luego retornar la salida.","title":"Mod4 uni002l2"},{"location":"modulos/mod_4/uni002/mod4_uni002l2/#xml-tag","text":"En este proyecto, se muestra como se puede leer contenido desde un archivo xml . Las etiquetas se transforman en una lista y pueden ser recorridas con un forEach , para extraer su contenido. Llamada: <%@ taglib prefix=\"x\" uri=\"http://java.sun.com/jsp/jstl/xml\"%> Lista de tags disponibles: Falta forEach , pero se ver\u00e1 en el siguiente ejemplo","title":"XML - tag"},{"location":"modulos/mod_4/uni002/mod4_uni002l2/#proyecto-con-xml-tag","text":"Estructura: \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u251c\u2500\u2500 WEB-INF \u2502 \u2502 \u2514\u2500\u2500 lib \u2502 \u2502 \u251c\u2500\u2500 jstl-impl.jar \u2502 \u2502 \u251c\u2500\u2500 jstl-standard.jar \u2502 \u2502 \u2514\u2500\u2500 jstl.jar \u2502 \u251c\u2500\u2500 autores.xml \u2502 \u2514\u2500\u2500 index.jsp \u251c\u2500\u2500 build \u2502 \u2514\u2500\u2500 classes \u2514\u2500\u2500 src autores.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <autores> <libros> <autor>William Faulkner</autor> <titulo>El sonido y la furia</titulo> <paginas>300</paginas> </libros> <libros> <autor>Oscar Wilde</autor> <titulo>De profundis</titulo> <paginas>200</paginas> </libros> <libros> <autor>Franz Kafka</autor> <titulo>La Metamorfosi</titulo> <paginas>394</paginas> </libros> <libros> <autor>James Joyce</autor> <titulo>Evelyn</titulo> <paginas>459</paginas> </libros> </autores> index.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\"%> <%@ taglib prefix=\"x\" uri=\"http://java.sun.com/jsp/jstl/xml\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Autores desde xml</title> <!-- Implementacion bootstrap css --> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"> <!-- Fin Implementacion bootstrap css --> </head> <body> <c:import var=\"lib\" url=\"autores.xml\" /> <x:parse var=\"doc\" xml='${lib}' /> <div class=\"container\"> <h2>Estos elementos son leidos desde un archivo XML con jstl</h2> <table class=\"table table-dark\"> <thead> <tr> <th scope=\"col\">Titulo</th> <th scope=\"col\">Autor</th> <th scope=\"col\">Paginas</th> </tr> </thead> <tbody> <x:forEach var=\"ob\" select=\"$doc/autores/libros\"> <tr> <td><x:out select=\"$ob/titulo\" /></td> <td><x:out select=\"$ob/autor\" /></td> <td><x:out select=\"$ob/paginas\" /></td> </tr> </x:forEach> </tbody> </table> </div> <!-- Implementacion bootstrap js --> <script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin=\"anonymous\"></script> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\" integrity=\"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\" crossorigin=\"anonymous\"></script> <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\" integrity=\"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\" crossorigin=\"anonymous\"></script> <!-- Fin Implementacion bootstrap js --> </body> </html>","title":"Proyecto con XML - tag."},{"location":"modulos/mod_4/uni002/mod4_uni002l2/#sql-tag","text":"La librer\u00eda sql provee la capacidad para interactuar con bases de datos . Incluye el manejo de dataSources, querys, updates y transacciones. Usando las etiquetas SQL junto a las capacidades del core que permiten hacer ciclos permiten f\u00e1cilmente manipular datos rescatados de una base de datos. Se muestra un ejemplo de c\u00f3digo de manipulaci\u00f3n de datos. Se expone el siguiente c\u00f3digo a modo de ejemplo, ya que no disponemos de una base de datos real conectada a la aplicaci\u00f3n. En el ejemplo se puede ver que se realiza una consulta y el resultado se almacena en una variable listaLibros , la que se recorre usando un core-tag <sql:query var=\"listaLibros\" dataSource=\"${datasource}\"> SELECT * FROM libros WHERE title = \u2018JSTL\u2019 ORDER BY autor </sql:query> <table> <c:forEach var=\"libro\" items=\"${listaLibros.row}\"> <tr> <td> <c:out value=\"${libro.titulo}\" /> </td> <td> <c:out value=\"${libro.autor}\" /> </td> </tr> </c:forEach> </table>","title":"SQL - Tag"},{"location":"modulos/mod_4/uni002/mod4_uni002l2/#uso-de-formularios-para-captura-de-informacion","text":"Las formas eran llenadas a mano y estas permanec\u00edan almacenadas f\u00edsicamente. Ahora estas formas, pueden ser llenadas en sitios web, almacenando la informaci\u00f3n dig\u00edtalmente, adem\u00e1s de poder interactuar con otras entidades utilizando la informaci\u00f3n contenida en los ya mencionados formularios.","title":"Uso de formularios para captura de informaci\u00f3n."},{"location":"modulos/mod_4/uni002/mod4_uni002l2/#estructura-de-un-formulario","text":"La etiqueta de inicio de un formulario se presenta a continuaci\u00f3n: <form action=\u201dproceso.jsp\u201d method=\u201dPOST\u201d></form> La etiqueta comienza con la palabra form la cual declara el inicio de un formulario en lenguaje HTML (No olvidar que una p\u00e1gina JSP es tambi\u00e9n una p\u00e1gina con html). Todo lo que est\u00e9 dentro de estas etiquetas se considera un formulario y ser\u00e1 procesado como tal. La segunda palabra clave que se ve en el c\u00f3digo es el atributo action, que en palabras simples, dirige los datos que el usuario ingrese en el formulario al archivo que est\u00e1 llamando entre las comillas dobles , en este caso todo lo que el usuario coloque en los formularios se ir\u00e1 a un archivo (que a\u00fan no existe) que se llama proceso.jsp. El atributo method indica qu\u00e9 vervo se usar\u00e1 para el paso de los datos.","title":"Estructura de un formulario"},{"location":"modulos/mod_4/uni002/mod4_uni002l2/#inputs","text":"","title":"Inputs"},{"location":"modulos/mod_4/uni002/mod4_uni002l2/#typetext","text":"Caja de texto que soporta datos de tipo Texto. <form> <label for=\"fname\">First name:</label><br> <input type=\"text\" id=\"fname\" name=\"fname\"><br> <label for=\"lname\">Last name:</label><br> <input type=\"text\" id=\"lname\" name=\"lname\"> </form>","title":"type=\"text\""},{"location":"modulos/mod_4/uni002/mod4_uni002l2/#typepassword","text":"Caja de texto que soporta datos de tipo Texto; pero oculta la informaci\u00f3n mientras se ingresa. <form> <label for=\"username\">Username:</label><br> <input type=\"text\" id=\"username\" name=\"username\"><br> <label for=\"pwd\">Password:</label><br> <input type=\"password\" id=\"pwd\" name=\"pwd\"> </form>","title":"type=\"password\""},{"location":"modulos/mod_4/uni002/mod4_uni002l2/#typesubmit","text":"Env\u00eda el formulario y sus datos a la direcci\u00f3n indicada en el atributo action de la etiqueta form . <form action=\"/otraPagina.jsp\"> <label for=\"fname\">First name:</label><br> <input type=\"text\" id=\"fname\" name=\"fname\" value=\"John\"><br> <label for=\"lname\">Last name:</label><br> <input type=\"text\" id=\"lname\" name=\"lname\" value=\"Doe\"><br><br> <input type=\"submit\" value=\"Submit\"> </form>","title":"type=\"submit\""},{"location":"modulos/mod_4/uni002/mod4_uni002l2/#typereset","text":"Retorna los valores del formulario a su estado inicial. <form action=\"/action_page.php\"> <label for=\"fname\">First name:</label><br> <input type=\"text\" id=\"fname\" name=\"fname\" value=\"John\"><br> <label for=\"lname\">Last name:</label><br> <input type=\"text\" id=\"lname\" name=\"lname\" value=\"Doe\"><br><br> <input type=\"submit\" value=\"Submit\"> <input type=\"reset\"> </form>","title":"type=\"reset\""},{"location":"modulos/mod_4/uni002/mod4_uni002l2/#typeradio","text":"C\u00edrculos de selecci\u00f3n, donde solamente se permite seleccionar uno de ellos. El valor guardado ser\u00e1 el valor seleccionado. Hay que notar que el nombre debe ser el mismo para un grupo de radios . <form> <input type=\"radio\" id=\"male\" name=\"gender\" value=\"male\"> <label for=\"male\">Male</label><br> <input type=\"radio\" id=\"female\" name=\"gender\" value=\"female\"> <label for=\"female\">Female</label><br> <input type=\"radio\" id=\"other\" name=\"gender\" value=\"other\"> <label for=\"other\">Other</label> </form>","title":"type=\"radio\""},{"location":"modulos/mod_4/uni002/mod4_uni002l2/#typecheckbox","text":"Cuadros de selecci\u00f3n m\u00faltiple, se env\u00edan todos los valores seleccionados. Difiere del radio , ya que este \u00faltimo solamente permite una selecci\u00f3n a diferencia del checkbox . <form> <input type=\"checkbox\" id=\"vehicle1\" name=\"vehicle1\" value=\"Bike\" checked> <label for=\"vehicle1\"> I have a bike</label><br> <input type=\"checkbox\" id=\"vehicle2\" name=\"vehicle2\" value=\"Car\"> <label for=\"vehicle2\"> I have a car</label><br> <input type=\"checkbox\" id=\"vehicle3\" name=\"vehicle3\" value=\"Boat\"> <label for=\"vehicle3\"> I have a boat</label> </form>","title":"type=\"checkbox\""},{"location":"modulos/mod_4/uni002/mod4_uni002l2/#typebutton","text":"Define un bot\u00f3n. <input type=\"button\" onclick=\"alert('Hello World!')\" value=\"Click Me!\">","title":"type=\"button\""},{"location":"modulos/mod_4/uni002/mod4_uni002l2/#typecolor","text":"Define una interfaz para poder seleccionar un color, el campo guardar\u00e1 su c\u00f3digo y lo enviar\u00e1. <form> <label for=\"favcolor\">Select your favorite color:</label> <input type=\"color\" id=\"favcolor\" name=\"favcolor\"> </form>","title":"type=\"color\""},{"location":"modulos/mod_4/uni002/mod4_uni002l2/#typedate","text":"Define una interfaz de selecci\u00f3n de una fecha. Simula un datepicker , pero esta vez ya forma parte del estandart oficial. <form> <label for=\"birthday\">Birthday:</label> <input type=\"date\" id=\"birthday\" name=\"birthday\"> </form>","title":"type=\"date\""},{"location":"modulos/mod_4/uni002/mod4_uni002l2/#typedatetime-local","text":"Permite ingresar la fecha y la hora <form> <label for=\"birthdaytime\">Birthday (date and time):</label> <input type=\"datetime-local\" id=\"birthdaytime\" name=\"birthdaytime\"> </form>","title":"type=\"datetime-local\""},{"location":"modulos/mod_4/uni002/mod4_uni002l2/#typeemail","text":"Permite ingresar correos electr\u00f3nicos, adem\u00e1s de poder validar los correos ingresados, no si existen, pero s\u00ed verifica si la informaci\u00f3n ingresada, tiene la sintaxis de un correo electr\u00f3nico. <form> <label for=\"email\">Enter your email:</label> <input type=\"email\" id=\"email\" name=\"email\"> </form>","title":"type=\"email\""},{"location":"modulos/mod_4/uni002/mod4_uni002l2/#typefile","text":"Permite seleccionar un archivo a subir del direcctorio del computador. <form action=\"#\"> <label for=\"myfile\">Select a file:</label> <input type=\"file\" id=\"myfile\" name=\"myfile\"> </form>","title":"type=\"file\""},{"location":"modulos/mod_4/uni002/mod4_uni002l2/#typemonth","text":"Es un campo de selecci\u00f3n como el de la fecha, pero este permite seleccionar el mes de un a\u00f1o. <form> <label for=\"bdaymonth\">Birthday (month and year):</label> <input type=\"month\" id=\"bdaymonth\" name=\"bdaymonth\"> </form>","title":"type=\"month\""},{"location":"modulos/mod_4/uni002/mod4_uni002l2/#typenumber","text":"Campo destinado a contener n\u00fameros, con esto aseguramos que lo que se ingrese, sean n\u00fameros. <form> <label for=\"quantity\">Quantity (between 1 and 5):</label> <input type=\"number\" id=\"quantity\" name=\"quantity\" min=\"1\" max=\"5\"> </form>","title":"type=\"number\""},{"location":"modulos/mod_4/uni002/mod4_uni002l2/#typerange","text":"Similar a un control de volumen, esta interfaz sirve para asignar un rango y el control genera los valores. El rango se asigna con los atributos min y max . <form> <label for=\"vol\">Volume (between 0 and 50):</label> <input type=\"range\" id=\"vol\" name=\"vol\" min=\"0\" max=\"50\"> </form>","title":"type=\"range\""},{"location":"modulos/mod_4/uni002/mod4_uni002l2/#typesearch","text":"Realiza la misma tarea que un tipo text ; pero este campo est\u00e1 especialmente dise\u00f1ado para campos de tipo b\u00fasqueda. <form> <label for=\"gsearch\">Search Google:</label> <input type=\"search\" id=\"gsearch\" name=\"gsearch\"> </form>","title":"type=\"search\""},{"location":"modulos/mod_4/uni002/mod4_uni002l2/#typetel","text":"Especialmente dise\u00f1ado para contener n\u00fameros telef\u00f3nicos. Podemos ser espec\u00edficos al indicar un patr\u00f3n de entrada, aunque otros tipos tambi\u00e9n poseen esta capacidad. <form> <label for=\"phone\">Enter your phone number:</label> <input type=\"tel\" id=\"phone\" name=\"phone\" pattern=\"[0-9]{3}-[0-9]{8}\"> </form>","title":"type=\"tel\""},{"location":"modulos/mod_4/uni002/mod4_uni002l2/#typetime","text":"Campo dise\u00f1ado para el ingreso de una hora. Ser\u00e1 enviada como una cadena de texto. <form> <label for=\"appt\">Select a time:</label> <input type=\"time\" id=\"appt\" name=\"appt\"> </form>","title":"type=\"time\""},{"location":"modulos/mod_4/uni002/mod4_uni002l2/#typeurl","text":"Sirve para ingresar una URL, adem\u00e1s valida que sea una URL. <form> <label for=\"homepage\">Add your homepage:</label> <input type=\"url\" id=\"homepage\" name=\"homepage\"> </form>","title":"type=\"url\""},{"location":"modulos/mod_4/uni002/mod4_uni002l2/#typeweek","text":"Permite al usuario seleccionar una semana y un a\u00f1o. <form> <label for=\"week\">Select a week:</label> <input type=\"week\" id=\"week\" name=\"week\"> </form>","title":"type=\"week\""},{"location":"modulos/mod_4/uni002/mod4_uni002l2/#elemento-select","text":"Permite desplegar una lista de opciones en un formulario, es usualmente llamado combo-box . El valor que ser\u00e1 enviado, ser\u00e1 el que est\u00e9 en value . <select id=\"cars\" name=\"cars\"> <option value=\"volvo\">Volvo</option> <option value=\"saab\">Saab</option> <option value=\"fiat\">Fiat</option> <option value=\"audi\">Audi</option> </select>","title":"Elemento select."},{"location":"modulos/mod_4/uni002/mod4_uni002l2/#elemento-textarea","text":"Permite ingresar un texto m\u00e1s extenso. Un ejemplo ser\u00eda el campo en el que se ingresa un comentadio en facebook o en un blog, o los reclamos. Los atributos rows y cols . definen el tama\u00f1o. <textarea name=\"message\" rows=\"10\" cols=\"30\"> The cat was playing in the garden. </textarea>","title":"Elemento textarea."},{"location":"modulos/mod_4/uni002/mod4_uni002l2/#elemento-button","text":"Igual que el type=\"button\" , define un bot\u00f3n. <button type=\"button\" onclick=\"alert('Hello World!')\">Click Me!</button>","title":"Elemento button."},{"location":"modulos/mod_4/uni002/mod4_uni002l2/#elementos-fieldset-y-legend","text":"Definen un grupo. Es una forma de separar contextos en los formulari\u00f3s. De esta forma lo exponemos al usuario, cuando tenemos m\u00e1s de un formulario. <form action=\"/action_page.jsp\"> <fieldset> <legend>Personalia:</legend> <label for=\"fname\">First name:</label><br> <input type=\"text\" id=\"fname\" name=\"fname\" value=\"John\"><br> <label for=\"lname\">Last name:</label><br> <input type=\"text\" id=\"lname\" name=\"lname\" value=\"Doe\"><br><br> <input type=\"submit\" value=\"Submit\"> </fieldset> </form>","title":"Elementos fieldset y legend."},{"location":"modulos/mod_4/uni002/mod4_uni002l2/#elemento-datalist","text":"Similar a un select, este elemento, muestra una lista de selecci\u00f3n. Usado para cuando autocompletamos seg\u00fan el usuario va ingresando, de esta forma se filtra una b\u00fasqueda, por ejemplo de direcci\u00f3n. Para eso se necesita una petici\u00f3n as\u00edncrona, pero en el ejemplo se expone est\u00e1ticamente: <form action=\"/action_page.jsp\"> <input list=\"browsers\"> <datalist id=\"browsers\"> <option value=\"Internet Explorer\"> <option value=\"Firefox\"> <option value=\"Chrome\"> <option value=\"Opera\"> <option value=\"Safari\"> </datalist> </form>","title":"Elemento datalist."},{"location":"modulos/mod_4/uni002/mod4_uni002l2/#elemento-output","text":"Un poco de reactividad integrada. Este campo nos calcula el valor de una lista de inputs num\u00e9ricos. <form action=\"/action_page.jsp\" oninput=\"x.value=parseInt(a.value)+parseInt(b.value)\"> 0 <input type=\"range\" id=\"a\" name=\"a\" value=\"50\"> 100 + <input type=\"number\" id=\"b\" name=\"b\" value=\"50\"> = <output name=\"x\" for=\"a b\"></output> <br><br> <input type=\"submit\"> </form>","title":"Elemento output."},{"location":"modulos/mod_4/uni002/mod4_uni002l2/#proyecto-4-form","text":"En el siguiente proyecto se enviar\u00e1n datos entre archivos jsp , utilizando un formulario. El primer archivo es el encargado de ingresar los datos y el segundo de procesarlos. Estructura: \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u251c\u2500\u2500 WEB-INF \u2502 \u2502 \u2514\u2500\u2500 lib \u2502 \u251c\u2500\u2500 index.jsp \u2502 \u2514\u2500\u2500 validacion.jsp \u251c\u2500\u2500 build \u2502 \u2514\u2500\u2500 classes \u2514\u2500\u2500 src index.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <!-- bootstrap/4.3.1 --> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\" /> <!-- bootstrap/3.3.7 --> <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\" /> <!-- tema bootstrao --> <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css\" integrity=\"sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp\" crossorigin=\"anonymous\" /> <style> .header { color: #36A0FF; font-size: 27px; padding: 10px; } .bigicon { font-size: 35px; color: #36A0FF; } form { margin: 0 auto; margin-top: 120px; width: 400px; padding: 1em; border: 1px solid #ccc; border-radius: 1em; } form div+div { margin-top: 1em; } label { display: inline-block; width: 90px; text-align: right; } input, textarea { font: 1em san-serif; width: 200px; border: 1px solid #999; } #boton { width: 200px; margin: 0 auto; } </style> <title>CONTACTO</title> </head> <body> <div class=\"container\" style=\"border: 1px solid black; height: 600px;\"> <form action=\"validacion.jsp\" method=\"get\"> <div> <label>Usuario</label> <input type=\"text\" id=\"user\" name=\"user\"> </div> <div> <label>Comentario</label> <textarea id=\"comentario\" name=\"comentario\"></textarea> </div> <div id=\"boton\"> <button type=\"submit\" class=\"btn btn-primary\">Enviar</button> </div> </form> </div> <!-- Implementacion bootstrap js --> <script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin=\"anonymous\"></script> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\" integrity=\"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\" crossorigin=\"anonymous\"></script> <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\" integrity=\"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\" crossorigin=\"anonymous\"></script> <!-- Fin Implementacion bootstrap js --> <!-- Javascript para bootstrap 3.3.7 --> <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\" crossorigin=\"anonymous\"></script> </body> </html> validacion.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <style> .header { color: #36A0FF; font-size: 27px; padding: 10px; } .bigicon { font-size: 35px; color: #36A0FF; } </style> <!-- Implementacion bootstrap css --> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"> <!-- Fin Implementacion bootstrap css --> <title>CONTACTO</title> </head> <body> <head> <!-- archivo css bootstrap --> <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"> <!-- tema bootstrao --> <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css\" integrity=\"sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp\" crossorigin=\"anonymous\"> <!-- Javascript para bootstrap --> <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\" crossorigin=\"anonymous\"></script> <style> form { margin: 0 auto; margin-top: 120px; width: 400px; padding: 1em; border: 1px solid #ccc; border-radius: 1em; } form div+div { margin-top: 1em; } label { display: inline-block; width: 90px; text-align: right; } input, textarea { font: 1em san-serif; width: 200px; border: 1px solid #999; } #boton { width: 200px; margin: 0 auto; } </style> </head> <body> <div class=\"container\" style=\"border:1px solid black;height: 600px;\"> <h2>Recepcion de datos desde Contacto.jsp</h2> <% String nombre = request.getParameter(\"user\"); String comentario = request.getParameter(\"comentario\"); %> <form action=\"index.jsp\" method=\"post\"> <div> <label>Usuario</label> <input type=\"text\" id=\"user\" value=\"<%out.println(nombre);%>\"> </div> <div> <label>Comentario</label> <textarea id=\"comentario\"><%out.println(comentario);%></textarea> </div> <div id=\"boton\"> <button type=\"submit\" class=\"btn btn-secundary\">Volver</button> </div> </form> </div> <!-- Implementacion bootstrap js --> <script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin=\"anonymous\"></script> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\" integrity=\"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\" crossorigin=\"anonymous\"></script> <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\" integrity=\"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\" crossorigin=\"anonymous\"></script> <!-- Fin Implementacion bootstrap js --> </body> </html>","title":"Proyecto 4: form"},{"location":"modulos/mod_4/uni002/mod4_uni002l2/#modelo-mvc-arquitectura-en-capas","text":"","title":"Modelo MVC, Arquitectura en Capas"},{"location":"modulos/mod_4/uni002/mod4_uni002l2/#introduccion","text":"Previamente se ha estudiado el servlet y su funcionamiento, las p\u00e1ginas jsp con t\u00e9cnicas de scriptlets y jstl, el env\u00edo de valores entre formularios y su forma de comunicaci\u00f3n. Con estos ingredientes y un poco de creatividad ya es posible generar peque\u00f1os sistemas que compartan datos entre s\u00ed, y con el lenguaje java es posible dar l\u00f3gica a la informaci\u00f3n para generar un resultado que de valor al usuario, o en su defecto para crear prototipos. En este cap\u00edtulo utilizaremos todo lo aprendido hasta ahora para comprender lo que es una verdadera arquitectura empresarial bajo un estilo arquitect\u00f3nico conocido como MVC.","title":"Introducci\u00f3n"},{"location":"modulos/mod_4/uni002/mod4_uni002l2/#conocer-el-patron-de-diseno-mvc","text":"Hasta el momento, hemos trabajado en lo que se conoce como arquitectura de 1 capa . En este tipo de arquitectura los request son capturados por p\u00e1ginas jsp o servlets que reciben procesan y devuelven la informaci\u00f3n al cliente. En este modelo, un componente web perfectamente combina l\u00f3gica de negocio y l\u00f3gica de presentaci\u00f3n. Existe un segundo estilo de arquitectura de sistemas empresariales que es conocido como arquitectura de MVC (modelo-vista-controlador). En una arquitectura MVC se apuesta por la divisi\u00f3n de responsabilidades y funcionalidades la cual consta de separar la l\u00f3gica de negocio de la l\u00f3gica de presentaci\u00f3n.","title":"Conocer el patr\u00f3n de dise\u00f1o MVC"},{"location":"modulos/mod_4/uni002/mod4_uni002l2/#componentes-del-modelo-mvc","text":"En una aplicaci\u00f3n MVC, los componentes de una aplicaci\u00f3n son divididos en tres categor\u00edas : Modelo : para explicar esta capa, primero tenemos que saber que al programar con java, se utiliza el paradigma orientado a objetos, donde existen entidades expresadas en c\u00f3digo que asemejan a las entidades del mundo real. Por ejemplo si tenemos una aplicaci\u00f3n que simula el funcionamiento de un veh\u00edculo podemos plasmar el proceso de \u201cmover el veh\u00edculo\u201d mediante clases que har\u00e1n el trabajo, como por ejemplo la clase sistema de encendido que tiene el m\u00e9todo encender chispa de buj\u00eda que tiene una serie de pasos l\u00f3gicos para lograr que la buj\u00eda produzca una chispa y logre mover el pist\u00f3n dentro del cilindro. Si bien este peque\u00f1o ejemplo puede ser tan complicado como se pueda imaginar, lo importante es entender que toda la declaraci\u00f3n de los objetos que representan elementos del mundo real y toda su l\u00f3gica deben estar en la capa de modelo. La misma palabra lo dice, el modelo es en donde se modela el problema en t\u00e9rminos de c\u00f3digo. Todo este c\u00f3digo va en el sector denominado backend. Vista : En esta capa es donde se ubica todo lo que se mostrar\u00e1 al usuario , como por ejemplo las p\u00e1ginas html, los archivos javascript y los elementos de estilos. Esta capa es la denominada front-end. Controlador : Si bien tenemos por un lado una capa de modelo en donde se programa la l\u00f3gica de negocio del sistema y la representaci\u00f3n de las entidades de negocio y por el otro la capa de vista que contiene todo lo que el usuario ver\u00e1 en su pantalla, hace falta un intermediario que sepa comunicarse con la capa de vista y tambi\u00e9n con la capa de modelo . Esta capa es el controlador, el cual conoce muy bien c\u00f3mo conversar con el front end y tambi\u00e9n conoce todos los m\u00e9todos del modelo.","title":"Componentes del modelo MVC"},{"location":"modulos/mod_4/uni002/mod4_uni002l2/#arquitectura-en-capas","text":"En estas arquitecturas cada elemento del sistema se describe y se contiene de acuerdo a su responsabilidad en capas muy bien de\ufb01nidas. En los proyectos empresariales con java que se pueden encontrar en distintas entidades como por ejemplo grandes bancos, tiendas de retail y miner\u00eda por ejemplo se utilizan estas capas para estructurar los sistemas. A continuaci\u00f3n describiremos estas capas. + Capa de datos : Encargada de trabajar con los datos del sistema, comunicando directamente con alg\u00fan sistema de base de datos. Capa de acceso a datos : Esta capa es en donde se representan las entidades de negocios en objetos perfectamente reproducibles en lenguaje java. En cap\u00edtulos posteriores se profundizar\u00e1 en esta capa, la cual es conocida como DAO (Data Access Object). Capa de aplicaci\u00f3n : Corresponde la modelo, pero en terminos practicos en esta capa se programa la l\u00f3gica de negocio de la aplicaci\u00f3n. Capa web : Esta es la capa de presentaci\u00f3n, la cual contiene todos los componentes que presentan los datos al usuario. Cada una de las capas descritas anteriormente se de\ufb01nen de acuerdo a su responsabilidad. Capa de datos : Comenzaremos describiendo la \u00faltima capa, la encargada de los datos. En esta capa se proveen los mecanismos de persistencia que permiten que se almacenen, se consulten modi\ufb01quen y eliminen los datos. Esta capa se implementa junto a alg\u00fan motor de base de datos como oracle, mysql, sqlserver, etc. La capa de acceso a datos DAO : Este sector de la arquitectura interact\u00faa directamente con la capa de datos y se encarga de acceder a ella para poder crear, eliminar, modi\ufb01car y buscar informaci\u00f3n. Esta capa si bien se comunica con la base de datos, tambi\u00e9n cuenta con otro tipo de entidad de nombre DTO (Data Transfer Object). DTO(Data Transfer Object) : Si bien esta clase no aparece en el diagrama ya que trabaja codo a codo con el dao, es necesario dar su descripci\u00f3n. Esta clase est\u00e1 encargada de proveer los objetos que son un \ufb01el re\ufb02ejo de las entidades de base de datos (tablas) que residen en la base de datos. En t\u00e9rminos simples imaginemos que tenemos la tabla usuarios que tienen los atributos nombre, edad y apellidos. Para que el sistema pueda interactuar con la base de datos y con esta tabla, el DTO debe proveer una clase que tenga exactamente la misma estructura que la tabla usuarios. Esto se traduce en una clase java de nombre usuarios con los atributos de nombre edad y apellidos. La capa de negocios : Esta capa como se describi\u00f3 anteriormente es la encargada de procesar los datos y de otorgar la l\u00f3gica de negocios al sistema. En el diagrama se ve el nombre facade, el cual es la denominaci\u00f3n de un patr\u00f3n de dise\u00f1o que al igual que el conserje de un edi\ufb01cio, conoce a todos los residentes y sabe d\u00f3nde viven de acuerdo al n\u00famero de departamento. La capa de negocios es parte importante de una arquitectura en capas. Pensemos que nuestra aplicaci\u00f3n provee la informaci\u00f3n de las ventas del mes y en la capa de daos existen multitud de clases. El facade es quien sabe donde encontrar por ejemplo las ventas con boletas y se comunica con ella sin problemas. Este patr\u00f3n facade provee un acceso ordenado a las clases DAOS o tambien a mas clases de negocios. Esta capa es el controlador si lo extrapolamos a la arquitectura MVC. La capa web : Aqu\u00ed se generan las p\u00e1ginas jsp que se mostraran al usuario \ufb01nal despu\u00e9s de que el requiest pase al controlador y su clase facade, a la capa de datos dao, consulte en la base de datos para luego retornar la salida.","title":"Arquitectura en capas."},{"location":"modulos/mod_4/uni002/mod4_uni002l3/","text":"Proyecto 4: MVC Requerimientos: Se necesita un sistema que sea capaz de registrar la inscripci\u00f3n de un usuario a un curso. Para esto necesitamos una ventana de inscripci\u00f3n y otra que muestre los resultados de la inscripci\u00f3n. Por ahora, solamente ser\u00e1 posible revisar si la informaci\u00f3n ha sido correctamente ingresada, mediante la consulta en la base de datos. Diagramas a implementar: Lo primero es reconocer las entidades. Las que ser\u00e1n las siguientes: Daos que realizar\u00e1n la comunicaci\u00f3n. Fachada de comunicaci\u00f3n: Servlets Finalmente, debemos implementar dos vistas: inscripcion.jsp : Contendr\u00e1 el formulario de inscripci\u00f3n. inscripcion.jsp : Confirmar\u00e1 al usuario que la inscripci\u00f3n se ha realizado. Antes de continuar.\ud83d\udc40 Debemos tener un contenedor de servlets. Se encuentra disponible en el siguiente enlace Debemos incluir el driver para conectar la base de datos con Java. (Oracle 11g). Se encuentra disponible en el siguiente enlace Implementaci\u00f3n.\ud83e\udd4b Comenzamos entonces con la implementaci\u00f3n de la soluci\u00f3n. Estructura \u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u251c\u2500\u2500 WEB-INF \u2502 \u2502 \u2514\u2500\u2500 lib \u2502 \u251c\u2500\u2500 confirmacion.jsp \u2502 \u2514\u2500\u2500 inscripcion.jsp \u2514\u2500\u2500 src \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u251c\u2500\u2500 daos \u2502 \u251c\u2500\u2500 CursoDao.java \u2502 \u251c\u2500\u2500 FormaDePagoDao.java \u2502 \u2514\u2500\u2500 InscripcionDAO.java \u251c\u2500\u2500 entidades \u2502 \u251c\u2500\u2500 CursoDTO.java \u2502 \u251c\u2500\u2500 FormaDePagoDTO.java \u2502 \u2514\u2500\u2500 InscripcionDTO.java \u251c\u2500\u2500 facades \u2502 \u2514\u2500\u2500 Facade.java \u251c\u2500\u2500 main \u2502 \u2514\u2500\u2500 Principal.java \u251c\u2500\u2500 servlets \u2502 \u251c\u2500\u2500 PosInscripcion.java \u2502 \u251c\u2500\u2500 PreConfirmacion.java \u2502 \u2514\u2500\u2500 PreInscripcion.java \u2514\u2500\u2500 utils \u2514\u2500\u2500 AccesoBaseDatos.java Entidades /src/cl/lherrera/entidades/CursoDTO.java package cl.lherrera.entidades; public class CursoDTO { private int idCurso; private String descripcion; private double precio; public int getIdCurso() { return idCurso; } public void setIdCurso(int idCurso) { this.idCurso = idCurso; } public String getDescripcion() { return descripcion; } public void setDescripcion(String descripcion) { this.descripcion = descripcion; } public double getPrecio() { return precio; } public void setPrecio(double precio) { this.precio = precio; } } /src/cl/lherrera/entidades/FormaDePagoDTO.java package cl.lherrera.entidades; public class FormaDePagoDTO { private int idFormaDePago; private String descripcion; private double recargo; public int getIdFormaDePago() { return idFormaDePago; } public void setIdFormaDePago(int idFormaDePago) { this.idFormaDePago = idFormaDePago; } public String getDescripcion() { return descripcion; } public void setDescripcion(String descripcion) { this.descripcion = descripcion; } public double getRecargo() { return recargo; } public void setRecargo(double recargo) { this.recargo = recargo; } } /pruebaMvc/src/cl/lherrera/entidades/InscripcionDTO.java package cl.lherrera.entidades; public class InscripcionDTO { private int idInsc; private String nombre; private String celular; private int idCurso; private int idFormaDePago; public int getIdInsc() { return idInsc; } public void setIdInsc(int idInsc) { this.idInsc = idInsc; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } public String getCelular() { return celular; } public void setCelular(String celular) { this.celular = celular; } public int getIdCurso() { return idCurso; } public void setIdCurso(int idCurso) { this.idCurso = idCurso; } public int getIdFormaDePago() { return idFormaDePago; } public void setIdFormaDePago(int idFormaDePago) { this.idFormaDePago = idFormaDePago; } } Conexi\u00f3n (Oracle 11g Driver) - Patr\u00f3n Singleton /pruebaMvc/src/cl/lherrera/utils/AccesoBaseDatos.java package cl.lherrera.utils; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; import oracle.jdbc.driver.OracleDriver; public class AccesoBaseDatos { private static final String DB_HOST = \"jdbc:oracle:thin:@localhost:1521:XE\"; private static final String DB_USER_NAME = \"mod4u2\"; private static final String DB_USER_PASS = \"1234\"; // variable est\u00e1tica. \u00danica instancia permitida. private static AccesoBaseDatos acceso; // variables de instancia private Connection conexion; // constructor privado para evitar instancias desde fuera. private AccesoBaseDatos() {} // \u00fanica forma de obtener una instancia desde fuera. public static AccesoBaseDatos obtenerInstancia() { if(acceso == null) { acceso = new AccesoBaseDatos(); } return acceso; } /** * Obtiene una conexi\u00f3n a la base de datos. La cu\u00e1l es \u00fanica para la * instancia de la aplicaci\u00f3n. * @return */ public Connection obtenerConexion() { try { // registramos el driver: uso en lugar de Class.forname. DriverManager.registerDriver(new OracleDriver()); conexion = DriverManager.getConnection(DB_HOST, DB_USER_NAME, DB_USER_PASS); }catch(SQLException e) { e.printStackTrace(); } return conexion; } } DAOS /pruebaMvc/src/cl/lherrera/daos/CursoDao.java package cl.lherrera.daos; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.util.ArrayList; import java.util.List; import cl.lherrera.entidades.CursoDTO; import cl.lherrera.utils.AccesoBaseDatos; public class CursoDao { AccesoBaseDatos acceso = AccesoBaseDatos.obtenerInstancia(); Connection conexion = acceso.obtenerConexion(); public List<CursoDTO> obtenerCursos() { List<CursoDTO> listaDeCursos = new ArrayList<>(); String sqlTxt = (\"select id_curso, descripcion, precio from mod4u2.curso\"); try( PreparedStatement sentencia = conexion.prepareStatement(sqlTxt); ResultSet cursos = sentencia.executeQuery(); ){ while (cursos.next()) { CursoDTO nuevoCurso = new CursoDTO(); nuevoCurso.setIdCurso(cursos.getInt(\"id_curso\")); nuevoCurso.setDescripcion(cursos.getString(\"descripcion\")); nuevoCurso.setPrecio(cursos.getDouble(\"precio\")); listaDeCursos.add(nuevoCurso); } } catch (SQLException e) { e.getStackTrace(); } return listaDeCursos; } } /pruebaMvc/src/cl/lherrera/daos/FormaDePagoDao.java package cl.lherrera.daos; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.util.ArrayList; import java.util.List; import cl.lherrera.entidades.FormaDePagoDTO; import cl.lherrera.utils.AccesoBaseDatos; public class FormaDePagoDao { // obtener la conexi\u00f3n. Connection conexion = (AccesoBaseDatos.obtenerInstancia()).obtenerConexion(); public List<FormaDePagoDTO> obtieneFormasDePago() { // lista para retornar List<FormaDePagoDTO> formasDePago = new ArrayList<>(); // construir la consulta String sqlTxt = \"select * from mod4u2.forma_pago\"; try( // preparar consulta PreparedStatement ps = conexion.prepareStatement(sqlTxt); ResultSet formasDePagoSets = ps.executeQuery(); ){ while(formasDePagoSets.next()) { FormaDePagoDTO formaPago = new FormaDePagoDTO(); formaPago.setIdFormaDePago(formasDePagoSets.getInt(\"id_forma_pago\")); formaPago.setDescripcion(formasDePagoSets.getString(\"descripcion\")); formaPago.setRecargo(formasDePagoSets.getDouble(\"recarga\")); formasDePago.add(formaPago); } }catch(SQLException e) { e.printStackTrace(); } return formasDePago; } } /pruebaMvc/src/cl/lherrera/daos/InscripcionDAO.java package cl.lherrera.daos; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import cl.lherrera.entidades.InscripcionDTO; import cl.lherrera.utils.AccesoBaseDatos; public class InscripcionDAO { // obtener la conexi\u00f3n. Connection conexion = (AccesoBaseDatos.obtenerInstancia()).obtenerConexion(); public int insertarInscripcion(InscripcionDTO dto) { int max = getMaxId(); String sqlTxt = \"insert into mod4u2.inscripcion values(?, ?, ?, ?, ?)\"; try( // preparar consulta PreparedStatement ps = conexion.prepareStatement(sqlTxt); ){ ps.setInt(1, max); ps.setString(2, dto.getNombre()); ps.setString(3, dto.getCelular()); ps.setInt(4, dto.getIdCurso()); ps.setInt(5, dto.getIdFormaDePago()); if(ps.executeUpdate() != 1) { System.out.println(\"Error al insertar\"); } } catch (SQLException e) { e.printStackTrace(); } return max; } private int getMaxId() { int maxId = 0; String sqlTxt = \"select max(id_inscripcion) + 1 maxId from mod4u2.inscripcion\"; try ( // preparar consulta PreparedStatement ps = conexion.prepareStatement(sqlTxt); ResultSet filas = ps.executeQuery(); ) { if(filas.next()) maxId = filas.getInt(\"maxId\"); } catch (SQLException e) { e.printStackTrace(); } return maxId; } } /pruebaMvc/src/cl/lherrera/facades/Facade.java package cl.lherrera.facades; import java.util.List; import cl.lherrera.daos.CursoDao; import cl.lherrera.daos.FormaDePagoDao; import cl.lherrera.daos.InscripcionDAO; import cl.lherrera.entidades.CursoDTO; import cl.lherrera.entidades.FormaDePagoDTO; import cl.lherrera.entidades.InscripcionDTO; public class Facade { public int registrarInscripcion(InscripcionDTO dto) { InscripcionDAO dao = new InscripcionDAO(); return dao.insertarInscripcion(dto); } public List<CursoDTO> obtenerCursos(){ CursoDao dao = new CursoDao(); return dao.obtenerCursos(); } public List<FormaDePagoDTO> obtenerFormasDePago(){ FormaDePagoDao dao = new FormaDePagoDao(); return dao.obtieneFormasDePago(); } } Servlets /pruebaMvc/src/cl/lherrera/servlets/PosInscripcion.java package cl.lherrera.servlets; import java.io.IOException; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import cl.lherrera.entidades.InscripcionDTO; import cl.lherrera.facades.Facade; @WebServlet(\"/postInscripcion\") public class PosInscripcion extends HttpServlet{ private static final long serialVersionUID = -2533943119391365490L; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { // inicializar facade Facade facade = new Facade(); // obtener los valores del formulario String nombre = req.getParameter(\"nombre\"); String celular = req.getParameter(\"celular\"); int idCurso = Integer.parseInt(req.getParameter(\"idCurso\")); int idFormaDePago = Integer.parseInt(req.getParameter(\"idFormaDePago\")); // llenado del DTO InscripcionDTO inscripcionDto = new InscripcionDTO(); inscripcionDto.setNombre(nombre); inscripcionDto.setCelular(celular); inscripcionDto.setIdCurso(idCurso); inscripcionDto.setIdFormaDePago(idFormaDePago); // id insertado int idInsc = facade.registrarInscripcion(inscripcionDto); // agregamos el id de la respuesta al request. req.setAttribute(\"idInsc\", idInsc); // redireccionamos los objetos de comunicaci\u00f3n cargados con datos, hacia otro servlet. try { req.getRequestDispatcher(\"/preConfirmacion\").forward(req, resp); } catch (ServletException | IOException e) { e.printStackTrace(); } } } /pruebaMvc/src/cl/lherrera/servlets/PreConfirmacion.java package cl.lherrera.servlets; import java.io.IOException; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; @WebServlet(\"/preConfirmacion\") public class PreConfirmacion extends HttpServlet{ private static final long serialVersionUID = 6848290957695901051L; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { try { req.getRequestDispatcher(\"confirmacion.jsp\").forward(req, resp); } catch (ServletException | IOException e) { e.printStackTrace(); } } } /pruebaMvc/src/cl/lherrera/servlets/PreInscripcion.java package cl.lherrera.servlets; import java.io.IOException; import java.util.List; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import cl.lherrera.entidades.CursoDTO; import cl.lherrera.entidades.FormaDePagoDTO; import cl.lherrera.facades.Facade; @WebServlet(\"/preInscripcion\") public class PreInscripcion extends HttpServlet{ private static final long serialVersionUID = -707784703567339582L; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { Facade fachada = new Facade(); List<CursoDTO> cursos = fachada.obtenerCursos(); List<FormaDePagoDTO> formasDePago = fachada.obtenerFormasDePago(); req.setAttribute(\"cursos\", cursos); req.setAttribute(\"formasDePago\", formasDePago); try { req.getRequestDispatcher(\"inscripcion.jsp\").forward(req, resp); } catch (ServletException | IOException e) { e.printStackTrace(); } } } Peque\u00f1o main para realizar pruebas /pruebaMvc/src/cl/lherrera/main/Principal.java package cl.lherrera.main; import java.util.List; import cl.lherrera.daos.CursoDao; import cl.lherrera.daos.FormaDePagoDao; import cl.lherrera.entidades.CursoDTO; import cl.lherrera.entidades.FormaDePagoDTO; import cl.lherrera.entidades.InscripcionDTO; import cl.lherrera.facades.Facade; import cl.lherrera.daos.InscripcionDAO; public class Principal { public static void main(String[] args) { probarFacade(); System.out.println(\"tareas finalizadas\"); } public static void probarFacade() { Facade facade = new Facade(); List <CursoDTO> listaDeCursos = facade.obtenerCursos(); listaDeCursos.forEach(curso -> System.out.println(curso.getDescripcion())); } public static void probarInsertarInscripci\u00f3n() { InscripcionDAO inscripcionDao = new InscripcionDAO(); InscripcionDTO dto = new InscripcionDTO(); dto.setNombre(\"Hugo\"); dto.setCelular(\"554556398\"); dto.setIdCurso(1); dto.setIdFormaDePago(1); int resultado = inscripcionDao.insertarInscripcion(dto); System.out.println(\"acci\u00f3n terminada\"); System.out.println(\"resultado: \" + resultado); } public static void probarFormaPago() { FormaDePagoDao formaPagoDao = new FormaDePagoDao(); List <FormaDePagoDTO> listaDeFormaPago = formaPagoDao.obtieneFormasDePago(); listaDeFormaPago.forEach(formaPago -> System.out.println(formaPago.getDescripcion())); System.out.println(\"Acci\u00f3n terminada\"); } public static void probarCursoDao() { CursoDao cursoDao = new CursoDao(); List <CursoDTO> listaDeCursos = cursoDao.obtenerCursos(); listaDeCursos.stream() .forEach(curso -> System.out.println(curso.getDescripcion())); } } JSPs /pruebaMvc/WebContent/inscripcion.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@ page import=\"cl.lherrera.entidades.CursoDTO\"%> <%@ page import=\"cl.lherrera.entidades.FormaDePagoDTO\"%> <%@ page import=\"java.util.*\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Formulario de inscripci\u00f3n</title> </head> <body> <% List<CursoDTO> cursos = (List<CursoDTO>) request.getAttribute(\"cursos\"); List<FormaDePagoDTO> formasDePago = (List<FormaDePagoDTO>) request.getAttribute(\"formasDePago\"); %> <form action=\"postInscripcion\"> Nombre: <input type=\"text\" name=\"nombre\"> <br /> Celular: <input type=\"text\" name=\"celular\"> <br /> Cursos: <select name=\"idCurso\"> <% for(CursoDTO dto: cursos) { %> <option value=\"<%=dto.getIdCurso()%>\"> <%=dto.getDescripcion()%> </option> <% } %> </select><br /> Formas de pago: <select name=\"idFormaDePago\"> <% for(FormaDePagoDTO dto: formasDePago) { %> <option value=\"<%=dto.getIdFormaDePago()%>\"> <%=dto.getDescripcion()%> </option> <% } %> </select><br /> <input type=\"submit\" value=\"Enviar\" /> </form> </body> </html> /pruebaMvc/WebContent/confirmacion.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Confirmacion</title> </head> <body> <% int idInsc = (Integer) request.getAttribute(\"idInsc\"); %> <h1>Solicitud generada correctamente</h1> Su c\u00f3digo de inscripci\u00f3n es: <%=idInsc%> </body> </html> SQLs - DDL Tabla: Curso -------------------------------------------------------- -- Archivo creado - lunes-marzo-16-2020 -------------------------------------------------------- -------------------------------------------------------- -- DDL for Table CURSO -------------------------------------------------------- CREATE TABLE \"MOD4U2\".\"CURSO\" ( \"ID_CURSO\" NUMBER(*,0), \"DESCRIPCION\" VARCHAR2(20 BYTE), \"PRECIO\" NUMBER ) SEGMENT CREATION IMMEDIATE PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645 PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT) TABLESPACE \"SYSTEM\" ; REM INSERTING into MOD4U2.CURSO SET DEFINE OFF; Insert into MOD4U2.CURSO (ID_CURSO,DESCRIPCION,PRECIO) values ('1','Java','1000000'); Insert into MOD4U2.CURSO (ID_CURSO,DESCRIPCION,PRECIO) values ('2','HTML5-CSS3','500000'); Insert into MOD4U2.CURSO (ID_CURSO,DESCRIPCION,PRECIO) values ('3','Javascript','900000'); -------------------------------------------------------- -- DDL for Index CURSO_PK -------------------------------------------------------- CREATE UNIQUE INDEX \"MOD4U2\".\"CURSO_PK\" ON \"MOD4U2\".\"CURSO\" (\"ID_CURSO\") PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645 PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT) TABLESPACE \"SYSTEM\" ; -------------------------------------------------------- -- Constraints for Table CURSO -------------------------------------------------------- ALTER TABLE \"MOD4U2\".\"CURSO\" ADD CONSTRAINT \"CURSO_PK\" PRIMARY KEY (\"ID_CURSO\") USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645 PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT) TABLESPACE \"SYSTEM\" ENABLE; ALTER TABLE \"MOD4U2\".\"CURSO\" MODIFY (\"ID_CURSO\" NOT NULL ENABLE); Tabla: FORMA_PAGO \u001d -------------------------------------------------------- -- Archivo creado - lunes-marzo-16-2020 -------------------------------------------------------- -------------------------------------------------------- -- DDL for Table FORMA_PAGO -------------------------------------------------------- CREATE TABLE \"MOD4U2\".\"FORMA_PAGO\" ( \"ID_FORMA_PAGO\" NUMBER(*,0), \"DESCRIPCION\" VARCHAR2(200 BYTE), \"RECARGA\" NUMBER ) SEGMENT CREATION IMMEDIATE PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645 PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT) TABLESPACE \"SYSTEM\" ; REM INSERTING into MOD4U2.FORMA_PAGO SET DEFINE OFF; Insert into MOD4U2.FORMA_PAGO (ID_FORMA_PAGO,DESCRIPCION,RECARGA) values ('1','tarjeta cr\u00e9dito','200,5'); Insert into MOD4U2.FORMA_PAGO (ID_FORMA_PAGO,DESCRIPCION,RECARGA) values ('2','tarjeta d\u00e9bito','5000000'); -------------------------------------------------------- -- DDL for Index FORMA_PAGO_PK -------------------------------------------------------- CREATE UNIQUE INDEX \"MOD4U2\".\"FORMA_PAGO_PK\" ON \"MOD4U2\".\"FORMA_PAGO\" (\"ID_FORMA_PAGO\") PCTFREE 10 INITRANS 2 MAXTRANS 255 STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645 PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT) TABLESPACE \"SYSTEM\" ; -------------------------------------------------------- -- Constraints for Table FORMA_PAGO -------------------------------------------------------- ALTER TABLE \"MOD4U2\".\"FORMA_PAGO\" ADD CONSTRAINT \"FORMA_PAGO_PK\" PRIMARY KEY (\"ID_FORMA_PAGO\") USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645 PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT) TABLESPACE \"SYSTEM\" ENABLE; ALTER TABLE \"MOD4U2\".\"FORMA_PAGO\" MODIFY (\"ID_FORMA_PAGO\" NOT NULL ENABLE); Tabla: INSCRIPCION -------------------------------------------------------- -- Archivo creado - lunes-marzo-16-2020 -------------------------------------------------------- -------------------------------------------------------- -- DDL for Table INSCRIPCION -------------------------------------------------------- CREATE TABLE \"MOD4U2\".\"INSCRIPCION\" ( \"ID_INSCRIPCION\" NUMBER(*,0), \"NOMBRE\" VARCHAR2(200 BYTE), \"CELULAR\" VARCHAR2(20 BYTE), \"ID_CURSO\" NUMBER(*,0), \"ID_FORMA_PAGO\" NUMBER(*,0) ) SEGMENT CREATION IMMEDIATE PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645 PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT) TABLESPACE \"SYSTEM\" ; REM INSERTING into MOD4U2.INSCRIPCION SET DEFINE OFF; -------------------------------------------------------- -- DDL for Index INSCRIPCION_PK -------------------------------------------------------- CREATE UNIQUE INDEX \"MOD4U2\".\"INSCRIPCION_PK\" ON \"MOD4U2\".\"INSCRIPCION\" (\"ID_INSCRIPCION\") PCTFREE 10 INITRANS 2 MAXTRANS 255 STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645 PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT) TABLESPACE \"SYSTEM\" ; -------------------------------------------------------- -- Constraints for Table INSCRIPCION -------------------------------------------------------- ALTER TABLE \"MOD4U2\".\"INSCRIPCION\" ADD CONSTRAINT \"INSCRIPCION_PK\" PRIMARY KEY (\"ID_INSCRIPCION\") USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645 PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT) TABLESPACE \"SYSTEM\" ENABLE; ALTER TABLE \"MOD4U2\".\"INSCRIPCION\" MODIFY (\"ID_INSCRIPCION\" NOT NULL ENABLE);","title":"Mod4 uni002l3"},{"location":"modulos/mod_4/uni002/mod4_uni002l3/#proyecto-4-mvc","text":"","title":"Proyecto 4: MVC"},{"location":"modulos/mod_4/uni002/mod4_uni002l3/#requerimientos","text":"Se necesita un sistema que sea capaz de registrar la inscripci\u00f3n de un usuario a un curso. Para esto necesitamos una ventana de inscripci\u00f3n y otra que muestre los resultados de la inscripci\u00f3n. Por ahora, solamente ser\u00e1 posible revisar si la informaci\u00f3n ha sido correctamente ingresada, mediante la consulta en la base de datos.","title":"Requerimientos:"},{"location":"modulos/mod_4/uni002/mod4_uni002l3/#diagramas-a-implementar","text":"Lo primero es reconocer las entidades. Las que ser\u00e1n las siguientes: Daos que realizar\u00e1n la comunicaci\u00f3n. Fachada de comunicaci\u00f3n: Servlets Finalmente, debemos implementar dos vistas: inscripcion.jsp : Contendr\u00e1 el formulario de inscripci\u00f3n. inscripcion.jsp : Confirmar\u00e1 al usuario que la inscripci\u00f3n se ha realizado.","title":"Diagramas a implementar:"},{"location":"modulos/mod_4/uni002/mod4_uni002l3/#antes-de-continuar","text":"Debemos tener un contenedor de servlets. Se encuentra disponible en el siguiente enlace Debemos incluir el driver para conectar la base de datos con Java. (Oracle 11g). Se encuentra disponible en el siguiente enlace","title":"Antes de continuar.\ud83d\udc40"},{"location":"modulos/mod_4/uni002/mod4_uni002l3/#implementacion","text":"Comenzamos entonces con la implementaci\u00f3n de la soluci\u00f3n.","title":"Implementaci\u00f3n.\ud83e\udd4b"},{"location":"modulos/mod_4/uni002/mod4_uni002l3/#estructura","text":"\u251c\u2500\u2500 WebContent \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u2514\u2500\u2500 MANIFEST.MF \u2502 \u251c\u2500\u2500 WEB-INF \u2502 \u2502 \u2514\u2500\u2500 lib \u2502 \u251c\u2500\u2500 confirmacion.jsp \u2502 \u2514\u2500\u2500 inscripcion.jsp \u2514\u2500\u2500 src \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u251c\u2500\u2500 daos \u2502 \u251c\u2500\u2500 CursoDao.java \u2502 \u251c\u2500\u2500 FormaDePagoDao.java \u2502 \u2514\u2500\u2500 InscripcionDAO.java \u251c\u2500\u2500 entidades \u2502 \u251c\u2500\u2500 CursoDTO.java \u2502 \u251c\u2500\u2500 FormaDePagoDTO.java \u2502 \u2514\u2500\u2500 InscripcionDTO.java \u251c\u2500\u2500 facades \u2502 \u2514\u2500\u2500 Facade.java \u251c\u2500\u2500 main \u2502 \u2514\u2500\u2500 Principal.java \u251c\u2500\u2500 servlets \u2502 \u251c\u2500\u2500 PosInscripcion.java \u2502 \u251c\u2500\u2500 PreConfirmacion.java \u2502 \u2514\u2500\u2500 PreInscripcion.java \u2514\u2500\u2500 utils \u2514\u2500\u2500 AccesoBaseDatos.java","title":"Estructura"},{"location":"modulos/mod_4/uni002/mod4_uni002l3/#entidades","text":"/src/cl/lherrera/entidades/CursoDTO.java package cl.lherrera.entidades; public class CursoDTO { private int idCurso; private String descripcion; private double precio; public int getIdCurso() { return idCurso; } public void setIdCurso(int idCurso) { this.idCurso = idCurso; } public String getDescripcion() { return descripcion; } public void setDescripcion(String descripcion) { this.descripcion = descripcion; } public double getPrecio() { return precio; } public void setPrecio(double precio) { this.precio = precio; } } /src/cl/lherrera/entidades/FormaDePagoDTO.java package cl.lherrera.entidades; public class FormaDePagoDTO { private int idFormaDePago; private String descripcion; private double recargo; public int getIdFormaDePago() { return idFormaDePago; } public void setIdFormaDePago(int idFormaDePago) { this.idFormaDePago = idFormaDePago; } public String getDescripcion() { return descripcion; } public void setDescripcion(String descripcion) { this.descripcion = descripcion; } public double getRecargo() { return recargo; } public void setRecargo(double recargo) { this.recargo = recargo; } } /pruebaMvc/src/cl/lherrera/entidades/InscripcionDTO.java package cl.lherrera.entidades; public class InscripcionDTO { private int idInsc; private String nombre; private String celular; private int idCurso; private int idFormaDePago; public int getIdInsc() { return idInsc; } public void setIdInsc(int idInsc) { this.idInsc = idInsc; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } public String getCelular() { return celular; } public void setCelular(String celular) { this.celular = celular; } public int getIdCurso() { return idCurso; } public void setIdCurso(int idCurso) { this.idCurso = idCurso; } public int getIdFormaDePago() { return idFormaDePago; } public void setIdFormaDePago(int idFormaDePago) { this.idFormaDePago = idFormaDePago; } }","title":"Entidades"},{"location":"modulos/mod_4/uni002/mod4_uni002l3/#conexion-oracle-11g-driver-patron-singleton","text":"/pruebaMvc/src/cl/lherrera/utils/AccesoBaseDatos.java package cl.lherrera.utils; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; import oracle.jdbc.driver.OracleDriver; public class AccesoBaseDatos { private static final String DB_HOST = \"jdbc:oracle:thin:@localhost:1521:XE\"; private static final String DB_USER_NAME = \"mod4u2\"; private static final String DB_USER_PASS = \"1234\"; // variable est\u00e1tica. \u00danica instancia permitida. private static AccesoBaseDatos acceso; // variables de instancia private Connection conexion; // constructor privado para evitar instancias desde fuera. private AccesoBaseDatos() {} // \u00fanica forma de obtener una instancia desde fuera. public static AccesoBaseDatos obtenerInstancia() { if(acceso == null) { acceso = new AccesoBaseDatos(); } return acceso; } /** * Obtiene una conexi\u00f3n a la base de datos. La cu\u00e1l es \u00fanica para la * instancia de la aplicaci\u00f3n. * @return */ public Connection obtenerConexion() { try { // registramos el driver: uso en lugar de Class.forname. DriverManager.registerDriver(new OracleDriver()); conexion = DriverManager.getConnection(DB_HOST, DB_USER_NAME, DB_USER_PASS); }catch(SQLException e) { e.printStackTrace(); } return conexion; } }","title":"Conexi\u00f3n (Oracle 11g Driver) - Patr\u00f3n Singleton"},{"location":"modulos/mod_4/uni002/mod4_uni002l3/#daos","text":"/pruebaMvc/src/cl/lherrera/daos/CursoDao.java package cl.lherrera.daos; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.util.ArrayList; import java.util.List; import cl.lherrera.entidades.CursoDTO; import cl.lherrera.utils.AccesoBaseDatos; public class CursoDao { AccesoBaseDatos acceso = AccesoBaseDatos.obtenerInstancia(); Connection conexion = acceso.obtenerConexion(); public List<CursoDTO> obtenerCursos() { List<CursoDTO> listaDeCursos = new ArrayList<>(); String sqlTxt = (\"select id_curso, descripcion, precio from mod4u2.curso\"); try( PreparedStatement sentencia = conexion.prepareStatement(sqlTxt); ResultSet cursos = sentencia.executeQuery(); ){ while (cursos.next()) { CursoDTO nuevoCurso = new CursoDTO(); nuevoCurso.setIdCurso(cursos.getInt(\"id_curso\")); nuevoCurso.setDescripcion(cursos.getString(\"descripcion\")); nuevoCurso.setPrecio(cursos.getDouble(\"precio\")); listaDeCursos.add(nuevoCurso); } } catch (SQLException e) { e.getStackTrace(); } return listaDeCursos; } } /pruebaMvc/src/cl/lherrera/daos/FormaDePagoDao.java package cl.lherrera.daos; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.util.ArrayList; import java.util.List; import cl.lherrera.entidades.FormaDePagoDTO; import cl.lherrera.utils.AccesoBaseDatos; public class FormaDePagoDao { // obtener la conexi\u00f3n. Connection conexion = (AccesoBaseDatos.obtenerInstancia()).obtenerConexion(); public List<FormaDePagoDTO> obtieneFormasDePago() { // lista para retornar List<FormaDePagoDTO> formasDePago = new ArrayList<>(); // construir la consulta String sqlTxt = \"select * from mod4u2.forma_pago\"; try( // preparar consulta PreparedStatement ps = conexion.prepareStatement(sqlTxt); ResultSet formasDePagoSets = ps.executeQuery(); ){ while(formasDePagoSets.next()) { FormaDePagoDTO formaPago = new FormaDePagoDTO(); formaPago.setIdFormaDePago(formasDePagoSets.getInt(\"id_forma_pago\")); formaPago.setDescripcion(formasDePagoSets.getString(\"descripcion\")); formaPago.setRecargo(formasDePagoSets.getDouble(\"recarga\")); formasDePago.add(formaPago); } }catch(SQLException e) { e.printStackTrace(); } return formasDePago; } } /pruebaMvc/src/cl/lherrera/daos/InscripcionDAO.java package cl.lherrera.daos; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import cl.lherrera.entidades.InscripcionDTO; import cl.lherrera.utils.AccesoBaseDatos; public class InscripcionDAO { // obtener la conexi\u00f3n. Connection conexion = (AccesoBaseDatos.obtenerInstancia()).obtenerConexion(); public int insertarInscripcion(InscripcionDTO dto) { int max = getMaxId(); String sqlTxt = \"insert into mod4u2.inscripcion values(?, ?, ?, ?, ?)\"; try( // preparar consulta PreparedStatement ps = conexion.prepareStatement(sqlTxt); ){ ps.setInt(1, max); ps.setString(2, dto.getNombre()); ps.setString(3, dto.getCelular()); ps.setInt(4, dto.getIdCurso()); ps.setInt(5, dto.getIdFormaDePago()); if(ps.executeUpdate() != 1) { System.out.println(\"Error al insertar\"); } } catch (SQLException e) { e.printStackTrace(); } return max; } private int getMaxId() { int maxId = 0; String sqlTxt = \"select max(id_inscripcion) + 1 maxId from mod4u2.inscripcion\"; try ( // preparar consulta PreparedStatement ps = conexion.prepareStatement(sqlTxt); ResultSet filas = ps.executeQuery(); ) { if(filas.next()) maxId = filas.getInt(\"maxId\"); } catch (SQLException e) { e.printStackTrace(); } return maxId; } } /pruebaMvc/src/cl/lherrera/facades/Facade.java package cl.lherrera.facades; import java.util.List; import cl.lherrera.daos.CursoDao; import cl.lherrera.daos.FormaDePagoDao; import cl.lherrera.daos.InscripcionDAO; import cl.lherrera.entidades.CursoDTO; import cl.lherrera.entidades.FormaDePagoDTO; import cl.lherrera.entidades.InscripcionDTO; public class Facade { public int registrarInscripcion(InscripcionDTO dto) { InscripcionDAO dao = new InscripcionDAO(); return dao.insertarInscripcion(dto); } public List<CursoDTO> obtenerCursos(){ CursoDao dao = new CursoDao(); return dao.obtenerCursos(); } public List<FormaDePagoDTO> obtenerFormasDePago(){ FormaDePagoDao dao = new FormaDePagoDao(); return dao.obtieneFormasDePago(); } }","title":"DAOS"},{"location":"modulos/mod_4/uni002/mod4_uni002l3/#servlets","text":"/pruebaMvc/src/cl/lherrera/servlets/PosInscripcion.java package cl.lherrera.servlets; import java.io.IOException; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import cl.lherrera.entidades.InscripcionDTO; import cl.lherrera.facades.Facade; @WebServlet(\"/postInscripcion\") public class PosInscripcion extends HttpServlet{ private static final long serialVersionUID = -2533943119391365490L; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { // inicializar facade Facade facade = new Facade(); // obtener los valores del formulario String nombre = req.getParameter(\"nombre\"); String celular = req.getParameter(\"celular\"); int idCurso = Integer.parseInt(req.getParameter(\"idCurso\")); int idFormaDePago = Integer.parseInt(req.getParameter(\"idFormaDePago\")); // llenado del DTO InscripcionDTO inscripcionDto = new InscripcionDTO(); inscripcionDto.setNombre(nombre); inscripcionDto.setCelular(celular); inscripcionDto.setIdCurso(idCurso); inscripcionDto.setIdFormaDePago(idFormaDePago); // id insertado int idInsc = facade.registrarInscripcion(inscripcionDto); // agregamos el id de la respuesta al request. req.setAttribute(\"idInsc\", idInsc); // redireccionamos los objetos de comunicaci\u00f3n cargados con datos, hacia otro servlet. try { req.getRequestDispatcher(\"/preConfirmacion\").forward(req, resp); } catch (ServletException | IOException e) { e.printStackTrace(); } } } /pruebaMvc/src/cl/lherrera/servlets/PreConfirmacion.java package cl.lherrera.servlets; import java.io.IOException; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; @WebServlet(\"/preConfirmacion\") public class PreConfirmacion extends HttpServlet{ private static final long serialVersionUID = 6848290957695901051L; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { try { req.getRequestDispatcher(\"confirmacion.jsp\").forward(req, resp); } catch (ServletException | IOException e) { e.printStackTrace(); } } } /pruebaMvc/src/cl/lherrera/servlets/PreInscripcion.java package cl.lherrera.servlets; import java.io.IOException; import java.util.List; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import cl.lherrera.entidades.CursoDTO; import cl.lherrera.entidades.FormaDePagoDTO; import cl.lherrera.facades.Facade; @WebServlet(\"/preInscripcion\") public class PreInscripcion extends HttpServlet{ private static final long serialVersionUID = -707784703567339582L; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) { Facade fachada = new Facade(); List<CursoDTO> cursos = fachada.obtenerCursos(); List<FormaDePagoDTO> formasDePago = fachada.obtenerFormasDePago(); req.setAttribute(\"cursos\", cursos); req.setAttribute(\"formasDePago\", formasDePago); try { req.getRequestDispatcher(\"inscripcion.jsp\").forward(req, resp); } catch (ServletException | IOException e) { e.printStackTrace(); } } }","title":"Servlets"},{"location":"modulos/mod_4/uni002/mod4_uni002l3/#pequeno-main-para-realizar-pruebas","text":"/pruebaMvc/src/cl/lherrera/main/Principal.java package cl.lherrera.main; import java.util.List; import cl.lherrera.daos.CursoDao; import cl.lherrera.daos.FormaDePagoDao; import cl.lherrera.entidades.CursoDTO; import cl.lherrera.entidades.FormaDePagoDTO; import cl.lherrera.entidades.InscripcionDTO; import cl.lherrera.facades.Facade; import cl.lherrera.daos.InscripcionDAO; public class Principal { public static void main(String[] args) { probarFacade(); System.out.println(\"tareas finalizadas\"); } public static void probarFacade() { Facade facade = new Facade(); List <CursoDTO> listaDeCursos = facade.obtenerCursos(); listaDeCursos.forEach(curso -> System.out.println(curso.getDescripcion())); } public static void probarInsertarInscripci\u00f3n() { InscripcionDAO inscripcionDao = new InscripcionDAO(); InscripcionDTO dto = new InscripcionDTO(); dto.setNombre(\"Hugo\"); dto.setCelular(\"554556398\"); dto.setIdCurso(1); dto.setIdFormaDePago(1); int resultado = inscripcionDao.insertarInscripcion(dto); System.out.println(\"acci\u00f3n terminada\"); System.out.println(\"resultado: \" + resultado); } public static void probarFormaPago() { FormaDePagoDao formaPagoDao = new FormaDePagoDao(); List <FormaDePagoDTO> listaDeFormaPago = formaPagoDao.obtieneFormasDePago(); listaDeFormaPago.forEach(formaPago -> System.out.println(formaPago.getDescripcion())); System.out.println(\"Acci\u00f3n terminada\"); } public static void probarCursoDao() { CursoDao cursoDao = new CursoDao(); List <CursoDTO> listaDeCursos = cursoDao.obtenerCursos(); listaDeCursos.stream() .forEach(curso -> System.out.println(curso.getDescripcion())); } }","title":"Peque\u00f1o main para realizar pruebas"},{"location":"modulos/mod_4/uni002/mod4_uni002l3/#jsps","text":"/pruebaMvc/WebContent/inscripcion.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@ page import=\"cl.lherrera.entidades.CursoDTO\"%> <%@ page import=\"cl.lherrera.entidades.FormaDePagoDTO\"%> <%@ page import=\"java.util.*\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Formulario de inscripci\u00f3n</title> </head> <body> <% List<CursoDTO> cursos = (List<CursoDTO>) request.getAttribute(\"cursos\"); List<FormaDePagoDTO> formasDePago = (List<FormaDePagoDTO>) request.getAttribute(\"formasDePago\"); %> <form action=\"postInscripcion\"> Nombre: <input type=\"text\" name=\"nombre\"> <br /> Celular: <input type=\"text\" name=\"celular\"> <br /> Cursos: <select name=\"idCurso\"> <% for(CursoDTO dto: cursos) { %> <option value=\"<%=dto.getIdCurso()%>\"> <%=dto.getDescripcion()%> </option> <% } %> </select><br /> Formas de pago: <select name=\"idFormaDePago\"> <% for(FormaDePagoDTO dto: formasDePago) { %> <option value=\"<%=dto.getIdFormaDePago()%>\"> <%=dto.getDescripcion()%> </option> <% } %> </select><br /> <input type=\"submit\" value=\"Enviar\" /> </form> </body> </html> /pruebaMvc/WebContent/confirmacion.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Confirmacion</title> </head> <body> <% int idInsc = (Integer) request.getAttribute(\"idInsc\"); %> <h1>Solicitud generada correctamente</h1> Su c\u00f3digo de inscripci\u00f3n es: <%=idInsc%> </body> </html>","title":"JSPs"},{"location":"modulos/mod_4/uni002/mod4_uni002l3/#sqls-ddl","text":"Tabla: Curso -------------------------------------------------------- -- Archivo creado - lunes-marzo-16-2020 -------------------------------------------------------- -------------------------------------------------------- -- DDL for Table CURSO -------------------------------------------------------- CREATE TABLE \"MOD4U2\".\"CURSO\" ( \"ID_CURSO\" NUMBER(*,0), \"DESCRIPCION\" VARCHAR2(20 BYTE), \"PRECIO\" NUMBER ) SEGMENT CREATION IMMEDIATE PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645 PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT) TABLESPACE \"SYSTEM\" ; REM INSERTING into MOD4U2.CURSO SET DEFINE OFF; Insert into MOD4U2.CURSO (ID_CURSO,DESCRIPCION,PRECIO) values ('1','Java','1000000'); Insert into MOD4U2.CURSO (ID_CURSO,DESCRIPCION,PRECIO) values ('2','HTML5-CSS3','500000'); Insert into MOD4U2.CURSO (ID_CURSO,DESCRIPCION,PRECIO) values ('3','Javascript','900000'); -------------------------------------------------------- -- DDL for Index CURSO_PK -------------------------------------------------------- CREATE UNIQUE INDEX \"MOD4U2\".\"CURSO_PK\" ON \"MOD4U2\".\"CURSO\" (\"ID_CURSO\") PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645 PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT) TABLESPACE \"SYSTEM\" ; -------------------------------------------------------- -- Constraints for Table CURSO -------------------------------------------------------- ALTER TABLE \"MOD4U2\".\"CURSO\" ADD CONSTRAINT \"CURSO_PK\" PRIMARY KEY (\"ID_CURSO\") USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645 PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT) TABLESPACE \"SYSTEM\" ENABLE; ALTER TABLE \"MOD4U2\".\"CURSO\" MODIFY (\"ID_CURSO\" NOT NULL ENABLE); Tabla: FORMA_PAGO \u001d -------------------------------------------------------- -- Archivo creado - lunes-marzo-16-2020 -------------------------------------------------------- -------------------------------------------------------- -- DDL for Table FORMA_PAGO -------------------------------------------------------- CREATE TABLE \"MOD4U2\".\"FORMA_PAGO\" ( \"ID_FORMA_PAGO\" NUMBER(*,0), \"DESCRIPCION\" VARCHAR2(200 BYTE), \"RECARGA\" NUMBER ) SEGMENT CREATION IMMEDIATE PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645 PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT) TABLESPACE \"SYSTEM\" ; REM INSERTING into MOD4U2.FORMA_PAGO SET DEFINE OFF; Insert into MOD4U2.FORMA_PAGO (ID_FORMA_PAGO,DESCRIPCION,RECARGA) values ('1','tarjeta cr\u00e9dito','200,5'); Insert into MOD4U2.FORMA_PAGO (ID_FORMA_PAGO,DESCRIPCION,RECARGA) values ('2','tarjeta d\u00e9bito','5000000'); -------------------------------------------------------- -- DDL for Index FORMA_PAGO_PK -------------------------------------------------------- CREATE UNIQUE INDEX \"MOD4U2\".\"FORMA_PAGO_PK\" ON \"MOD4U2\".\"FORMA_PAGO\" (\"ID_FORMA_PAGO\") PCTFREE 10 INITRANS 2 MAXTRANS 255 STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645 PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT) TABLESPACE \"SYSTEM\" ; -------------------------------------------------------- -- Constraints for Table FORMA_PAGO -------------------------------------------------------- ALTER TABLE \"MOD4U2\".\"FORMA_PAGO\" ADD CONSTRAINT \"FORMA_PAGO_PK\" PRIMARY KEY (\"ID_FORMA_PAGO\") USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645 PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT) TABLESPACE \"SYSTEM\" ENABLE; ALTER TABLE \"MOD4U2\".\"FORMA_PAGO\" MODIFY (\"ID_FORMA_PAGO\" NOT NULL ENABLE); Tabla: INSCRIPCION -------------------------------------------------------- -- Archivo creado - lunes-marzo-16-2020 -------------------------------------------------------- -------------------------------------------------------- -- DDL for Table INSCRIPCION -------------------------------------------------------- CREATE TABLE \"MOD4U2\".\"INSCRIPCION\" ( \"ID_INSCRIPCION\" NUMBER(*,0), \"NOMBRE\" VARCHAR2(200 BYTE), \"CELULAR\" VARCHAR2(20 BYTE), \"ID_CURSO\" NUMBER(*,0), \"ID_FORMA_PAGO\" NUMBER(*,0) ) SEGMENT CREATION IMMEDIATE PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645 PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT) TABLESPACE \"SYSTEM\" ; REM INSERTING into MOD4U2.INSCRIPCION SET DEFINE OFF; -------------------------------------------------------- -- DDL for Index INSCRIPCION_PK -------------------------------------------------------- CREATE UNIQUE INDEX \"MOD4U2\".\"INSCRIPCION_PK\" ON \"MOD4U2\".\"INSCRIPCION\" (\"ID_INSCRIPCION\") PCTFREE 10 INITRANS 2 MAXTRANS 255 STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645 PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT) TABLESPACE \"SYSTEM\" ; -------------------------------------------------------- -- Constraints for Table INSCRIPCION -------------------------------------------------------- ALTER TABLE \"MOD4U2\".\"INSCRIPCION\" ADD CONSTRAINT \"INSCRIPCION_PK\" PRIMARY KEY (\"ID_INSCRIPCION\") USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645 PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT) TABLESPACE \"SYSTEM\" ENABLE; ALTER TABLE \"MOD4U2\".\"INSCRIPCION\" MODIFY (\"ID_INSCRIPCION\" NOT NULL ENABLE);","title":"SQLs - DDL"},{"location":"modulos/mod_4/uni003/mod4_uni003l1/","text":"Glosario - Relaciones DATASOURCE : son el enlace entre los modelos y la fuente de datos que cada modelo representa. En muchos casos, los datos son recuperados de una base de datos relacional, como MySQL, PostgreSQL o MSSQL. JAR : Un archivo de Java Archive tambi\u00e9n se llama un archivo JAR, y estos archivos Java Archive se integran con las especificaciones de compilaci\u00f3n propietarios para Oracle. Estos archivos Java Archive tambi\u00e9n se aplican a las especificaciones de codificaci\u00f3n tambi\u00e9n propietarias de Oracle para el formato JAR. JRE (Java Runtime Environment) utiliza los datos almacenados en estos archivos JAR como datos de referencia o una biblioteca de aplicaciones de un programa desarrollado en Java y destinado para funcionar en plataformas en las que est\u00e1 habilitado el Java Runtime Environment. JDBC : Java Database Connectivity (en espa\u00f1ol: Conectividad a bases de datos de Java), m\u00e1s conocida por sus siglas JDBC,1 2 es una API que permite la ejecuci\u00f3n de operaciones sobre bases de datos desde el lenguaje de programaci\u00f3n Java, independientemente del sistema operativo donde se ejecute o de la base de datos a la cual se accede, utilizando el dialecto SQL del modelo de base de datos que se utilice. DAO : En software de computadores, un objeto de acceso a datos (en ingl\u00e9s, data access object, abreviado DAO) es un componente de software que suministra una interfaz com\u00fan entre la aplicaci\u00f3n y uno o m\u00e1s dispositivos de almacenamiento de datos, tales como una Base de datos o un archivo. DRIVER SQL : Controladores son los componentes que procesan las solicitudes ODBC y devuelvan datos a la aplicaci\u00f3n. Si es necesario, los controladores de modificar la solicitud de la aplicaci\u00f3n en un formato que entienda el origen de datos. Debe usar el programa de instalaci\u00f3n del controlador para agregar o eliminar un controlador desde su equipo. DTO : El patr\u00f3n DTO tiene como finalidad de crear un objeto plano (POJO) con una serie de atributos que puedan ser enviados o recuperados del servidor en una sola invocaci\u00f3n, de tal forma que un DTO puede contener informaci\u00f3n de m\u00faltiples fuentes o tablas y concentrarse en una \u00fanica clase simple. Java empresarial y las bases de datos. Hasta ahora hemos usado SQLDeveloper para conectarnos a la base de datos Oracle 11g. Probaremos otra herramienta: Descarga: https://dbeaver.io/download/ . Esta herramienta no solamente nos permite administrar bases de datos de Oracle, si no que adem\u00e1s podemos realizar conexiones a m\u00e1s motores. Una vez que lo descargamos e instalamos, debemos configurar la conexi\u00f3n: Ingresamos las credenciales (Base XE) Al probar la conexi\u00f3n nos pedir\u00e1 la instalaci\u00f3n de los drivers, hay que solamente ir al enlace y luego de descomprimir el full. A\u00f1adir archivo y agregamos todos los jars . https://www.oracle.com/database/technologies/jdbcdriver-ucp-downloads.html . Finalmente cuando ya finalicemos, podremos acceder a la base de datos y podemos comenzar a administrar nuestra BDD desde un nuevo cliente.","title":"Mod4 uni003l1"},{"location":"modulos/mod_4/uni003/mod4_uni003l1/#glosario-relaciones","text":"DATASOURCE : son el enlace entre los modelos y la fuente de datos que cada modelo representa. En muchos casos, los datos son recuperados de una base de datos relacional, como MySQL, PostgreSQL o MSSQL. JAR : Un archivo de Java Archive tambi\u00e9n se llama un archivo JAR, y estos archivos Java Archive se integran con las especificaciones de compilaci\u00f3n propietarios para Oracle. Estos archivos Java Archive tambi\u00e9n se aplican a las especificaciones de codificaci\u00f3n tambi\u00e9n propietarias de Oracle para el formato JAR. JRE (Java Runtime Environment) utiliza los datos almacenados en estos archivos JAR como datos de referencia o una biblioteca de aplicaciones de un programa desarrollado en Java y destinado para funcionar en plataformas en las que est\u00e1 habilitado el Java Runtime Environment. JDBC : Java Database Connectivity (en espa\u00f1ol: Conectividad a bases de datos de Java), m\u00e1s conocida por sus siglas JDBC,1 2 es una API que permite la ejecuci\u00f3n de operaciones sobre bases de datos desde el lenguaje de programaci\u00f3n Java, independientemente del sistema operativo donde se ejecute o de la base de datos a la cual se accede, utilizando el dialecto SQL del modelo de base de datos que se utilice. DAO : En software de computadores, un objeto de acceso a datos (en ingl\u00e9s, data access object, abreviado DAO) es un componente de software que suministra una interfaz com\u00fan entre la aplicaci\u00f3n y uno o m\u00e1s dispositivos de almacenamiento de datos, tales como una Base de datos o un archivo. DRIVER SQL : Controladores son los componentes que procesan las solicitudes ODBC y devuelvan datos a la aplicaci\u00f3n. Si es necesario, los controladores de modificar la solicitud de la aplicaci\u00f3n en un formato que entienda el origen de datos. Debe usar el programa de instalaci\u00f3n del controlador para agregar o eliminar un controlador desde su equipo. DTO : El patr\u00f3n DTO tiene como finalidad de crear un objeto plano (POJO) con una serie de atributos que puedan ser enviados o recuperados del servidor en una sola invocaci\u00f3n, de tal forma que un DTO puede contener informaci\u00f3n de m\u00faltiples fuentes o tablas y concentrarse en una \u00fanica clase simple.","title":"Glosario - Relaciones"},{"location":"modulos/mod_4/uni003/mod4_uni003l1/#java-empresarial-y-las-bases-de-datos","text":"Hasta ahora hemos usado SQLDeveloper para conectarnos a la base de datos Oracle 11g. Probaremos otra herramienta: Descarga: https://dbeaver.io/download/ . Esta herramienta no solamente nos permite administrar bases de datos de Oracle, si no que adem\u00e1s podemos realizar conexiones a m\u00e1s motores. Una vez que lo descargamos e instalamos, debemos configurar la conexi\u00f3n: Ingresamos las credenciales (Base XE) Al probar la conexi\u00f3n nos pedir\u00e1 la instalaci\u00f3n de los drivers, hay que solamente ir al enlace y luego de descomprimir el full. A\u00f1adir archivo y agregamos todos los jars . https://www.oracle.com/database/technologies/jdbcdriver-ucp-downloads.html . Finalmente cuando ya finalicemos, podremos acceder a la base de datos y podemos comenzar a administrar nuestra BDD desde un nuevo cliente.","title":"Java empresarial y las bases de datos."},{"location":"modulos/mod_5/uni001/lectura001/","text":"Lectura 1: Spring Inyecci\u00f3n de dependencias. Tenemos ejemplos en el sitio. \ud83d\udc40 Ejemplo 001: DI servicio de correo parte 1. Se necesita un programa que registre y env\u00ede un correo. El proceso de registrar ser\u00e1 un mensaje por consola que diga \"Registrar correo\". El proceso de env\u00edo de correo ser\u00e1 un mensaje por consola que diga \"Enviar correo\". Soluci\u00f3n: Estructura: \u2500\u2500 di \u251c\u2500\u2500 App.java \u2514\u2500\u2500 servicios \u2514\u2500\u2500 ServicioCorreo.java Servicio de correo \u2514\u2500\u2500 servicios \u2514\u2500\u2500 ServicioCorreo.java package cl.lherrera.di.servicios; public class ServicioCorreo { public void enviar() { System.out.println(\"Registrar correo\"); System.out.println(\"Enviar correo\"); } } Principal \u2500\u2500 di \u251c\u2500\u2500 App.java package cl.lherrera.di; import cl.lherrera.di.servicios.ServicioCorreo; public class App { public static void main( String[] args ) { ServicioCorreo servicio= new ServicioCorreo(); servicio.enviar(); } } Ejemplo 001: DI servicio de correo parte 2. Ahora el servicio se divide en tres servicios, en el que el ServicioCorreo se compone de los otros servicios, los que pasan su ciclo de vida dentro de esta clase. \u2500\u2500 di \u251c\u2500\u2500 App.java \u2514\u2500\u2500 servicios \u251c\u2500\u2500 ServicioCorreo.java \u251c\u2500\u2500 ServicioEnvioCorreo.java \u2514\u2500\u2500 ServicioRegistroCorreo.java \u2500\u2500 ServicioRegistroCorreo.java package cl.lherrera.di.servicios; public class ServicioRegistroCorreo { public void registrarCorreo() { System.out.println(\"Registrar correo\"); } } \u2500\u2500 ServicioEnvioCorreo.java package cl.lherrera.di.servicios; public class ServicioEnvioCorreo { public void enviarCorreo() { System.out.println(\"Enviar Correo\"); } } \u2500\u2500 ServicioCorreo.java package cl.lherrera.di; import cl.lherrera.di.servicios.ServicioCorreo; public class App { public static void main( String[] args ) { ServicioCorreo servicio= new ServicioCorreo(); servicio.enviar(); } } El resultado es el mismo; pero ya tenemos un servicio intermedio que separa la l\u00f3gica de estos dos servicios, que en el ejemplo pueden parecer simples; pero en un ejemplo real, el registrar o enviar no sea tan simple como escribirlo en una consola. Ejemplo 001: DI servicio de correo parte 3. A lo desarrollado hasta el momento se solicita que dependiendo de una opci\u00f3n (en este caso ser\u00e1 hard-code podr\u00eda ser por scanner), el env\u00edo de correo deber\u00e1 antes de enviar, analizar el correo. Para esto basta solamente con cambiar el contenido del siguiente archivo: /di/src/main/java/cl/lherrera/di/servicios/ServicioCorreo.java package cl.lherrera.di.servicios; public class ServicioCorreo { private ServicioRegistroCorreo servicioRegistro; private ServicioEnvioCorreo servicioEnvio; public ServicioCorreo() { this.servicioRegistro = new ServicioRegistroCorreo(); this.servicioEnvio = new ServicioEnvioCorreo(); } public void enviar() { // hard-code inicio boolean debeAnalizar = true; // hard-code fin servicioRegistro.registrarCorreo(); if(debeAnalizar) { System.out.println(\"Analizar - correo\"); servicioEnvio.enviarCorreo(); }else { servicioEnvio.enviarCorreo(); } } } Probamos y no deber\u00edan existir cambios a menos que queramos que se analice el correo antes de enviar. Si tomamos en cuenta que analizar un correo, no es una tarea de pocas l\u00edneas de c\u00f3digo. Es por esta raz\u00f3n que debemos separar la l\u00f3gica de an\u00e1lisis a otro servicio dedicado. Se agrega un nuevo servicio: /di/src/main/java/cl/lherrera/di/servicios/ServicioEnvioAnalizoCorreo.java package cl.lherrera.di.servicios; public class ServicioEnvioAnalizoCorreo { public void analizarCorreo() { System.out.println(\"Analizar - correo\"); } } Quedando... /di/src/main/java/cl/lherrera/di/servicios/ServicioCorreo.java package cl.lherrera.di.servicios; public class ServicioCorreo { private ServicioRegistroCorreo servicioRegistro; private ServicioEnvioCorreo servicioEnvio; private ServicioEnvioAnalizoCorreo servicioEnvioAnalizoCorreo; public ServicioCorreo() { this.servicioRegistro = new ServicioRegistroCorreo(); this.servicioEnvio = new ServicioEnvioCorreo(); this.servicioEnvioAnalizoCorreo = new ServicioEnvioAnalizoCorreo(); } public void enviar() { // hard-code inicio boolean debeAnalizar = true; // hard-code fin servicioRegistro.registrarCorreo(); if(debeAnalizar) { servicioEnvioAnalizoCorreo.analizarCorreo(); servicioEnvio.enviarCorreo(); }else { servicioEnvio.enviarCorreo(); } } } Esto obtiene el mismo resultado; pero hemos separado m\u00e1s las responsabilidades. Esto por ahora no tiene sentido, pero el dejar las responsabilidades bien separadas es parte de lo que se necesita para reconocer la aplicaci\u00f3n del patr\u00f3n de inyecci\u00f3n de dependencias. Ejemplo 001: DI servicio de correo parte 4 - aplicaci\u00f3n del patr\u00f3n. Reconocemos que el an\u00e1lisis de correo, es un proceso que forma parte del env\u00edo de correo, es por esto que podr\u00eda heredar del env\u00edo y as\u00ed instanciamos un solo objeto y lo hacemos polim\u00f3rfico. Lo otro que nos queda por hacer si queremos aplicar el patr\u00f3n es estar seguros de sacar la l\u00f3gica de elecci\u00f3n del tipo de env\u00edo a ejecutar, es decir que el servicio de correo no tenga l\u00f3gica de negocio, si no que solo despache al servicio correspondiente de alg\u00fan objeto polim\u00f3rfico. \u001cEstructura cl.lherrera.di \u251c\u2500\u2500 App.java \u2514\u2500\u2500 servicios \u251c\u2500\u2500 ServicioCorreo.java \u251c\u2500\u2500 ServicioEnvioAnalizoCorreo.java \u251c\u2500\u2500 ServicioEnvioCorreo.java \u2514\u2500\u2500 ServicioRegistroCorreo.java \u251c\u2500\u2500 App.java Es ac\u00e1 donde manejamos la l\u00f3gica que requiere la elecci\u00f3n del correcto tipo que se le enviar\u00e1 al servicio principal. package cl.lherrera.di; import cl.lherrera.di.servicios.ServicioCorreo; import cl.lherrera.di.servicios.ServicioEnvioAnalizoCorreo; import cl.lherrera.di.servicios.ServicioEnvioCorreo; import cl.lherrera.di.servicios.ServicioRegistroCorreo; public class App { public static void main( String[] args ) { logicaExtraida(); } private static void logicaExtraida() { // hard-code inicio boolean debeAnalizar = false; // hard-code fin ServicioEnvioCorreo servicioEnvio = null; ServicioRegistroCorreo servicioRegistro = new ServicioRegistroCorreo(); if(debeAnalizar) { servicioEnvio = new ServicioEnvioAnalizoCorreo(); }else { servicioEnvio = new ServicioEnvioCorreo(); } // llamada inyectada, la l\u00f3gica de elecci\u00f3n del tipo, ya se aplic\u00f3 ServicioCorreo servicio= new ServicioCorreo(servicioEnvio, servicioRegistro); // llamada \"polim\u00f3rfica. servicio.enviar(); } } \u251c\u2500\u2500 ServicioCorreo.java package cl.lherrera.di.servicios; public class ServicioCorreo { private ServicioRegistroCorreo servicioRegistro; private ServicioEnvioCorreo servicioEnvio; // constructor inicia el estado con lo que se inyect\u00f3 desde fuera public ServicioCorreo( ServicioEnvioCorreo servicioEnvio, ServicioRegistroCorreo servicioRegistro ) { this.servicioRegistro = servicioRegistro; this.servicioEnvio = servicioEnvio; } public void enviar() { servicioRegistro.registrarCorreo(); servicioEnvio.enviarCorreo(); } } \u251c\u2500\u2500 ServicioEnvioAnalizoCorreo. \u001c package cl.lherrera.di.servicios; public class ServicioEnvioAnalizoCorreo extends ServicioEnvioCorreo{ @Override public void enviarCorreo() { // personalizaci\u00f3n del m\u00e9todo System.out.println(\"Analizar - correo\"); // llamado al m\u00e9todo del padre. super.enviarCorreo(); } } \u251c\u2500\u2500 ServicioEnvioCorreo.java package cl.lherrera.di.servicios; public class ServicioEnvioCorreo { public void enviarCorreo() { System.out.println(\"Enviar Correo\"); } } \u2514\u2500\u2500 ServicioRegistroCorreo.java package cl.lherrera.di.servicios; public class ServicioRegistroCorreo { public void registrarCorreo() { System.out.println(\"Registrar correo\"); } } Esto se puede realizar con una interfaz que implementen varios tipos. Con esto se logra un mejor polimorfismo. Maven y manejo de dependencias. Introducci\u00f3n Explicaci\u00f3n de qu\u00e9 es maven, para qu\u00e9 sirve y se demostrar\u00e1 una inyecci\u00f3n de dependencias usando maven. 11-\u00bfQu\u00e9 es Maven? (lectura) definici\u00f3n de maven y muestra las siete etapas en las que se basa. Se explica cada una de ellas: (Validar, Compilar, Probar, Empaquetar, Veri\ufb01car, Instalar, Implementaci\u00f3n) (lectura) qu\u00e9 cosas nos permite como integrar librer\u00edas de manera sencilla a nuestros proyectos. (lectura) gr\u00e1fico del \u00e1rbol de dependencias de un proyecto maven. (lectura) explicaci\u00f3n de un artefacto. 13-Concepto de Artefacto. (lectura) Definici\u00f3n de un artefacto y sus partes (lectura) Definici\u00f3n del pom.xml 14-Creando un proyecto maven. Crear un proyecto maven, de la forma r\u00e1pida usual, se muestra en lectura los pasos y finalmente se analiza que cuando creamos el artefacto, revisamos el pom.xml , y tenemos lo siguiente: Se explica que significa SNAPSHOT , que es como una especie de beta; pero funcional. <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>com.maven.ejemplo</groupId> <artifactId>miProyecto</artifactId> <version>0.0.1-SNAPSHOT</version> </project> 19-Ejemplo de inyecci\u00f3n de dependencias. En realidad el enunciado est\u00e1 mal redactado, es el uso de dependencias externas con maven, en este caso se usa de ejemplo J-Unit 4 para probar una funcionalidad. Estructura: ./ \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u251c\u2500\u2500 main \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2514\u2500\u2500 com.micalculadora \u2502 \u2502 \u2514\u2500\u2500 Calculadora.java \u2502 \u2514\u2500\u2500 resources \u2514\u2500\u2500 test \u251c\u2500\u2500 java \u2514\u2500\u2500 com.micalculadora.pruebas \u2514\u2500\u2500 CalculadoraPrueba.java \u251c\u2500\u2500 pom.xml <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>com.calculadora</groupId> <artifactId>micalculadora</artifactId> <version>0.0.1-SNAPSHOT</version> <name>calculadora</name> <dependencies> <!-- https://mvnrepository.com/artifact/junit/junit --> <dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> <version>4.11</version> <scope>test</scope> </dependency> </dependencies> </project> \u2514\u2500\u2500 Calculadora.java package com.micalculadora; public class Calculadora{ public static double suma (double a, double b) { return (a+b); } public static double multiplica (double a, double b) { return (a*b); } public static double resta (double a, double b) { return (a-b); } public static double divide (double a, double b) { return (a/b); } public static double resto (double a, double b) { return (a%b); } } \u2514\u2500\u2500 CalculadoraPrueba.java package com.micalculadora.pruebas; import org.junit.Test; import com.micalculadora.Calculadora; import static org.junit.Assert.*; public class CalculadoraPrueba { @Test public void prueba() { assertEquals(4,Calculadora.suma(2,2),0); assertEquals(4,Calculadora.multiplica(2,2),0); assertEquals(0,Calculadora.resta(2,2),0); assertEquals(1,Calculadora.divide(2,2),0); assertEquals(0,Calculadora.resto(2,2),0); } } Al ejecutar el test de Eclipse (no usar otro), los test se pueden probar sin problemas, se pueden ir probando cambiando valores y viendo como fallan los test Si queremos usar JUNIT 5 hacemos los siguientes cambios. /micalculadora/pom.xml <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>com.calculadora</groupId> <artifactId>micalculadora</artifactId> <version>0.0.1-SNAPSHOT</version> <name>calculadora</name> <properties> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> </properties> <dependencies> <dependency> <groupId>org.mockito</groupId> <artifactId>mockito-core</artifactId> <version>2.28.2</version> <scope>test</scope> </dependency> <!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api --> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-api</artifactId> <version>5.6.0</version> <scope>test</scope> </dependency> <!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine --> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-engine</artifactId> <version>5.6.0</version> <scope>test</scope> </dependency> <!-- https://mvnrepository.com/artifact/org.junit.platform/junit-platform-launcher --> <dependency> <groupId>org.junit.platform</groupId> <artifactId>junit-platform-launcher</artifactId> <version>1.6.0</version> <scope>test</scope> </dependency> </dependencies> </project> /micalculadora/src/test/java/com/micalculadora/pruebas/CalculadoraPrueba.java package com.micalculadora.pruebas; import static org.junit.jupiter.api.Assertions.assertEquals; import org.junit.jupiter.api.Test; import com.micalculadora.Calculadora; public class CalculadoraPrueba { @Test public void prueba() { assertEquals(4,Calculadora.suma(2,2),0); assertEquals(4,Calculadora.multiplica(2,2),0); assertEquals(0,Calculadora.resta(2,2),0); assertEquals(1,Calculadora.divide(2,2),0); assertEquals(0,Calculadora.resto(2,2),0); } } Propuesta de ejercicio. Se necesita crear un sistema que simule un combate. Los jugadores ser\u00e1n entregados a una clase inyectada que controla la pelea. (Mayor explicaci\u00f3n en la lectura). Estructura: ./ \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u251c\u2500\u2500 main \u251c\u2500\u2500 java \u2514\u2500\u2500 com.batalla \u251c\u2500\u2500 IActividades.java \u251c\u2500\u2500 IMovimiento.java \u251c\u2500\u2500 Main.java \u251c\u2500\u2500 Personaje.java \u2514\u2500\u2500 Torneo.java pom.xml <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>com.batalla</groupId> <artifactId>batalla</artifactId> <version>0.0.1-SNAPSHOT</version> <name>batalla</name> <dependencies> <!-- https://mvnrepository.com/artifact/org.apache.commons/commons-math3 --> <dependency> <groupId>org.apache.commons</groupId> <artifactId>commons-math3</artifactId> <version>3.6.1</version> </dependency> </dependencies> </project> \u2514\u2500\u2500 com.batalla \u251c\u2500\u2500 IActividades.java \u251c\u2500\u2500 IMovimiento.java \u251c\u2500\u2500 Main.java \u251c\u2500\u2500 Personaje.java \u2514\u2500\u2500 Torneo.java \u251c\u2500\u2500 IActividades.java package com.batalla; public interface IActividades { void ataqueBasico(); void ataqueAvanzado(); void defenderAtaque(); void esquivarAtaque(); } \u251c\u2500\u2500 IMovimiento.java package com.batalla; public interface IMovimiento { void avanzar(); void derecha(); void izquierda(); void retroceder(); } \u251c\u2500\u2500 Main.java package com.batalla; public class Main { public static void main(String[] args) { // Se crean los personajes (nombre, poder, energ\u00eda) Personaje goku = new Personaje(\"GOK\u00da\", 5, 10); Personaje vegeta = new Personaje(\"VEGETA\", 6, 9); // se inicializa el torneo y se inyectan los dos peleadores Torneo torneo = new Torneo(goku, vegeta); // se muestran los peleadores inyectados torneo.presentarContrincantes(); // inicia el conbate torneo.pelea(); } } \u251c\u2500\u2500 Personaje.java package com.batalla; import org.apache.commons.math3.util.CombinatoricsUtils; public class Personaje implements IActividades, IMovimiento { String nombre; double energia; double poder; String ataque; Personaje() { } Personaje(String nombre, int poder, int energia) { this.nombre = nombre; this.poder = CombinatoricsUtils.factorial(poder); this.energia = CombinatoricsUtils.factorial(energia); } public String getNombre() { return this.nombre; } public void setNombre(String nombre) { this.nombre = nombre; } public double getEnergia() { return this.energia; } public void setEnergia(double vida) { this.energia = vida; } public double getPoder() { return this.poder; } public void setPoder(double poder) { this.poder = poder; } public void ataqueBasico() { System.out.println(this.nombre + \", ha pegado una patada!\"); } public void ataqueAvanzado() { System.out.println(this.nombre + \", ha lanzado un Kamehameha! de \" + this.poder + \" puntos de potencia\"); } public void defenderAtaque() { System.out.println(this.nombre + \", se ha defendido contra el ataque!\"); } public void esquivarAtaque() { System.out.println(this.nombre + \", lo ha esquivado!\"); } public String toString() { return \"Hola, soy \" + this.nombre + \", mi poder alcanza \" + this.poder + \" y mi energ\u00eda no supera los \" + this.energia; } public void avanzar() { System.out.println(this.nombre + \", avanz\u00f3 hacia adelante\"); } public void derecha() { System.out.println(this.nombre + \", gir\u00f3 a la derecha\"); } public void izquierda() { System.out.println(this.nombre + \", gir\u00f3 a la izquierda\"); } public void retroceder() { System.out.println(this.nombre + \", retrocedi\u00f3\"); } } \u2514\u2500\u2500 Torneo.java package com.batalla; public class Torneo { Personaje p1; Personaje p2; Torneo(Personaje p1, Personaje p2) { this.p1 = p1; this.p2 = p2; } public void pelea() { p1.avanzar(); p1.izquierda(); p1.izquierda(); p2.avanzar(); p2.retroceder(); p2.ataqueBasico(); p1.esquivarAtaque(); p1.ataqueAvanzado(); p2.defenderAtaque(); } public void presentarContrincantes() { p1.toString(); p2.toString(); } } Probar (como tarea) con otros personajes u otra l\u00f3gica, quiz\u00e1s con un delay combinado con un ramdom \u001d. EXTRA Esta prueba se ejecut\u00f3 con \u00e9xito usando maven test y el test del IDE. EN Mac: brew install maven Luego... \u279c di mvn --version Apache Maven 3.6.3 (cecedd343002696d0abb50b32b541b8a6ba2883f) Maven home: /usr/local/Cellar/maven/3.6.3_1/libexec Java version: 13.0.2, vendor: N/A, runtime: /usr/local/Cellar/openjdk/13.0.2+8_2/libexec/openjdk.jdk/Contents/Home Default locale: es_CL, platform encoding: UTF-8 OS name: \"mac os x\", version: \"10.14.6\", arch: \"x86_64\", family: \"mac\" Para probar el test usando maven: (Usar solamente el ejecutador de tests de eclipse), por ahora desde la consola es inestable o al menos no est\u00e1n todo los comandos claros. TODO (0002, 0003) La configuraci\u00f3n que acept\u00f3 la instalaci\u00f3n desde la consola usando maven: <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>com.calculadora</groupId> <artifactId>micalculadora</artifactId> <version>0.0.1-SNAPSHOT</version> <name>calculadora</name> <properties> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> </properties> <dependencies> <!-- https://mvnrepository.com/artifact/junit/junit --> <dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> <version>4.11</version> <scope>test</scope> </dependency> <!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-compiler-plugin --> <dependency> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-compiler-plugin</artifactId> <version>3.8.1</version> <type>maven-plugin</type> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-compiler-plugin</artifactId> <version>3.8.1</version> <configuration> <source>1.8</source> <target>1.8</target> </configuration> </plugin> </plugins> </build> </project> FIN - EXTRA","title":"Lectura 1: Spring"},{"location":"modulos/mod_5/uni001/lectura001/#lectura-1-spring","text":"","title":"Lectura 1: Spring"},{"location":"modulos/mod_5/uni001/lectura001/#inyeccion-de-dependencias","text":"Tenemos ejemplos en el sitio. \ud83d\udc40","title":"Inyecci\u00f3n de dependencias."},{"location":"modulos/mod_5/uni001/lectura001/#ejemplo-001-di-servicio-de-correo-parte-1","text":"Se necesita un programa que registre y env\u00ede un correo. El proceso de registrar ser\u00e1 un mensaje por consola que diga \"Registrar correo\". El proceso de env\u00edo de correo ser\u00e1 un mensaje por consola que diga \"Enviar correo\".","title":"Ejemplo 001: DI servicio de correo parte 1."},{"location":"modulos/mod_5/uni001/lectura001/#solucion","text":"Estructura: \u2500\u2500 di \u251c\u2500\u2500 App.java \u2514\u2500\u2500 servicios \u2514\u2500\u2500 ServicioCorreo.java Servicio de correo \u2514\u2500\u2500 servicios \u2514\u2500\u2500 ServicioCorreo.java package cl.lherrera.di.servicios; public class ServicioCorreo { public void enviar() { System.out.println(\"Registrar correo\"); System.out.println(\"Enviar correo\"); } } Principal \u2500\u2500 di \u251c\u2500\u2500 App.java package cl.lherrera.di; import cl.lherrera.di.servicios.ServicioCorreo; public class App { public static void main( String[] args ) { ServicioCorreo servicio= new ServicioCorreo(); servicio.enviar(); } }","title":"Soluci\u00f3n:"},{"location":"modulos/mod_5/uni001/lectura001/#ejemplo-001-di-servicio-de-correo-parte-2","text":"Ahora el servicio se divide en tres servicios, en el que el ServicioCorreo se compone de los otros servicios, los que pasan su ciclo de vida dentro de esta clase. \u2500\u2500 di \u251c\u2500\u2500 App.java \u2514\u2500\u2500 servicios \u251c\u2500\u2500 ServicioCorreo.java \u251c\u2500\u2500 ServicioEnvioCorreo.java \u2514\u2500\u2500 ServicioRegistroCorreo.java \u2500\u2500 ServicioRegistroCorreo.java package cl.lherrera.di.servicios; public class ServicioRegistroCorreo { public void registrarCorreo() { System.out.println(\"Registrar correo\"); } } \u2500\u2500 ServicioEnvioCorreo.java package cl.lherrera.di.servicios; public class ServicioEnvioCorreo { public void enviarCorreo() { System.out.println(\"Enviar Correo\"); } } \u2500\u2500 ServicioCorreo.java package cl.lherrera.di; import cl.lherrera.di.servicios.ServicioCorreo; public class App { public static void main( String[] args ) { ServicioCorreo servicio= new ServicioCorreo(); servicio.enviar(); } } El resultado es el mismo; pero ya tenemos un servicio intermedio que separa la l\u00f3gica de estos dos servicios, que en el ejemplo pueden parecer simples; pero en un ejemplo real, el registrar o enviar no sea tan simple como escribirlo en una consola.","title":"Ejemplo 001: DI servicio de correo parte 2."},{"location":"modulos/mod_5/uni001/lectura001/#ejemplo-001-di-servicio-de-correo-parte-3","text":"A lo desarrollado hasta el momento se solicita que dependiendo de una opci\u00f3n (en este caso ser\u00e1 hard-code podr\u00eda ser por scanner), el env\u00edo de correo deber\u00e1 antes de enviar, analizar el correo. Para esto basta solamente con cambiar el contenido del siguiente archivo: /di/src/main/java/cl/lherrera/di/servicios/ServicioCorreo.java package cl.lherrera.di.servicios; public class ServicioCorreo { private ServicioRegistroCorreo servicioRegistro; private ServicioEnvioCorreo servicioEnvio; public ServicioCorreo() { this.servicioRegistro = new ServicioRegistroCorreo(); this.servicioEnvio = new ServicioEnvioCorreo(); } public void enviar() { // hard-code inicio boolean debeAnalizar = true; // hard-code fin servicioRegistro.registrarCorreo(); if(debeAnalizar) { System.out.println(\"Analizar - correo\"); servicioEnvio.enviarCorreo(); }else { servicioEnvio.enviarCorreo(); } } } Probamos y no deber\u00edan existir cambios a menos que queramos que se analice el correo antes de enviar. Si tomamos en cuenta que analizar un correo, no es una tarea de pocas l\u00edneas de c\u00f3digo. Es por esta raz\u00f3n que debemos separar la l\u00f3gica de an\u00e1lisis a otro servicio dedicado. Se agrega un nuevo servicio: /di/src/main/java/cl/lherrera/di/servicios/ServicioEnvioAnalizoCorreo.java package cl.lherrera.di.servicios; public class ServicioEnvioAnalizoCorreo { public void analizarCorreo() { System.out.println(\"Analizar - correo\"); } } Quedando... /di/src/main/java/cl/lherrera/di/servicios/ServicioCorreo.java package cl.lherrera.di.servicios; public class ServicioCorreo { private ServicioRegistroCorreo servicioRegistro; private ServicioEnvioCorreo servicioEnvio; private ServicioEnvioAnalizoCorreo servicioEnvioAnalizoCorreo; public ServicioCorreo() { this.servicioRegistro = new ServicioRegistroCorreo(); this.servicioEnvio = new ServicioEnvioCorreo(); this.servicioEnvioAnalizoCorreo = new ServicioEnvioAnalizoCorreo(); } public void enviar() { // hard-code inicio boolean debeAnalizar = true; // hard-code fin servicioRegistro.registrarCorreo(); if(debeAnalizar) { servicioEnvioAnalizoCorreo.analizarCorreo(); servicioEnvio.enviarCorreo(); }else { servicioEnvio.enviarCorreo(); } } } Esto obtiene el mismo resultado; pero hemos separado m\u00e1s las responsabilidades. Esto por ahora no tiene sentido, pero el dejar las responsabilidades bien separadas es parte de lo que se necesita para reconocer la aplicaci\u00f3n del patr\u00f3n de inyecci\u00f3n de dependencias.","title":"Ejemplo 001: DI servicio de correo parte 3."},{"location":"modulos/mod_5/uni001/lectura001/#ejemplo-001-di-servicio-de-correo-parte-4-aplicacion-del-patron","text":"Reconocemos que el an\u00e1lisis de correo, es un proceso que forma parte del env\u00edo de correo, es por esto que podr\u00eda heredar del env\u00edo y as\u00ed instanciamos un solo objeto y lo hacemos polim\u00f3rfico. Lo otro que nos queda por hacer si queremos aplicar el patr\u00f3n es estar seguros de sacar la l\u00f3gica de elecci\u00f3n del tipo de env\u00edo a ejecutar, es decir que el servicio de correo no tenga l\u00f3gica de negocio, si no que solo despache al servicio correspondiente de alg\u00fan objeto polim\u00f3rfico. \u001cEstructura cl.lherrera.di \u251c\u2500\u2500 App.java \u2514\u2500\u2500 servicios \u251c\u2500\u2500 ServicioCorreo.java \u251c\u2500\u2500 ServicioEnvioAnalizoCorreo.java \u251c\u2500\u2500 ServicioEnvioCorreo.java \u2514\u2500\u2500 ServicioRegistroCorreo.java \u251c\u2500\u2500 App.java Es ac\u00e1 donde manejamos la l\u00f3gica que requiere la elecci\u00f3n del correcto tipo que se le enviar\u00e1 al servicio principal. package cl.lherrera.di; import cl.lherrera.di.servicios.ServicioCorreo; import cl.lherrera.di.servicios.ServicioEnvioAnalizoCorreo; import cl.lherrera.di.servicios.ServicioEnvioCorreo; import cl.lherrera.di.servicios.ServicioRegistroCorreo; public class App { public static void main( String[] args ) { logicaExtraida(); } private static void logicaExtraida() { // hard-code inicio boolean debeAnalizar = false; // hard-code fin ServicioEnvioCorreo servicioEnvio = null; ServicioRegistroCorreo servicioRegistro = new ServicioRegistroCorreo(); if(debeAnalizar) { servicioEnvio = new ServicioEnvioAnalizoCorreo(); }else { servicioEnvio = new ServicioEnvioCorreo(); } // llamada inyectada, la l\u00f3gica de elecci\u00f3n del tipo, ya se aplic\u00f3 ServicioCorreo servicio= new ServicioCorreo(servicioEnvio, servicioRegistro); // llamada \"polim\u00f3rfica. servicio.enviar(); } } \u251c\u2500\u2500 ServicioCorreo.java package cl.lherrera.di.servicios; public class ServicioCorreo { private ServicioRegistroCorreo servicioRegistro; private ServicioEnvioCorreo servicioEnvio; // constructor inicia el estado con lo que se inyect\u00f3 desde fuera public ServicioCorreo( ServicioEnvioCorreo servicioEnvio, ServicioRegistroCorreo servicioRegistro ) { this.servicioRegistro = servicioRegistro; this.servicioEnvio = servicioEnvio; } public void enviar() { servicioRegistro.registrarCorreo(); servicioEnvio.enviarCorreo(); } } \u251c\u2500\u2500 ServicioEnvioAnalizoCorreo. \u001c package cl.lherrera.di.servicios; public class ServicioEnvioAnalizoCorreo extends ServicioEnvioCorreo{ @Override public void enviarCorreo() { // personalizaci\u00f3n del m\u00e9todo System.out.println(\"Analizar - correo\"); // llamado al m\u00e9todo del padre. super.enviarCorreo(); } } \u251c\u2500\u2500 ServicioEnvioCorreo.java package cl.lherrera.di.servicios; public class ServicioEnvioCorreo { public void enviarCorreo() { System.out.println(\"Enviar Correo\"); } } \u2514\u2500\u2500 ServicioRegistroCorreo.java package cl.lherrera.di.servicios; public class ServicioRegistroCorreo { public void registrarCorreo() { System.out.println(\"Registrar correo\"); } } Esto se puede realizar con una interfaz que implementen varios tipos. Con esto se logra un mejor polimorfismo.","title":"Ejemplo 001: DI servicio de correo parte 4 - aplicaci\u00f3n del patr\u00f3n."},{"location":"modulos/mod_5/uni001/lectura001/#maven-y-manejo-de-dependencias","text":"","title":"Maven y manejo de dependencias."},{"location":"modulos/mod_5/uni001/lectura001/#introduccion","text":"Explicaci\u00f3n de qu\u00e9 es maven, para qu\u00e9 sirve y se demostrar\u00e1 una inyecci\u00f3n de dependencias usando maven.","title":"Introducci\u00f3n"},{"location":"modulos/mod_5/uni001/lectura001/#11-que-es-maven","text":"(lectura) definici\u00f3n de maven y muestra las siete etapas en las que se basa. Se explica cada una de ellas: (Validar, Compilar, Probar, Empaquetar, Veri\ufb01car, Instalar, Implementaci\u00f3n) (lectura) qu\u00e9 cosas nos permite como integrar librer\u00edas de manera sencilla a nuestros proyectos. (lectura) gr\u00e1fico del \u00e1rbol de dependencias de un proyecto maven. (lectura) explicaci\u00f3n de un artefacto.","title":"11-\u00bfQu\u00e9 es Maven?"},{"location":"modulos/mod_5/uni001/lectura001/#13-concepto-de-artefacto","text":"(lectura) Definici\u00f3n de un artefacto y sus partes (lectura) Definici\u00f3n del pom.xml","title":"13-Concepto de Artefacto."},{"location":"modulos/mod_5/uni001/lectura001/#14-creando-un-proyecto-maven","text":"Crear un proyecto maven, de la forma r\u00e1pida usual, se muestra en lectura los pasos y finalmente se analiza que cuando creamos el artefacto, revisamos el pom.xml , y tenemos lo siguiente: Se explica que significa SNAPSHOT , que es como una especie de beta; pero funcional. <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>com.maven.ejemplo</groupId> <artifactId>miProyecto</artifactId> <version>0.0.1-SNAPSHOT</version> </project>","title":"14-Creando un proyecto maven."},{"location":"modulos/mod_5/uni001/lectura001/#19-ejemplo-de-inyeccion-de-dependencias","text":"En realidad el enunciado est\u00e1 mal redactado, es el uso de dependencias externas con maven, en este caso se usa de ejemplo J-Unit 4 para probar una funcionalidad. Estructura: ./ \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u251c\u2500\u2500 main \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2514\u2500\u2500 com.micalculadora \u2502 \u2502 \u2514\u2500\u2500 Calculadora.java \u2502 \u2514\u2500\u2500 resources \u2514\u2500\u2500 test \u251c\u2500\u2500 java \u2514\u2500\u2500 com.micalculadora.pruebas \u2514\u2500\u2500 CalculadoraPrueba.java \u251c\u2500\u2500 pom.xml <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>com.calculadora</groupId> <artifactId>micalculadora</artifactId> <version>0.0.1-SNAPSHOT</version> <name>calculadora</name> <dependencies> <!-- https://mvnrepository.com/artifact/junit/junit --> <dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> <version>4.11</version> <scope>test</scope> </dependency> </dependencies> </project> \u2514\u2500\u2500 Calculadora.java package com.micalculadora; public class Calculadora{ public static double suma (double a, double b) { return (a+b); } public static double multiplica (double a, double b) { return (a*b); } public static double resta (double a, double b) { return (a-b); } public static double divide (double a, double b) { return (a/b); } public static double resto (double a, double b) { return (a%b); } } \u2514\u2500\u2500 CalculadoraPrueba.java package com.micalculadora.pruebas; import org.junit.Test; import com.micalculadora.Calculadora; import static org.junit.Assert.*; public class CalculadoraPrueba { @Test public void prueba() { assertEquals(4,Calculadora.suma(2,2),0); assertEquals(4,Calculadora.multiplica(2,2),0); assertEquals(0,Calculadora.resta(2,2),0); assertEquals(1,Calculadora.divide(2,2),0); assertEquals(0,Calculadora.resto(2,2),0); } } Al ejecutar el test de Eclipse (no usar otro), los test se pueden probar sin problemas, se pueden ir probando cambiando valores y viendo como fallan los test Si queremos usar JUNIT 5 hacemos los siguientes cambios. /micalculadora/pom.xml <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>com.calculadora</groupId> <artifactId>micalculadora</artifactId> <version>0.0.1-SNAPSHOT</version> <name>calculadora</name> <properties> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> </properties> <dependencies> <dependency> <groupId>org.mockito</groupId> <artifactId>mockito-core</artifactId> <version>2.28.2</version> <scope>test</scope> </dependency> <!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api --> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-api</artifactId> <version>5.6.0</version> <scope>test</scope> </dependency> <!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine --> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-engine</artifactId> <version>5.6.0</version> <scope>test</scope> </dependency> <!-- https://mvnrepository.com/artifact/org.junit.platform/junit-platform-launcher --> <dependency> <groupId>org.junit.platform</groupId> <artifactId>junit-platform-launcher</artifactId> <version>1.6.0</version> <scope>test</scope> </dependency> </dependencies> </project> /micalculadora/src/test/java/com/micalculadora/pruebas/CalculadoraPrueba.java package com.micalculadora.pruebas; import static org.junit.jupiter.api.Assertions.assertEquals; import org.junit.jupiter.api.Test; import com.micalculadora.Calculadora; public class CalculadoraPrueba { @Test public void prueba() { assertEquals(4,Calculadora.suma(2,2),0); assertEquals(4,Calculadora.multiplica(2,2),0); assertEquals(0,Calculadora.resta(2,2),0); assertEquals(1,Calculadora.divide(2,2),0); assertEquals(0,Calculadora.resto(2,2),0); } }","title":"19-Ejemplo de inyecci\u00f3n de dependencias."},{"location":"modulos/mod_5/uni001/lectura001/#propuesta-de-ejercicio","text":"Se necesita crear un sistema que simule un combate. Los jugadores ser\u00e1n entregados a una clase inyectada que controla la pelea. (Mayor explicaci\u00f3n en la lectura). Estructura: ./ \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u251c\u2500\u2500 main \u251c\u2500\u2500 java \u2514\u2500\u2500 com.batalla \u251c\u2500\u2500 IActividades.java \u251c\u2500\u2500 IMovimiento.java \u251c\u2500\u2500 Main.java \u251c\u2500\u2500 Personaje.java \u2514\u2500\u2500 Torneo.java pom.xml <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>com.batalla</groupId> <artifactId>batalla</artifactId> <version>0.0.1-SNAPSHOT</version> <name>batalla</name> <dependencies> <!-- https://mvnrepository.com/artifact/org.apache.commons/commons-math3 --> <dependency> <groupId>org.apache.commons</groupId> <artifactId>commons-math3</artifactId> <version>3.6.1</version> </dependency> </dependencies> </project> \u2514\u2500\u2500 com.batalla \u251c\u2500\u2500 IActividades.java \u251c\u2500\u2500 IMovimiento.java \u251c\u2500\u2500 Main.java \u251c\u2500\u2500 Personaje.java \u2514\u2500\u2500 Torneo.java \u251c\u2500\u2500 IActividades.java package com.batalla; public interface IActividades { void ataqueBasico(); void ataqueAvanzado(); void defenderAtaque(); void esquivarAtaque(); } \u251c\u2500\u2500 IMovimiento.java package com.batalla; public interface IMovimiento { void avanzar(); void derecha(); void izquierda(); void retroceder(); } \u251c\u2500\u2500 Main.java package com.batalla; public class Main { public static void main(String[] args) { // Se crean los personajes (nombre, poder, energ\u00eda) Personaje goku = new Personaje(\"GOK\u00da\", 5, 10); Personaje vegeta = new Personaje(\"VEGETA\", 6, 9); // se inicializa el torneo y se inyectan los dos peleadores Torneo torneo = new Torneo(goku, vegeta); // se muestran los peleadores inyectados torneo.presentarContrincantes(); // inicia el conbate torneo.pelea(); } } \u251c\u2500\u2500 Personaje.java package com.batalla; import org.apache.commons.math3.util.CombinatoricsUtils; public class Personaje implements IActividades, IMovimiento { String nombre; double energia; double poder; String ataque; Personaje() { } Personaje(String nombre, int poder, int energia) { this.nombre = nombre; this.poder = CombinatoricsUtils.factorial(poder); this.energia = CombinatoricsUtils.factorial(energia); } public String getNombre() { return this.nombre; } public void setNombre(String nombre) { this.nombre = nombre; } public double getEnergia() { return this.energia; } public void setEnergia(double vida) { this.energia = vida; } public double getPoder() { return this.poder; } public void setPoder(double poder) { this.poder = poder; } public void ataqueBasico() { System.out.println(this.nombre + \", ha pegado una patada!\"); } public void ataqueAvanzado() { System.out.println(this.nombre + \", ha lanzado un Kamehameha! de \" + this.poder + \" puntos de potencia\"); } public void defenderAtaque() { System.out.println(this.nombre + \", se ha defendido contra el ataque!\"); } public void esquivarAtaque() { System.out.println(this.nombre + \", lo ha esquivado!\"); } public String toString() { return \"Hola, soy \" + this.nombre + \", mi poder alcanza \" + this.poder + \" y mi energ\u00eda no supera los \" + this.energia; } public void avanzar() { System.out.println(this.nombre + \", avanz\u00f3 hacia adelante\"); } public void derecha() { System.out.println(this.nombre + \", gir\u00f3 a la derecha\"); } public void izquierda() { System.out.println(this.nombre + \", gir\u00f3 a la izquierda\"); } public void retroceder() { System.out.println(this.nombre + \", retrocedi\u00f3\"); } } \u2514\u2500\u2500 Torneo.java package com.batalla; public class Torneo { Personaje p1; Personaje p2; Torneo(Personaje p1, Personaje p2) { this.p1 = p1; this.p2 = p2; } public void pelea() { p1.avanzar(); p1.izquierda(); p1.izquierda(); p2.avanzar(); p2.retroceder(); p2.ataqueBasico(); p1.esquivarAtaque(); p1.ataqueAvanzado(); p2.defenderAtaque(); } public void presentarContrincantes() { p1.toString(); p2.toString(); } } Probar (como tarea) con otros personajes u otra l\u00f3gica, quiz\u00e1s con un delay combinado con un ramdom \u001d.","title":"Propuesta de ejercicio."},{"location":"modulos/mod_5/uni001/lectura001/#extra","text":"Esta prueba se ejecut\u00f3 con \u00e9xito usando maven test y el test del IDE. EN Mac: brew install maven Luego... \u279c di mvn --version Apache Maven 3.6.3 (cecedd343002696d0abb50b32b541b8a6ba2883f) Maven home: /usr/local/Cellar/maven/3.6.3_1/libexec Java version: 13.0.2, vendor: N/A, runtime: /usr/local/Cellar/openjdk/13.0.2+8_2/libexec/openjdk.jdk/Contents/Home Default locale: es_CL, platform encoding: UTF-8 OS name: \"mac os x\", version: \"10.14.6\", arch: \"x86_64\", family: \"mac\" Para probar el test usando maven: (Usar solamente el ejecutador de tests de eclipse), por ahora desde la consola es inestable o al menos no est\u00e1n todo los comandos claros. TODO (0002, 0003) La configuraci\u00f3n que acept\u00f3 la instalaci\u00f3n desde la consola usando maven: <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>com.calculadora</groupId> <artifactId>micalculadora</artifactId> <version>0.0.1-SNAPSHOT</version> <name>calculadora</name> <properties> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> </properties> <dependencies> <!-- https://mvnrepository.com/artifact/junit/junit --> <dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> <version>4.11</version> <scope>test</scope> </dependency> <!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-compiler-plugin --> <dependency> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-compiler-plugin</artifactId> <version>3.8.1</version> <type>maven-plugin</type> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-compiler-plugin</artifactId> <version>3.8.1</version> <configuration> <source>1.8</source> <target>1.8</target> </configuration> </plugin> </plugins> </build> </project>","title":"EXTRA"},{"location":"modulos/mod_5/uni001/lectura001/#fin-extra","text":"","title":"FIN - EXTRA"},{"location":"modulos/mod_5/uni001/lectura002/","text":"Lectura 2: Spring Framework Spring Framework Introducci\u00f3n Se explica y justifica la utilizaci\u00f3n del Framework. Motivaci\u00f3n Justificaci\u00f3n de Spring con el trabajo modular, que ya posee herramientas con mejores caracter\u00edsticas que ya hemos trabajados usando por ejemplo JDBC, y su mejora en Spring ser\u00eda JDBC TEMPLATE. \u00bfQu\u00e9 es un Framework? (lectura) Reducir tiempo, orden, usar que implementamos soluciones de varias formas; pero utilizando un marco de trabajo, nos apegamos a las formas que disponga Spring. Entonces, \u00bfQu\u00e9 es Spring Framework? (Lectura) ... Se muestran los m\u00f3dulos de Spring, no hay que entenderlos, solo se muestran para conocer la estructura. Introducci\u00f3n a STS Se muestran tres formas de crear un proyecto Spring. Primara forma. (Lectura) descargar la extensi\u00f3n de Spring en el marcketplace Esta la prob\u00e9 con eclipse 2019 - 12 y funciona con cmd + n, aparece Spring. (Lectura) Descargando STS. (Lectura) Desde el Initializr - web Incluimos el m\u00f3dulo de web y se sigue la lectura. Generamos un proyecto demo con el m\u00f3dulo spring web de prueba Curiosidades del archivo POM.xml (lectura), explicaci\u00f3n de etiquetas: parent , properties , plugin Iniciando proyecto Spring \u001d con STS\u001c. 13 Boot - dashboard es la opci\u00f3n para poder ejecutar un proyecto Sring-boot , en STS est\u00e1 m\u00e1s claro, que con el plugin descargado del marcketplace con eclipse. Pero en ambas representadas por un bot\u00f3n verde. Para poder incluir una p\u00e1gina, se realiza en /demo001/src/main/resources/static/index.html , decir que no tenemos un webcontent donde poner los jsp , mientras tanto, ir\u00e1n en la carpeta resources . Si revisamos las dependencias de Maven, podremos ver que est\u00e1 un Apache Tomcat , es desde donde realmente se est\u00e1 ejecutando nuestra aplicaci\u00f3n. Los directorios var\u00edan un poco desde los servlets , pero es que hasta ahora Sprint presenta una forma de estructura del proyecto distinta a lo que vimos. (Lectura), en la lectura est\u00e1 el paso a paso del siguiente proyecto: Estructura: ./ \u251c\u2500\u2500 HELP.md \u251c\u2500\u2500 mvnw \u251c\u2500\u2500 mvnw.cmd \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 com \u2502 \u2502 \u2502 \u2514\u2500\u2500 example \u2502 \u2502 \u2502 \u2514\u2500\u2500 demo \u2502 \u2502 \u2502 \u2514\u2500\u2500 Demo001Application.java \u2502 \u2502 \u2514\u2500\u2500 resources \u2502 \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2502 \u251c\u2500\u2500 static \u2502 \u2502 \u2502 \u2514\u2500\u2500 index.html \u2502 \u2502 \u2514\u2500\u2500 templates Donde todo est\u00e1 generado autom\u00e1ticamente por el inicializador. Excepto index.html . se muestra su contenido a continuaci\u00f3n:\u001c <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Demo 001</title> </head> <body>Test:Demo 001. </body> </html> http://localhost:8080/ Beans Introducci\u00f3n. 16 (Lectura) \u00bfQu\u00e9 es IoC (Inversi\u00f3n de control)? 16 L: cambia el concepto de que el programador tenga que incorporar y crear clases, se encarga una entidad externa de incluirlos en tiempo de ejecuci\u00f3n. L: el programador era quien incorporaba clases u objetos (utilizando new nombre_de_clase), ahora se encarga Spring de incorporarlos en tiempo de ejecuci\u00f3n del proyecto. L: contenedor de IoC y es \u00e9l que se encarga de hacer la inyecci\u00f3n de dependencias de las clases y objetos, sin la necesidad escribir la llamada directamente en el c\u00f3digo. L: se encarga de relacionarlos, configurar y manejar su ciclo de vida completo (desde la creaci\u00f3n hasta la destrucci\u00f3n de estos), es el n\u00facleo de la aplicaci\u00f3n. \u00bfQu\u00e9 es un Beans? 17 Como un pojo \u001d pero... Debe tener un constructor por defecto (sin argumentos). Debe tener todas sus atributos privados Debe tener para cada atributo su m\u00e9todo getter y setter . \u00bfC\u00f3mo manejo un Beans? 17 Dos formas de manejar un beans desde Spring. Forma 1 utilizando un archivo xml Estructura: ./ \u251c\u2500\u2500 HELP.md \u251c\u2500\u2500 mvnw \u251c\u2500\u2500 mvnw.cmd \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 com.beansEjemplos \u2502 \u2502 \u2502 \u2514\u2500\u2500 BaseEjemplosApplication.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 com.beansEjemplos.beansxml \u2502 \u2502 \u2502 \u251c\u2500\u2500 Persona.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 beans.xml \u2514\u2500\u2500 BaseEjemplosApplication.java package com.beansEjemplos; import org.springframework.context.ApplicationContext; import org.springframework.context.support.ClassPathXmlApplicationContext; import com.beansEjemplos.beansxml.Persona; public class BaseEjemplosApplication { /** * Ejecutamos este archivo como una aplicaci\u00f3n Spring y * veremos los resultados que se presentan en la * lectura. */ public static void main(String[] args) { // todo lo del paquete es compilado e incluido // relativamente desde su paquete en el // servidor String path = \"com/beansEjemplos/beansxml/beans.xml\"; ApplicationContext appContext = new ClassPathXmlApplicationContext(path); Persona p = appContext.getBean(Persona.class); System.out.println(p.toString()); } } \u251c\u2500\u2500 Persona.java package com.beansEjemplos.beansxml; public class Persona { private String nombre; private int edad; public Persona() { } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } public int getEdad() { return edad; } public void setEdad(int edad) { this.edad = edad; } public String toString() { return \"Nombre: \" + this.nombre + \", Edad:\" + this.edad; } } beans.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"> <bean id=\"Persona\" class=\"com.beansEjemplos.beansxml.Persona\"> <property name=\"nombre\" value=\"Cristian XML\" /> <property name=\"edad\" value=\"29\" /> </bean> </beans> Se ejecuta como aplicaci\u00f3n Spring y se obtiene el valor del beans que se inici\u00f3 en el xml. Anotaciones en Spring Esta es la segunda forma que posee Spring, para cargar beans. (Seguir lectura) Son solo definiciones, iremos viendo estas anotaciones a medida que avancemos con el documento @Component : Indica que un objeto es de tipo componente. Es el general e informa a Spring que lo considere un componente. @Controller : Indica que un objeto es de tipo controlador, se encarga de controlar la comunicaci\u00f3n entre el usuario y la aplicaci\u00f3n. @Repository : Indica que es un objeto de tipo repositorio y se encarga de implementar un almac\u00e9n de datos, o sea, es el que permite que se almacene informaci\u00f3n de una base de datos en el contenedor. Spring agrega otro tipo de servicios de bases de datos a este componente. @Service : Es el encargado de gestionar la operaci\u00f3n de negocios, agrupa varias llamadas simult\u00e1neas a repositorios. @Con\ufb01guration : Indica que la clase posee la configuraci\u00f3n principal del proyecto. @EnableAutoCon\ufb01guration : Indica que se aplicar\u00e1 la configuraci\u00f3n autom\u00e1tica. @ComponentScan : Ayuda a localizar elementos etiquetados con otras anotaciones. @SpringBootApplication : Engloba las tres anotaciones anteriores, @Con\ufb01guration , @EnableAutoCon\ufb01guration y @ComponentScan . @Autowired : Spring realiza la inyecci\u00f3n de dependencia sobre el atributo seleccionado. @PathVariable : Indica con que variable de la URL se relaciona el par\u00e1metro que se est\u00e1 usando la anotaci\u00f3n. @Bean : Indica que la clase seleccionada es un beans. https://docs.spring.io/spring-framework/docs/current/ja vadoc-api/org/springframework/context/annotation/Con\ufb01guration.html Incorporando anotaciones 21 Segunda manera de integrar los beans e nuestro proyecto. Utilizando algunas de las anotaciones que se exponen: Es importante dejar que Spring construya una app nueva y modificamos el main que propone para evitar errores inesperados que nos detenga la din\u00e1mica. src \u2502\u2514\u2500\u2500 cl.lherrera \u2502 \u251c\u2500\u2500 Demo001Application.java \u2502\u2514\u2500\u2500 cl.lherrera.beans \u2502 \u2514\u2500\u2500 Persona.java \u2502\u2514\u2500\u2500 cl.lherrera.conf \u2502 \u2514\u2500\u2500 AppConfig.java /demo001/src/main/java/cl/lherrera/beans/Persona.java package cl.lherrera.beans; import org.springframework.beans.factory.annotation.Value; public class Persona { @Value(\"Foo Bar bazio\") private String nombre; @Value(\"29\") private int edad; // no olvidar poner p\u00fablico para el alcance de otros paquetes. public Persona() { } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } public int getEdad() { return edad; } public void setEdad(int edad) { this.edad = edad; } public String toString() { return \"Nombre: \" + this.nombre + \", Edad:\" + this.edad; } } /demo001/src/main/java/cl/lherrera/conf/AppConfig.java package cl.lherrera.conf; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import cl.lherrera.beans.Persona; @Configuration public class AppConfig { @Bean public Persona persona() { return new Persona(); } } /demo001/src/main/java/cl/lherrera/Demo001Application.java El nombre de la clase var\u00eda seg\u00fan el nombre seleccionado cuando se inicializa la aplicaci\u00f3n. package cl.lherrera; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.context.ApplicationContext; import org.springframework.context.annotation.AnnotationConfigApplicationContext; import cl.lherrera.beans.Persona; import cl.lherrera.conf.AppConfig; @SpringBootApplication public class Demo001Application { public static void main(String[] args) { SpringApplication.run(Demo001Application.class, args); ApplicationContext appContext = new AnnotationConfigApplicationContext(AppConfig.class); Persona p = appContext.getBean(Persona.class); System.out.println(p.toString()); } } Logs 24 Introducci\u00f3n 24 (Lectura) - se realizar\u00e1 un ejemplo de incorporar logs. \u00bfQu\u00e9 es un Log? 24 (Lectura) - se define en la lectura. Definici\u00f3n del tipo de salida del log: DEBUG: Son los mensajes de depuraci\u00f3n, son \u00fatiles para obtener el comportamiento mientras se desarrolla la aplicaci\u00f3n. Se representa de color verde. INFO: Son los mensajes que muestran informaci\u00f3n del programa durante la ejecuci\u00f3n, por ejemplo versiones. Se representa de color verde. WARN: Son mensajes de alerta por situaciones an\u00f3malas de la ejecuci\u00f3n, pero no afectan el funcionamiento del sistema. Se representa de color amarillo. ERROR: Son mensajes que muestran una situaci\u00f3n de errores en la ejecuci\u00f3n, aunque el programa siga funcionando, puede ser afectado. Por ejemplo, un archivo que no existe. Se representa de color rojo. FATAL: Son mensajes Cr\u00edticos, son los que hace que el programa aborte la ejecuci\u00f3n y se detenga. Se representa de color rojo. Generando logs 25 La implementaci\u00f3n del log, ya viene en el paquete slf4j integrado a Spring. Por lo tanto solamente nos limitamos a llamar nuestro log de all\u00ed y no desde donde est\u00e1bamos acostumbrados Logger.getLog... . El archivos de propiedades posee reglas y no es tan libre como los archivos de configuraci\u00f3n que utilizamos con Servlets, o una app java. este posee configuraciones establecidas que nos ayudan a definir algunas cosas estandars, como por ejemplo el nombre que tendr\u00e1 el archivo de log entre otros. https://docs.spring.io/spring-boot/docs/current/reference/ht ml/boot-features-logging.html Estructura: ./ \u251c\u2500\u2500 HELP.md \u251c\u2500\u2500 mvnw \u251c\u2500\u2500 mvnw.cmd \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 Logs001Application.java \u2502 \u2502 \u2514\u2500\u2500 resources \u2502 \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2502 \u251c\u2500\u2500 static \u2502 \u2502 \u2514\u2500\u2500 templates NO OLVIDAR QUE LAS PROPIEDADES NO DEBEN SOBRARLES ESPACIOS EN BLANCO POR QUE PUEDEN PRODUCIR PROBLEMAS. Que no se construya el app.log despu\u00e9s del refresh en el ra\u00edz, es un indicio que algo no anda bien. /logs001/src/main/resources/application.properties # Propiedades del log logging.file.name=app.log logging.file.max-size=10MB logging.level.root=INFO logging.level.org.springframework.web=DEBUG /logs001/src/main/java/cl/lherrera/Logs001Application.java package cl.lherrera; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class Logs001Application { private final static Logger logger = LoggerFactory.getLogger(Logs001Application.class); public static void main(String[] args) { SpringApplication.run(Logs001Application.class, args); logger.debug(\"debug log\"); logger.info(\"info log\"); logger.warn(\"warning log\"); logger.error(\"error log\"); } } Proyecto Controlador-Vista 28 En este proyecto usaremos una librer\u00eda que nos ayuda a manipular p\u00e1ginas est\u00e1ticas. Se puede incluir desde la concepci\u00f3n del proyecto incluyendo spring web y thymeleaf , este \u00faltimo es quien nos da el poder de manipulaci\u00f3n. Significa hoja de tomillo que es su logo. Estructura ./ \u251c\u2500\u2500 HELP.md \u251c\u2500\u2500 mvnw \u251c\u2500\u2500 mvnw.cmd \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u251c\u2500\u2500 EjemplomvApplication.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 controller \u2502 \u2502 \u2502 \u2514\u2500\u2500 HomeController.java \u2502 \u2502 \u2514\u2500\u2500 resources \u2502 \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2502 \u251c\u2500\u2500 static \u2502 \u2502 \u2502 \u2514\u2500\u2500 data.txt \u2502 \u2502 \u2514\u2500\u2500 templates \u2502 \u2502 \u2514\u2500\u2500 main.html Es un proyecto que interact\u00faa con la vista, desde una petici\u00f3n GET a un controlador. No olvidar incluir thymeleaf , cuando se est\u00e9 creando el proyecto. /ejemplomv/pom.xml \u001c <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.6.RELEASE</version> <relativePath/> <!-- lookup parent from repository --> </parent> <groupId>cl.lherrera</groupId> <artifactId>beansAnotados</artifactId> <version>0.0.1-SNAPSHOT</version> <name>ejemplomv</name> <description>Demo project for Spring Boot</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-thymeleaf</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project> /ejemplomv/src/main/resources/static/data.txt PRODUCTO UNO PRODUCTO DOS PRODUCTO TRES /ejemplomv/src/main/resources/templates/main.html <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>P\u00e1gina - muestra</title> </head> <body> <h1>P\u00e1gina de productos</h1> <p th:text=\"'Producto 1: ' + ${nombre1} + '!'\" /> <p th:text=\"'Producto 2: ' + ${nombre2} + '!'\" /> <p th:text=\"'Producto 3: ' + ${nombre3} + '!'\" /> </body> </html> /ejemplomv/src/main/java/cl/lherrera/controller/HomeController.java package cl.lherrera.controller; import java.io.BufferedReader; import java.io.FileReader; import java.util.ArrayList; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.RequestMapping; @Controller public class HomeController { // ac\u00e1 es una interfaz Logger. private final static Logger logger = LoggerFactory.getLogger(HomeController.class); @RequestMapping(\"/\") public String servicioImprime(Model modelo) { String nombre = \"src/main/resources/static/data.txt\"; ArrayList<String> p = new ArrayList<String>(); try { FileReader fr = new FileReader(nombre); // buffer inyectado !! BufferedReader br = new BufferedReader(fr); String data = br.readLine(); while (data != null) { p.add(data); data = br.readLine(); } br.close(); fr.close(); } catch (Exception e) { logger.error(\"Error leyendo el fichero \" + nombre + \": \" + e); } modelo.addAttribute(\"nombre1\", p.get(0)); modelo.addAttribute(\"nombre2\", p.get(1)); modelo.addAttribute(\"nombre3\", p.get(2)); return \"main\"; } } /ejemplomv/src/main/java/cl/lherrera/EjemplomvApplication.java package cl.lherrera; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class EjemplomvApplication { public static void main(String[] args) { SpringApplication.run(EjemplomvApplication.class, args); } } Resultado: <!DOCTYPE html><html><head><meta charset=\"UTF-8\"><title>P\u00e1gina - muestra</title></head><body><h1>P\u00e1gina de productos</h1><p >Producto 1: PRODUCTO UNO !</p><p >Producto 2: PRODUCTO DOS !</p><p >Producto 3: PRODUCTO TRES!</p></body></html> http://localhost:8080/ La petici\u00f3n se realiza a / , ya que no se solicita ning\u00fan otro endpoint \u001d. Probar Cambiar los endpoints . Usar un foreach :: https://www.baeldung.com/thymeleaf-iteration \u001d <tr th:each=\"student: ${students}\"> <td th:text=\"${student.id}\" /> <td th:text=\"${student.name}\" /> </tr>","title":"Lectura 2: Spring Framework"},{"location":"modulos/mod_5/uni001/lectura002/#lectura-2-spring-framework","text":"","title":"Lectura 2: Spring Framework"},{"location":"modulos/mod_5/uni001/lectura002/#spring-framework","text":"","title":"Spring Framework"},{"location":"modulos/mod_5/uni001/lectura002/#introduccion","text":"Se explica y justifica la utilizaci\u00f3n del Framework.","title":"Introducci\u00f3n"},{"location":"modulos/mod_5/uni001/lectura002/#motivacion","text":"Justificaci\u00f3n de Spring con el trabajo modular, que ya posee herramientas con mejores caracter\u00edsticas que ya hemos trabajados usando por ejemplo JDBC, y su mejora en Spring ser\u00eda JDBC TEMPLATE.","title":"Motivaci\u00f3n"},{"location":"modulos/mod_5/uni001/lectura002/#que-es-un-framework","text":"(lectura) Reducir tiempo, orden, usar que implementamos soluciones de varias formas; pero utilizando un marco de trabajo, nos apegamos a las formas que disponga Spring.","title":"\u00bfQu\u00e9 es un Framework?"},{"location":"modulos/mod_5/uni001/lectura002/#entonces-que-es-spring-framework","text":"(Lectura) ... Se muestran los m\u00f3dulos de Spring, no hay que entenderlos, solo se muestran para conocer la estructura.","title":"Entonces, \u00bfQu\u00e9 es Spring Framework?"},{"location":"modulos/mod_5/uni001/lectura002/#introduccion-a-sts","text":"Se muestran tres formas de crear un proyecto Spring. Primara forma. (Lectura) descargar la extensi\u00f3n de Spring en el marcketplace Esta la prob\u00e9 con eclipse 2019 - 12 y funciona con cmd + n, aparece Spring. (Lectura) Descargando STS. (Lectura) Desde el Initializr - web Incluimos el m\u00f3dulo de web y se sigue la lectura. Generamos un proyecto demo con el m\u00f3dulo spring web de prueba","title":"Introducci\u00f3n a STS"},{"location":"modulos/mod_5/uni001/lectura002/#curiosidades-del-archivo-pomxml","text":"(lectura), explicaci\u00f3n de etiquetas: parent , properties , plugin","title":"Curiosidades del archivo POM.xml"},{"location":"modulos/mod_5/uni001/lectura002/#iniciando-proyecto-spring-con-sts-13","text":"Boot - dashboard es la opci\u00f3n para poder ejecutar un proyecto Sring-boot , en STS est\u00e1 m\u00e1s claro, que con el plugin descargado del marcketplace con eclipse. Pero en ambas representadas por un bot\u00f3n verde. Para poder incluir una p\u00e1gina, se realiza en /demo001/src/main/resources/static/index.html , decir que no tenemos un webcontent donde poner los jsp , mientras tanto, ir\u00e1n en la carpeta resources . Si revisamos las dependencias de Maven, podremos ver que est\u00e1 un Apache Tomcat , es desde donde realmente se est\u00e1 ejecutando nuestra aplicaci\u00f3n. Los directorios var\u00edan un poco desde los servlets , pero es que hasta ahora Sprint presenta una forma de estructura del proyecto distinta a lo que vimos. (Lectura), en la lectura est\u00e1 el paso a paso del siguiente proyecto: Estructura: ./ \u251c\u2500\u2500 HELP.md \u251c\u2500\u2500 mvnw \u251c\u2500\u2500 mvnw.cmd \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 com \u2502 \u2502 \u2502 \u2514\u2500\u2500 example \u2502 \u2502 \u2502 \u2514\u2500\u2500 demo \u2502 \u2502 \u2502 \u2514\u2500\u2500 Demo001Application.java \u2502 \u2502 \u2514\u2500\u2500 resources \u2502 \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2502 \u251c\u2500\u2500 static \u2502 \u2502 \u2502 \u2514\u2500\u2500 index.html \u2502 \u2502 \u2514\u2500\u2500 templates Donde todo est\u00e1 generado autom\u00e1ticamente por el inicializador. Excepto index.html . se muestra su contenido a continuaci\u00f3n:\u001c <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Demo 001</title> </head> <body>Test:Demo 001. </body> </html> http://localhost:8080/","title":"Iniciando proyecto Spring\u001d con STS\u001c. 13"},{"location":"modulos/mod_5/uni001/lectura002/#beans","text":"","title":"Beans"},{"location":"modulos/mod_5/uni001/lectura002/#introduccion-16","text":"(Lectura)","title":"Introducci\u00f3n. 16"},{"location":"modulos/mod_5/uni001/lectura002/#que-es-ioc-inversion-de-control-16","text":"L: cambia el concepto de que el programador tenga que incorporar y crear clases, se encarga una entidad externa de incluirlos en tiempo de ejecuci\u00f3n. L: el programador era quien incorporaba clases u objetos (utilizando new nombre_de_clase), ahora se encarga Spring de incorporarlos en tiempo de ejecuci\u00f3n del proyecto. L: contenedor de IoC y es \u00e9l que se encarga de hacer la inyecci\u00f3n de dependencias de las clases y objetos, sin la necesidad escribir la llamada directamente en el c\u00f3digo. L: se encarga de relacionarlos, configurar y manejar su ciclo de vida completo (desde la creaci\u00f3n hasta la destrucci\u00f3n de estos), es el n\u00facleo de la aplicaci\u00f3n.","title":"\u00bfQu\u00e9 es IoC (Inversi\u00f3n de control)? 16"},{"location":"modulos/mod_5/uni001/lectura002/#que-es-un-beans-17","text":"Como un pojo \u001d pero... Debe tener un constructor por defecto (sin argumentos). Debe tener todas sus atributos privados Debe tener para cada atributo su m\u00e9todo getter y setter .","title":"\u00bfQu\u00e9 es un Beans? 17"},{"location":"modulos/mod_5/uni001/lectura002/#como-manejo-un-beans-17","text":"Dos formas de manejar un beans desde Spring. Forma 1 utilizando un archivo xml Estructura: ./ \u251c\u2500\u2500 HELP.md \u251c\u2500\u2500 mvnw \u251c\u2500\u2500 mvnw.cmd \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 com.beansEjemplos \u2502 \u2502 \u2502 \u2514\u2500\u2500 BaseEjemplosApplication.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 com.beansEjemplos.beansxml \u2502 \u2502 \u2502 \u251c\u2500\u2500 Persona.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 beans.xml \u2514\u2500\u2500 BaseEjemplosApplication.java package com.beansEjemplos; import org.springframework.context.ApplicationContext; import org.springframework.context.support.ClassPathXmlApplicationContext; import com.beansEjemplos.beansxml.Persona; public class BaseEjemplosApplication { /** * Ejecutamos este archivo como una aplicaci\u00f3n Spring y * veremos los resultados que se presentan en la * lectura. */ public static void main(String[] args) { // todo lo del paquete es compilado e incluido // relativamente desde su paquete en el // servidor String path = \"com/beansEjemplos/beansxml/beans.xml\"; ApplicationContext appContext = new ClassPathXmlApplicationContext(path); Persona p = appContext.getBean(Persona.class); System.out.println(p.toString()); } } \u251c\u2500\u2500 Persona.java package com.beansEjemplos.beansxml; public class Persona { private String nombre; private int edad; public Persona() { } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } public int getEdad() { return edad; } public void setEdad(int edad) { this.edad = edad; } public String toString() { return \"Nombre: \" + this.nombre + \", Edad:\" + this.edad; } } beans.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"> <bean id=\"Persona\" class=\"com.beansEjemplos.beansxml.Persona\"> <property name=\"nombre\" value=\"Cristian XML\" /> <property name=\"edad\" value=\"29\" /> </bean> </beans> Se ejecuta como aplicaci\u00f3n Spring y se obtiene el valor del beans que se inici\u00f3 en el xml.","title":"\u00bfC\u00f3mo manejo un Beans? 17"},{"location":"modulos/mod_5/uni001/lectura002/#anotaciones-en-spring","text":"Esta es la segunda forma que posee Spring, para cargar beans. (Seguir lectura) Son solo definiciones, iremos viendo estas anotaciones a medida que avancemos con el documento @Component : Indica que un objeto es de tipo componente. Es el general e informa a Spring que lo considere un componente. @Controller : Indica que un objeto es de tipo controlador, se encarga de controlar la comunicaci\u00f3n entre el usuario y la aplicaci\u00f3n. @Repository : Indica que es un objeto de tipo repositorio y se encarga de implementar un almac\u00e9n de datos, o sea, es el que permite que se almacene informaci\u00f3n de una base de datos en el contenedor. Spring agrega otro tipo de servicios de bases de datos a este componente. @Service : Es el encargado de gestionar la operaci\u00f3n de negocios, agrupa varias llamadas simult\u00e1neas a repositorios. @Con\ufb01guration : Indica que la clase posee la configuraci\u00f3n principal del proyecto. @EnableAutoCon\ufb01guration : Indica que se aplicar\u00e1 la configuraci\u00f3n autom\u00e1tica. @ComponentScan : Ayuda a localizar elementos etiquetados con otras anotaciones. @SpringBootApplication : Engloba las tres anotaciones anteriores, @Con\ufb01guration , @EnableAutoCon\ufb01guration y @ComponentScan . @Autowired : Spring realiza la inyecci\u00f3n de dependencia sobre el atributo seleccionado. @PathVariable : Indica con que variable de la URL se relaciona el par\u00e1metro que se est\u00e1 usando la anotaci\u00f3n. @Bean : Indica que la clase seleccionada es un beans. https://docs.spring.io/spring-framework/docs/current/ja vadoc-api/org/springframework/context/annotation/Con\ufb01guration.html","title":"Anotaciones en Spring"},{"location":"modulos/mod_5/uni001/lectura002/#incorporando-anotaciones-21","text":"Segunda manera de integrar los beans e nuestro proyecto. Utilizando algunas de las anotaciones que se exponen: Es importante dejar que Spring construya una app nueva y modificamos el main que propone para evitar errores inesperados que nos detenga la din\u00e1mica. src \u2502\u2514\u2500\u2500 cl.lherrera \u2502 \u251c\u2500\u2500 Demo001Application.java \u2502\u2514\u2500\u2500 cl.lherrera.beans \u2502 \u2514\u2500\u2500 Persona.java \u2502\u2514\u2500\u2500 cl.lherrera.conf \u2502 \u2514\u2500\u2500 AppConfig.java /demo001/src/main/java/cl/lherrera/beans/Persona.java package cl.lherrera.beans; import org.springframework.beans.factory.annotation.Value; public class Persona { @Value(\"Foo Bar bazio\") private String nombre; @Value(\"29\") private int edad; // no olvidar poner p\u00fablico para el alcance de otros paquetes. public Persona() { } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } public int getEdad() { return edad; } public void setEdad(int edad) { this.edad = edad; } public String toString() { return \"Nombre: \" + this.nombre + \", Edad:\" + this.edad; } } /demo001/src/main/java/cl/lherrera/conf/AppConfig.java package cl.lherrera.conf; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import cl.lherrera.beans.Persona; @Configuration public class AppConfig { @Bean public Persona persona() { return new Persona(); } } /demo001/src/main/java/cl/lherrera/Demo001Application.java El nombre de la clase var\u00eda seg\u00fan el nombre seleccionado cuando se inicializa la aplicaci\u00f3n. package cl.lherrera; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.context.ApplicationContext; import org.springframework.context.annotation.AnnotationConfigApplicationContext; import cl.lherrera.beans.Persona; import cl.lherrera.conf.AppConfig; @SpringBootApplication public class Demo001Application { public static void main(String[] args) { SpringApplication.run(Demo001Application.class, args); ApplicationContext appContext = new AnnotationConfigApplicationContext(AppConfig.class); Persona p = appContext.getBean(Persona.class); System.out.println(p.toString()); } }","title":"Incorporando anotaciones 21"},{"location":"modulos/mod_5/uni001/lectura002/#logs-24","text":"","title":"Logs 24"},{"location":"modulos/mod_5/uni001/lectura002/#introduccion-24","text":"(Lectura) - se realizar\u00e1 un ejemplo de incorporar logs.","title":"Introducci\u00f3n 24"},{"location":"modulos/mod_5/uni001/lectura002/#que-es-un-log-24","text":"(Lectura) - se define en la lectura. Definici\u00f3n del tipo de salida del log: DEBUG: Son los mensajes de depuraci\u00f3n, son \u00fatiles para obtener el comportamiento mientras se desarrolla la aplicaci\u00f3n. Se representa de color verde. INFO: Son los mensajes que muestran informaci\u00f3n del programa durante la ejecuci\u00f3n, por ejemplo versiones. Se representa de color verde. WARN: Son mensajes de alerta por situaciones an\u00f3malas de la ejecuci\u00f3n, pero no afectan el funcionamiento del sistema. Se representa de color amarillo. ERROR: Son mensajes que muestran una situaci\u00f3n de errores en la ejecuci\u00f3n, aunque el programa siga funcionando, puede ser afectado. Por ejemplo, un archivo que no existe. Se representa de color rojo. FATAL: Son mensajes Cr\u00edticos, son los que hace que el programa aborte la ejecuci\u00f3n y se detenga. Se representa de color rojo.","title":"\u00bfQu\u00e9 es un Log? 24"},{"location":"modulos/mod_5/uni001/lectura002/#generando-logs-25","text":"La implementaci\u00f3n del log, ya viene en el paquete slf4j integrado a Spring. Por lo tanto solamente nos limitamos a llamar nuestro log de all\u00ed y no desde donde est\u00e1bamos acostumbrados Logger.getLog... . El archivos de propiedades posee reglas y no es tan libre como los archivos de configuraci\u00f3n que utilizamos con Servlets, o una app java. este posee configuraciones establecidas que nos ayudan a definir algunas cosas estandars, como por ejemplo el nombre que tendr\u00e1 el archivo de log entre otros. https://docs.spring.io/spring-boot/docs/current/reference/ht ml/boot-features-logging.html Estructura: ./ \u251c\u2500\u2500 HELP.md \u251c\u2500\u2500 mvnw \u251c\u2500\u2500 mvnw.cmd \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 Logs001Application.java \u2502 \u2502 \u2514\u2500\u2500 resources \u2502 \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2502 \u251c\u2500\u2500 static \u2502 \u2502 \u2514\u2500\u2500 templates NO OLVIDAR QUE LAS PROPIEDADES NO DEBEN SOBRARLES ESPACIOS EN BLANCO POR QUE PUEDEN PRODUCIR PROBLEMAS. Que no se construya el app.log despu\u00e9s del refresh en el ra\u00edz, es un indicio que algo no anda bien. /logs001/src/main/resources/application.properties # Propiedades del log logging.file.name=app.log logging.file.max-size=10MB logging.level.root=INFO logging.level.org.springframework.web=DEBUG /logs001/src/main/java/cl/lherrera/Logs001Application.java package cl.lherrera; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class Logs001Application { private final static Logger logger = LoggerFactory.getLogger(Logs001Application.class); public static void main(String[] args) { SpringApplication.run(Logs001Application.class, args); logger.debug(\"debug log\"); logger.info(\"info log\"); logger.warn(\"warning log\"); logger.error(\"error log\"); } }","title":"Generando logs 25"},{"location":"modulos/mod_5/uni001/lectura002/#proyecto-controlador-vista-28","text":"En este proyecto usaremos una librer\u00eda que nos ayuda a manipular p\u00e1ginas est\u00e1ticas. Se puede incluir desde la concepci\u00f3n del proyecto incluyendo spring web y thymeleaf , este \u00faltimo es quien nos da el poder de manipulaci\u00f3n. Significa hoja de tomillo que es su logo. Estructura ./ \u251c\u2500\u2500 HELP.md \u251c\u2500\u2500 mvnw \u251c\u2500\u2500 mvnw.cmd \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u251c\u2500\u2500 EjemplomvApplication.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 controller \u2502 \u2502 \u2502 \u2514\u2500\u2500 HomeController.java \u2502 \u2502 \u2514\u2500\u2500 resources \u2502 \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2502 \u251c\u2500\u2500 static \u2502 \u2502 \u2502 \u2514\u2500\u2500 data.txt \u2502 \u2502 \u2514\u2500\u2500 templates \u2502 \u2502 \u2514\u2500\u2500 main.html Es un proyecto que interact\u00faa con la vista, desde una petici\u00f3n GET a un controlador. No olvidar incluir thymeleaf , cuando se est\u00e9 creando el proyecto. /ejemplomv/pom.xml \u001c <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.6.RELEASE</version> <relativePath/> <!-- lookup parent from repository --> </parent> <groupId>cl.lherrera</groupId> <artifactId>beansAnotados</artifactId> <version>0.0.1-SNAPSHOT</version> <name>ejemplomv</name> <description>Demo project for Spring Boot</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-thymeleaf</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project> /ejemplomv/src/main/resources/static/data.txt PRODUCTO UNO PRODUCTO DOS PRODUCTO TRES /ejemplomv/src/main/resources/templates/main.html <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>P\u00e1gina - muestra</title> </head> <body> <h1>P\u00e1gina de productos</h1> <p th:text=\"'Producto 1: ' + ${nombre1} + '!'\" /> <p th:text=\"'Producto 2: ' + ${nombre2} + '!'\" /> <p th:text=\"'Producto 3: ' + ${nombre3} + '!'\" /> </body> </html> /ejemplomv/src/main/java/cl/lherrera/controller/HomeController.java package cl.lherrera.controller; import java.io.BufferedReader; import java.io.FileReader; import java.util.ArrayList; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.RequestMapping; @Controller public class HomeController { // ac\u00e1 es una interfaz Logger. private final static Logger logger = LoggerFactory.getLogger(HomeController.class); @RequestMapping(\"/\") public String servicioImprime(Model modelo) { String nombre = \"src/main/resources/static/data.txt\"; ArrayList<String> p = new ArrayList<String>(); try { FileReader fr = new FileReader(nombre); // buffer inyectado !! BufferedReader br = new BufferedReader(fr); String data = br.readLine(); while (data != null) { p.add(data); data = br.readLine(); } br.close(); fr.close(); } catch (Exception e) { logger.error(\"Error leyendo el fichero \" + nombre + \": \" + e); } modelo.addAttribute(\"nombre1\", p.get(0)); modelo.addAttribute(\"nombre2\", p.get(1)); modelo.addAttribute(\"nombre3\", p.get(2)); return \"main\"; } } /ejemplomv/src/main/java/cl/lherrera/EjemplomvApplication.java package cl.lherrera; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class EjemplomvApplication { public static void main(String[] args) { SpringApplication.run(EjemplomvApplication.class, args); } } Resultado: <!DOCTYPE html><html><head><meta charset=\"UTF-8\"><title>P\u00e1gina - muestra</title></head><body><h1>P\u00e1gina de productos</h1><p >Producto 1: PRODUCTO UNO !</p><p >Producto 2: PRODUCTO DOS !</p><p >Producto 3: PRODUCTO TRES!</p></body></html> http://localhost:8080/ La petici\u00f3n se realiza a / , ya que no se solicita ning\u00fan otro endpoint \u001d.","title":"Proyecto Controlador-Vista 28"},{"location":"modulos/mod_5/uni001/lectura002/#probar","text":"Cambiar los endpoints . Usar un foreach :: https://www.baeldung.com/thymeleaf-iteration \u001d <tr th:each=\"student: ${students}\"> <td th:text=\"${student.id}\" /> <td th:text=\"${student.name}\" /> </tr>","title":"Probar"},{"location":"modulos/mod_5/uni002/lectura001/","text":"Unidad 2.1 - Vista - Controlador Esta gu\u00eda se sigue con la lectura. 2.1.1 Seguimiento de lectura (con p\u00e1ginas) Patr\u00f3n de dise\u00f1o MVC Introducci\u00f3n (1) (Lectura), agregar propio entendimiento. MVC (Model View Controller) (2) (Lectura), agregar propio entendimiento. Spring MVC (6) Introducci\u00f3n Se explica que Spring dispone nativa mente de esta arquitectura. Muestra algunas herramientas por capa (vista controlador). (Seguir lectura). Caracter\u00edsticas de Spring MVC (6) Se explican ventajas. Front Controller (6). patr\u00f3n dise\u00f1o un solo controlador como punto de entrada a la aplicaci\u00f3n. El Front Controller, necesita de un objeto Dispatcher \u001d (Despachador), el cual se encarga de redireccionar \u001d todas las peticiones de los usuarios, que ha aceptado el Front Controller, a los objetos controladores de Spring. (Seguir lectura) <?xml version=\"1.0\" encoding=\"UTF-8\"?> <web-app metadata-complete=\"true\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://java.sun.com/xml/ns/javaee\" xmlns:web=\"http://java.sun.com/xml/ns/javaee\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\" id=\"WebApp_ID\" version=\"3.0\"> <display-name>ContactManager</display-name> <servlet> <servlet-name>spring</servlet-name> <servlet-class> org.springframework.web.servlet.DispatcherServlet </servlet-class> <load-on-startup>1</load-on-startup> </servlet> <servlet-mapping> <servlet-name>spring</servlet-name> <url-pattern>*.html</url-pattern> </servlet-mapping> </web-app> Herramientas proporcionadas para la Vista - JSTL Agregar JSTL a nuestro proyecto (9) <dependency> <groupId>javax.servlet</groupId> <artifactId>jstl</artifactId> </dependency> <dependency> <groupId>javax.servlet</groupId> <artifactId>javax.servlet-api</artifactId> </dependency> Agregar JSTL a nuestra vista ( jsp \u001f) (10) <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %> Funciones de JSTL (10) <c:out value=\"${variable}\" /> <c:set var=\"edad\" value=\"${18}\"/> <c:set var=\"edad\" value=\"${18}\"/> <c:if test = \"${edad > 17}\"> <p>Mayor de edad<p> </c:if> <c:if test = \"${edad > 17}\" var = \"result\"> <p>Mayor de edad<p> </c:if> <c:choose> <c:when test=\"${condicion1}\"> //Aqu\u00ed van las l\u00edneas a ejecutarse en caso de que condicion1 se cumpla </c:when> <c:when test=\"${condition2}\"> //Aqu\u00ed van las l\u00edneas a ejecutarse en caso de que condicion2 se cumpla </c:when> <c:otherwise> /*Si ninguna de las condiciones c:when anteriores se ha cumplido, se ejecutar\u00e1 esta fracci\u00f3n de c\u00f3digo.*/ </c:otherwise> </c:choose> <c:forEach var=\"contador\" begin=\"0\" end=\"10\"> //Esto hace un for, contando desde 0 hasta 10 </c:forEach> <c:forEach items=\"${listaMensajes}\" var=\"mensaje\"> <c:out value=\"${mensaje}\" /> </c:forEach> Spring MVC Form \u001d (12) nos permite utilizar el modelo de Spring devuelto por el controlador. <%@taglib prefix=\"form\" uri=\"http://www.springframework.org/tags/form\" %> <form:form id=\"frmAcciones\" modelAttribute=\"contact\" action=\"/addContact\"> <!-- Aqu\u00ed va el c\u00f3digo html, jstl u otro que pinte en pantalla el formulario --> </form> <form:form id=\"frmAcciones\" modelAttribute=\"contact\" action=\"/addContact\"> <div> <fieldset> <legend>Mantenedor de Contactos</legend> <table border=\"1\"> <tr> <td>Nombre: </td> <td><input type=\"text\" id=\"idNombre\" name=\"nombre\" /></td> <td>Apellido Paterno: </td> <td><input type=\"text\" id=\"idApellidoPaterno\" name=\"apellidoPaterno\" /></td> </tr> <tr> <td>Direcci\u00f3n: </td> <td><input type=\"text\" id=\"idDireccion\" name=\"direccion\" /></td> <td>Tel\u00e9fono: </td> <td><input type=\"text\" id=\"idTelefono\" name=\"telefono\" /></td> </tr> <tr> <td colspan=\"4\"> <input type=\"button\" value=\"Buscar\" /> <input type=\"button\" value=\"Agregar\" onclick=\"submitFormAction('/contactManager/addContact', 'post')\" /> <input type=\"button\" value=\"Eliminar\" /> </td> </tr> </table> </fieldset> </div> </form:form> Creaci\u00f3n de un proyecto con Spring MVC (14) Se muestra como iniciar un proyecto Spring, esto ya lo hemos hecho nos podemos saltar esta parte. Controlador y la anotaci\u00f3n @Controller (27) Introducci\u00f3n (27) (lectura) @Controller (27) import org.springframework.stereotype.Controller; @Controller public class HelloController { . . . } @RequestMapping (28) @RequestMapping(value=\"/accionMetodo\", method=RequestMethod.GET) public String nombreMetodo(ModelMap model) { model.put(\"saludo\", \"Hola Mundo Spring desde mi controlador\"); return \"hello\"; } Dispatcher \u001d (29) <?xml version=\"1.0\" encoding=\"UTF-8\"?> <web-app metadata-complete=\"true\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://java.sun.com/xml/ns/javaee\" xmlns:web=\"http://java.sun.com/xml/ns/javaee\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\" id=\"WebApp_ID\" version=\"3.0\"> <display-name>holamundospringmvc</display-name> <servlet> <servlet-name>spring</servlet-name> <servlet-class> org.springframework.web.servlet.DispatcherServlet </servlet-class> <load-on-startup>1</load-on-startup> </servlet> <servlet-mapping> <servlet-name>spring</servlet-name> <url-pattern>/*</url-pattern> </servlet-mapping> </web-app> Creando la vista (33) <%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\" pageEncoding=\"ISO-8859-1\"%> <!DOCTYPE html> <html> <head> <meta charset=\"ISO-8859-1\"> <title>Insert title here</title> </head> <body> Hola Mundo Spring MVC !!! </body> </html> Con\ufb01gurando \u001d la vista con MVC (34) Cuidado con los espacios spring.mvc.view.prefix=/WEB-INF/ spring.mvc.view.suffix=.jsp Creando el controlador (39) package cl.desafiolatam.holamundospringmvc.controller; import org.springframework.stereotype.Controller; @Controller public class HelloController { /** */} package cl.desafiolatam.holamundospringmvc.controller; import org.springframework.stereotype.Controller; @Controller public class HelloController { public String hello() { return \"hello\"; } } package cl.desafiolatam.holamundospringmvc.controller; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; @Controller public class HelloController { @RequestMapping(method=RequestMethod.GET) public String hello() { return \"hello\"; } } Iguales, pero la lectura la repite package cl.desafiolatam.holamundospringmvc.controller; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; @Controller public class HelloController { @RequestMapping(method=RequestMethod.GET) public String hello() { return \"hello\"; } } Creando el controlador - anotaci\u00f3n @RequestMapping \u001d (45) http://localhost:8080/hello @RequestMapping(method=RequestMethod.GET) public String sayGoodbye() { return \"hello\"; } package cl.desafiolatam.holamundospringmvc.controller; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; @Controller public class HelloController { @RequestMapping(value=\"sayhello\", method=RequestMethod.GET) public String sayHello() { return \"hello\"; } @RequestMapping(value=\"saygoodbye\", method=RequestMethod.GET) public String sayGoodbye() { return \"hello\"; } } package cl.desafiolatam.holamundospringmvc.controller; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; @Controller @RequestMapping(value=\"/saludos\") public class HelloController { @RequestMapping(value=\"/sayhello\", method=RequestMethod.GET) public String sayHello() { return \"hello\"; } @RequestMapping(value=\"/saygoodbye\", method=RequestMethod.GET) public String sayGoodbye() { return \"hello\"; } } Entregar datos a la vista desde el controlador (52) Objeto ModelMap (53) @RequestMapping(value=\"/sayhello\", method=RequestMethod.GET) public String sayHello(ModelMap model) { return \"hello\"; } @RequestMapping(value=\"/saygoodbye\", method=RequestMethod.GET) public String sayGoodbye(ModelMap model) { return \"hello\"; } @RequestMapping(value=\"/sayhello\", method=RequestMethod.GET) public String sayHello(ModelMap model) { model.put(\"saludo\", \"Hola Mundo Spring desde mi controlador\"); return \"hello\"; } @RequestMapping(value=\"/saygoodbye\", method=RequestMethod.GET) public String sayGoodbye(ModelMap model) { model.put(\"saludo\", \"Adios Mundo Spring desde mi controlador\"); return \"hello\"; } <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\"%> <dependency> <groupId>javax.servlet</groupId> <artifactId>jstl</artifactId> </dependency> <dependency> <groupId>javax.servlet</groupId> <artifactId>javax.servlet-api</artifactId> </dependency> <c:out value=\"${saludo}\" /> @RequestMapping(value=\"/sayhello\", method=RequestMethod.GET) public String sayHello(ModelMap model) { model.put(\"saludo\", \"Hola Mundo Spring desde mi controlador\"); return \"hello\"; } @RequestMapping(value=\"/saygoodbye\", method=RequestMethod.GET) public String sayGoodbye(ModelMap model) { model.put(\"saludo\", \"Adios Mundo Spring desde mi controlador\"); return \"hello\"; } package cl.desafiolatam.holamundospringmvc.controller; import org.springframework.stereotype.Controller; import org.springframework.ui.ModelMap; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; @Controller @RequestMapping(value=\"/saludos\", method=RequestMethod.GET) public class HelloController { @RequestMapping(value=\"/sayhello\", method=RequestMethod.GET) public String sayHello(ModelMap model) { model.put(\"saludo\", \"Hola Mundo Spring desde mi controlador\"); return \"hello\"; } @RequestMapping(value=\"/saygoodbye\", method=RequestMethod.GET) public String sayGoodbye(ModelMap model) { model.put(\"saludo\", \"Adios Mundo Spring desde mi controlador\"); return \"hello\"; } } <%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\" pageEncoding=\"ISO-8859-1\"%> <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %> <!DOCTYPE html> <html> <head> <meta charset=\"ISO-8859-1\"> <title>Insert title here</title> </head> <body> <c:out value=\"${saludo}\" /> </body> </html> <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.1.6.RELEASE</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>cl.desafiolatam</groupId> <artifactId>holamundospringmvc</artifactId> <version>0.0.1-SNAPSHOT</version> <packaging>war</packaging> <name>HolaMundoSpringMVC</name> <description>Demo project for Spring Boot</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> <scope>provided</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency> <dependency> <groupId>org.apache.tomcat.embed</groupId> <artifactId>tomcat-embed-jasper</artifactId> <scope>provided</scope> </dependency> <dependency> <groupId>javax.servlet</groupId> <artifactId>jstl</artifactId> </dependency> <dependency> <groupId>javax.servlet</groupId> <artifactId>javax.servlet-api</artifactId> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project> Recibir datos en el controlador (59) Enviando datos al controlador (61) <%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\" pageEncoding=\"ISO-8859-1\"%> <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %> <!DOCTYPE html> <html> <head> <meta charset=\"ISO-8859-1\"> <title>Insert title here</title> </head> <body> <form action=\"/saludos/sendData\" method=\"post\" id=\"frmSend\"> Dato a enviar: <input type=\"text\" id=\"txtData\" name=\"data\" /> <input type=\"submit\" id=\"btnSend\" value=\"Enviar dato\" /> </form> </body> </html> <input type=\"text\" id=\"txtData\" name=\"data\"/> @RequestMapping(value=\"/initSendData\", method=RequestMethod.GET) public String initSendData(ModelMap model) { return \"sendData\"; } @RequestMapping(value=\"/sendData\", method=RequestMethod.POST) public String sendData(ModelMap model, @RequestParam(value=\"data\", required = true) String dataReceived) { System.out.println(\"El dato recibido desde la vista sendData es: \" + dataReceived); return \"sendData\"; } @Controller @RequestMapping(value=\"/saludos\", method=RequestMethod.GET) public class HelloController { private List<String> listaMensajes; public HelloController() { // TODO Auto-generated constructor stub super(); listaMensajes = new ArrayList<String>(); } . . . @RequestMapping(value=\"/addData\", method=RequestMethod.GET) public String saveData(ModelMap model, @RequestParam(value=\"data\", required = false) String dataReceived) { if(dataReceived != null) { listaMensajes.add(dataReceived); } System.out.println(\"El dato recibido desde la vista sendData es: \" + dataReceived); model.put(\"listaMensajes\", listaMensajes); return \"addData\"; } public String saveData(ModelMap model, @RequestParam(value=\"data\", required = false) if(dataReceived != null) { listaMensajes.add(dataReceived); } model.put(\"listaMensajes\", listaMensajes); <%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\" pageEncoding=\"ISO-8859-1\"%> <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %> <!DOCTYPE html> <html> <head> <meta charset=\"ISO-8859-1\"> <title>Insert title here</title> </head> <body> <form action=\"/saludos/addData\" method=\"get\" id=\"frmAdd\"> Dato a enviar: <input type=\"text\" id=\"txtData\" name=\"data\" /> <input type=\"submit\" id=\"btnAdd\" value=\"Add dato\" /> </form> <c:forEach items=\"${listaMensajes}\" var=\"mensaje\"> <c:out value=\"${mensaje}\" /><br /> </c:forEach> </body> </html> <c:forEach items=\"${listaMensajes}\" var=\"mensaje\"> <c:out value=\"${mensaje}\" /><br /> </c:forEach> <c:out value=\"${mensaje}\" /><br /> @Scope(\"request\") public class HelloController { private List<String> listaMensajes; . . . 2.1.2 Implementaci\u00f3n del proyecto. \ud83e\udd4b La lectura en general muestra secciones de c\u00f3digo no funcionales en un ejemplo real. Es por eso que se implementa el proyecto expuesto, que posee las caracter\u00edsticas Vista - Controlador. Asumo que se entiende de mala forma que el modelo es una base de datos, pero para la aplicaci\u00f3n de la lectura est\u00e1 bien. Estructura ./ \u251c\u2500\u2500 HELP.md \u251c\u2500\u2500 mvnw \u251c\u2500\u2500 mvnw.cmd \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u251c\u2500\u2500 HolamundospringmvcApplication.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 controller \u2502 \u2502 \u2502 \u2514\u2500\u2500 HelloController.java \u2502 \u2502 \u251c\u2500\u2500 resources \u2502 \u2502 \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2502 \u2502 \u251c\u2500\u2500 static \u2502 \u2502 \u2502 \u2514\u2500\u2500 templates \u2502 \u2502 \u2514\u2500\u2500 webapp \u2502 \u2502 \u2514\u2500\u2500 WEB-INF \u2502 \u2502 \u251c\u2500\u2500 addData.jsp \u2502 \u2502 \u251c\u2500\u2500 hello.jsp \u2502 \u2502 \u251c\u2500\u2500 index.jsp \u2502 \u2502 \u251c\u2500\u2500 sendData.jsp \u2502 \u2502 \u2514\u2500\u2500 web.xml \u2502 \u2514\u2500\u2500 test \u2502 \u2514\u2500\u2500 java \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 HolamundospringmvcApplicationTests.java \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2502 \u2514\u2500\u2500 maven \u2502 \u2502 \u2514\u2500\u2500 cl.lherrera \u2502 \u2502 \u2514\u2500\u2500 holamundospringmvc \u2502 \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2502 \u2514\u2500\u2500 pom.xml \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u251c\u2500\u2500 HolamundospringmvcApplication.class \u2502 \u2514\u2500\u2500 controller \u2502 \u2514\u2500\u2500 HelloController.class \u2514\u2500\u2500 test-classes \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 HolamundospringmvcApplicationTests.class 27 directories, 20 files Archivos modificados /holamundospringmvc/src/main/java/cl/lherrera/controller/HelloController.java \u00danico controlador de la aplicaci\u00f3n, se encarga de atender las peticiones del usuario. /holamundospringmvc/src/main/resources/application.properties Se indica a la aplicaci\u00f3n, donde debe buscar los archivos jsp . /holamundospringmvc/src/main/webapp/WEB-INF/addData.jsp Vista con el formulario que env\u00eda datos. /holamundospringmvc/src/main/webapp/WEB-INF/hello.jsp Vista que se carga con: sayhello , saygoodbye /holamundospringmvc/src/main/webapp/WEB-INF/index.jsp Vista encargada de ejecutar el inicio de la aplicaci\u00f3n, no posee un controlador, se ejecuta por defecto en / /holamundospringmvc/src/main/webapp/WEB-INF/sendData.jsp Vista que env\u00eda datos de initSendData a sendData /holamundospringmvc/src/main/webapp/WEB-INF/web.xml Descriptor de despliegue, Solamente indicamos el DispatcherServlet \u001d. /holamundospringmvc/pom.xml Contendr\u00e1 las dependencias necesarias para el soporte de jsp y jstl . /holamundospringmvc/src/main/java/cl/lherrera /controller/ /HelloController.java package cl.lherrera.controller; import java.util.ArrayList; import java.util.List; import org.slf4j.Logger; import org.slf4j.LoggerFactory; //import org.springframework.context.annotation.Scope; import org.springframework.stereotype.Controller; import org.springframework.ui.ModelMap; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RequestParam; @Controller //@Scope(\"request\") // si queremos que no guarde los datos en la sesi\u00f3n, probar con addData // no funciona en el m\u00e9todo, solamente a nivel de clase @RequestMapping(value = \"/saludos\") public class HelloController { private List<String> listaMensajes; private Logger logger = LoggerFactory.getLogger(HelloController.class.getName()); public HelloController() { listaMensajes = new ArrayList<>(); } @RequestMapping(value = \"/sayhello\", method = RequestMethod.GET) public String sayHello(ModelMap model) { model.put(\"saludo\", \"Hola Mundo Spring desde mi controlador\"); model.put(\"saluda\", true); return \"hello\"; } @RequestMapping(value = \"/saygoodbye\", method = RequestMethod.GET) public String sayGoodbye(ModelMap model) { model.put(\"saludo\", \"Adios Mundo Spring desde mi controlador\"); model.put(\"despide\", true); return \"hello\"; } @RequestMapping(value = \"/initSendData\", method = RequestMethod.GET) public String initSendData(ModelMap model) { return \"sendData\"; } @RequestMapping(value = \"/sendData\", method = RequestMethod.POST) public String sendData(ModelMap model, @RequestParam(value = \"data\", required = true) String dataReceived) { logger.info(\"El dato recibido desde la vista sendData es: \" + dataReceived); return \"sendData\"; } @RequestMapping(value = \"/addData\", method = RequestMethod.GET) public String saveData( ModelMap model, @RequestParam(value = \"data\", required = false) String dataReceived) { if (dataReceived != null) { listaMensajes.add(dataReceived); } logger.info(\"El dato recibido desde la vista sendData es: \" + dataReceived); model.put(\"listaMensajes\", listaMensajes); return \"addData\"; } } /holamundospringmvc/src/main/resources /application.properties spring.mvc.view.prefix=/WEB-INF/ spring.mvc.view.suffix=.jsp /holamundospringmvc/src/main/webapp/WEB-INF/ /addData.jsp <%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\" pageEncoding=\"ISO-8859-1\"%> <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\"%> <!DOCTYPE html> <html> <head> <meta charset=\"ISO-8859-1\"> <title>Insert title here</title> </head> <body> <form action=\"/saludos/addData\" method=\"get\" id=\"frmAdd\"> Dato a enviar: <input type=\"text\" id=\"txtData\" name=\"data\" /> <input type=\"submit\" id=\"btnAdd\" value=\"Add dato\" /> </form> <c:forEach items=\"${listaMensajes}\" var=\"mensaje\"> <c:out value=\"${mensaje}\" /> <br /> </c:forEach> </body> </html> /hello.jsp <%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\" pageEncoding=\"ISO-8859-1\"%> <%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%> <!DOCTYPE html> <html> <head> <meta charset=\"ISO-8859-1\"> <title>Insert title here</title> </head> <body> <h1> <c:out value=\"${saludo}\" /> </h1> Se muestra el resultado del <c:if test=\"${saluda}\"> <pre> <code>model.put(\"saludo\", \"Hola Mundo Spring desde mi controlador\");</code> </pre> </c:if> <c:if test=\"${despide}\"> <pre> <code>model.put(\"saludo\", \"Adios Mundo Spring desde mi controlador\");</code> </pre> </c:if> </body> </html> /index.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Insert title here</title> </head> <body> <h1>Soy el index, no necesito un controlador</h1> Ya que el las propiedades del proyecto se design\u00f3 el direcctoirio de los archivos jsp <code> <pre> spring.mvc.view.prefix=/WEB-INF/ spring.mvc.view.suffix=.jsp </pre> </code> <strong>Necesita reniciar el servidor para ver los cambios</strong> </body> </html> /sendData.jsp <%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\" pageEncoding=\"ISO-8859-1\"%> <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\"%> <!DOCTYPE html> <html> <head> <meta charset=\"ISO-8859-1\"> <title>Insert title here</title> </head> <body> <form action=\"/saludos/sendData\" method=\"post\" id=\"frmSend\"> Dato a enviar: <input type=\"text\" id=\"txtData\" name=\"data\" /> <input type=\"submit\" id=\"btnSend\" value=\"Enviar dato\" /> </form> </body> </html> /web.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\" version=\"3.1\"> <display-name>Hello application</display-name> <servlet> <servlet-name>spring</servlet-name> <servlet-class> org.springframework.web.servlet.DispatcherServlet </servlet-class> <load-on-startup>1</load-on-startup> </servlet> <servlet-mapping> <servlet-name>spring</servlet-name> <url-pattern>/*</url-pattern> </servlet-mapping> </web-app> /holamundospringmvc/pom.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.6.RELEASE</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>cl.lherrera</groupId> <artifactId>holamundospringmvc</artifactId> <version>0.0.1-SNAPSHOT</version> <name>holamundospringmvc</name> <description>ejemplo lectura spring mvc</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> <!-- SOPORTE ARCHIVOS JSP --> <dependency> <groupId>org.apache.tomcat.embed</groupId> <artifactId>tomcat-embed-jasper</artifactId> <scope>provided</scope> </dependency> <!-- SOPORTE ARCHIVOS JSP #--> <!-- JSTL --> <dependency> <groupId>javax.servlet</groupId> <artifactId>jstl</artifactId> </dependency> <dependency> <groupId>javax.servlet</groupId> <artifactId>javax.servlet-api</artifactId> </dependency> <!-- JSTL #--> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project>","title":"Lectura001"},{"location":"modulos/mod_5/uni002/lectura001/#unidad-21-vista-controlador","text":"Esta gu\u00eda se sigue con la lectura.","title":"Unidad 2.1 - Vista - Controlador"},{"location":"modulos/mod_5/uni002/lectura001/#211-seguimiento-de-lectura-con-paginas","text":"Patr\u00f3n de dise\u00f1o MVC Introducci\u00f3n (1) (Lectura), agregar propio entendimiento. MVC (Model View Controller) (2) (Lectura), agregar propio entendimiento. Spring MVC (6) Introducci\u00f3n Se explica que Spring dispone nativa mente de esta arquitectura. Muestra algunas herramientas por capa (vista controlador). (Seguir lectura). Caracter\u00edsticas de Spring MVC (6) Se explican ventajas. Front Controller (6). patr\u00f3n dise\u00f1o un solo controlador como punto de entrada a la aplicaci\u00f3n. El Front Controller, necesita de un objeto Dispatcher \u001d (Despachador), el cual se encarga de redireccionar \u001d todas las peticiones de los usuarios, que ha aceptado el Front Controller, a los objetos controladores de Spring. (Seguir lectura) <?xml version=\"1.0\" encoding=\"UTF-8\"?> <web-app metadata-complete=\"true\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://java.sun.com/xml/ns/javaee\" xmlns:web=\"http://java.sun.com/xml/ns/javaee\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\" id=\"WebApp_ID\" version=\"3.0\"> <display-name>ContactManager</display-name> <servlet> <servlet-name>spring</servlet-name> <servlet-class> org.springframework.web.servlet.DispatcherServlet </servlet-class> <load-on-startup>1</load-on-startup> </servlet> <servlet-mapping> <servlet-name>spring</servlet-name> <url-pattern>*.html</url-pattern> </servlet-mapping> </web-app> Herramientas proporcionadas para la Vista - JSTL Agregar JSTL a nuestro proyecto (9) <dependency> <groupId>javax.servlet</groupId> <artifactId>jstl</artifactId> </dependency> <dependency> <groupId>javax.servlet</groupId> <artifactId>javax.servlet-api</artifactId> </dependency> Agregar JSTL a nuestra vista ( jsp \u001f) (10) <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %> Funciones de JSTL (10) <c:out value=\"${variable}\" /> <c:set var=\"edad\" value=\"${18}\"/> <c:set var=\"edad\" value=\"${18}\"/> <c:if test = \"${edad > 17}\"> <p>Mayor de edad<p> </c:if> <c:if test = \"${edad > 17}\" var = \"result\"> <p>Mayor de edad<p> </c:if> <c:choose> <c:when test=\"${condicion1}\"> //Aqu\u00ed van las l\u00edneas a ejecutarse en caso de que condicion1 se cumpla </c:when> <c:when test=\"${condition2}\"> //Aqu\u00ed van las l\u00edneas a ejecutarse en caso de que condicion2 se cumpla </c:when> <c:otherwise> /*Si ninguna de las condiciones c:when anteriores se ha cumplido, se ejecutar\u00e1 esta fracci\u00f3n de c\u00f3digo.*/ </c:otherwise> </c:choose> <c:forEach var=\"contador\" begin=\"0\" end=\"10\"> //Esto hace un for, contando desde 0 hasta 10 </c:forEach> <c:forEach items=\"${listaMensajes}\" var=\"mensaje\"> <c:out value=\"${mensaje}\" /> </c:forEach> Spring MVC Form \u001d (12) nos permite utilizar el modelo de Spring devuelto por el controlador. <%@taglib prefix=\"form\" uri=\"http://www.springframework.org/tags/form\" %> <form:form id=\"frmAcciones\" modelAttribute=\"contact\" action=\"/addContact\"> <!-- Aqu\u00ed va el c\u00f3digo html, jstl u otro que pinte en pantalla el formulario --> </form> <form:form id=\"frmAcciones\" modelAttribute=\"contact\" action=\"/addContact\"> <div> <fieldset> <legend>Mantenedor de Contactos</legend> <table border=\"1\"> <tr> <td>Nombre: </td> <td><input type=\"text\" id=\"idNombre\" name=\"nombre\" /></td> <td>Apellido Paterno: </td> <td><input type=\"text\" id=\"idApellidoPaterno\" name=\"apellidoPaterno\" /></td> </tr> <tr> <td>Direcci\u00f3n: </td> <td><input type=\"text\" id=\"idDireccion\" name=\"direccion\" /></td> <td>Tel\u00e9fono: </td> <td><input type=\"text\" id=\"idTelefono\" name=\"telefono\" /></td> </tr> <tr> <td colspan=\"4\"> <input type=\"button\" value=\"Buscar\" /> <input type=\"button\" value=\"Agregar\" onclick=\"submitFormAction('/contactManager/addContact', 'post')\" /> <input type=\"button\" value=\"Eliminar\" /> </td> </tr> </table> </fieldset> </div> </form:form> Creaci\u00f3n de un proyecto con Spring MVC (14) Se muestra como iniciar un proyecto Spring, esto ya lo hemos hecho nos podemos saltar esta parte. Controlador y la anotaci\u00f3n @Controller (27) Introducci\u00f3n (27) (lectura) @Controller (27) import org.springframework.stereotype.Controller; @Controller public class HelloController { . . . } @RequestMapping (28) @RequestMapping(value=\"/accionMetodo\", method=RequestMethod.GET) public String nombreMetodo(ModelMap model) { model.put(\"saludo\", \"Hola Mundo Spring desde mi controlador\"); return \"hello\"; } Dispatcher \u001d (29) <?xml version=\"1.0\" encoding=\"UTF-8\"?> <web-app metadata-complete=\"true\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://java.sun.com/xml/ns/javaee\" xmlns:web=\"http://java.sun.com/xml/ns/javaee\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\" id=\"WebApp_ID\" version=\"3.0\"> <display-name>holamundospringmvc</display-name> <servlet> <servlet-name>spring</servlet-name> <servlet-class> org.springframework.web.servlet.DispatcherServlet </servlet-class> <load-on-startup>1</load-on-startup> </servlet> <servlet-mapping> <servlet-name>spring</servlet-name> <url-pattern>/*</url-pattern> </servlet-mapping> </web-app> Creando la vista (33) <%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\" pageEncoding=\"ISO-8859-1\"%> <!DOCTYPE html> <html> <head> <meta charset=\"ISO-8859-1\"> <title>Insert title here</title> </head> <body> Hola Mundo Spring MVC !!! </body> </html> Con\ufb01gurando \u001d la vista con MVC (34) Cuidado con los espacios spring.mvc.view.prefix=/WEB-INF/ spring.mvc.view.suffix=.jsp Creando el controlador (39) package cl.desafiolatam.holamundospringmvc.controller; import org.springframework.stereotype.Controller; @Controller public class HelloController { /** */} package cl.desafiolatam.holamundospringmvc.controller; import org.springframework.stereotype.Controller; @Controller public class HelloController { public String hello() { return \"hello\"; } } package cl.desafiolatam.holamundospringmvc.controller; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; @Controller public class HelloController { @RequestMapping(method=RequestMethod.GET) public String hello() { return \"hello\"; } } Iguales, pero la lectura la repite package cl.desafiolatam.holamundospringmvc.controller; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; @Controller public class HelloController { @RequestMapping(method=RequestMethod.GET) public String hello() { return \"hello\"; } } Creando el controlador - anotaci\u00f3n @RequestMapping \u001d (45) http://localhost:8080/hello @RequestMapping(method=RequestMethod.GET) public String sayGoodbye() { return \"hello\"; } package cl.desafiolatam.holamundospringmvc.controller; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; @Controller public class HelloController { @RequestMapping(value=\"sayhello\", method=RequestMethod.GET) public String sayHello() { return \"hello\"; } @RequestMapping(value=\"saygoodbye\", method=RequestMethod.GET) public String sayGoodbye() { return \"hello\"; } } package cl.desafiolatam.holamundospringmvc.controller; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; @Controller @RequestMapping(value=\"/saludos\") public class HelloController { @RequestMapping(value=\"/sayhello\", method=RequestMethod.GET) public String sayHello() { return \"hello\"; } @RequestMapping(value=\"/saygoodbye\", method=RequestMethod.GET) public String sayGoodbye() { return \"hello\"; } } Entregar datos a la vista desde el controlador (52) Objeto ModelMap (53) @RequestMapping(value=\"/sayhello\", method=RequestMethod.GET) public String sayHello(ModelMap model) { return \"hello\"; } @RequestMapping(value=\"/saygoodbye\", method=RequestMethod.GET) public String sayGoodbye(ModelMap model) { return \"hello\"; } @RequestMapping(value=\"/sayhello\", method=RequestMethod.GET) public String sayHello(ModelMap model) { model.put(\"saludo\", \"Hola Mundo Spring desde mi controlador\"); return \"hello\"; } @RequestMapping(value=\"/saygoodbye\", method=RequestMethod.GET) public String sayGoodbye(ModelMap model) { model.put(\"saludo\", \"Adios Mundo Spring desde mi controlador\"); return \"hello\"; } <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\"%> <dependency> <groupId>javax.servlet</groupId> <artifactId>jstl</artifactId> </dependency> <dependency> <groupId>javax.servlet</groupId> <artifactId>javax.servlet-api</artifactId> </dependency> <c:out value=\"${saludo}\" /> @RequestMapping(value=\"/sayhello\", method=RequestMethod.GET) public String sayHello(ModelMap model) { model.put(\"saludo\", \"Hola Mundo Spring desde mi controlador\"); return \"hello\"; } @RequestMapping(value=\"/saygoodbye\", method=RequestMethod.GET) public String sayGoodbye(ModelMap model) { model.put(\"saludo\", \"Adios Mundo Spring desde mi controlador\"); return \"hello\"; } package cl.desafiolatam.holamundospringmvc.controller; import org.springframework.stereotype.Controller; import org.springframework.ui.ModelMap; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; @Controller @RequestMapping(value=\"/saludos\", method=RequestMethod.GET) public class HelloController { @RequestMapping(value=\"/sayhello\", method=RequestMethod.GET) public String sayHello(ModelMap model) { model.put(\"saludo\", \"Hola Mundo Spring desde mi controlador\"); return \"hello\"; } @RequestMapping(value=\"/saygoodbye\", method=RequestMethod.GET) public String sayGoodbye(ModelMap model) { model.put(\"saludo\", \"Adios Mundo Spring desde mi controlador\"); return \"hello\"; } } <%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\" pageEncoding=\"ISO-8859-1\"%> <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %> <!DOCTYPE html> <html> <head> <meta charset=\"ISO-8859-1\"> <title>Insert title here</title> </head> <body> <c:out value=\"${saludo}\" /> </body> </html> <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.1.6.RELEASE</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>cl.desafiolatam</groupId> <artifactId>holamundospringmvc</artifactId> <version>0.0.1-SNAPSHOT</version> <packaging>war</packaging> <name>HolaMundoSpringMVC</name> <description>Demo project for Spring Boot</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> <scope>provided</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency> <dependency> <groupId>org.apache.tomcat.embed</groupId> <artifactId>tomcat-embed-jasper</artifactId> <scope>provided</scope> </dependency> <dependency> <groupId>javax.servlet</groupId> <artifactId>jstl</artifactId> </dependency> <dependency> <groupId>javax.servlet</groupId> <artifactId>javax.servlet-api</artifactId> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project> Recibir datos en el controlador (59) Enviando datos al controlador (61) <%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\" pageEncoding=\"ISO-8859-1\"%> <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %> <!DOCTYPE html> <html> <head> <meta charset=\"ISO-8859-1\"> <title>Insert title here</title> </head> <body> <form action=\"/saludos/sendData\" method=\"post\" id=\"frmSend\"> Dato a enviar: <input type=\"text\" id=\"txtData\" name=\"data\" /> <input type=\"submit\" id=\"btnSend\" value=\"Enviar dato\" /> </form> </body> </html> <input type=\"text\" id=\"txtData\" name=\"data\"/> @RequestMapping(value=\"/initSendData\", method=RequestMethod.GET) public String initSendData(ModelMap model) { return \"sendData\"; } @RequestMapping(value=\"/sendData\", method=RequestMethod.POST) public String sendData(ModelMap model, @RequestParam(value=\"data\", required = true) String dataReceived) { System.out.println(\"El dato recibido desde la vista sendData es: \" + dataReceived); return \"sendData\"; } @Controller @RequestMapping(value=\"/saludos\", method=RequestMethod.GET) public class HelloController { private List<String> listaMensajes; public HelloController() { // TODO Auto-generated constructor stub super(); listaMensajes = new ArrayList<String>(); } . . . @RequestMapping(value=\"/addData\", method=RequestMethod.GET) public String saveData(ModelMap model, @RequestParam(value=\"data\", required = false) String dataReceived) { if(dataReceived != null) { listaMensajes.add(dataReceived); } System.out.println(\"El dato recibido desde la vista sendData es: \" + dataReceived); model.put(\"listaMensajes\", listaMensajes); return \"addData\"; } public String saveData(ModelMap model, @RequestParam(value=\"data\", required = false) if(dataReceived != null) { listaMensajes.add(dataReceived); } model.put(\"listaMensajes\", listaMensajes); <%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\" pageEncoding=\"ISO-8859-1\"%> <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %> <!DOCTYPE html> <html> <head> <meta charset=\"ISO-8859-1\"> <title>Insert title here</title> </head> <body> <form action=\"/saludos/addData\" method=\"get\" id=\"frmAdd\"> Dato a enviar: <input type=\"text\" id=\"txtData\" name=\"data\" /> <input type=\"submit\" id=\"btnAdd\" value=\"Add dato\" /> </form> <c:forEach items=\"${listaMensajes}\" var=\"mensaje\"> <c:out value=\"${mensaje}\" /><br /> </c:forEach> </body> </html> <c:forEach items=\"${listaMensajes}\" var=\"mensaje\"> <c:out value=\"${mensaje}\" /><br /> </c:forEach> <c:out value=\"${mensaje}\" /><br /> @Scope(\"request\") public class HelloController { private List<String> listaMensajes; . . .","title":"2.1.1 Seguimiento de lectura (con p\u00e1ginas)"},{"location":"modulos/mod_5/uni002/lectura001/#212-implementacion-del-proyecto","text":"La lectura en general muestra secciones de c\u00f3digo no funcionales en un ejemplo real. Es por eso que se implementa el proyecto expuesto, que posee las caracter\u00edsticas Vista - Controlador. Asumo que se entiende de mala forma que el modelo es una base de datos, pero para la aplicaci\u00f3n de la lectura est\u00e1 bien.","title":"2.1.2 Implementaci\u00f3n del proyecto. \ud83e\udd4b"},{"location":"modulos/mod_5/uni002/lectura001/#estructura","text":"./ \u251c\u2500\u2500 HELP.md \u251c\u2500\u2500 mvnw \u251c\u2500\u2500 mvnw.cmd \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u251c\u2500\u2500 HolamundospringmvcApplication.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 controller \u2502 \u2502 \u2502 \u2514\u2500\u2500 HelloController.java \u2502 \u2502 \u251c\u2500\u2500 resources \u2502 \u2502 \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2502 \u2502 \u251c\u2500\u2500 static \u2502 \u2502 \u2502 \u2514\u2500\u2500 templates \u2502 \u2502 \u2514\u2500\u2500 webapp \u2502 \u2502 \u2514\u2500\u2500 WEB-INF \u2502 \u2502 \u251c\u2500\u2500 addData.jsp \u2502 \u2502 \u251c\u2500\u2500 hello.jsp \u2502 \u2502 \u251c\u2500\u2500 index.jsp \u2502 \u2502 \u251c\u2500\u2500 sendData.jsp \u2502 \u2502 \u2514\u2500\u2500 web.xml \u2502 \u2514\u2500\u2500 test \u2502 \u2514\u2500\u2500 java \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 HolamundospringmvcApplicationTests.java \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2502 \u2514\u2500\u2500 maven \u2502 \u2502 \u2514\u2500\u2500 cl.lherrera \u2502 \u2502 \u2514\u2500\u2500 holamundospringmvc \u2502 \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2502 \u2514\u2500\u2500 pom.xml \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u251c\u2500\u2500 HolamundospringmvcApplication.class \u2502 \u2514\u2500\u2500 controller \u2502 \u2514\u2500\u2500 HelloController.class \u2514\u2500\u2500 test-classes \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 HolamundospringmvcApplicationTests.class 27 directories, 20 files","title":"Estructura"},{"location":"modulos/mod_5/uni002/lectura001/#archivos-modificados","text":"/holamundospringmvc/src/main/java/cl/lherrera/controller/HelloController.java \u00danico controlador de la aplicaci\u00f3n, se encarga de atender las peticiones del usuario. /holamundospringmvc/src/main/resources/application.properties Se indica a la aplicaci\u00f3n, donde debe buscar los archivos jsp . /holamundospringmvc/src/main/webapp/WEB-INF/addData.jsp Vista con el formulario que env\u00eda datos. /holamundospringmvc/src/main/webapp/WEB-INF/hello.jsp Vista que se carga con: sayhello , saygoodbye /holamundospringmvc/src/main/webapp/WEB-INF/index.jsp Vista encargada de ejecutar el inicio de la aplicaci\u00f3n, no posee un controlador, se ejecuta por defecto en / /holamundospringmvc/src/main/webapp/WEB-INF/sendData.jsp Vista que env\u00eda datos de initSendData a sendData /holamundospringmvc/src/main/webapp/WEB-INF/web.xml Descriptor de despliegue, Solamente indicamos el DispatcherServlet \u001d. /holamundospringmvc/pom.xml Contendr\u00e1 las dependencias necesarias para el soporte de jsp y jstl .","title":"Archivos modificados"},{"location":"modulos/mod_5/uni002/lectura001/#holamundospringmvcsrcmainjavacllherrera","text":"","title":"/holamundospringmvc/src/main/java/cl/lherrera"},{"location":"modulos/mod_5/uni002/lectura001/#controller","text":"/HelloController.java package cl.lherrera.controller; import java.util.ArrayList; import java.util.List; import org.slf4j.Logger; import org.slf4j.LoggerFactory; //import org.springframework.context.annotation.Scope; import org.springframework.stereotype.Controller; import org.springframework.ui.ModelMap; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RequestParam; @Controller //@Scope(\"request\") // si queremos que no guarde los datos en la sesi\u00f3n, probar con addData // no funciona en el m\u00e9todo, solamente a nivel de clase @RequestMapping(value = \"/saludos\") public class HelloController { private List<String> listaMensajes; private Logger logger = LoggerFactory.getLogger(HelloController.class.getName()); public HelloController() { listaMensajes = new ArrayList<>(); } @RequestMapping(value = \"/sayhello\", method = RequestMethod.GET) public String sayHello(ModelMap model) { model.put(\"saludo\", \"Hola Mundo Spring desde mi controlador\"); model.put(\"saluda\", true); return \"hello\"; } @RequestMapping(value = \"/saygoodbye\", method = RequestMethod.GET) public String sayGoodbye(ModelMap model) { model.put(\"saludo\", \"Adios Mundo Spring desde mi controlador\"); model.put(\"despide\", true); return \"hello\"; } @RequestMapping(value = \"/initSendData\", method = RequestMethod.GET) public String initSendData(ModelMap model) { return \"sendData\"; } @RequestMapping(value = \"/sendData\", method = RequestMethod.POST) public String sendData(ModelMap model, @RequestParam(value = \"data\", required = true) String dataReceived) { logger.info(\"El dato recibido desde la vista sendData es: \" + dataReceived); return \"sendData\"; } @RequestMapping(value = \"/addData\", method = RequestMethod.GET) public String saveData( ModelMap model, @RequestParam(value = \"data\", required = false) String dataReceived) { if (dataReceived != null) { listaMensajes.add(dataReceived); } logger.info(\"El dato recibido desde la vista sendData es: \" + dataReceived); model.put(\"listaMensajes\", listaMensajes); return \"addData\"; } }","title":"/controller/"},{"location":"modulos/mod_5/uni002/lectura001/#holamundospringmvcsrcmainresources","text":"/application.properties spring.mvc.view.prefix=/WEB-INF/ spring.mvc.view.suffix=.jsp","title":"/holamundospringmvc/src/main/resources"},{"location":"modulos/mod_5/uni002/lectura001/#holamundospringmvcsrcmainwebappweb-inf","text":"/addData.jsp <%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\" pageEncoding=\"ISO-8859-1\"%> <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\"%> <!DOCTYPE html> <html> <head> <meta charset=\"ISO-8859-1\"> <title>Insert title here</title> </head> <body> <form action=\"/saludos/addData\" method=\"get\" id=\"frmAdd\"> Dato a enviar: <input type=\"text\" id=\"txtData\" name=\"data\" /> <input type=\"submit\" id=\"btnAdd\" value=\"Add dato\" /> </form> <c:forEach items=\"${listaMensajes}\" var=\"mensaje\"> <c:out value=\"${mensaje}\" /> <br /> </c:forEach> </body> </html> /hello.jsp <%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\" pageEncoding=\"ISO-8859-1\"%> <%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%> <!DOCTYPE html> <html> <head> <meta charset=\"ISO-8859-1\"> <title>Insert title here</title> </head> <body> <h1> <c:out value=\"${saludo}\" /> </h1> Se muestra el resultado del <c:if test=\"${saluda}\"> <pre> <code>model.put(\"saludo\", \"Hola Mundo Spring desde mi controlador\");</code> </pre> </c:if> <c:if test=\"${despide}\"> <pre> <code>model.put(\"saludo\", \"Adios Mundo Spring desde mi controlador\");</code> </pre> </c:if> </body> </html> /index.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Insert title here</title> </head> <body> <h1>Soy el index, no necesito un controlador</h1> Ya que el las propiedades del proyecto se design\u00f3 el direcctoirio de los archivos jsp <code> <pre> spring.mvc.view.prefix=/WEB-INF/ spring.mvc.view.suffix=.jsp </pre> </code> <strong>Necesita reniciar el servidor para ver los cambios</strong> </body> </html> /sendData.jsp <%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\" pageEncoding=\"ISO-8859-1\"%> <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\"%> <!DOCTYPE html> <html> <head> <meta charset=\"ISO-8859-1\"> <title>Insert title here</title> </head> <body> <form action=\"/saludos/sendData\" method=\"post\" id=\"frmSend\"> Dato a enviar: <input type=\"text\" id=\"txtData\" name=\"data\" /> <input type=\"submit\" id=\"btnSend\" value=\"Enviar dato\" /> </form> </body> </html> /web.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\" version=\"3.1\"> <display-name>Hello application</display-name> <servlet> <servlet-name>spring</servlet-name> <servlet-class> org.springframework.web.servlet.DispatcherServlet </servlet-class> <load-on-startup>1</load-on-startup> </servlet> <servlet-mapping> <servlet-name>spring</servlet-name> <url-pattern>/*</url-pattern> </servlet-mapping> </web-app>","title":"/holamundospringmvc/src/main/webapp/WEB-INF/"},{"location":"modulos/mod_5/uni002/lectura001/#holamundospringmvcpomxml","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.6.RELEASE</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>cl.lherrera</groupId> <artifactId>holamundospringmvc</artifactId> <version>0.0.1-SNAPSHOT</version> <name>holamundospringmvc</name> <description>ejemplo lectura spring mvc</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> <!-- SOPORTE ARCHIVOS JSP --> <dependency> <groupId>org.apache.tomcat.embed</groupId> <artifactId>tomcat-embed-jasper</artifactId> <scope>provided</scope> </dependency> <!-- SOPORTE ARCHIVOS JSP #--> <!-- JSTL --> <dependency> <groupId>javax.servlet</groupId> <artifactId>jstl</artifactId> </dependency> <dependency> <groupId>javax.servlet</groupId> <artifactId>javax.servlet-api</artifactId> </dependency> <!-- JSTL #--> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project>","title":"/holamundospringmvc/pom.xml"},{"location":"modulos/mod_5/uni002/lectura002/","text":"Unidad 2.2 - Vista - Controlador Esta gu\u00eda se sigue con la lectura. Solamente se tocar\u00e1 la capa de servicios de la gu\u00eda, luego se implementa un ejemplo. Se puede seguir la lectura pero solamente en forma explicativa, no realizar el mismo ejemplo, hay problemas con la versi\u00f3n que es muy antigua. Por ejemplo no se usa JUnit5. Se recomienda hacer el ejercicio y luego avanzar con la gu\u00eda. 2.2.1 Seguimiento de lectura (con p\u00e1ginas) La Capa de servicios (1) Introducci\u00f3n L_es un patr\u00f3n de dise\u00f1o. L_separar las implementaciones de cada una de las capas del software que se est\u00e1 desarrollando. L_separar la implementaci\u00f3n del Modelo con la implementaci\u00f3n del controlador de la aplicaci\u00f3n. ( Goal \u001d) Es el negocio puro, esto no debe ser tratado en el controlador, nuestro controlador ser\u00e1 como nuestro front controller , despachando peticiones y que del negocio se encarguen los servicios. Negocio se refiere a peticiones especiales de nuestro problema a resolver, son la capa que llena los DTO. Todo lo que viene en esta gu\u00eda es la explicaci\u00f3n del siguiente proyecto (modificado para no afectar el proyecto anterior) 2.2.2 Implementaci\u00f3n - MV (Modelo Vista) Se necesita un sistema que pueda guardar una lista de mensajes, estos mensajes contendr\u00e1n remitente y contenido y a medida que el usuario ingrese un nuevo mensaje, este se vaya listando. Creamos un nuevo proyecto Spring Boot 2.2.6 , empaquetado en un war \u001d, para que pueda ser cargado en un servidor. Estructura ./ \u251c\u2500\u2500 HELP.md \u251c\u2500\u2500 mvnw \u251c\u2500\u2500 mvnw.cmd \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 m4u2l2 \u2502 \u2502 \u2502 \u251c\u2500\u2500 M4u2l2Application.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 ServletInitializer.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 controllers \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 MensajeController.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 model \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 Mensaje.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 services \u2502 \u2502 \u2502 \u251c\u2500\u2500 MensajeService.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 MensajeServiceImpl.java \u2502 \u2502 \u251c\u2500\u2500 resources \u2502 \u2502 \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2502 \u2502 \u251c\u2500\u2500 static \u2502 \u2502 \u2502 \u2514\u2500\u2500 templates \u2502 \u2502 \u2514\u2500\u2500 webapp \u2502 \u2502 \u2514\u2500\u2500 WEB-INF \u2502 \u2502 \u251c\u2500\u2500 index.jsp \u2502 \u2502 \u251c\u2500\u2500 mensajes.jsp \u2502 \u2502 \u2514\u2500\u2500 web.xml \u2502 \u2514\u2500\u2500 test \u2502 \u2514\u2500\u2500 java \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 m4u2l2 \u2502 \u251c\u2500\u2500 M4u2l2ApplicationTests.java \u2502 \u2514\u2500\u2500 services \u2502 \u2514\u2500\u2500 MensajeServiceTest.java \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 m4u2l2 \u2502 \u251c\u2500\u2500 M4u2l2Application.class \u2502 \u251c\u2500\u2500 ServletInitializer.class \u2502 \u251c\u2500\u2500 controllers \u2502 \u2502 \u2514\u2500\u2500 MensajeController.class \u2502 \u251c\u2500\u2500 model \u2502 \u2502 \u2514\u2500\u2500 Mensaje.class \u2502 \u2514\u2500\u2500 services \u2502 \u251c\u2500\u2500 MensajeService.class \u2502 \u2514\u2500\u2500 MensajeServiceImpl.class \u251c\u2500\u2500 generated-sources \u2502 \u2514\u2500\u2500 annotations \u251c\u2500\u2500 generated-test-sources \u2502 \u2514\u2500\u2500 test-annotations \u251c\u2500\u2500 m2e-wtp \u2502 \u2514\u2500\u2500 web-resources \u2502 \u2514\u2500\u2500 META-INF \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 maven \u2502 \u2514\u2500\u2500 cl.lherrera.m4u2l2 \u2502 \u2514\u2500\u2500 m4u2l2 \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2514\u2500\u2500 pom.xml \u251c\u2500\u2500 maven-status \u2502 \u2514\u2500\u2500 maven-compiler-plugin \u2502 \u251c\u2500\u2500 compile \u2502 \u2502 \u2514\u2500\u2500 default-compile \u2502 \u2502 \u251c\u2500\u2500 createdFiles.lst \u2502 \u2502 \u2514\u2500\u2500 inputFiles.lst \u2502 \u2514\u2500\u2500 testCompile \u2502 \u2514\u2500\u2500 default-testCompile \u2502 \u251c\u2500\u2500 createdFiles.lst \u2502 \u2514\u2500\u2500 inputFiles.lst \u251c\u2500\u2500 surefire-reports \u2502 \u251c\u2500\u2500 TEST-cl.lherrera.m4u2l2.M4u2l2ApplicationTests.xml \u2502 \u2514\u2500\u2500 cl.lherrera.m4u2l2.M4u2l2ApplicationTests.txt \u2514\u2500\u2500 test-classes \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 m4u2l2 \u251c\u2500\u2500 M4u2l2ApplicationTests.class \u2514\u2500\u2500 services \u2514\u2500\u2500 MensajeServiceTest.class 50 directories, 34 files Archivos modificados /m4u2l2/src/main/java/cl/lherrera/m4u2l2/controllers/MensajeController.java Encargado de controlar los servicios de mensajer\u00eda. /m4u2l2/src/main/java/cl/lherrera/m4u2l2/model/Mensaje.java Representaci\u00f3n abstracta de un mensaje. /m4u2l2/src/main/java/cl/lherrera/m4u2l2/services/MensajeService.java Interfaz representante del los servicios de mensajer\u00eda. /m4u2l2/src/main/java/cl/lherrera/m4u2l2/services/MensajeServiceImpl.java Una implementaci\u00f3n del servicio de mensajer\u00eda. (\u00fanico pero esto no siempre puede ser as\u00ed) /m4u2l2/src/main/resources/application.properties Propiedades, en el proyecto de mensajer\u00eda, indicamos donde encontrar los archivos jsp . /m4u2l2/src/test/java/cl/lherrera/m4u2l2/services/MensajeServiceTest.java Encargado de testear el servicio implementado de mensajer\u00eda. /m4u2l2/src/main/webapp/WEB-INF/index.jsp Solamente una p\u00e1gina de entrada en caso que no ingresemos una URI. /m4u2l2/src/main/webapp/WEB-INF/mensajes.jsp \u001d Vista encargada de mostrar la interacci\u00f3n con los servicios de mensajer\u00eda. /m4u2l2/src/main/webapp/WEB-INF/web.xml Descriptor de despliegue, que contiene el DispatcherServlet /m4u2l2/pom.xml Se modifica para indicar las propiedades necesarias para el reconocimiento de archivos jsp adem\u00e1s de la librer\u00eda JSTL . /m4u2l2/src/main/java/cl/lherrera/m4u2l2 /controllers /MensajeController.java package cl.lherrera.m4u2l2.controllers; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Controller; import org.springframework.ui.ModelMap; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import cl.lherrera.m4u2l2.model.Mensaje; import cl.lherrera.m4u2l2.services.MensajeService; @Controller @RequestMapping(value = \"/mensaje\") public class MensajeController { @Autowired private MensajeService mensajeService; @RequestMapping(value = \"/messageList\", method = RequestMethod.GET) public String getDataMessageList(ModelMap model) { model.addAttribute(\"dataMessageList\", mensajeService.getDataMessageList()); return \"mensajes\"; } @RequestMapping(value = \"/saveMessage\", method = RequestMethod.POST) public String saveDataMessage( ModelMap model, @ModelAttribute(\"mensaje\") Mensaje mensaje) { // TODO Auto-generated method stub System.out.println(mensaje.getRemitente() + \" dice que \" + mensaje.getMensaje()); /* Enviamos el objeto mensaje, recibido desde la vista, a nuestro servicio */ mensajeService.saveDataMessage(mensaje); /* * Obtenemos la lista de mensajes desde nuestro servicio, y la actualizamos en * el modelo */ model.addAttribute(\"dataMessageList\", mensajeService.getDataMessageList()); return \"mensajes\"; } } /model /Mensaje.java package cl.lherrera.m4u2l2.model; import org.springframework.stereotype.Component; @Component(\"mensaje\") public class Mensaje { String remitente; String mensaje; public Mensaje() { } public Mensaje(String remitente, String mensaje) { this.remitente = remitente; this.mensaje = mensaje; } public String getRemitente() { return remitente; } public void setRemitente(String remitente) { this.remitente = remitente; } public String getMensaje() { return mensaje; } public void setMensaje(String mensaje) { this.mensaje = mensaje; } } /services MensajeService.java package cl.lherrera.m4u2l2.services; import java.util.List; import cl.lherrera.m4u2l2.model.Mensaje; public interface MensajeService { List<Mensaje> getDataMessageList(); void saveDataMessage(Mensaje mensaje); } /MensajeServiceImpl.java package cl.lherrera.m4u2l2.services; import java.util.ArrayList; import java.util.List; import org.springframework.stereotype.Service; import cl.lherrera.m4u2l2.model.Mensaje; @Service(\"mensajeService\") public class MensajeServiceImpl implements MensajeService { private List<Mensaje> messageList; MensajeServiceImpl() { super(); messageList = new ArrayList<Mensaje>(); messageList.clear(); } @Override public List<Mensaje> getDataMessageList() { return messageList; } @Override public void saveDataMessage(Mensaje mensaje) { /* * Se eval\u00faa si remitente es nulo, de tal forma que no se agregue el item a la * lista */ if (mensaje.getRemitente() != null) { messageList.add(mensaje); } } } /m4u2l2/src/main/resources /application.properties spring.mvc.view.prefix=/WEB-INF/ spring.mvc.view.suffix=.jsp /m4u2l2/src/test/java/cl/lherrera/m4u2l2 /services /MensajeServiceTest.java package cl.lherrera.m4u2l2.services; import static org.junit.jupiter.api.Assertions.*; import java.util.ArrayList; import java.util.List; import org.junit.jupiter.api.DisplayName; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.context.SpringBootTest; import cl.lherrera.m4u2l2.model.Mensaje; @SpringBootTest class MensajeServiceTest { @Autowired MensajeServiceImpl servicio; @Test @DisplayName(\"Probamos listar los mensajes\") void prueba001() { // creamos una lista vac\u00eda List<Mensaje> lista = new ArrayList<>(); // ocupamos el servicio que no ha sido cargado con mensajes List<Mensaje> listaMesaje = servicio.getDataMessageList(); // debe ser igual a una lista vac\u00eda assertEquals(lista, listaMesaje); } @Test @DisplayName(\"Probar si se guarda un mensaje\") void prueba002() { // creamos un mensaje Mensaje mensaje = new Mensaje(\"Ana\", \"Env\u00eda saludos\"); // lo agregamos usando el servicio servicio.saveDataMessage(mensaje); // traemos los mensajes List<Mensaje> listaMesaje = servicio.getDataMessageList(); // esta lista debe contener al menos un mensaje assertEquals(1, listaMesaje.size()); } } /m4u2l2/src/main/webapp/WEB-INF /index.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Insert title here</title> </head> <body> <h1>Soy el index, no necesito un controlador</h1> Ya que el las propiedades del proyecto se design\u00f3 el direcctoirio de los archivos jsp <code> <pre> spring.mvc.view.prefix=/WEB-INF/ spring.mvc.view.suffix=.jsp </pre> </code> <strong>Necesita reniciar el servidor para ver los cambios</strong> </body> </html> /mensajes.jsp \u001d <%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\" pageEncoding=\"ISO-8859-1\"%> <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\"%> <%@taglib prefix=\"form\" uri=\"http://www.springframework.org/tags/form\"%> <!DOCTYPE html> <html> <head> <meta charset=\"ISO-8859-1\"> <title>mensajes.jsp</title> </head> <body> <form:form id=\"frmMensajes\" action=\"/mensaje/saveMessage\" modelAttribute=\"mensaje\"> Remitente: <input type=\"text\" id=\"txtRemitente\" name=\"remitente\" /> <br /> Mensaje: <input type=\"text\" id=\"txtMensaje\" name=\"mensaje\" /> <br /> <input type=\"submit\" id=\"btnEnviar\" value=\"Enviar\" /> </form:form> <c:forEach items=\"${dataMessageList}\" var=\"mensaje\"> <c:out value=\"${mensaje.getRemitente()} dice que ${mensaje.getMensaje()}\" /> <br /> </c:forEach> </body> </html> /web.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\" version=\"3.1\"> <display-name>Hello application</display-name> <servlet> <servlet-name>spring</servlet-name> <servlet-class> org.springframework.web.servlet.DispatcherServlet </servlet-class> <load-on-startup>1</load-on-startup> </servlet> <servlet-mapping> <servlet-name>spring</servlet-name> <url-pattern>/*</url-pattern> </servlet-mapping> </web-app> /m4u2l2/pom.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.6.RELEASE</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>cl.lherrera.m4u2l2</groupId> <artifactId>m4u2l2</artifactId> <version>0.0.1-SNAPSHOT</version> <packaging>war</packaging> <name>m4u2l2</name> <description>Lectura 2 mod 4 uni 2</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> <scope>provided</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> <!-- SOPORTE ARCHIVOS JSP --> <dependency> <groupId>org.apache.tomcat.embed</groupId> <artifactId>tomcat-embed-jasper</artifactId> <scope>provided</scope> </dependency> <!-- SOPORTE ARCHIVOS JSP # --> <!-- JSTL --> <dependency> <groupId>javax.servlet</groupId> <artifactId>jstl</artifactId> </dependency> <dependency> <groupId>javax.servlet</groupId> <artifactId>javax.servlet-api</artifactId> </dependency> <!-- JSTL # --> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project>","title":"Lectura002"},{"location":"modulos/mod_5/uni002/lectura002/#unidad-22-vista-controlador","text":"Esta gu\u00eda se sigue con la lectura. Solamente se tocar\u00e1 la capa de servicios de la gu\u00eda, luego se implementa un ejemplo. Se puede seguir la lectura pero solamente en forma explicativa, no realizar el mismo ejemplo, hay problemas con la versi\u00f3n que es muy antigua. Por ejemplo no se usa JUnit5. Se recomienda hacer el ejercicio y luego avanzar con la gu\u00eda.","title":"Unidad 2.2 - Vista - Controlador"},{"location":"modulos/mod_5/uni002/lectura002/#221-seguimiento-de-lectura-con-paginas","text":"","title":"2.2.1 Seguimiento de lectura (con p\u00e1ginas)"},{"location":"modulos/mod_5/uni002/lectura002/#la-capa-de-servicios-1","text":"Introducci\u00f3n L_es un patr\u00f3n de dise\u00f1o. L_separar las implementaciones de cada una de las capas del software que se est\u00e1 desarrollando. L_separar la implementaci\u00f3n del Modelo con la implementaci\u00f3n del controlador de la aplicaci\u00f3n. ( Goal \u001d) Es el negocio puro, esto no debe ser tratado en el controlador, nuestro controlador ser\u00e1 como nuestro front controller , despachando peticiones y que del negocio se encarguen los servicios. Negocio se refiere a peticiones especiales de nuestro problema a resolver, son la capa que llena los DTO. Todo lo que viene en esta gu\u00eda es la explicaci\u00f3n del siguiente proyecto (modificado para no afectar el proyecto anterior)","title":"La Capa de servicios (1)"},{"location":"modulos/mod_5/uni002/lectura002/#222-implementacion-mv-modelo-vista","text":"Se necesita un sistema que pueda guardar una lista de mensajes, estos mensajes contendr\u00e1n remitente y contenido y a medida que el usuario ingrese un nuevo mensaje, este se vaya listando. Creamos un nuevo proyecto Spring Boot 2.2.6 , empaquetado en un war \u001d, para que pueda ser cargado en un servidor.","title":"2.2.2 Implementaci\u00f3n - MV (Modelo Vista)"},{"location":"modulos/mod_5/uni002/lectura002/#estructura","text":"./ \u251c\u2500\u2500 HELP.md \u251c\u2500\u2500 mvnw \u251c\u2500\u2500 mvnw.cmd \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 m4u2l2 \u2502 \u2502 \u2502 \u251c\u2500\u2500 M4u2l2Application.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 ServletInitializer.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 controllers \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 MensajeController.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 model \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 Mensaje.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 services \u2502 \u2502 \u2502 \u251c\u2500\u2500 MensajeService.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 MensajeServiceImpl.java \u2502 \u2502 \u251c\u2500\u2500 resources \u2502 \u2502 \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2502 \u2502 \u251c\u2500\u2500 static \u2502 \u2502 \u2502 \u2514\u2500\u2500 templates \u2502 \u2502 \u2514\u2500\u2500 webapp \u2502 \u2502 \u2514\u2500\u2500 WEB-INF \u2502 \u2502 \u251c\u2500\u2500 index.jsp \u2502 \u2502 \u251c\u2500\u2500 mensajes.jsp \u2502 \u2502 \u2514\u2500\u2500 web.xml \u2502 \u2514\u2500\u2500 test \u2502 \u2514\u2500\u2500 java \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 m4u2l2 \u2502 \u251c\u2500\u2500 M4u2l2ApplicationTests.java \u2502 \u2514\u2500\u2500 services \u2502 \u2514\u2500\u2500 MensajeServiceTest.java \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 m4u2l2 \u2502 \u251c\u2500\u2500 M4u2l2Application.class \u2502 \u251c\u2500\u2500 ServletInitializer.class \u2502 \u251c\u2500\u2500 controllers \u2502 \u2502 \u2514\u2500\u2500 MensajeController.class \u2502 \u251c\u2500\u2500 model \u2502 \u2502 \u2514\u2500\u2500 Mensaje.class \u2502 \u2514\u2500\u2500 services \u2502 \u251c\u2500\u2500 MensajeService.class \u2502 \u2514\u2500\u2500 MensajeServiceImpl.class \u251c\u2500\u2500 generated-sources \u2502 \u2514\u2500\u2500 annotations \u251c\u2500\u2500 generated-test-sources \u2502 \u2514\u2500\u2500 test-annotations \u251c\u2500\u2500 m2e-wtp \u2502 \u2514\u2500\u2500 web-resources \u2502 \u2514\u2500\u2500 META-INF \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 maven \u2502 \u2514\u2500\u2500 cl.lherrera.m4u2l2 \u2502 \u2514\u2500\u2500 m4u2l2 \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2514\u2500\u2500 pom.xml \u251c\u2500\u2500 maven-status \u2502 \u2514\u2500\u2500 maven-compiler-plugin \u2502 \u251c\u2500\u2500 compile \u2502 \u2502 \u2514\u2500\u2500 default-compile \u2502 \u2502 \u251c\u2500\u2500 createdFiles.lst \u2502 \u2502 \u2514\u2500\u2500 inputFiles.lst \u2502 \u2514\u2500\u2500 testCompile \u2502 \u2514\u2500\u2500 default-testCompile \u2502 \u251c\u2500\u2500 createdFiles.lst \u2502 \u2514\u2500\u2500 inputFiles.lst \u251c\u2500\u2500 surefire-reports \u2502 \u251c\u2500\u2500 TEST-cl.lherrera.m4u2l2.M4u2l2ApplicationTests.xml \u2502 \u2514\u2500\u2500 cl.lherrera.m4u2l2.M4u2l2ApplicationTests.txt \u2514\u2500\u2500 test-classes \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 m4u2l2 \u251c\u2500\u2500 M4u2l2ApplicationTests.class \u2514\u2500\u2500 services \u2514\u2500\u2500 MensajeServiceTest.class 50 directories, 34 files","title":"Estructura"},{"location":"modulos/mod_5/uni002/lectura002/#archivos-modificados","text":"/m4u2l2/src/main/java/cl/lherrera/m4u2l2/controllers/MensajeController.java Encargado de controlar los servicios de mensajer\u00eda. /m4u2l2/src/main/java/cl/lherrera/m4u2l2/model/Mensaje.java Representaci\u00f3n abstracta de un mensaje. /m4u2l2/src/main/java/cl/lherrera/m4u2l2/services/MensajeService.java Interfaz representante del los servicios de mensajer\u00eda. /m4u2l2/src/main/java/cl/lherrera/m4u2l2/services/MensajeServiceImpl.java Una implementaci\u00f3n del servicio de mensajer\u00eda. (\u00fanico pero esto no siempre puede ser as\u00ed) /m4u2l2/src/main/resources/application.properties Propiedades, en el proyecto de mensajer\u00eda, indicamos donde encontrar los archivos jsp . /m4u2l2/src/test/java/cl/lherrera/m4u2l2/services/MensajeServiceTest.java Encargado de testear el servicio implementado de mensajer\u00eda. /m4u2l2/src/main/webapp/WEB-INF/index.jsp Solamente una p\u00e1gina de entrada en caso que no ingresemos una URI. /m4u2l2/src/main/webapp/WEB-INF/mensajes.jsp \u001d Vista encargada de mostrar la interacci\u00f3n con los servicios de mensajer\u00eda. /m4u2l2/src/main/webapp/WEB-INF/web.xml Descriptor de despliegue, que contiene el DispatcherServlet /m4u2l2/pom.xml Se modifica para indicar las propiedades necesarias para el reconocimiento de archivos jsp adem\u00e1s de la librer\u00eda JSTL .","title":"Archivos modificados"},{"location":"modulos/mod_5/uni002/lectura002/#m4u2l2srcmainjavacllherreram4u2l2","text":"","title":"/m4u2l2/src/main/java/cl/lherrera/m4u2l2"},{"location":"modulos/mod_5/uni002/lectura002/#controllers","text":"/MensajeController.java package cl.lherrera.m4u2l2.controllers; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Controller; import org.springframework.ui.ModelMap; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import cl.lherrera.m4u2l2.model.Mensaje; import cl.lherrera.m4u2l2.services.MensajeService; @Controller @RequestMapping(value = \"/mensaje\") public class MensajeController { @Autowired private MensajeService mensajeService; @RequestMapping(value = \"/messageList\", method = RequestMethod.GET) public String getDataMessageList(ModelMap model) { model.addAttribute(\"dataMessageList\", mensajeService.getDataMessageList()); return \"mensajes\"; } @RequestMapping(value = \"/saveMessage\", method = RequestMethod.POST) public String saveDataMessage( ModelMap model, @ModelAttribute(\"mensaje\") Mensaje mensaje) { // TODO Auto-generated method stub System.out.println(mensaje.getRemitente() + \" dice que \" + mensaje.getMensaje()); /* Enviamos el objeto mensaje, recibido desde la vista, a nuestro servicio */ mensajeService.saveDataMessage(mensaje); /* * Obtenemos la lista de mensajes desde nuestro servicio, y la actualizamos en * el modelo */ model.addAttribute(\"dataMessageList\", mensajeService.getDataMessageList()); return \"mensajes\"; } }","title":"/controllers"},{"location":"modulos/mod_5/uni002/lectura002/#model","text":"/Mensaje.java package cl.lherrera.m4u2l2.model; import org.springframework.stereotype.Component; @Component(\"mensaje\") public class Mensaje { String remitente; String mensaje; public Mensaje() { } public Mensaje(String remitente, String mensaje) { this.remitente = remitente; this.mensaje = mensaje; } public String getRemitente() { return remitente; } public void setRemitente(String remitente) { this.remitente = remitente; } public String getMensaje() { return mensaje; } public void setMensaje(String mensaje) { this.mensaje = mensaje; } }","title":"/model"},{"location":"modulos/mod_5/uni002/lectura002/#services","text":"MensajeService.java package cl.lherrera.m4u2l2.services; import java.util.List; import cl.lherrera.m4u2l2.model.Mensaje; public interface MensajeService { List<Mensaje> getDataMessageList(); void saveDataMessage(Mensaje mensaje); } /MensajeServiceImpl.java package cl.lherrera.m4u2l2.services; import java.util.ArrayList; import java.util.List; import org.springframework.stereotype.Service; import cl.lherrera.m4u2l2.model.Mensaje; @Service(\"mensajeService\") public class MensajeServiceImpl implements MensajeService { private List<Mensaje> messageList; MensajeServiceImpl() { super(); messageList = new ArrayList<Mensaje>(); messageList.clear(); } @Override public List<Mensaje> getDataMessageList() { return messageList; } @Override public void saveDataMessage(Mensaje mensaje) { /* * Se eval\u00faa si remitente es nulo, de tal forma que no se agregue el item a la * lista */ if (mensaje.getRemitente() != null) { messageList.add(mensaje); } } }","title":"/services"},{"location":"modulos/mod_5/uni002/lectura002/#m4u2l2srcmainresources","text":"/application.properties spring.mvc.view.prefix=/WEB-INF/ spring.mvc.view.suffix=.jsp","title":"/m4u2l2/src/main/resources"},{"location":"modulos/mod_5/uni002/lectura002/#m4u2l2srctestjavacllherreram4u2l2","text":"","title":"/m4u2l2/src/test/java/cl/lherrera/m4u2l2"},{"location":"modulos/mod_5/uni002/lectura002/#services_1","text":"/MensajeServiceTest.java package cl.lherrera.m4u2l2.services; import static org.junit.jupiter.api.Assertions.*; import java.util.ArrayList; import java.util.List; import org.junit.jupiter.api.DisplayName; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.context.SpringBootTest; import cl.lherrera.m4u2l2.model.Mensaje; @SpringBootTest class MensajeServiceTest { @Autowired MensajeServiceImpl servicio; @Test @DisplayName(\"Probamos listar los mensajes\") void prueba001() { // creamos una lista vac\u00eda List<Mensaje> lista = new ArrayList<>(); // ocupamos el servicio que no ha sido cargado con mensajes List<Mensaje> listaMesaje = servicio.getDataMessageList(); // debe ser igual a una lista vac\u00eda assertEquals(lista, listaMesaje); } @Test @DisplayName(\"Probar si se guarda un mensaje\") void prueba002() { // creamos un mensaje Mensaje mensaje = new Mensaje(\"Ana\", \"Env\u00eda saludos\"); // lo agregamos usando el servicio servicio.saveDataMessage(mensaje); // traemos los mensajes List<Mensaje> listaMesaje = servicio.getDataMessageList(); // esta lista debe contener al menos un mensaje assertEquals(1, listaMesaje.size()); } }","title":"/services"},{"location":"modulos/mod_5/uni002/lectura002/#m4u2l2srcmainwebappweb-inf","text":"/index.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Insert title here</title> </head> <body> <h1>Soy el index, no necesito un controlador</h1> Ya que el las propiedades del proyecto se design\u00f3 el direcctoirio de los archivos jsp <code> <pre> spring.mvc.view.prefix=/WEB-INF/ spring.mvc.view.suffix=.jsp </pre> </code> <strong>Necesita reniciar el servidor para ver los cambios</strong> </body> </html> /mensajes.jsp \u001d <%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\" pageEncoding=\"ISO-8859-1\"%> <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\"%> <%@taglib prefix=\"form\" uri=\"http://www.springframework.org/tags/form\"%> <!DOCTYPE html> <html> <head> <meta charset=\"ISO-8859-1\"> <title>mensajes.jsp</title> </head> <body> <form:form id=\"frmMensajes\" action=\"/mensaje/saveMessage\" modelAttribute=\"mensaje\"> Remitente: <input type=\"text\" id=\"txtRemitente\" name=\"remitente\" /> <br /> Mensaje: <input type=\"text\" id=\"txtMensaje\" name=\"mensaje\" /> <br /> <input type=\"submit\" id=\"btnEnviar\" value=\"Enviar\" /> </form:form> <c:forEach items=\"${dataMessageList}\" var=\"mensaje\"> <c:out value=\"${mensaje.getRemitente()} dice que ${mensaje.getMensaje()}\" /> <br /> </c:forEach> </body> </html> /web.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\" version=\"3.1\"> <display-name>Hello application</display-name> <servlet> <servlet-name>spring</servlet-name> <servlet-class> org.springframework.web.servlet.DispatcherServlet </servlet-class> <load-on-startup>1</load-on-startup> </servlet> <servlet-mapping> <servlet-name>spring</servlet-name> <url-pattern>/*</url-pattern> </servlet-mapping> </web-app>","title":"/m4u2l2/src/main/webapp/WEB-INF"},{"location":"modulos/mod_5/uni002/lectura002/#m4u2l2pomxml","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.6.RELEASE</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>cl.lherrera.m4u2l2</groupId> <artifactId>m4u2l2</artifactId> <version>0.0.1-SNAPSHOT</version> <packaging>war</packaging> <name>m4u2l2</name> <description>Lectura 2 mod 4 uni 2</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> <scope>provided</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> <!-- SOPORTE ARCHIVOS JSP --> <dependency> <groupId>org.apache.tomcat.embed</groupId> <artifactId>tomcat-embed-jasper</artifactId> <scope>provided</scope> </dependency> <!-- SOPORTE ARCHIVOS JSP # --> <!-- JSTL --> <dependency> <groupId>javax.servlet</groupId> <artifactId>jstl</artifactId> </dependency> <dependency> <groupId>javax.servlet</groupId> <artifactId>javax.servlet-api</artifactId> </dependency> <!-- JSTL # --> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project>","title":"/m4u2l2/pom.xml"},{"location":"modulos/mod_5/uni003/lectura001/","text":"Unidad 3.1 - Modelo Esta gu\u00eda es de soporte a la lectura, se debe ir recorriendo junto a la lectura 1 (1) JDBC Introducci\u00f3n conocer JDBC diferencias que tiene con JdbcTemplate . c\u00f3mo utilizarlo y sus ventajas y desventajas. ejemplo de implementaci\u00f3n de JdbcTemplate con una aplicaci\u00f3n b\u00e1sica que consulta una tabla de base de datos. (2) \u00bfQu\u00e9 es JdbcTemplate ? Java DataBase Connectivity crearon funciones predefinidas. podemos llamar m\u00e1s f\u00e1cilmente las conexiones API soporta la mayor\u00eda de las bases de datos m\u00e1s conocidas que utilizan SQL como lenguaje, como PostgreSQL, MySQL Server, Oracle 11g, etc. (3) Usando y entendiendo JDBC. Ya hemos conocido el funcionamiento de JDBC, para conectar SQLite y Oracle. por lo tanto nos podemos saltar esta parte. Se habla de los tipos de datos a elegir, nosotros ya hemos trabajado con Oracle 11 Database Thin Type 4 JDBC que es de tipo 4. Tipo 4 - 100% Pure Java: Se comunica dir\u00e9ctamente con el SGBD sin intermediarios. Es el driver de mejor performance disponible y por lo general es provisto por el mismo creador del SGBD (Sistema de gesti\u00f3n de base de datos). \u00bfQu\u00e9 Driver debo elegir? Si est\u00e1s accediendo s\u00f3lo a un tipo de SGBD, tu opci\u00f3n es el de tipo 4. Si tu aplicaci\u00f3n consulta m\u00faltiples SGBD al mismo tiempo, debes usar el 3. Si el motor de bases de datos que se utiliza no provee de un driver de tipo 3 ni 4, deber\u00edas usar el driver de tipo 2. El driver de tipo 1 no es considerado un driver que pueda utilizarse en sistemas en ambientes productivos, s\u00f3lo deber\u00eda utilizarse para ambientes de desarrollo (es muy raro ver este tipo de driver , ya que es muy antiguo). Explicaci\u00f3n por qu\u00e9 con Oracle podemos saltarnos en Class.forName()... En versiones anteriores a la 4.0 de JDBC (JDK 5 o posterior) se debe agregar el nombre del Driver a utilizar con Class.forName(\"foo.Driver\") antes de declarar Connection , ya que DriverManager no realiza el escaneo autom\u00e1ticamente el proyecto para buscar el Driver necesario para generar la conexi\u00f3n, para que este escaneo funcione se debe establecer el nombre de la clase Driver a utilizar dentro de un archivo .properties (en src/main/resources ) que contenga la entrada jdbc.Drivers=foo.Driver . Esto ayuda a no fallar con el principio DRY, ya que no se debe utilizar Class.forName(\"foo.Driver\") en cada conexi\u00f3n. Lo dem\u00e1s son im\u00e1genes y algunos m\u00e9todos con consultas incrustadas, se mezcla l\u00f3gica de acceso a datos y l\u00f3gica de negocio. Es por eso que las siguientes p\u00e1ginas son solamente expositivas. (7) Entendiendo Spring JDBC ( JdbcTemplate ). JDBC es una API muy pesada en si misma hablando en el contexto de lo que el servidor ejecuta cada vez que se realiza una conexi\u00f3n. (Aunque con un S\u00edngleton exista solamente una instancia). Un encontrar todos normal en JDBC public List<Usuario> findAll() { try (Connection con = DriverManager.getConnection(\"jdbc:oracle:thin:@localhost:xe\", \"root\", \"root\")) { List<Usuario> usuarios = new ArrayList<>(); Usuario usuario = null; Statement stmt = con.createStatement(\"select login, clave from Usuario\"); ResultSet rs = stmt.execute(); while (rs.next()) { usuario = new Usuario(rs.getString(1), rs.getString(2)); usuarios.add(usuario); } return usuarios; } catch (Exception e) { System.out.println(e); } } Ejemplo con JDBC-TEMPLATE. public List<Usuario> findAll(){ return jdbcTemplate.query(\"select login, clave from Usuario\", new UsuarioMapper()); } (9) Creando la capa de acceso a datos. La siguiente, es una aplicaci\u00f3n, es un ejemplo del uso de JDBC-TEMPLATE y el trabajo de la capa de acceso a datos con Spring. Incluir: JDBC-API DDL Motor: `Oracle 11g` Credenciales: Usuario Administrador: `system`, `oracle` Usuario Aplicaci\u00f3n: `mod5u2l1`, `1234` CREATE TABLE USUARIO ( ID_USUARIO NUMBER(18), NOMBRE VARCHAR2(200), CLAVE VARCHAR2(200), RUT NUMBER(10), DV CHAR ); -- autoincremental CREATE SEQUENCE SQ_USUARIO MINVALUE 1 START WITH 1 INCREMENT BY 1 CACHE 10; INSERT INTO \"ROOT\".\"USUARIO\" (\"ID_USUARIO\", \"NOMBRE\", \"CLAVE\", \"RUT\", \"DV\") VALUES (SQ_USUARIO.nextval, 'user1', 'clave1', 10, '9'); INSERT INTO \"ROOT\".\"USUARIO\" (\"ID_USUARIO\", \"NOMBRE\", \"CLAVE\", \"RUT\", \"DV\") VALUES (SQ_USUARIO.nextval, 'user2', 'clave2', 10, 'k'); Estructura: ./ \u251c\u2500\u2500 HELP.md \u251c\u2500\u2500 mvnw \u251c\u2500\u2500 mvnw.cmd \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 m5u3001 \u2502 \u2502 \u2502 \u251c\u2500\u2500 AppConfig.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 M5u3001Application.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 ServletInitializer.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 daos \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 UsuarioDAO.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioDAOImpl.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 mappers \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioMapper.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 models \u2502 \u2502 \u2502 \u2514\u2500\u2500 Usuario.java \u2502 \u2502 \u251c\u2500\u2500 resources \u2502 \u2502 \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2502 \u2502 \u251c\u2500\u2500 database.properties \u2502 \u2502 \u2502 \u251c\u2500\u2500 static \u2502 \u2502 \u2502 \u2514\u2500\u2500 templates \u2502 \u2502 \u2514\u2500\u2500 webapp \u2502 \u2514\u2500\u2500 test \u2502 \u2514\u2500\u2500 java \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 m5u3001 \u2502 \u251c\u2500\u2500 M5u3001ApplicationTests.java \u2502 \u2514\u2500\u2500 daos \u2502 \u2514\u2500\u2500 UsuarioDaoImplTest.java \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 application.properties \u2502 \u251c\u2500\u2500 cl \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2514\u2500\u2500 m5u3001 \u2502 \u2502 \u251c\u2500\u2500 AppConfig.class \u2502 \u2502 \u251c\u2500\u2500 M5u3001Application.class \u2502 \u2502 \u251c\u2500\u2500 ServletInitializer.class \u2502 \u2502 \u251c\u2500\u2500 daos \u2502 \u2502 \u2502 \u251c\u2500\u2500 UsuarioDAO.class \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioDAOImpl.class \u2502 \u2502 \u251c\u2500\u2500 mappers \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioMapper.class \u2502 \u2502 \u2514\u2500\u2500 models \u2502 \u2502 \u2514\u2500\u2500 Usuario.class \u2502 \u2514\u2500\u2500 database.properties \u251c\u2500\u2500 generated-sources \u2502 \u2514\u2500\u2500 annotations \u251c\u2500\u2500 generated-test-sources \u2502 \u2514\u2500\u2500 test-annotations \u251c\u2500\u2500 m2e-wtp \u2502 \u2514\u2500\u2500 web-resources \u2502 \u2514\u2500\u2500 META-INF \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 maven \u2502 \u2514\u2500\u2500 cl.lherrera.m4u2l2 \u2502 \u2514\u2500\u2500 m4u3l1 \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2514\u2500\u2500 pom.xml \u251c\u2500\u2500 m4u3l1-0.0.1-SNAPSHOT \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2514\u2500\u2500 WEB-INF \u2502 \u251c\u2500\u2500 classes \u2502 \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2502 \u251c\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 m4u2l2 \u2502 \u2502 \u2502 \u251c\u2500\u2500 AppConfig.class \u2502 \u2502 \u2502 \u251c\u2500\u2500 M4u3l1Application.class \u2502 \u2502 \u2502 \u251c\u2500\u2500 ServletInitializer.class \u2502 \u2502 \u2502 \u251c\u2500\u2500 daos \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 UsuarioDAO.class \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioDAOImpl.class \u2502 \u2502 \u2502 \u251c\u2500\u2500 mappers \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioMapper.class \u2502 \u2502 \u2502 \u2514\u2500\u2500 models \u2502 \u2502 \u2502 \u2514\u2500\u2500 Usuario.class \u2502 \u2502 \u2514\u2500\u2500 database.properties \u2502 \u2514\u2500\u2500 lib \u2502 \u251c\u2500\u2500 HikariCP-3.4.2.jar \u2502 \u251c\u2500\u2500 classmate-1.5.1.jar \u2502 \u251c\u2500\u2500 hibernate-validator-6.0.18.Final.jar \u2502 \u251c\u2500\u2500 jackson-annotations-2.10.3.jar \u2502 \u251c\u2500\u2500 jackson-core-2.10.3.jar \u2502 \u251c\u2500\u2500 jackson-databind-2.10.3.jar \u2502 \u251c\u2500\u2500 jackson-datatype-jdk8-2.10.3.jar \u2502 \u251c\u2500\u2500 jackson-datatype-jsr310-2.10.3.jar \u2502 \u251c\u2500\u2500 jackson-module-parameter-names-2.10.3.jar \u2502 \u251c\u2500\u2500 jakarta.annotation-api-1.3.5.jar \u2502 \u251c\u2500\u2500 jakarta.validation-api-2.0.2.jar \u2502 \u251c\u2500\u2500 jboss-logging-3.4.1.Final.jar \u2502 \u251c\u2500\u2500 jul-to-slf4j-1.7.30.jar \u2502 \u251c\u2500\u2500 log4j-api-2.12.1.jar \u2502 \u251c\u2500\u2500 log4j-to-slf4j-2.12.1.jar \u2502 \u251c\u2500\u2500 logback-classic-1.2.3.jar \u2502 \u251c\u2500\u2500 logback-core-1.2.3.jar \u2502 \u251c\u2500\u2500 ojdbc8-12.2.0.1.jar \u2502 \u251c\u2500\u2500 slf4j-api-1.7.30.jar \u2502 \u251c\u2500\u2500 snakeyaml-1.25.jar \u2502 \u251c\u2500\u2500 spring-aop-5.2.5.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-beans-5.2.5.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-boot-2.2.6.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-boot-autoconfigure-2.2.6.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-boot-starter-2.2.6.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-boot-starter-jdbc-2.2.6.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-boot-starter-json-2.2.6.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-boot-starter-logging-2.2.6.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-boot-starter-validation-2.2.6.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-boot-starter-web-2.2.6.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-context-5.2.5.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-core-5.2.5.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-expression-5.2.5.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-jcl-5.2.5.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-jdbc-5.2.5.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-tx-5.2.5.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-web-5.2.5.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-webmvc-5.2.5.RELEASE.jar \u2502 \u2514\u2500\u2500 ucp-12.2.0.1.jar \u251c\u2500\u2500 m4u3l1-0.0.1-SNAPSHOT.war \u251c\u2500\u2500 m4u3l1-0.0.1-SNAPSHOT.war.original \u251c\u2500\u2500 maven-archiver \u2502 \u2514\u2500\u2500 pom.properties \u251c\u2500\u2500 maven-status \u2502 \u2514\u2500\u2500 maven-compiler-plugin \u2502 \u251c\u2500\u2500 compile \u2502 \u2502 \u2514\u2500\u2500 default-compile \u2502 \u2502 \u251c\u2500\u2500 createdFiles.lst \u2502 \u2502 \u2514\u2500\u2500 inputFiles.lst \u2502 \u2514\u2500\u2500 testCompile \u2502 \u2514\u2500\u2500 default-testCompile \u2502 \u251c\u2500\u2500 createdFiles.lst \u2502 \u2514\u2500\u2500 inputFiles.lst \u251c\u2500\u2500 surefire-reports \u2502 \u251c\u2500\u2500 TEST-cl.lherrera.m4u2l2.M4u3l1ApplicationTests.xml \u2502 \u251c\u2500\u2500 TEST-cl.lherrera.m4u2l2.daos.UsuarioDaoImplTest.xml \u2502 \u251c\u2500\u2500 cl.lherrera.m4u2l2.M4u3l1ApplicationTests.txt \u2502 \u2514\u2500\u2500 cl.lherrera.m4u2l2.daos.UsuarioDaoImplTest.txt \u2514\u2500\u2500 test-classes \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 m5u3001 \u251c\u2500\u2500 M5u3001ApplicationTests.class \u2514\u2500\u2500 daos \u2514\u2500\u2500 UsuarioDaoImplTest.class 61 directories, 88 files Archivos modificados. /m5u3l001/pom.xml Contiene el Driver para la utilizaci\u00f3n de Oracle 11g con Maven. Ya que el repositorio no es Maven Central, este Driver del tipo 4 no se permite estar en Maven Central. /m5u3l001/src/main/java/cl/lherrera/m5u3001/AppConfig.java Contiene la configuraci\u00f3n personalizada para el ambiente en el que se est\u00e9 desarrollando esta aplicaci\u00f3n. /m5u3l001/src/main/java/cl/lherrera/m5u3001/daos/UsuarioDAO.java Interfaz del acceso a los datos del usuario. /m5u3l001/src/main/java/cl/lherrera/m5u3001/daos/UsuarioDAOImpl.java Una implementaci\u00f3n de la interfaz de acceso a los datos. /m5u3l001/src/main/java/cl/lherrera/m5u3001/mappers/UsuarioMapper.java Clase necesaria para que JDVC-TEMPLATE haga el mapa de los datos del modelo usuario, nos ahorra el tener que hacer el while(rs.next())... , adem\u00e1s es casi seguro que Spring maneja mejor que nosotros la conexi\u00f3n. /m5u3l001/src/main/java/cl/lherrera/m5u3001/models/Usuario.java Modelo contenedor de los datos de usuario. /m5u3l001/src/main/resources/database.properties Propiedades especialmente dise\u00f1adas para la base de datos. Se supone que esto debe estar en el gitignore , ya que producci\u00f3n debe poseer uno propio con otras credenciales m\u00e1s seguras. /m5u3l001/src/test/java/cl/lherrera/m5u3001/daos/UsuarioDaoImplTest.java Prueba el listar usuarios Implementaci\u00f3n /m5u3l001/pom.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.6.RELEASE</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>cl.lherrera.m4u2l2</groupId> <artifactId>m4u3l1</artifactId> <version>0.0.1-SNAPSHOT</version> <packaging>war</packaging> <name>m4u3l1</name> <description>Lectura 2 mod 4 uni 2</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-jdbc</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> <scope>provided</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> <!-- ODBC-ORACLE --> <dependency> <groupId>com.oracle.jdbc</groupId> <artifactId>ojdbc8</artifactId> <version>12.2.0.1</version> </dependency> <!-- ODBC-ORACLE # --> </dependencies> <!-- ODBC-ORACLE --> <repositories> <repository> <id>xwiki-externals</id> <name>https://maven.xwiki.org/externals/</name> <url>https://maven.xwiki.org/externals/</url> </repository> </repositories> <!-- ODBC-ORACLE # --> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project> /m5u3l001/src/main/java/cl/lherrera/m5u3001/AppConfig.java package cl.lherrera.m5u3001; import javax.sql.DataSource; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.PropertySource; import org.springframework.core.env.Environment; import org.springframework.jdbc.datasource.DriverManagerDataSource; @Configuration @ComponentScan(\"com.latam.usuarios\") @PropertySource(\"classpath:database.properties\") public class AppConfig { @Autowired Environment environment; @Bean DataSource dataSource() { DriverManagerDataSource driverManagerDataSource = new DriverManagerDataSource(); driverManagerDataSource.setUrl(environment.getProperty(\"url\")); driverManagerDataSource.setUsername(environment.getProperty(\"dbuser\")); driverManagerDataSource.setPassword(environment.getProperty(\"dbpassword\")); driverManagerDataSource.setDriverClassName(environment.getProperty(\"driver\")); return driverManagerDataSource; } } /m5u3l001/src/main/java/cl/lherrera/m5u3001/daos/UsuarioDAO.java package cl.lherrera.m5u3001.daos; import java.util.List; import cl.lherrera.m5u3001.models.Usuario; public interface UsuarioDAO { List<Usuario> getAllUsuarios(); } /m5u3l001/src/main/java/cl/lherrera/m5u3001/daos/UsuarioDAOImpl.java package cl.lherrera.m5u3001.daos; import java.util.List; import javax.sql.DataSource; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.jdbc.core.JdbcTemplate; import org.springframework.stereotype.Repository; import cl.lherrera.m5u3001.mappers.UsuarioMapper; import cl.lherrera.m5u3001.models.Usuario; @Repository public class UsuarioDAOImpl implements UsuarioDAO { JdbcTemplate jdbcTemplate; @Autowired public UsuarioDAOImpl(DataSource dataSource) { jdbcTemplate = new JdbcTemplate(dataSource); } public List<Usuario> getAllUsuarios() { return jdbcTemplate.query(\"select * from usuario\", new UsuarioMapper()); } } /m5u3l001/src/main/java/cl/lherrera/m5u3001/mappers/UsuarioMapper.java package cl.lherrera.m5u3001.mappers; import java.sql.ResultSet; import java.sql.SQLException; import org.springframework.jdbc.core.RowMapper; import cl.lherrera.m5u3001.models.Usuario; public class UsuarioMapper implements RowMapper<Usuario> { public Usuario mapRow(ResultSet resultSet, int i) throws SQLException { Usuario usuario = new Usuario(); usuario.setIdUsuario(resultSet.getInt(\"id_usuario\")); usuario.setNombre(resultSet.getString(\"nombre\")); usuario.setClave(resultSet.getString(\"clave\")); usuario.setRut(resultSet.getInt(\"rut\")); usuario.setDv(resultSet.getString(\"dv\")); return usuario; } } /m5u3l001/src/main/java/cl/lherrera/m5u3001/models/Usuario.java package cl.lherrera.m5u3001.models; public class Usuario { private Integer idUsuario; private String nombre; private String clave; private Integer rut; private String dv; public Usuario() {} public Usuario(Integer idUsuario, String nombre, String clave, Integer rut, String dv) { this.idUsuario = idUsuario; this.nombre = nombre; this.clave = clave; this.rut = rut; this.dv = dv; } public Integer getIdUsuario() { return idUsuario; } public void setIdUsuario(Integer idUsuario) { this.idUsuario = idUsuario; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } public String getClave() { return clave; } public void setClave(String clave) { this.clave = clave; } public Integer getRut() { return rut; } public void setRut(Integer rut) { this.rut = rut; } public String getDv() { return dv; } public void setDv(String dv) { this.dv = dv; } @Override public String toString() { return \"Usuario [idUsuario=\" + idUsuario + \", nombre=\" + nombre + \", clave=\" + clave + \", rut=\" + rut + \", dv=\" + dv + \"]\"; } } /m5u3l001/src/main/resources/database.properties driver=oracle.jdbc.driver.OracleDriver url=jdbc:oracle:thin:@localhost:1521:xe dbuser=mod5u2l1 dbpassword=1234 /m5u3l001/src/test/java/cl/lherrera/m5u3001/daos/UsuarioDaoImplTest.java package cl.lherrera.m5u3001.daos; import static org.junit.jupiter.api.Assertions.assertEquals; import java.util.List; import org.junit.jupiter.api.DisplayName; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.context.SpringBootTest; import cl.lherrera.m5u3001.daos.UsuarioDAOImpl; import cl.lherrera.m5u3001.models.Usuario; @SpringBootTest @DisplayName(\"Pruebas unitarias del DAO\") public class UsuarioDaoImplTest { @Autowired private UsuarioDAOImpl daoUsuario; @Test @DisplayName(\"Traer todos los usuarios\") public void prueba001() { // guadamos en una lista los usuarios List<Usuario> usuarios = daoUsuario.getAllUsuarios(); // deben existir 2 usuarios en la base de datos assertEquals(2, usuarios.size()); } } (20) La capa de servicio Introducci\u00f3n vamos a crear la capa de servicio de la aplicaci\u00f3n de usuarios que comenzamos en el cap\u00edtulo 1 de la unidad. es aquella que manejar\u00e1 todos los c\u00e1lculos \"l\u00f3gica\" del negocio que se necesiten hacer en la aplicaci\u00f3n. mantener el c\u00f3digo ordenado, , siempre sabremos d\u00f3nde buscar. Los estereotipos de Spring. Los estereotipos, en resumen, son interfaces que al ser implementadas (o al usar su anotaci\u00f3n) van a ser tratadas como un Bean. Las anotaciones @Service , @Controller y @Repository Son estereotipos de org.springframework.stereotype y estas tres anotaciones son @Component , donde (comprobar, aceptable por ahora: los componentes son \"componentes de negocio\" y sus anotaciones estereotipados, son el tipo de componente, cada rol con su anotaci\u00f3n). La finalidad de la capa de servicio es Quitar la l\u00f3gica de negocio del controlador. (27) CRUD con JdbcTemplate . Se expondr\u00e1n adem\u00e1s en el siguiente ejemplo, el uso de un CRUD usando JDBC-TEMPLATE`` (Se puede seguir con la lectura, aunque el del ejemplo lherrera`, posee cambios) Proyecto completo Lectura Hay que tener en cuenta que el servicio incluido en el siguiente ejemplo, es a modo de ejemplo, no es una pr\u00e1ctica muy utilizada DDL - BORRADOR create table USUARIO ( ID_USUARIO NUMBER(18), NOMBRE VARCHAR2(200), CLAVE VARCHAR2(200), RUT NUMBER(10), DV CHAR ); CREATE SEQUENCE SQ_USUARIO MINVALUE 1 START WITH 1 INCREMENT BY 1 CACHE 10; SELECT * FROM USUARIO; -- delete from usuario where nombre = 'test2' INSERT INTO USUARIO (\"ID_USUARIO\", \"NOMBRE\", \"CLAVE\", \"RUT\", \"DV\") VALUES (SQ_USUARIO.nextval, 'user1', 'clave1', 10, '9'); INSERT INTO USUARIO (\"ID_USUARIO\", \"NOMBRE\", \"CLAVE\", \"RUT\", \"DV\") VALUES (SQ_USUARIO.nextval, 'user2', 'clave2', 10, 'k'); select * from USUARIO where nombre='user1' and clave='clave1' and rownum = 1 Estructura ./ \u251c\u2500\u2500 HELP.md \u251c\u2500\u2500 mvnw \u251c\u2500\u2500 mvnw.cmd \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 m5u3001 \u2502 \u2502 \u2502 \u251c\u2500\u2500 AppConfig.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 M5u3001Application.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 ServletInitializer.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 daos \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 UsuarioDAO.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioDAOImpl.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 mappers \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioMapper.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 models \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 Usuario.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 services \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 UsuarioService.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioServiceImpl.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 vo \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioVO.java \u2502 \u2502 \u251c\u2500\u2500 resources \u2502 \u2502 \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2502 \u2502 \u251c\u2500\u2500 database.properties \u2502 \u2502 \u2502 \u251c\u2500\u2500 static \u2502 \u2502 \u2502 \u2514\u2500\u2500 templates \u2502 \u2502 \u2514\u2500\u2500 webapp \u2502 \u2514\u2500\u2500 test \u2502 \u2514\u2500\u2500 java \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 m5u3001 \u2502 \u251c\u2500\u2500 M5u3001ApplicationTests.java \u2502 \u251c\u2500\u2500 daos \u2502 \u2502 \u2514\u2500\u2500 UsuarioDaoImplTest.java \u2502 \u2514\u2500\u2500 services \u2502 \u2514\u2500\u2500 UsuarioServiceTest.java \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 application.properties \u2502 \u251c\u2500\u2500 cl \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2514\u2500\u2500 m5u3001 \u2502 \u2502 \u251c\u2500\u2500 AppConfig.class \u2502 \u2502 \u251c\u2500\u2500 M5u3001Application.class \u2502 \u2502 \u251c\u2500\u2500 ServletInitializer.class \u2502 \u2502 \u251c\u2500\u2500 daos \u2502 \u2502 \u2502 \u251c\u2500\u2500 UsuarioDAO.class \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioDAOImpl.class \u2502 \u2502 \u251c\u2500\u2500 mappers \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioMapper.class \u2502 \u2502 \u251c\u2500\u2500 models \u2502 \u2502 \u2502 \u2514\u2500\u2500 Usuario.class \u2502 \u2502 \u251c\u2500\u2500 services \u2502 \u2502 \u2502 \u251c\u2500\u2500 UsuarioService.class \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioServiceImpl.class \u2502 \u2502 \u2514\u2500\u2500 vo \u2502 \u2502 \u2514\u2500\u2500 UsuarioVO.class \u2502 \u2514\u2500\u2500 database.properties \u251c\u2500\u2500 generated-sources \u2502 \u2514\u2500\u2500 annotations \u251c\u2500\u2500 generated-test-sources \u2502 \u2514\u2500\u2500 test-annotations \u251c\u2500\u2500 m2e-wtp \u2502 \u2514\u2500\u2500 web-resources \u2502 \u2514\u2500\u2500 META-INF \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 maven \u2502 \u2514\u2500\u2500 cl.lherrera.m4u2l2 \u2502 \u2514\u2500\u2500 m4u3l1 \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2514\u2500\u2500 pom.xml \u251c\u2500\u2500 m4u3l1-0.0.1-SNAPSHOT \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2514\u2500\u2500 WEB-INF \u2502 \u251c\u2500\u2500 classes \u2502 \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2502 \u251c\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 m4u2l2 \u2502 \u2502 \u2502 \u251c\u2500\u2500 AppConfig.class \u2502 \u2502 \u2502 \u251c\u2500\u2500 M4u3l1Application.class \u2502 \u2502 \u2502 \u251c\u2500\u2500 ServletInitializer.class \u2502 \u2502 \u2502 \u251c\u2500\u2500 daos \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 UsuarioDAO.class \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioDAOImpl.class \u2502 \u2502 \u2502 \u251c\u2500\u2500 mappers \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioMapper.class \u2502 \u2502 \u2502 \u2514\u2500\u2500 models \u2502 \u2502 \u2502 \u2514\u2500\u2500 Usuario.class \u2502 \u2502 \u2514\u2500\u2500 database.properties \u2502 \u2514\u2500\u2500 lib \u2502 \u251c\u2500\u2500 HikariCP-3.4.2.jar \u2502 \u251c\u2500\u2500 classmate-1.5.1.jar \u2502 \u251c\u2500\u2500 hibernate-validator-6.0.18.Final.jar \u2502 \u251c\u2500\u2500 jackson-annotations-2.10.3.jar \u2502 \u251c\u2500\u2500 jackson-core-2.10.3.jar \u2502 \u251c\u2500\u2500 jackson-databind-2.10.3.jar \u2502 \u251c\u2500\u2500 jackson-datatype-jdk8-2.10.3.jar \u2502 \u251c\u2500\u2500 jackson-datatype-jsr310-2.10.3.jar \u2502 \u251c\u2500\u2500 jackson-module-parameter-names-2.10.3.jar \u2502 \u251c\u2500\u2500 jakarta.annotation-api-1.3.5.jar \u2502 \u251c\u2500\u2500 jakarta.validation-api-2.0.2.jar \u2502 \u251c\u2500\u2500 jboss-logging-3.4.1.Final.jar \u2502 \u251c\u2500\u2500 jul-to-slf4j-1.7.30.jar \u2502 \u251c\u2500\u2500 log4j-api-2.12.1.jar \u2502 \u251c\u2500\u2500 log4j-to-slf4j-2.12.1.jar \u2502 \u251c\u2500\u2500 logback-classic-1.2.3.jar \u2502 \u251c\u2500\u2500 logback-core-1.2.3.jar \u2502 \u251c\u2500\u2500 ojdbc8-12.2.0.1.jar \u2502 \u251c\u2500\u2500 slf4j-api-1.7.30.jar \u2502 \u251c\u2500\u2500 snakeyaml-1.25.jar \u2502 \u251c\u2500\u2500 spring-aop-5.2.5.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-beans-5.2.5.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-boot-2.2.6.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-boot-autoconfigure-2.2.6.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-boot-starter-2.2.6.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-boot-starter-jdbc-2.2.6.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-boot-starter-json-2.2.6.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-boot-starter-logging-2.2.6.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-boot-starter-validation-2.2.6.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-boot-starter-web-2.2.6.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-context-5.2.5.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-core-5.2.5.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-expression-5.2.5.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-jcl-5.2.5.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-jdbc-5.2.5.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-tx-5.2.5.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-web-5.2.5.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-webmvc-5.2.5.RELEASE.jar \u2502 \u2514\u2500\u2500 ucp-12.2.0.1.jar \u251c\u2500\u2500 m4u3l1-0.0.1-SNAPSHOT.war \u251c\u2500\u2500 m4u3l1-0.0.1-SNAPSHOT.war.original \u251c\u2500\u2500 maven-archiver \u2502 \u2514\u2500\u2500 pom.properties \u251c\u2500\u2500 maven-status \u2502 \u2514\u2500\u2500 maven-compiler-plugin \u2502 \u251c\u2500\u2500 compile \u2502 \u2502 \u2514\u2500\u2500 default-compile \u2502 \u2502 \u251c\u2500\u2500 createdFiles.lst \u2502 \u2502 \u2514\u2500\u2500 inputFiles.lst \u2502 \u2514\u2500\u2500 testCompile \u2502 \u2514\u2500\u2500 default-testCompile \u2502 \u251c\u2500\u2500 createdFiles.lst \u2502 \u2514\u2500\u2500 inputFiles.lst \u251c\u2500\u2500 surefire-reports \u2502 \u251c\u2500\u2500 TEST-cl.lherrera.m4u2l2.M4u3l1ApplicationTests.xml \u2502 \u251c\u2500\u2500 TEST-cl.lherrera.m4u2l2.daos.UsuarioDaoImplTest.xml \u2502 \u251c\u2500\u2500 cl.lherrera.m4u2l2.M4u3l1ApplicationTests.txt \u2502 \u2514\u2500\u2500 cl.lherrera.m4u2l2.daos.UsuarioDaoImplTest.txt \u2514\u2500\u2500 test-classes \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 m5u3001 \u251c\u2500\u2500 M5u3001ApplicationTests.class \u251c\u2500\u2500 daos \u2502 \u2514\u2500\u2500 UsuarioDaoImplTest.class \u2514\u2500\u2500 services \u2514\u2500\u2500 UsuarioServiceTest.class 67 directories, 96 files Archivos modificados /m5u3l001/src/main/java/cl/lherrera/m5u3001/AppConfig.java package cl.lherrera.m5u3001; import javax.sql.DataSource; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.PropertySource; import org.springframework.core.env.Environment; import org.springframework.jdbc.datasource.DriverManagerDataSource; @Configuration @ComponentScan(\"com.latam.usuarios\") @PropertySource(\"classpath:database.properties\") public class AppConfig { @Autowired Environment environment; @Bean DataSource dataSource() { DriverManagerDataSource driverManagerDataSource = new DriverManagerDataSource(); driverManagerDataSource.setUrl(environment.getProperty(\"url\")); driverManagerDataSource.setUsername(environment.getProperty(\"dbuser\")); driverManagerDataSource.setPassword(environment.getProperty(\"dbpassword\")); driverManagerDataSource.setDriverClassName(environment.getProperty(\"driver\")); return driverManagerDataSource; } } /m5u3l001/src/main/java/cl/lherrera/m5u3001/daos/UsuarioDAO.java package cl.lherrera.m5u3001.daos; import java.util.List; import cl.lherrera.m5u3001.models.Usuario; public interface UsuarioDAO { List<Usuario> getAllUsuarios(); Usuario findByNombreAndClave(String nombre, String clave); /* * Nuevos m\u00e9todos del CRUD */ public int add(Usuario usuario); public int update(Usuario usuario); public int delete(Usuario usuario); } /m5u3l001/src/main/java/cl/lherrera/m5u3001/daos/UsuarioDAOImpl.java package cl.lherrera.m5u3001.daos; import java.util.List; import javax.sql.DataSource; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.jdbc.core.JdbcTemplate; import org.springframework.stereotype.Repository; import cl.lherrera.m5u3001.mappers.UsuarioMapper; import cl.lherrera.m5u3001.models.Usuario; @Repository public class UsuarioDAOImpl implements UsuarioDAO { JdbcTemplate jdbcTemplate; @Autowired public UsuarioDAOImpl(DataSource dataSource) { jdbcTemplate = new JdbcTemplate(dataSource); } public List<Usuario> getAllUsuarios() { return jdbcTemplate.query(\"select * from usuario\", new UsuarioMapper()); } public Usuario findByNombreAndClave(String nombre, String clave) { // Se utilizan \"?\" para denotar las posici\u00f3nes de los par\u00e1metros (l\u00edmite 1) // se limita por que pueden existir varios con el mismo nombre. String sqlText = \"select * from USUARIO where nombre=? and clave=? and rownum = 1\"; // Esta es la lista que llenar\u00e1 los signos de interrogaci\u00f3n de la consulta. // Otra utlidad para ahorrar el rs.setString()... Object[] parametros = new Object[] { nombre, clave }; // Se le pasa una implementaci\u00f3n de RowMapper<T> (En este caso una de Usuario) UsuarioMapper mapaDeUsuario = new UsuarioMapper(); // el retorno es seg\u00fan el tipo de mapa. return jdbcTemplate.queryForObject(sqlText, parametros, mapaDeUsuario); } // CRUD @Override public int add(Usuario usuario) { return jdbcTemplate.update( \"insert into usuario values (sq_usuario.nextval, ?, ?, ?, ?)\", usuario.getNombre(), usuario.getClave(), usuario.getRut(), usuario.getDv() ); } @Override public int update(Usuario usuario) { return jdbcTemplate.update( \"update usuario set nombre = ?, clave = ?, rut = ?, dv = ? where id_usuario = ?\", usuario.getNombre(), usuario.getClave(), usuario.getRut(), usuario.getDv(), usuario.getIdUsuario() ); } @Override public int delete(Usuario usuario) { return jdbcTemplate.update( \"delete from usuario where id_usuario = ?\", usuario.getIdUsuario() ); } } /m5u3l001/src/main/java/cl/lherrera/m5u3001/mappers/UsuarioMapper.java package cl.lherrera.m5u3001.mappers; import java.sql.ResultSet; import java.sql.SQLException; import org.springframework.jdbc.core.RowMapper; import cl.lherrera.m5u3001.models.Usuario; public class UsuarioMapper implements RowMapper<Usuario> { public Usuario mapRow(ResultSet resultSet, int i) throws SQLException { Usuario usuario = new Usuario(); usuario.setIdUsuario(resultSet.getInt(\"id_usuario\")); usuario.setNombre(resultSet.getString(\"nombre\")); usuario.setClave(resultSet.getString(\"clave\")); usuario.setRut(resultSet.getInt(\"rut\")); usuario.setDv(resultSet.getString(\"dv\")); return usuario; } } /m5u3l001/src/main/java/cl/lherrera/m5u3001/models/Usuario.java package cl.lherrera.m5u3001.models; public class Usuario { private Integer idUsuario; private String nombre; private String clave; private Integer rut; private String dv; public Usuario() {} public Usuario(Integer idUsuario, String nombre, String clave, Integer rut, String dv) { this.idUsuario = idUsuario; this.nombre = nombre; this.clave = clave; this.rut = rut; this.dv = dv; } public Integer getIdUsuario() { return idUsuario; } public void setIdUsuario(Integer idUsuario) { this.idUsuario = idUsuario; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } public String getClave() { return clave; } public void setClave(String clave) { this.clave = clave; } public Integer getRut() { return rut; } public void setRut(Integer rut) { this.rut = rut; } public String getDv() { return dv; } public void setDv(String dv) { this.dv = dv; } @Override public String toString() { return \"Usuario [idUsuario=\" + idUsuario + \", nombre=\" + nombre + \", clave=\" + clave + \", rut=\" + rut + \", dv=\" + dv + \"]\"; } } /m5u3l001/src/main/java/cl/lherrera/m5u3001/services/UsuarioService.java package cl.lherrera.m5u3001.services; import cl.lherrera.m5u3001.models.Usuario; import cl.lherrera.m5u3001.vo.UsuarioVO; public interface UsuarioService { // por defectos son public abstract, es por esa raz\u00f3n que no hay problemas // con el alcance de paquetes, ya que en esta ocaci\u00f3n no son por defecto seteados con // el modificador de paquetes. UsuarioVO obtenerTodosLosUsuarios(); UsuarioVO obtenerUsuarioPorNombreYClave(String nombre, String clave); UsuarioVO login(String nombre, String clave); // para justificar el crud (Los servicios no son r\u00edgidos, se adaptan a la necesidad espec\u00edfica) // en este caso los m\u00e9todos son con el mismo nombre que la implementaci\u00f3n del DAO // pero es solamente a modo de ejemplo del ejercicio, ya que existe un UsuarioVO, enfocado a lo // que se muestra en pantalla es por eso que en el fondo el servicio llena esos // objetos, pero la implementaci\u00f3n de los m\u00e9todos de negocio van m\u00e1s all\u00e1 que simplemente // retornar objetos tipo VO o DTOs. UsuarioVO add(Usuario usuario); UsuarioVO update(Usuario usuario); UsuarioVO delete(Usuario usuario); } /m5u3l001/src/main/java/cl/lherrera/m5u3001/services/UsuarioServiceImpl.java package cl.lherrera.m5u3001.services; import java.util.ArrayList; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import cl.lherrera.m5u3001.daos.UsuarioDAO; import cl.lherrera.m5u3001.models.Usuario; import cl.lherrera.m5u3001.vo.UsuarioVO; @Service public class UsuarioServiceImpl implements UsuarioService { private static Logger logger = LoggerFactory.getLogger(UsuarioServiceImpl.class.getName()); @Autowired private UsuarioDAO daoUsuario; @Override public UsuarioVO obtenerTodosLosUsuarios() { UsuarioVO voUsuario = new UsuarioVO(new ArrayList<Usuario>(), \"Ha ocurrido un error\", \"102\"); try { voUsuario.setUsuarios(new ArrayList<>(daoUsuario.getAllUsuarios())); voUsuario.setMensaje(String.format(\"Se ha/n encontrado %d registro/s\", voUsuario.getUsuarios().size())); voUsuario.setCodigo(\"0\"); } catch (Exception e) { logger.trace(\"Usuario Service: Error en getAllUsuarios\", e); } return voUsuario; } @Override public UsuarioVO obtenerUsuarioPorNombreYClave(String nombre, String clave) { UsuarioVO voUsuario = new UsuarioVO(new ArrayList<Usuario>(), \"Ha ocurrido un error\", \"101\"); try { Usuario usuario = daoUsuario.findByNombreAndClave(nombre, clave); voUsuario.getUsuarios().add(usuario); voUsuario.setMensaje(String.format(\"Se ha/n encontrado %d registro/s\", null != usuario ? 1 : 0)); voUsuario.setCodigo(\"0\"); } catch (Exception e) { logger.trace(\"Usuario Service: Error en findByNombreAndClave\", e); } return voUsuario; } @Override public UsuarioVO login(String nombre, String clave) { UsuarioVO voUsuario = new UsuarioVO(new ArrayList<Usuario>(), \"Credenciales incorrectas\", \"102\"); boolean credencialesVacias = nombre.length() == 0 || clave.length() == 0; if (!credencialesVacias) { voUsuario = this.obtenerUsuarioPorNombreYClave(nombre, clave); if (voUsuario.getCodigo().equals(\"0\")) { voUsuario.setMensaje(String.format(\"Bienvenido %s\", voUsuario.getUsuarios().get(0).getNombre())); } } return voUsuario; } // Justificando el CRUD // UsuarioServiceImpl @Override public UsuarioVO add(Usuario usuario) { UsuarioVO voUsuario = new UsuarioVO(new ArrayList<Usuario>(), \"Ha ocurrido un error\", \"104\"); try { int registrosActualizados = daoUsuario.add(usuario); voUsuario.setMensaje(registrosActualizados == 1 ? \"Se ha creado el usuario correctamente\" : \"No se ha podido crear el usuario\"); voUsuario.setCodigo(registrosActualizados == 1 ? \"0\" : \"104\"); } catch (Exception e) { logger.trace(\"Usuario Service: Error en add\", e); } return voUsuario; } @Override public UsuarioVO update(Usuario usuario) { UsuarioVO voUsuario = new UsuarioVO(new ArrayList<Usuario>(), \"Ha ocurrido un error\", \"105\"); try { int registrosActualizados = daoUsuario.update(usuario); voUsuario .setMensaje(String.format(\"Se ha/n actualizado correctamente %d usuario/s\", registrosActualizados)); voUsuario.setCodigo(\"0\"); } catch (Exception e) { logger.trace(\"Usuario Service: Error en update\", e); } return voUsuario; } @Override public UsuarioVO delete(Usuario usuario) { UsuarioVO voUsuario = new UsuarioVO(new ArrayList<Usuario>(), \"Ha ocurrido un error\", \"106\"); try { int registrosActualizados = daoUsuario.delete(usuario); voUsuario .setMensaje(String.format(\"Se ha/n eliminado correctamente a %d usuario/s\", registrosActualizados)); voUsuario.setCodigo(\"0\"); } catch (Exception e) { logger.trace(\"Usuario Service: Error en delete\", e); } return voUsuario; } } /m5u3l001/src/main/java/cl/lherrera/m5u3001/vo/UsuarioVO.java package cl.lherrera.m5u3001.vo; import java.util.List; import cl.lherrera.m5u3001.models.Usuario; public class UsuarioVO { private List<Usuario> usuarios; private String mensaje; private String codigo; public UsuarioVO() {} public UsuarioVO(List<Usuario> usuarios, String mensaje, String codigo) { super(); this.usuarios = usuarios; this.mensaje = mensaje; this.codigo = codigo; } public List<Usuario> getUsuarios() { return usuarios; } public void setUsuarios(List<Usuario> usuarios) { this.usuarios = usuarios; } public String getMensaje() { return mensaje; } public void setMensaje(String mensaje) { this.mensaje = mensaje; } public String getCodigo() { return codigo; } public void setCodigo(String codigo) { this.codigo = codigo; } @Override public String toString() { return \"UsuarioVO [mensaje=\" + mensaje + \", codigo=\" + codigo + \"]\"; } } /m5u3l001/src/main/resources/database.properties driver=oracle.jdbc.driver.OracleDriver url=jdbc:oracle:thin:@localhost:1521:xe dbuser=mod5u2l1 dbpassword=1234 /m5u3l001/src/test/java/cl/lherrera/m5u3001/daos/UsuarioDaoImplTest.java package cl.lherrera.m5u3001.daos; import static org.junit.jupiter.api.Assertions.assertEquals; import static org.junit.jupiter.api.Assertions.assertTrue; import java.util.List; import org.junit.jupiter.api.DisplayName; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.context.SpringBootTest; import cl.lherrera.m5u3001.daos.UsuarioDAOImpl; import cl.lherrera.m5u3001.models.Usuario; @SpringBootTest @DisplayName(\"Pruebas unitarias del DAO\") public class UsuarioDaoImplTest { @Autowired private UsuarioDAOImpl daoUsuario; @Test @DisplayName(\"Traer todos los usuarios\") public void prueba001() { // guadamos en una lista los usuarios List<Usuario> usuarios = daoUsuario.getAllUsuarios(); // deben existir 2 usuarios en la base de datos assertTrue(usuarios.size() >= 2); } @Test @DisplayName(\"traer al usuario user1 - clave1\") public void prueba002() { // buscar el usuario con la clave y contrase\u00f1a // este usuario debe estar en la base de datos Usuario usuario = daoUsuario.findByNombreAndClave(\"user1\", \"clave1\"); // comparamos con el nombre assertEquals(\"user1\", usuario.getNombre()); } } /m5u3l001/src/test/java/cl/lherrera/m5u3001/services/UsuarioServiceTest.java package cl.lherrera.m5u3001.services; // ojo con los nombres de paquetes, mejor que sean iguales para no perder el contexto import static org.junit.jupiter.api.Assertions.assertTrue; import org.junit.jupiter.api.DisplayName; import org.junit.jupiter.api.Test; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.context.SpringBootTest; import cl.lherrera.m5u3001.models.Usuario; import cl.lherrera.m5u3001.vo.UsuarioVO; @SpringBootTest @DisplayName(\"Prueba de servicios\") public class UsuarioServiceTest { private Logger logger = LoggerFactory.getLogger(UsuarioServiceTest.class.getName()); @Autowired UsuarioService servicioUsuario; @Test @DisplayName(\"Prueba de servicio de login\") public void prueba001() { // capturar mensaje String mensaje = servicioUsuario.login(\"user1\", \"clave1\").getMensaje(); // comparar con respuesta assertTrue(mensaje.contains(\"Bienvenido\")); } // Probamos CRUD // se agrega, se actualiza y se elimina el mismo dato, dejando la base de datos // de pruebas estable. (esta no debe ser una base de datos oficial @Test @DisplayName(\"Probar servicio add\") public void prueba002() { // creamos un usuario Usuario usuario = new Usuario(); usuario.setNombre(\"test1\"); usuario.setClave(\"clave1\"); // ingresamos el usuario con el servicio UsuarioVO respuesta = servicioUsuario.add(usuario); assertTrue(respuesta.getMensaje().contains(\"Se ha creado el usuario correctamente\")); } @Test @DisplayName(\"Prueba servicio update\") public void prueba003() { // llamamos al usuario UsuarioVO usuarioVo = servicioUsuario.obtenerUsuarioPorNombreYClave(\"test1\", \"clave1\"); Usuario usuario = usuarioVo.getUsuarios().get(0); // cambiamos un valor usuario.setNombre(\"test2\"); usuarioVo = servicioUsuario.update(usuario); // comprobamos con mensaje retornado del servicio assertTrue(usuarioVo.getMensaje().contains(\"actualizado correctamente\")); } @Test @DisplayName(\"Prueba de eliminado\") public void prueba004() { // se busca el usuario UsuarioVO usuarioVo = servicioUsuario.obtenerUsuarioPorNombreYClave(\"test2\", \"clave1\"); Usuario usuario = usuarioVo.getUsuarios().get(0); usuarioVo = servicioUsuario.delete(usuario); assertTrue(usuarioVo.getMensaje().contains(\"eliminado correctamente\")); } } /m5u3l001/pom.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.6.RELEASE</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>cl.lherrera.m4u2l2</groupId> <artifactId>m4u3l1</artifactId> <version>0.0.1-SNAPSHOT</version> <packaging>war</packaging> <name>m4u3l1</name> <description>Lectura 2 mod 4 uni 2</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-jdbc</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> <scope>provided</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> <!-- ODBC-ORACLE --> <dependency> <groupId>com.oracle.jdbc</groupId> <artifactId>ojdbc8</artifactId> <version>12.2.0.1</version> </dependency> <!-- ODBC-ORACLE # --> </dependencies> <!-- ODBC-ORACLE --> <repositories> <repository> <id>xwiki-externals</id> <name>https://maven.xwiki.org/externals/</name> <url>https://maven.xwiki.org/externals/</url> </repository> </repositories> <!-- ODBC-ORACLE # --> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project>","title":"Lectura001"},{"location":"modulos/mod_5/uni003/lectura001/#unidad-31-modelo","text":"Esta gu\u00eda es de soporte a la lectura, se debe ir recorriendo junto a la lectura 1 (1)","title":"Unidad 3.1 - Modelo"},{"location":"modulos/mod_5/uni003/lectura001/#jdbc","text":"","title":"JDBC"},{"location":"modulos/mod_5/uni003/lectura001/#introduccion","text":"conocer JDBC diferencias que tiene con JdbcTemplate . c\u00f3mo utilizarlo y sus ventajas y desventajas. ejemplo de implementaci\u00f3n de JdbcTemplate con una aplicaci\u00f3n b\u00e1sica que consulta una tabla de base de datos. (2)","title":"Introducci\u00f3n"},{"location":"modulos/mod_5/uni003/lectura001/#que-es-jdbctemplate","text":"Java DataBase Connectivity crearon funciones predefinidas. podemos llamar m\u00e1s f\u00e1cilmente las conexiones API soporta la mayor\u00eda de las bases de datos m\u00e1s conocidas que utilizan SQL como lenguaje, como PostgreSQL, MySQL Server, Oracle 11g, etc. (3)","title":"\u00bfQu\u00e9 es JdbcTemplate?"},{"location":"modulos/mod_5/uni003/lectura001/#usando-y-entendiendo-jdbc","text":"Ya hemos conocido el funcionamiento de JDBC, para conectar SQLite y Oracle. por lo tanto nos podemos saltar esta parte. Se habla de los tipos de datos a elegir, nosotros ya hemos trabajado con Oracle 11 Database Thin Type 4 JDBC que es de tipo 4. Tipo 4 - 100% Pure Java: Se comunica dir\u00e9ctamente con el SGBD sin intermediarios. Es el driver de mejor performance disponible y por lo general es provisto por el mismo creador del SGBD (Sistema de gesti\u00f3n de base de datos).","title":"Usando y entendiendo JDBC."},{"location":"modulos/mod_5/uni003/lectura001/#que-driver-debo-elegir","text":"Si est\u00e1s accediendo s\u00f3lo a un tipo de SGBD, tu opci\u00f3n es el de tipo 4. Si tu aplicaci\u00f3n consulta m\u00faltiples SGBD al mismo tiempo, debes usar el 3. Si el motor de bases de datos que se utiliza no provee de un driver de tipo 3 ni 4, deber\u00edas usar el driver de tipo 2. El driver de tipo 1 no es considerado un driver que pueda utilizarse en sistemas en ambientes productivos, s\u00f3lo deber\u00eda utilizarse para ambientes de desarrollo (es muy raro ver este tipo de driver , ya que es muy antiguo). Explicaci\u00f3n por qu\u00e9 con Oracle podemos saltarnos en Class.forName()... En versiones anteriores a la 4.0 de JDBC (JDK 5 o posterior) se debe agregar el nombre del Driver a utilizar con Class.forName(\"foo.Driver\") antes de declarar Connection , ya que DriverManager no realiza el escaneo autom\u00e1ticamente el proyecto para buscar el Driver necesario para generar la conexi\u00f3n, para que este escaneo funcione se debe establecer el nombre de la clase Driver a utilizar dentro de un archivo .properties (en src/main/resources ) que contenga la entrada jdbc.Drivers=foo.Driver . Esto ayuda a no fallar con el principio DRY, ya que no se debe utilizar Class.forName(\"foo.Driver\") en cada conexi\u00f3n. Lo dem\u00e1s son im\u00e1genes y algunos m\u00e9todos con consultas incrustadas, se mezcla l\u00f3gica de acceso a datos y l\u00f3gica de negocio. Es por eso que las siguientes p\u00e1ginas son solamente expositivas. (7)","title":"\u00bfQu\u00e9 Driver debo elegir?"},{"location":"modulos/mod_5/uni003/lectura001/#entendiendo-spring-jdbc-jdbctemplate","text":"JDBC es una API muy pesada en si misma hablando en el contexto de lo que el servidor ejecuta cada vez que se realiza una conexi\u00f3n. (Aunque con un S\u00edngleton exista solamente una instancia). Un encontrar todos normal en JDBC public List<Usuario> findAll() { try (Connection con = DriverManager.getConnection(\"jdbc:oracle:thin:@localhost:xe\", \"root\", \"root\")) { List<Usuario> usuarios = new ArrayList<>(); Usuario usuario = null; Statement stmt = con.createStatement(\"select login, clave from Usuario\"); ResultSet rs = stmt.execute(); while (rs.next()) { usuario = new Usuario(rs.getString(1), rs.getString(2)); usuarios.add(usuario); } return usuarios; } catch (Exception e) { System.out.println(e); } } Ejemplo con JDBC-TEMPLATE. public List<Usuario> findAll(){ return jdbcTemplate.query(\"select login, clave from Usuario\", new UsuarioMapper()); } (9)","title":"Entendiendo Spring JDBC (JdbcTemplate)."},{"location":"modulos/mod_5/uni003/lectura001/#creando-la-capa-de-acceso-a-datos","text":"La siguiente, es una aplicaci\u00f3n, es un ejemplo del uso de JDBC-TEMPLATE y el trabajo de la capa de acceso a datos con Spring. Incluir: JDBC-API","title":"Creando la capa de acceso a datos."},{"location":"modulos/mod_5/uni003/lectura001/#ddl","text":"Motor: `Oracle 11g` Credenciales: Usuario Administrador: `system`, `oracle` Usuario Aplicaci\u00f3n: `mod5u2l1`, `1234` CREATE TABLE USUARIO ( ID_USUARIO NUMBER(18), NOMBRE VARCHAR2(200), CLAVE VARCHAR2(200), RUT NUMBER(10), DV CHAR ); -- autoincremental CREATE SEQUENCE SQ_USUARIO MINVALUE 1 START WITH 1 INCREMENT BY 1 CACHE 10; INSERT INTO \"ROOT\".\"USUARIO\" (\"ID_USUARIO\", \"NOMBRE\", \"CLAVE\", \"RUT\", \"DV\") VALUES (SQ_USUARIO.nextval, 'user1', 'clave1', 10, '9'); INSERT INTO \"ROOT\".\"USUARIO\" (\"ID_USUARIO\", \"NOMBRE\", \"CLAVE\", \"RUT\", \"DV\") VALUES (SQ_USUARIO.nextval, 'user2', 'clave2', 10, 'k');","title":"DDL"},{"location":"modulos/mod_5/uni003/lectura001/#estructura","text":"./ \u251c\u2500\u2500 HELP.md \u251c\u2500\u2500 mvnw \u251c\u2500\u2500 mvnw.cmd \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 m5u3001 \u2502 \u2502 \u2502 \u251c\u2500\u2500 AppConfig.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 M5u3001Application.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 ServletInitializer.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 daos \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 UsuarioDAO.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioDAOImpl.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 mappers \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioMapper.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 models \u2502 \u2502 \u2502 \u2514\u2500\u2500 Usuario.java \u2502 \u2502 \u251c\u2500\u2500 resources \u2502 \u2502 \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2502 \u2502 \u251c\u2500\u2500 database.properties \u2502 \u2502 \u2502 \u251c\u2500\u2500 static \u2502 \u2502 \u2502 \u2514\u2500\u2500 templates \u2502 \u2502 \u2514\u2500\u2500 webapp \u2502 \u2514\u2500\u2500 test \u2502 \u2514\u2500\u2500 java \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 m5u3001 \u2502 \u251c\u2500\u2500 M5u3001ApplicationTests.java \u2502 \u2514\u2500\u2500 daos \u2502 \u2514\u2500\u2500 UsuarioDaoImplTest.java \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 application.properties \u2502 \u251c\u2500\u2500 cl \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2514\u2500\u2500 m5u3001 \u2502 \u2502 \u251c\u2500\u2500 AppConfig.class \u2502 \u2502 \u251c\u2500\u2500 M5u3001Application.class \u2502 \u2502 \u251c\u2500\u2500 ServletInitializer.class \u2502 \u2502 \u251c\u2500\u2500 daos \u2502 \u2502 \u2502 \u251c\u2500\u2500 UsuarioDAO.class \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioDAOImpl.class \u2502 \u2502 \u251c\u2500\u2500 mappers \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioMapper.class \u2502 \u2502 \u2514\u2500\u2500 models \u2502 \u2502 \u2514\u2500\u2500 Usuario.class \u2502 \u2514\u2500\u2500 database.properties \u251c\u2500\u2500 generated-sources \u2502 \u2514\u2500\u2500 annotations \u251c\u2500\u2500 generated-test-sources \u2502 \u2514\u2500\u2500 test-annotations \u251c\u2500\u2500 m2e-wtp \u2502 \u2514\u2500\u2500 web-resources \u2502 \u2514\u2500\u2500 META-INF \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 maven \u2502 \u2514\u2500\u2500 cl.lherrera.m4u2l2 \u2502 \u2514\u2500\u2500 m4u3l1 \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2514\u2500\u2500 pom.xml \u251c\u2500\u2500 m4u3l1-0.0.1-SNAPSHOT \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2514\u2500\u2500 WEB-INF \u2502 \u251c\u2500\u2500 classes \u2502 \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2502 \u251c\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 m4u2l2 \u2502 \u2502 \u2502 \u251c\u2500\u2500 AppConfig.class \u2502 \u2502 \u2502 \u251c\u2500\u2500 M4u3l1Application.class \u2502 \u2502 \u2502 \u251c\u2500\u2500 ServletInitializer.class \u2502 \u2502 \u2502 \u251c\u2500\u2500 daos \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 UsuarioDAO.class \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioDAOImpl.class \u2502 \u2502 \u2502 \u251c\u2500\u2500 mappers \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioMapper.class \u2502 \u2502 \u2502 \u2514\u2500\u2500 models \u2502 \u2502 \u2502 \u2514\u2500\u2500 Usuario.class \u2502 \u2502 \u2514\u2500\u2500 database.properties \u2502 \u2514\u2500\u2500 lib \u2502 \u251c\u2500\u2500 HikariCP-3.4.2.jar \u2502 \u251c\u2500\u2500 classmate-1.5.1.jar \u2502 \u251c\u2500\u2500 hibernate-validator-6.0.18.Final.jar \u2502 \u251c\u2500\u2500 jackson-annotations-2.10.3.jar \u2502 \u251c\u2500\u2500 jackson-core-2.10.3.jar \u2502 \u251c\u2500\u2500 jackson-databind-2.10.3.jar \u2502 \u251c\u2500\u2500 jackson-datatype-jdk8-2.10.3.jar \u2502 \u251c\u2500\u2500 jackson-datatype-jsr310-2.10.3.jar \u2502 \u251c\u2500\u2500 jackson-module-parameter-names-2.10.3.jar \u2502 \u251c\u2500\u2500 jakarta.annotation-api-1.3.5.jar \u2502 \u251c\u2500\u2500 jakarta.validation-api-2.0.2.jar \u2502 \u251c\u2500\u2500 jboss-logging-3.4.1.Final.jar \u2502 \u251c\u2500\u2500 jul-to-slf4j-1.7.30.jar \u2502 \u251c\u2500\u2500 log4j-api-2.12.1.jar \u2502 \u251c\u2500\u2500 log4j-to-slf4j-2.12.1.jar \u2502 \u251c\u2500\u2500 logback-classic-1.2.3.jar \u2502 \u251c\u2500\u2500 logback-core-1.2.3.jar \u2502 \u251c\u2500\u2500 ojdbc8-12.2.0.1.jar \u2502 \u251c\u2500\u2500 slf4j-api-1.7.30.jar \u2502 \u251c\u2500\u2500 snakeyaml-1.25.jar \u2502 \u251c\u2500\u2500 spring-aop-5.2.5.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-beans-5.2.5.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-boot-2.2.6.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-boot-autoconfigure-2.2.6.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-boot-starter-2.2.6.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-boot-starter-jdbc-2.2.6.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-boot-starter-json-2.2.6.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-boot-starter-logging-2.2.6.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-boot-starter-validation-2.2.6.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-boot-starter-web-2.2.6.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-context-5.2.5.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-core-5.2.5.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-expression-5.2.5.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-jcl-5.2.5.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-jdbc-5.2.5.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-tx-5.2.5.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-web-5.2.5.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-webmvc-5.2.5.RELEASE.jar \u2502 \u2514\u2500\u2500 ucp-12.2.0.1.jar \u251c\u2500\u2500 m4u3l1-0.0.1-SNAPSHOT.war \u251c\u2500\u2500 m4u3l1-0.0.1-SNAPSHOT.war.original \u251c\u2500\u2500 maven-archiver \u2502 \u2514\u2500\u2500 pom.properties \u251c\u2500\u2500 maven-status \u2502 \u2514\u2500\u2500 maven-compiler-plugin \u2502 \u251c\u2500\u2500 compile \u2502 \u2502 \u2514\u2500\u2500 default-compile \u2502 \u2502 \u251c\u2500\u2500 createdFiles.lst \u2502 \u2502 \u2514\u2500\u2500 inputFiles.lst \u2502 \u2514\u2500\u2500 testCompile \u2502 \u2514\u2500\u2500 default-testCompile \u2502 \u251c\u2500\u2500 createdFiles.lst \u2502 \u2514\u2500\u2500 inputFiles.lst \u251c\u2500\u2500 surefire-reports \u2502 \u251c\u2500\u2500 TEST-cl.lherrera.m4u2l2.M4u3l1ApplicationTests.xml \u2502 \u251c\u2500\u2500 TEST-cl.lherrera.m4u2l2.daos.UsuarioDaoImplTest.xml \u2502 \u251c\u2500\u2500 cl.lherrera.m4u2l2.M4u3l1ApplicationTests.txt \u2502 \u2514\u2500\u2500 cl.lherrera.m4u2l2.daos.UsuarioDaoImplTest.txt \u2514\u2500\u2500 test-classes \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 m5u3001 \u251c\u2500\u2500 M5u3001ApplicationTests.class \u2514\u2500\u2500 daos \u2514\u2500\u2500 UsuarioDaoImplTest.class 61 directories, 88 files","title":"Estructura:"},{"location":"modulos/mod_5/uni003/lectura001/#archivos-modificados","text":"/m5u3l001/pom.xml Contiene el Driver para la utilizaci\u00f3n de Oracle 11g con Maven. Ya que el repositorio no es Maven Central, este Driver del tipo 4 no se permite estar en Maven Central. /m5u3l001/src/main/java/cl/lherrera/m5u3001/AppConfig.java Contiene la configuraci\u00f3n personalizada para el ambiente en el que se est\u00e9 desarrollando esta aplicaci\u00f3n. /m5u3l001/src/main/java/cl/lherrera/m5u3001/daos/UsuarioDAO.java Interfaz del acceso a los datos del usuario. /m5u3l001/src/main/java/cl/lherrera/m5u3001/daos/UsuarioDAOImpl.java Una implementaci\u00f3n de la interfaz de acceso a los datos. /m5u3l001/src/main/java/cl/lherrera/m5u3001/mappers/UsuarioMapper.java Clase necesaria para que JDVC-TEMPLATE haga el mapa de los datos del modelo usuario, nos ahorra el tener que hacer el while(rs.next())... , adem\u00e1s es casi seguro que Spring maneja mejor que nosotros la conexi\u00f3n. /m5u3l001/src/main/java/cl/lherrera/m5u3001/models/Usuario.java Modelo contenedor de los datos de usuario. /m5u3l001/src/main/resources/database.properties Propiedades especialmente dise\u00f1adas para la base de datos. Se supone que esto debe estar en el gitignore , ya que producci\u00f3n debe poseer uno propio con otras credenciales m\u00e1s seguras. /m5u3l001/src/test/java/cl/lherrera/m5u3001/daos/UsuarioDaoImplTest.java Prueba el listar usuarios","title":"Archivos modificados."},{"location":"modulos/mod_5/uni003/lectura001/#implementacion","text":"/m5u3l001/pom.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.6.RELEASE</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>cl.lherrera.m4u2l2</groupId> <artifactId>m4u3l1</artifactId> <version>0.0.1-SNAPSHOT</version> <packaging>war</packaging> <name>m4u3l1</name> <description>Lectura 2 mod 4 uni 2</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-jdbc</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> <scope>provided</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> <!-- ODBC-ORACLE --> <dependency> <groupId>com.oracle.jdbc</groupId> <artifactId>ojdbc8</artifactId> <version>12.2.0.1</version> </dependency> <!-- ODBC-ORACLE # --> </dependencies> <!-- ODBC-ORACLE --> <repositories> <repository> <id>xwiki-externals</id> <name>https://maven.xwiki.org/externals/</name> <url>https://maven.xwiki.org/externals/</url> </repository> </repositories> <!-- ODBC-ORACLE # --> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project> /m5u3l001/src/main/java/cl/lherrera/m5u3001/AppConfig.java package cl.lherrera.m5u3001; import javax.sql.DataSource; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.PropertySource; import org.springframework.core.env.Environment; import org.springframework.jdbc.datasource.DriverManagerDataSource; @Configuration @ComponentScan(\"com.latam.usuarios\") @PropertySource(\"classpath:database.properties\") public class AppConfig { @Autowired Environment environment; @Bean DataSource dataSource() { DriverManagerDataSource driverManagerDataSource = new DriverManagerDataSource(); driverManagerDataSource.setUrl(environment.getProperty(\"url\")); driverManagerDataSource.setUsername(environment.getProperty(\"dbuser\")); driverManagerDataSource.setPassword(environment.getProperty(\"dbpassword\")); driverManagerDataSource.setDriverClassName(environment.getProperty(\"driver\")); return driverManagerDataSource; } } /m5u3l001/src/main/java/cl/lherrera/m5u3001/daos/UsuarioDAO.java package cl.lherrera.m5u3001.daos; import java.util.List; import cl.lherrera.m5u3001.models.Usuario; public interface UsuarioDAO { List<Usuario> getAllUsuarios(); } /m5u3l001/src/main/java/cl/lherrera/m5u3001/daos/UsuarioDAOImpl.java package cl.lherrera.m5u3001.daos; import java.util.List; import javax.sql.DataSource; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.jdbc.core.JdbcTemplate; import org.springframework.stereotype.Repository; import cl.lherrera.m5u3001.mappers.UsuarioMapper; import cl.lherrera.m5u3001.models.Usuario; @Repository public class UsuarioDAOImpl implements UsuarioDAO { JdbcTemplate jdbcTemplate; @Autowired public UsuarioDAOImpl(DataSource dataSource) { jdbcTemplate = new JdbcTemplate(dataSource); } public List<Usuario> getAllUsuarios() { return jdbcTemplate.query(\"select * from usuario\", new UsuarioMapper()); } } /m5u3l001/src/main/java/cl/lherrera/m5u3001/mappers/UsuarioMapper.java package cl.lherrera.m5u3001.mappers; import java.sql.ResultSet; import java.sql.SQLException; import org.springframework.jdbc.core.RowMapper; import cl.lherrera.m5u3001.models.Usuario; public class UsuarioMapper implements RowMapper<Usuario> { public Usuario mapRow(ResultSet resultSet, int i) throws SQLException { Usuario usuario = new Usuario(); usuario.setIdUsuario(resultSet.getInt(\"id_usuario\")); usuario.setNombre(resultSet.getString(\"nombre\")); usuario.setClave(resultSet.getString(\"clave\")); usuario.setRut(resultSet.getInt(\"rut\")); usuario.setDv(resultSet.getString(\"dv\")); return usuario; } } /m5u3l001/src/main/java/cl/lherrera/m5u3001/models/Usuario.java package cl.lherrera.m5u3001.models; public class Usuario { private Integer idUsuario; private String nombre; private String clave; private Integer rut; private String dv; public Usuario() {} public Usuario(Integer idUsuario, String nombre, String clave, Integer rut, String dv) { this.idUsuario = idUsuario; this.nombre = nombre; this.clave = clave; this.rut = rut; this.dv = dv; } public Integer getIdUsuario() { return idUsuario; } public void setIdUsuario(Integer idUsuario) { this.idUsuario = idUsuario; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } public String getClave() { return clave; } public void setClave(String clave) { this.clave = clave; } public Integer getRut() { return rut; } public void setRut(Integer rut) { this.rut = rut; } public String getDv() { return dv; } public void setDv(String dv) { this.dv = dv; } @Override public String toString() { return \"Usuario [idUsuario=\" + idUsuario + \", nombre=\" + nombre + \", clave=\" + clave + \", rut=\" + rut + \", dv=\" + dv + \"]\"; } } /m5u3l001/src/main/resources/database.properties driver=oracle.jdbc.driver.OracleDriver url=jdbc:oracle:thin:@localhost:1521:xe dbuser=mod5u2l1 dbpassword=1234 /m5u3l001/src/test/java/cl/lherrera/m5u3001/daos/UsuarioDaoImplTest.java package cl.lherrera.m5u3001.daos; import static org.junit.jupiter.api.Assertions.assertEquals; import java.util.List; import org.junit.jupiter.api.DisplayName; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.context.SpringBootTest; import cl.lherrera.m5u3001.daos.UsuarioDAOImpl; import cl.lherrera.m5u3001.models.Usuario; @SpringBootTest @DisplayName(\"Pruebas unitarias del DAO\") public class UsuarioDaoImplTest { @Autowired private UsuarioDAOImpl daoUsuario; @Test @DisplayName(\"Traer todos los usuarios\") public void prueba001() { // guadamos en una lista los usuarios List<Usuario> usuarios = daoUsuario.getAllUsuarios(); // deben existir 2 usuarios en la base de datos assertEquals(2, usuarios.size()); } } (20)","title":"Implementaci\u00f3n"},{"location":"modulos/mod_5/uni003/lectura001/#la-capa-de-servicio","text":"","title":"La capa de servicio"},{"location":"modulos/mod_5/uni003/lectura001/#introduccion_1","text":"vamos a crear la capa de servicio de la aplicaci\u00f3n de usuarios que comenzamos en el cap\u00edtulo 1 de la unidad. es aquella que manejar\u00e1 todos los c\u00e1lculos \"l\u00f3gica\" del negocio que se necesiten hacer en la aplicaci\u00f3n. mantener el c\u00f3digo ordenado, , siempre sabremos d\u00f3nde buscar.","title":"Introducci\u00f3n"},{"location":"modulos/mod_5/uni003/lectura001/#los-estereotipos-de-spring","text":"Los estereotipos, en resumen, son interfaces que al ser implementadas (o al usar su anotaci\u00f3n) van a ser tratadas como un Bean. Las anotaciones @Service , @Controller y @Repository Son estereotipos de org.springframework.stereotype y estas tres anotaciones son @Component , donde (comprobar, aceptable por ahora: los componentes son \"componentes de negocio\" y sus anotaciones estereotipados, son el tipo de componente, cada rol con su anotaci\u00f3n). La finalidad de la capa de servicio es Quitar la l\u00f3gica de negocio del controlador. (27)","title":"Los estereotipos de Spring."},{"location":"modulos/mod_5/uni003/lectura001/#crud-con-jdbctemplate","text":"Se expondr\u00e1n adem\u00e1s en el siguiente ejemplo, el uso de un CRUD usando JDBC-TEMPLATE`` (Se puede seguir con la lectura, aunque el del ejemplo lherrera`, posee cambios)","title":"CRUD con JdbcTemplate."},{"location":"modulos/mod_5/uni003/lectura001/#proyecto-completo-lectura","text":"Hay que tener en cuenta que el servicio incluido en el siguiente ejemplo, es a modo de ejemplo, no es una pr\u00e1ctica muy utilizada","title":"Proyecto completo Lectura"},{"location":"modulos/mod_5/uni003/lectura001/#ddl-borrador","text":"create table USUARIO ( ID_USUARIO NUMBER(18), NOMBRE VARCHAR2(200), CLAVE VARCHAR2(200), RUT NUMBER(10), DV CHAR ); CREATE SEQUENCE SQ_USUARIO MINVALUE 1 START WITH 1 INCREMENT BY 1 CACHE 10; SELECT * FROM USUARIO; -- delete from usuario where nombre = 'test2' INSERT INTO USUARIO (\"ID_USUARIO\", \"NOMBRE\", \"CLAVE\", \"RUT\", \"DV\") VALUES (SQ_USUARIO.nextval, 'user1', 'clave1', 10, '9'); INSERT INTO USUARIO (\"ID_USUARIO\", \"NOMBRE\", \"CLAVE\", \"RUT\", \"DV\") VALUES (SQ_USUARIO.nextval, 'user2', 'clave2', 10, 'k'); select * from USUARIO where nombre='user1' and clave='clave1' and rownum = 1 Estructura ./ \u251c\u2500\u2500 HELP.md \u251c\u2500\u2500 mvnw \u251c\u2500\u2500 mvnw.cmd \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 m5u3001 \u2502 \u2502 \u2502 \u251c\u2500\u2500 AppConfig.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 M5u3001Application.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 ServletInitializer.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 daos \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 UsuarioDAO.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioDAOImpl.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 mappers \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioMapper.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 models \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 Usuario.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 services \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 UsuarioService.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioServiceImpl.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 vo \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioVO.java \u2502 \u2502 \u251c\u2500\u2500 resources \u2502 \u2502 \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2502 \u2502 \u251c\u2500\u2500 database.properties \u2502 \u2502 \u2502 \u251c\u2500\u2500 static \u2502 \u2502 \u2502 \u2514\u2500\u2500 templates \u2502 \u2502 \u2514\u2500\u2500 webapp \u2502 \u2514\u2500\u2500 test \u2502 \u2514\u2500\u2500 java \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 m5u3001 \u2502 \u251c\u2500\u2500 M5u3001ApplicationTests.java \u2502 \u251c\u2500\u2500 daos \u2502 \u2502 \u2514\u2500\u2500 UsuarioDaoImplTest.java \u2502 \u2514\u2500\u2500 services \u2502 \u2514\u2500\u2500 UsuarioServiceTest.java \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 application.properties \u2502 \u251c\u2500\u2500 cl \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2514\u2500\u2500 m5u3001 \u2502 \u2502 \u251c\u2500\u2500 AppConfig.class \u2502 \u2502 \u251c\u2500\u2500 M5u3001Application.class \u2502 \u2502 \u251c\u2500\u2500 ServletInitializer.class \u2502 \u2502 \u251c\u2500\u2500 daos \u2502 \u2502 \u2502 \u251c\u2500\u2500 UsuarioDAO.class \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioDAOImpl.class \u2502 \u2502 \u251c\u2500\u2500 mappers \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioMapper.class \u2502 \u2502 \u251c\u2500\u2500 models \u2502 \u2502 \u2502 \u2514\u2500\u2500 Usuario.class \u2502 \u2502 \u251c\u2500\u2500 services \u2502 \u2502 \u2502 \u251c\u2500\u2500 UsuarioService.class \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioServiceImpl.class \u2502 \u2502 \u2514\u2500\u2500 vo \u2502 \u2502 \u2514\u2500\u2500 UsuarioVO.class \u2502 \u2514\u2500\u2500 database.properties \u251c\u2500\u2500 generated-sources \u2502 \u2514\u2500\u2500 annotations \u251c\u2500\u2500 generated-test-sources \u2502 \u2514\u2500\u2500 test-annotations \u251c\u2500\u2500 m2e-wtp \u2502 \u2514\u2500\u2500 web-resources \u2502 \u2514\u2500\u2500 META-INF \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 maven \u2502 \u2514\u2500\u2500 cl.lherrera.m4u2l2 \u2502 \u2514\u2500\u2500 m4u3l1 \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2514\u2500\u2500 pom.xml \u251c\u2500\u2500 m4u3l1-0.0.1-SNAPSHOT \u2502 \u251c\u2500\u2500 META-INF \u2502 \u2514\u2500\u2500 WEB-INF \u2502 \u251c\u2500\u2500 classes \u2502 \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2502 \u251c\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 m4u2l2 \u2502 \u2502 \u2502 \u251c\u2500\u2500 AppConfig.class \u2502 \u2502 \u2502 \u251c\u2500\u2500 M4u3l1Application.class \u2502 \u2502 \u2502 \u251c\u2500\u2500 ServletInitializer.class \u2502 \u2502 \u2502 \u251c\u2500\u2500 daos \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 UsuarioDAO.class \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioDAOImpl.class \u2502 \u2502 \u2502 \u251c\u2500\u2500 mappers \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioMapper.class \u2502 \u2502 \u2502 \u2514\u2500\u2500 models \u2502 \u2502 \u2502 \u2514\u2500\u2500 Usuario.class \u2502 \u2502 \u2514\u2500\u2500 database.properties \u2502 \u2514\u2500\u2500 lib \u2502 \u251c\u2500\u2500 HikariCP-3.4.2.jar \u2502 \u251c\u2500\u2500 classmate-1.5.1.jar \u2502 \u251c\u2500\u2500 hibernate-validator-6.0.18.Final.jar \u2502 \u251c\u2500\u2500 jackson-annotations-2.10.3.jar \u2502 \u251c\u2500\u2500 jackson-core-2.10.3.jar \u2502 \u251c\u2500\u2500 jackson-databind-2.10.3.jar \u2502 \u251c\u2500\u2500 jackson-datatype-jdk8-2.10.3.jar \u2502 \u251c\u2500\u2500 jackson-datatype-jsr310-2.10.3.jar \u2502 \u251c\u2500\u2500 jackson-module-parameter-names-2.10.3.jar \u2502 \u251c\u2500\u2500 jakarta.annotation-api-1.3.5.jar \u2502 \u251c\u2500\u2500 jakarta.validation-api-2.0.2.jar \u2502 \u251c\u2500\u2500 jboss-logging-3.4.1.Final.jar \u2502 \u251c\u2500\u2500 jul-to-slf4j-1.7.30.jar \u2502 \u251c\u2500\u2500 log4j-api-2.12.1.jar \u2502 \u251c\u2500\u2500 log4j-to-slf4j-2.12.1.jar \u2502 \u251c\u2500\u2500 logback-classic-1.2.3.jar \u2502 \u251c\u2500\u2500 logback-core-1.2.3.jar \u2502 \u251c\u2500\u2500 ojdbc8-12.2.0.1.jar \u2502 \u251c\u2500\u2500 slf4j-api-1.7.30.jar \u2502 \u251c\u2500\u2500 snakeyaml-1.25.jar \u2502 \u251c\u2500\u2500 spring-aop-5.2.5.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-beans-5.2.5.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-boot-2.2.6.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-boot-autoconfigure-2.2.6.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-boot-starter-2.2.6.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-boot-starter-jdbc-2.2.6.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-boot-starter-json-2.2.6.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-boot-starter-logging-2.2.6.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-boot-starter-validation-2.2.6.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-boot-starter-web-2.2.6.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-context-5.2.5.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-core-5.2.5.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-expression-5.2.5.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-jcl-5.2.5.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-jdbc-5.2.5.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-tx-5.2.5.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-web-5.2.5.RELEASE.jar \u2502 \u251c\u2500\u2500 spring-webmvc-5.2.5.RELEASE.jar \u2502 \u2514\u2500\u2500 ucp-12.2.0.1.jar \u251c\u2500\u2500 m4u3l1-0.0.1-SNAPSHOT.war \u251c\u2500\u2500 m4u3l1-0.0.1-SNAPSHOT.war.original \u251c\u2500\u2500 maven-archiver \u2502 \u2514\u2500\u2500 pom.properties \u251c\u2500\u2500 maven-status \u2502 \u2514\u2500\u2500 maven-compiler-plugin \u2502 \u251c\u2500\u2500 compile \u2502 \u2502 \u2514\u2500\u2500 default-compile \u2502 \u2502 \u251c\u2500\u2500 createdFiles.lst \u2502 \u2502 \u2514\u2500\u2500 inputFiles.lst \u2502 \u2514\u2500\u2500 testCompile \u2502 \u2514\u2500\u2500 default-testCompile \u2502 \u251c\u2500\u2500 createdFiles.lst \u2502 \u2514\u2500\u2500 inputFiles.lst \u251c\u2500\u2500 surefire-reports \u2502 \u251c\u2500\u2500 TEST-cl.lherrera.m4u2l2.M4u3l1ApplicationTests.xml \u2502 \u251c\u2500\u2500 TEST-cl.lherrera.m4u2l2.daos.UsuarioDaoImplTest.xml \u2502 \u251c\u2500\u2500 cl.lherrera.m4u2l2.M4u3l1ApplicationTests.txt \u2502 \u2514\u2500\u2500 cl.lherrera.m4u2l2.daos.UsuarioDaoImplTest.txt \u2514\u2500\u2500 test-classes \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 m5u3001 \u251c\u2500\u2500 M5u3001ApplicationTests.class \u251c\u2500\u2500 daos \u2502 \u2514\u2500\u2500 UsuarioDaoImplTest.class \u2514\u2500\u2500 services \u2514\u2500\u2500 UsuarioServiceTest.class 67 directories, 96 files","title":"DDL - BORRADOR"},{"location":"modulos/mod_5/uni003/lectura001/#archivos-modificados_1","text":"/m5u3l001/src/main/java/cl/lherrera/m5u3001/AppConfig.java package cl.lherrera.m5u3001; import javax.sql.DataSource; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.PropertySource; import org.springframework.core.env.Environment; import org.springframework.jdbc.datasource.DriverManagerDataSource; @Configuration @ComponentScan(\"com.latam.usuarios\") @PropertySource(\"classpath:database.properties\") public class AppConfig { @Autowired Environment environment; @Bean DataSource dataSource() { DriverManagerDataSource driverManagerDataSource = new DriverManagerDataSource(); driverManagerDataSource.setUrl(environment.getProperty(\"url\")); driverManagerDataSource.setUsername(environment.getProperty(\"dbuser\")); driverManagerDataSource.setPassword(environment.getProperty(\"dbpassword\")); driverManagerDataSource.setDriverClassName(environment.getProperty(\"driver\")); return driverManagerDataSource; } } /m5u3l001/src/main/java/cl/lherrera/m5u3001/daos/UsuarioDAO.java package cl.lherrera.m5u3001.daos; import java.util.List; import cl.lherrera.m5u3001.models.Usuario; public interface UsuarioDAO { List<Usuario> getAllUsuarios(); Usuario findByNombreAndClave(String nombre, String clave); /* * Nuevos m\u00e9todos del CRUD */ public int add(Usuario usuario); public int update(Usuario usuario); public int delete(Usuario usuario); } /m5u3l001/src/main/java/cl/lherrera/m5u3001/daos/UsuarioDAOImpl.java package cl.lherrera.m5u3001.daos; import java.util.List; import javax.sql.DataSource; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.jdbc.core.JdbcTemplate; import org.springframework.stereotype.Repository; import cl.lherrera.m5u3001.mappers.UsuarioMapper; import cl.lherrera.m5u3001.models.Usuario; @Repository public class UsuarioDAOImpl implements UsuarioDAO { JdbcTemplate jdbcTemplate; @Autowired public UsuarioDAOImpl(DataSource dataSource) { jdbcTemplate = new JdbcTemplate(dataSource); } public List<Usuario> getAllUsuarios() { return jdbcTemplate.query(\"select * from usuario\", new UsuarioMapper()); } public Usuario findByNombreAndClave(String nombre, String clave) { // Se utilizan \"?\" para denotar las posici\u00f3nes de los par\u00e1metros (l\u00edmite 1) // se limita por que pueden existir varios con el mismo nombre. String sqlText = \"select * from USUARIO where nombre=? and clave=? and rownum = 1\"; // Esta es la lista que llenar\u00e1 los signos de interrogaci\u00f3n de la consulta. // Otra utlidad para ahorrar el rs.setString()... Object[] parametros = new Object[] { nombre, clave }; // Se le pasa una implementaci\u00f3n de RowMapper<T> (En este caso una de Usuario) UsuarioMapper mapaDeUsuario = new UsuarioMapper(); // el retorno es seg\u00fan el tipo de mapa. return jdbcTemplate.queryForObject(sqlText, parametros, mapaDeUsuario); } // CRUD @Override public int add(Usuario usuario) { return jdbcTemplate.update( \"insert into usuario values (sq_usuario.nextval, ?, ?, ?, ?)\", usuario.getNombre(), usuario.getClave(), usuario.getRut(), usuario.getDv() ); } @Override public int update(Usuario usuario) { return jdbcTemplate.update( \"update usuario set nombre = ?, clave = ?, rut = ?, dv = ? where id_usuario = ?\", usuario.getNombre(), usuario.getClave(), usuario.getRut(), usuario.getDv(), usuario.getIdUsuario() ); } @Override public int delete(Usuario usuario) { return jdbcTemplate.update( \"delete from usuario where id_usuario = ?\", usuario.getIdUsuario() ); } } /m5u3l001/src/main/java/cl/lherrera/m5u3001/mappers/UsuarioMapper.java package cl.lherrera.m5u3001.mappers; import java.sql.ResultSet; import java.sql.SQLException; import org.springframework.jdbc.core.RowMapper; import cl.lherrera.m5u3001.models.Usuario; public class UsuarioMapper implements RowMapper<Usuario> { public Usuario mapRow(ResultSet resultSet, int i) throws SQLException { Usuario usuario = new Usuario(); usuario.setIdUsuario(resultSet.getInt(\"id_usuario\")); usuario.setNombre(resultSet.getString(\"nombre\")); usuario.setClave(resultSet.getString(\"clave\")); usuario.setRut(resultSet.getInt(\"rut\")); usuario.setDv(resultSet.getString(\"dv\")); return usuario; } } /m5u3l001/src/main/java/cl/lherrera/m5u3001/models/Usuario.java package cl.lherrera.m5u3001.models; public class Usuario { private Integer idUsuario; private String nombre; private String clave; private Integer rut; private String dv; public Usuario() {} public Usuario(Integer idUsuario, String nombre, String clave, Integer rut, String dv) { this.idUsuario = idUsuario; this.nombre = nombre; this.clave = clave; this.rut = rut; this.dv = dv; } public Integer getIdUsuario() { return idUsuario; } public void setIdUsuario(Integer idUsuario) { this.idUsuario = idUsuario; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } public String getClave() { return clave; } public void setClave(String clave) { this.clave = clave; } public Integer getRut() { return rut; } public void setRut(Integer rut) { this.rut = rut; } public String getDv() { return dv; } public void setDv(String dv) { this.dv = dv; } @Override public String toString() { return \"Usuario [idUsuario=\" + idUsuario + \", nombre=\" + nombre + \", clave=\" + clave + \", rut=\" + rut + \", dv=\" + dv + \"]\"; } } /m5u3l001/src/main/java/cl/lherrera/m5u3001/services/UsuarioService.java package cl.lherrera.m5u3001.services; import cl.lherrera.m5u3001.models.Usuario; import cl.lherrera.m5u3001.vo.UsuarioVO; public interface UsuarioService { // por defectos son public abstract, es por esa raz\u00f3n que no hay problemas // con el alcance de paquetes, ya que en esta ocaci\u00f3n no son por defecto seteados con // el modificador de paquetes. UsuarioVO obtenerTodosLosUsuarios(); UsuarioVO obtenerUsuarioPorNombreYClave(String nombre, String clave); UsuarioVO login(String nombre, String clave); // para justificar el crud (Los servicios no son r\u00edgidos, se adaptan a la necesidad espec\u00edfica) // en este caso los m\u00e9todos son con el mismo nombre que la implementaci\u00f3n del DAO // pero es solamente a modo de ejemplo del ejercicio, ya que existe un UsuarioVO, enfocado a lo // que se muestra en pantalla es por eso que en el fondo el servicio llena esos // objetos, pero la implementaci\u00f3n de los m\u00e9todos de negocio van m\u00e1s all\u00e1 que simplemente // retornar objetos tipo VO o DTOs. UsuarioVO add(Usuario usuario); UsuarioVO update(Usuario usuario); UsuarioVO delete(Usuario usuario); } /m5u3l001/src/main/java/cl/lherrera/m5u3001/services/UsuarioServiceImpl.java package cl.lherrera.m5u3001.services; import java.util.ArrayList; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import cl.lherrera.m5u3001.daos.UsuarioDAO; import cl.lherrera.m5u3001.models.Usuario; import cl.lherrera.m5u3001.vo.UsuarioVO; @Service public class UsuarioServiceImpl implements UsuarioService { private static Logger logger = LoggerFactory.getLogger(UsuarioServiceImpl.class.getName()); @Autowired private UsuarioDAO daoUsuario; @Override public UsuarioVO obtenerTodosLosUsuarios() { UsuarioVO voUsuario = new UsuarioVO(new ArrayList<Usuario>(), \"Ha ocurrido un error\", \"102\"); try { voUsuario.setUsuarios(new ArrayList<>(daoUsuario.getAllUsuarios())); voUsuario.setMensaje(String.format(\"Se ha/n encontrado %d registro/s\", voUsuario.getUsuarios().size())); voUsuario.setCodigo(\"0\"); } catch (Exception e) { logger.trace(\"Usuario Service: Error en getAllUsuarios\", e); } return voUsuario; } @Override public UsuarioVO obtenerUsuarioPorNombreYClave(String nombre, String clave) { UsuarioVO voUsuario = new UsuarioVO(new ArrayList<Usuario>(), \"Ha ocurrido un error\", \"101\"); try { Usuario usuario = daoUsuario.findByNombreAndClave(nombre, clave); voUsuario.getUsuarios().add(usuario); voUsuario.setMensaje(String.format(\"Se ha/n encontrado %d registro/s\", null != usuario ? 1 : 0)); voUsuario.setCodigo(\"0\"); } catch (Exception e) { logger.trace(\"Usuario Service: Error en findByNombreAndClave\", e); } return voUsuario; } @Override public UsuarioVO login(String nombre, String clave) { UsuarioVO voUsuario = new UsuarioVO(new ArrayList<Usuario>(), \"Credenciales incorrectas\", \"102\"); boolean credencialesVacias = nombre.length() == 0 || clave.length() == 0; if (!credencialesVacias) { voUsuario = this.obtenerUsuarioPorNombreYClave(nombre, clave); if (voUsuario.getCodigo().equals(\"0\")) { voUsuario.setMensaje(String.format(\"Bienvenido %s\", voUsuario.getUsuarios().get(0).getNombre())); } } return voUsuario; } // Justificando el CRUD // UsuarioServiceImpl @Override public UsuarioVO add(Usuario usuario) { UsuarioVO voUsuario = new UsuarioVO(new ArrayList<Usuario>(), \"Ha ocurrido un error\", \"104\"); try { int registrosActualizados = daoUsuario.add(usuario); voUsuario.setMensaje(registrosActualizados == 1 ? \"Se ha creado el usuario correctamente\" : \"No se ha podido crear el usuario\"); voUsuario.setCodigo(registrosActualizados == 1 ? \"0\" : \"104\"); } catch (Exception e) { logger.trace(\"Usuario Service: Error en add\", e); } return voUsuario; } @Override public UsuarioVO update(Usuario usuario) { UsuarioVO voUsuario = new UsuarioVO(new ArrayList<Usuario>(), \"Ha ocurrido un error\", \"105\"); try { int registrosActualizados = daoUsuario.update(usuario); voUsuario .setMensaje(String.format(\"Se ha/n actualizado correctamente %d usuario/s\", registrosActualizados)); voUsuario.setCodigo(\"0\"); } catch (Exception e) { logger.trace(\"Usuario Service: Error en update\", e); } return voUsuario; } @Override public UsuarioVO delete(Usuario usuario) { UsuarioVO voUsuario = new UsuarioVO(new ArrayList<Usuario>(), \"Ha ocurrido un error\", \"106\"); try { int registrosActualizados = daoUsuario.delete(usuario); voUsuario .setMensaje(String.format(\"Se ha/n eliminado correctamente a %d usuario/s\", registrosActualizados)); voUsuario.setCodigo(\"0\"); } catch (Exception e) { logger.trace(\"Usuario Service: Error en delete\", e); } return voUsuario; } } /m5u3l001/src/main/java/cl/lherrera/m5u3001/vo/UsuarioVO.java package cl.lherrera.m5u3001.vo; import java.util.List; import cl.lherrera.m5u3001.models.Usuario; public class UsuarioVO { private List<Usuario> usuarios; private String mensaje; private String codigo; public UsuarioVO() {} public UsuarioVO(List<Usuario> usuarios, String mensaje, String codigo) { super(); this.usuarios = usuarios; this.mensaje = mensaje; this.codigo = codigo; } public List<Usuario> getUsuarios() { return usuarios; } public void setUsuarios(List<Usuario> usuarios) { this.usuarios = usuarios; } public String getMensaje() { return mensaje; } public void setMensaje(String mensaje) { this.mensaje = mensaje; } public String getCodigo() { return codigo; } public void setCodigo(String codigo) { this.codigo = codigo; } @Override public String toString() { return \"UsuarioVO [mensaje=\" + mensaje + \", codigo=\" + codigo + \"]\"; } } /m5u3l001/src/main/resources/database.properties driver=oracle.jdbc.driver.OracleDriver url=jdbc:oracle:thin:@localhost:1521:xe dbuser=mod5u2l1 dbpassword=1234 /m5u3l001/src/test/java/cl/lherrera/m5u3001/daos/UsuarioDaoImplTest.java package cl.lherrera.m5u3001.daos; import static org.junit.jupiter.api.Assertions.assertEquals; import static org.junit.jupiter.api.Assertions.assertTrue; import java.util.List; import org.junit.jupiter.api.DisplayName; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.context.SpringBootTest; import cl.lherrera.m5u3001.daos.UsuarioDAOImpl; import cl.lherrera.m5u3001.models.Usuario; @SpringBootTest @DisplayName(\"Pruebas unitarias del DAO\") public class UsuarioDaoImplTest { @Autowired private UsuarioDAOImpl daoUsuario; @Test @DisplayName(\"Traer todos los usuarios\") public void prueba001() { // guadamos en una lista los usuarios List<Usuario> usuarios = daoUsuario.getAllUsuarios(); // deben existir 2 usuarios en la base de datos assertTrue(usuarios.size() >= 2); } @Test @DisplayName(\"traer al usuario user1 - clave1\") public void prueba002() { // buscar el usuario con la clave y contrase\u00f1a // este usuario debe estar en la base de datos Usuario usuario = daoUsuario.findByNombreAndClave(\"user1\", \"clave1\"); // comparamos con el nombre assertEquals(\"user1\", usuario.getNombre()); } } /m5u3l001/src/test/java/cl/lherrera/m5u3001/services/UsuarioServiceTest.java package cl.lherrera.m5u3001.services; // ojo con los nombres de paquetes, mejor que sean iguales para no perder el contexto import static org.junit.jupiter.api.Assertions.assertTrue; import org.junit.jupiter.api.DisplayName; import org.junit.jupiter.api.Test; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.context.SpringBootTest; import cl.lherrera.m5u3001.models.Usuario; import cl.lherrera.m5u3001.vo.UsuarioVO; @SpringBootTest @DisplayName(\"Prueba de servicios\") public class UsuarioServiceTest { private Logger logger = LoggerFactory.getLogger(UsuarioServiceTest.class.getName()); @Autowired UsuarioService servicioUsuario; @Test @DisplayName(\"Prueba de servicio de login\") public void prueba001() { // capturar mensaje String mensaje = servicioUsuario.login(\"user1\", \"clave1\").getMensaje(); // comparar con respuesta assertTrue(mensaje.contains(\"Bienvenido\")); } // Probamos CRUD // se agrega, se actualiza y se elimina el mismo dato, dejando la base de datos // de pruebas estable. (esta no debe ser una base de datos oficial @Test @DisplayName(\"Probar servicio add\") public void prueba002() { // creamos un usuario Usuario usuario = new Usuario(); usuario.setNombre(\"test1\"); usuario.setClave(\"clave1\"); // ingresamos el usuario con el servicio UsuarioVO respuesta = servicioUsuario.add(usuario); assertTrue(respuesta.getMensaje().contains(\"Se ha creado el usuario correctamente\")); } @Test @DisplayName(\"Prueba servicio update\") public void prueba003() { // llamamos al usuario UsuarioVO usuarioVo = servicioUsuario.obtenerUsuarioPorNombreYClave(\"test1\", \"clave1\"); Usuario usuario = usuarioVo.getUsuarios().get(0); // cambiamos un valor usuario.setNombre(\"test2\"); usuarioVo = servicioUsuario.update(usuario); // comprobamos con mensaje retornado del servicio assertTrue(usuarioVo.getMensaje().contains(\"actualizado correctamente\")); } @Test @DisplayName(\"Prueba de eliminado\") public void prueba004() { // se busca el usuario UsuarioVO usuarioVo = servicioUsuario.obtenerUsuarioPorNombreYClave(\"test2\", \"clave1\"); Usuario usuario = usuarioVo.getUsuarios().get(0); usuarioVo = servicioUsuario.delete(usuario); assertTrue(usuarioVo.getMensaje().contains(\"eliminado correctamente\")); } } /m5u3l001/pom.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.6.RELEASE</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>cl.lherrera.m4u2l2</groupId> <artifactId>m4u3l1</artifactId> <version>0.0.1-SNAPSHOT</version> <packaging>war</packaging> <name>m4u3l1</name> <description>Lectura 2 mod 4 uni 2</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-jdbc</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> <scope>provided</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> <!-- ODBC-ORACLE --> <dependency> <groupId>com.oracle.jdbc</groupId> <artifactId>ojdbc8</artifactId> <version>12.2.0.1</version> </dependency> <!-- ODBC-ORACLE # --> </dependencies> <!-- ODBC-ORACLE --> <repositories> <repository> <id>xwiki-externals</id> <name>https://maven.xwiki.org/externals/</name> <url>https://maven.xwiki.org/externals/</url> </repository> </repositories> <!-- ODBC-ORACLE # --> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project>","title":"Archivos modificados"},{"location":"modulos/mod_5/uni003/lectura002_001/","text":"Unidad 3.2.1 - Modelo La siguiente aplicaci\u00f3n ser\u00e1 finalmente un mantenedor de personas, con un control de acceso de usuarios. La aplicaci\u00f3n contendr\u00e1 5 Hitos. Hito 1: Solamente crear el proyecto y modificarlo para que la base de datos SQLITE funcione. 3.2.1.1 Iniciar proyecto Se crea un proyecto spring-boot: 2.2.6 con las siguientes dependencias: Spring-data JPA Lombok Spring Web Spring boot DevToools Tipo de deploy -> war , con esto se crea el ServletInitializer \u001c Estructura final del hito ./ \u251c\u2500\u2500 HELP.md \u251c\u2500\u2500 basedatos.db \u251c\u2500\u2500 mvnw \u251c\u2500\u2500 mvnw.cmd \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 jpaspring \u2502 \u2502 \u2502 \u251c\u2500\u2500 AppConfig.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 JpaspringApplication.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 SQLiteDialect.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 ServletInitializer.java \u2502 \u2502 \u251c\u2500\u2500 resources \u2502 \u2502 \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2502 \u2502 \u251c\u2500\u2500 database.properties \u2502 \u2502 \u2502 \u251c\u2500\u2500 static \u2502 \u2502 \u2502 \u2514\u2500\u2500 templates \u2502 \u2502 \u2514\u2500\u2500 webapp \u2502 \u2502 \u2514\u2500\u2500 WEB-INF \u2502 \u2514\u2500\u2500 test \u2502 \u2514\u2500\u2500 java \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 jpaspring \u2502 \u2514\u2500\u2500 JpaspringApplicationTests.java \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2514\u2500\u2500 database.properties \u251c\u2500\u2500 m2e-wtp \u2502 \u2514\u2500\u2500 web-resources \u2502 \u2514\u2500\u2500 META-INF \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 maven \u2502 \u2514\u2500\u2500 cl.lherrera.jpaspring \u2502 \u2514\u2500\u2500 jpaspring \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2514\u2500\u2500 pom.xml \u2514\u2500\u2500 test-classes 25 directories, 18 files Archivos modificados /pom.xml Archivo de dependencias del proyecto. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.6.RELEASE</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>cl.lherrera.jpaspring</groupId> <artifactId>jpaspring</artifactId> <version>20.0.0</version> <packaging>war</packaging> <name>jpaspring</name> <description>proyecto JPA SQLITE</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-jpa</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> <scope>provided</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> <!-- SOPORTE ARCHIVOS JSP --> <dependency> <groupId>org.apache.tomcat.embed</groupId> <artifactId>tomcat-embed-jasper</artifactId> <scope>provided</scope> </dependency> <!-- SOPORTE ARCHIVOS JSP # --> <!-- JSTL --> <dependency> <groupId>javax.servlet</groupId> <artifactId>jstl</artifactId> </dependency> <dependency> <groupId>javax.servlet</groupId> <artifactId>javax.servlet-api</artifactId> </dependency> <!-- JSTL # --> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project> cl.lherrera.jpaspring /SQLiteDialect.java Archivo necesario para la configuraci\u00f3n de SQLITE para Spring , es un archivo est\u00e1ndar. package cl.lherrera.jpaspring; import java.sql.Types; import org.hibernate.dialect.Dialect; import org.hibernate.dialect.function.StandardSQLFunction; import org.hibernate.dialect.function.SQLFunctionTemplate; import org.hibernate.dialect.function.VarArgsSQLFunction; import org.hibernate.type.StandardBasicTypes; public class SQLiteDialect extends Dialect { public SQLiteDialect() { super(); registerColumnType(Types.BIT, \"integer\"); registerColumnType(Types.TINYINT, \"tinyint\"); registerColumnType(Types.SMALLINT, \"smallint\"); registerColumnType(Types.INTEGER, \"integer\"); registerColumnType(Types.BIGINT, \"bigint\"); registerColumnType(Types.FLOAT, \"float\"); registerColumnType(Types.REAL, \"real\"); registerColumnType(Types.DOUBLE, \"double\"); registerColumnType(Types.NUMERIC, \"numeric\"); registerColumnType(Types.DECIMAL, \"decimal\"); registerColumnType(Types.CHAR, \"char\"); registerColumnType(Types.VARCHAR, \"varchar\"); registerColumnType(Types.LONGVARCHAR, \"longvarchar\"); registerColumnType(Types.DATE, \"date\"); registerColumnType(Types.TIME, \"time\"); registerColumnType(Types.TIMESTAMP, \"timestamp\"); registerColumnType(Types.BINARY, \"blob\"); registerColumnType(Types.VARBINARY, \"blob\"); registerColumnType(Types.LONGVARBINARY, \"blob\"); // registerColumnType(Types.NULL, \"null\"); registerColumnType(Types.BLOB, \"blob\"); registerColumnType(Types.CLOB, \"clob\"); registerColumnType(Types.BOOLEAN, \"integer\"); registerFunction(\"concat\", new VarArgsSQLFunction(StandardBasicTypes.STRING, \"\", \"||\", \"\")); registerFunction(\"mod\", new SQLFunctionTemplate(StandardBasicTypes.INTEGER, \"?1 % ?2\")); registerFunction(\"substr\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); registerFunction(\"substring\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); } public boolean supportsIdentityColumns() { return true; } public boolean hasDataTypeInIdentityColumn() { return false; // As specify in NHibernate dialect } public String getIdentityColumnString() { // return \"integer primary key autoincrement\"; return \"integer\"; } public String getIdentitySelectString() { return \"select last_insert_rowid()\"; } public boolean supportsLimit() { return true; } public String getLimitString(String query, boolean hasOffset) { return new StringBuffer(query.length() + 20).append(query).append( hasOffset ? \" limit ? offset ?\" : \" limit ?\").toString(); } public boolean bindLimitParametersInReverseOrder() { return true; } public boolean supportsTemporaryTables() { return true; } public String getCreateTemporaryTableString() { return \"create temporary table if not exists\"; } public boolean dropTemporaryTableAfterUse() { return false; } public boolean supportsCurrentTimestampSelection() { return true; } public boolean isCurrentTimestampSelectStringCallable() { return false; } public String getCurrentTimestampSelectString() { return \"select current_timestamp\"; } public boolean supportsUnionAll() { return true; } public boolean hasAlterTable() { return false; // As specify in NHibernate dialect } public boolean dropConstraints() { return false; } public String getAddColumnString() { return \"add column\"; } public String getForUpdateString() { return \"\"; } public boolean supportsOuterJoinForUpdate() { return false; } public String getDropForeignKeyString() { throw new UnsupportedOperationException( \"No drop foreign key syntax supported by SQLiteDialect\"); } public String getAddForeignKeyConstraintString(String constraintName, String[] foreignKey, String referencedTable, String[] primaryKey, boolean referencesPrimaryKey) { throw new UnsupportedOperationException( \"No add foreign key syntax supported by SQLiteDialect\"); } public String getAddPrimaryKeyConstraintString(String constraintName) { throw new UnsupportedOperationException( \"No add primary key syntax supported by SQLiteDialect\"); } public boolean supportsIfExistsBeforeTableName() { return true; } public boolean supportsCascadeDelete() { return false; } } /AppConfig.java Es donde agregamos la personalizaci\u00f3n de la base de datos, donde la informaci\u00f3n se trae desde un archivo. Esto es debido a que cuando se sube a producci\u00f3n, este ambiente, posee su propio archivo y las credenciales no quedan expuestas. package cl.lherrera.jpaspring; import javax.sql.DataSource; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.PropertySource; import org.springframework.core.env.Environment; import org.springframework.jdbc.datasource.DriverManagerDataSource; @Configuration @ComponentScan(\"cl.lherrera.jpaspring\") @PropertySource(\"classpath:database.properties\") public class AppConfig { @Autowired Environment environment; @Bean DataSource dataSource() { DriverManagerDataSource driverManagerDataSource = new DriverManagerDataSource(); driverManagerDataSource.setUrl(environment.getProperty(\"url\")); driverManagerDataSource.setUsername(environment.getProperty(\"username\")); driverManagerDataSource.setPassword(environment.getProperty(\"dbpassword\")); driverManagerDataSource.setDriverClassName(environment.getProperty(\"driverClassName\")); return driverManagerDataSource; } } /src/main/resources/ \u001d /application.properties Se listan las configuraciones de la aplicaci\u00f3n, como por ejemplo el lugar donde ir\u00e1n los archivos JSP, adem\u00e1s de configuraciones para la base de datos. # Configuraci\u00f3n para la vista. (http://localhost:8080/) no es (http://localhost:8080/jpaspring/) # Eso es para un servlet spring.mvc.view.prefix=/WEB-INF/pages/ spring.mvc.view.suffix=.jsp # Permiso para clear el ddl de las entidades spring.jpa.generate-ddl=true # Ejecuta la configuraci\u00f3n de la clase que mapea los tipos de datos. spring.jpa.database-platform=cl.lherrera.jpaspring.SQLiteDialect # Crea la base si no est\u00e1 y cuando finaliza la ejecuci\u00f3n la borra. spring.jpa.hibernate.ddl-auto=create-drop # Muestra las consultas realizadas por el framework y las imprime en el log spring.jpa.show-sql=true # Le da un form\u00e1to legible por un humano para una mejor depuraci\u00f3n en el log. spring.jpa.properties.hibernate.format_sql=true #Pruebas #logging.level.org.hibernate.SQL=debug #logging.level.org.hibernate.type.descriptor.sql=trace /database.properties Este archivo contendr\u00e1 la configuraci\u00f3n de la conexi\u00f3n a la base de datos.\u001c Para el ejemplo se utilizar\u00e1 SQLITE. driverClassName=org.sqlite.JDBC url=jdbc:sqlite:basedatos.db username=jpaspring password=sa /basedatos.db Este archivo no contiene informaci\u00f3n, lo creamos con la extensi\u00f3n , lo abrimos con el cliente DBEAVER \u001d, usando las credenciales. Hasta ahora, solamente podemos ejecutar la aplicaci\u00f3n, sin errores, no comprobamos el funcionamiento.","title":"Lectura002 001"},{"location":"modulos/mod_5/uni003/lectura002_001/#unidad-321-modelo","text":"La siguiente aplicaci\u00f3n ser\u00e1 finalmente un mantenedor de personas, con un control de acceso de usuarios. La aplicaci\u00f3n contendr\u00e1 5 Hitos. Hito 1: Solamente crear el proyecto y modificarlo para que la base de datos SQLITE funcione.","title":"Unidad 3.2.1 - Modelo"},{"location":"modulos/mod_5/uni003/lectura002_001/#3211-iniciar-proyecto","text":"Se crea un proyecto spring-boot: 2.2.6 con las siguientes dependencias: Spring-data JPA Lombok Spring Web Spring boot DevToools Tipo de deploy -> war , con esto se crea el ServletInitializer","title":"3.2.1.1 Iniciar proyecto"},{"location":"modulos/mod_5/uni003/lectura002_001/#estructura-final-del-hito","text":"./ \u251c\u2500\u2500 HELP.md \u251c\u2500\u2500 basedatos.db \u251c\u2500\u2500 mvnw \u251c\u2500\u2500 mvnw.cmd \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 jpaspring \u2502 \u2502 \u2502 \u251c\u2500\u2500 AppConfig.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 JpaspringApplication.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 SQLiteDialect.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 ServletInitializer.java \u2502 \u2502 \u251c\u2500\u2500 resources \u2502 \u2502 \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2502 \u2502 \u251c\u2500\u2500 database.properties \u2502 \u2502 \u2502 \u251c\u2500\u2500 static \u2502 \u2502 \u2502 \u2514\u2500\u2500 templates \u2502 \u2502 \u2514\u2500\u2500 webapp \u2502 \u2502 \u2514\u2500\u2500 WEB-INF \u2502 \u2514\u2500\u2500 test \u2502 \u2514\u2500\u2500 java \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 jpaspring \u2502 \u2514\u2500\u2500 JpaspringApplicationTests.java \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2514\u2500\u2500 database.properties \u251c\u2500\u2500 m2e-wtp \u2502 \u2514\u2500\u2500 web-resources \u2502 \u2514\u2500\u2500 META-INF \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 maven \u2502 \u2514\u2500\u2500 cl.lherrera.jpaspring \u2502 \u2514\u2500\u2500 jpaspring \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2514\u2500\u2500 pom.xml \u2514\u2500\u2500 test-classes 25 directories, 18 files","title":"Estructura final del hito"},{"location":"modulos/mod_5/uni003/lectura002_001/#archivos-modificados","text":"","title":"Archivos modificados"},{"location":"modulos/mod_5/uni003/lectura002_001/#pomxml","text":"Archivo de dependencias del proyecto. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.6.RELEASE</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>cl.lherrera.jpaspring</groupId> <artifactId>jpaspring</artifactId> <version>20.0.0</version> <packaging>war</packaging> <name>jpaspring</name> <description>proyecto JPA SQLITE</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-jpa</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> <scope>provided</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> <!-- SOPORTE ARCHIVOS JSP --> <dependency> <groupId>org.apache.tomcat.embed</groupId> <artifactId>tomcat-embed-jasper</artifactId> <scope>provided</scope> </dependency> <!-- SOPORTE ARCHIVOS JSP # --> <!-- JSTL --> <dependency> <groupId>javax.servlet</groupId> <artifactId>jstl</artifactId> </dependency> <dependency> <groupId>javax.servlet</groupId> <artifactId>javax.servlet-api</artifactId> </dependency> <!-- JSTL # --> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project>","title":"/pom.xml"},{"location":"modulos/mod_5/uni003/lectura002_001/#cllherrerajpaspring","text":"/SQLiteDialect.java Archivo necesario para la configuraci\u00f3n de SQLITE para Spring , es un archivo est\u00e1ndar. package cl.lherrera.jpaspring; import java.sql.Types; import org.hibernate.dialect.Dialect; import org.hibernate.dialect.function.StandardSQLFunction; import org.hibernate.dialect.function.SQLFunctionTemplate; import org.hibernate.dialect.function.VarArgsSQLFunction; import org.hibernate.type.StandardBasicTypes; public class SQLiteDialect extends Dialect { public SQLiteDialect() { super(); registerColumnType(Types.BIT, \"integer\"); registerColumnType(Types.TINYINT, \"tinyint\"); registerColumnType(Types.SMALLINT, \"smallint\"); registerColumnType(Types.INTEGER, \"integer\"); registerColumnType(Types.BIGINT, \"bigint\"); registerColumnType(Types.FLOAT, \"float\"); registerColumnType(Types.REAL, \"real\"); registerColumnType(Types.DOUBLE, \"double\"); registerColumnType(Types.NUMERIC, \"numeric\"); registerColumnType(Types.DECIMAL, \"decimal\"); registerColumnType(Types.CHAR, \"char\"); registerColumnType(Types.VARCHAR, \"varchar\"); registerColumnType(Types.LONGVARCHAR, \"longvarchar\"); registerColumnType(Types.DATE, \"date\"); registerColumnType(Types.TIME, \"time\"); registerColumnType(Types.TIMESTAMP, \"timestamp\"); registerColumnType(Types.BINARY, \"blob\"); registerColumnType(Types.VARBINARY, \"blob\"); registerColumnType(Types.LONGVARBINARY, \"blob\"); // registerColumnType(Types.NULL, \"null\"); registerColumnType(Types.BLOB, \"blob\"); registerColumnType(Types.CLOB, \"clob\"); registerColumnType(Types.BOOLEAN, \"integer\"); registerFunction(\"concat\", new VarArgsSQLFunction(StandardBasicTypes.STRING, \"\", \"||\", \"\")); registerFunction(\"mod\", new SQLFunctionTemplate(StandardBasicTypes.INTEGER, \"?1 % ?2\")); registerFunction(\"substr\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); registerFunction(\"substring\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); } public boolean supportsIdentityColumns() { return true; } public boolean hasDataTypeInIdentityColumn() { return false; // As specify in NHibernate dialect } public String getIdentityColumnString() { // return \"integer primary key autoincrement\"; return \"integer\"; } public String getIdentitySelectString() { return \"select last_insert_rowid()\"; } public boolean supportsLimit() { return true; } public String getLimitString(String query, boolean hasOffset) { return new StringBuffer(query.length() + 20).append(query).append( hasOffset ? \" limit ? offset ?\" : \" limit ?\").toString(); } public boolean bindLimitParametersInReverseOrder() { return true; } public boolean supportsTemporaryTables() { return true; } public String getCreateTemporaryTableString() { return \"create temporary table if not exists\"; } public boolean dropTemporaryTableAfterUse() { return false; } public boolean supportsCurrentTimestampSelection() { return true; } public boolean isCurrentTimestampSelectStringCallable() { return false; } public String getCurrentTimestampSelectString() { return \"select current_timestamp\"; } public boolean supportsUnionAll() { return true; } public boolean hasAlterTable() { return false; // As specify in NHibernate dialect } public boolean dropConstraints() { return false; } public String getAddColumnString() { return \"add column\"; } public String getForUpdateString() { return \"\"; } public boolean supportsOuterJoinForUpdate() { return false; } public String getDropForeignKeyString() { throw new UnsupportedOperationException( \"No drop foreign key syntax supported by SQLiteDialect\"); } public String getAddForeignKeyConstraintString(String constraintName, String[] foreignKey, String referencedTable, String[] primaryKey, boolean referencesPrimaryKey) { throw new UnsupportedOperationException( \"No add foreign key syntax supported by SQLiteDialect\"); } public String getAddPrimaryKeyConstraintString(String constraintName) { throw new UnsupportedOperationException( \"No add primary key syntax supported by SQLiteDialect\"); } public boolean supportsIfExistsBeforeTableName() { return true; } public boolean supportsCascadeDelete() { return false; } } /AppConfig.java Es donde agregamos la personalizaci\u00f3n de la base de datos, donde la informaci\u00f3n se trae desde un archivo. Esto es debido a que cuando se sube a producci\u00f3n, este ambiente, posee su propio archivo y las credenciales no quedan expuestas. package cl.lherrera.jpaspring; import javax.sql.DataSource; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.PropertySource; import org.springframework.core.env.Environment; import org.springframework.jdbc.datasource.DriverManagerDataSource; @Configuration @ComponentScan(\"cl.lherrera.jpaspring\") @PropertySource(\"classpath:database.properties\") public class AppConfig { @Autowired Environment environment; @Bean DataSource dataSource() { DriverManagerDataSource driverManagerDataSource = new DriverManagerDataSource(); driverManagerDataSource.setUrl(environment.getProperty(\"url\")); driverManagerDataSource.setUsername(environment.getProperty(\"username\")); driverManagerDataSource.setPassword(environment.getProperty(\"dbpassword\")); driverManagerDataSource.setDriverClassName(environment.getProperty(\"driverClassName\")); return driverManagerDataSource; } }","title":"cl.lherrera.jpaspring"},{"location":"modulos/mod_5/uni003/lectura002_001/#srcmainresources","text":"/application.properties Se listan las configuraciones de la aplicaci\u00f3n, como por ejemplo el lugar donde ir\u00e1n los archivos JSP, adem\u00e1s de configuraciones para la base de datos. # Configuraci\u00f3n para la vista. (http://localhost:8080/) no es (http://localhost:8080/jpaspring/) # Eso es para un servlet spring.mvc.view.prefix=/WEB-INF/pages/ spring.mvc.view.suffix=.jsp # Permiso para clear el ddl de las entidades spring.jpa.generate-ddl=true # Ejecuta la configuraci\u00f3n de la clase que mapea los tipos de datos. spring.jpa.database-platform=cl.lherrera.jpaspring.SQLiteDialect # Crea la base si no est\u00e1 y cuando finaliza la ejecuci\u00f3n la borra. spring.jpa.hibernate.ddl-auto=create-drop # Muestra las consultas realizadas por el framework y las imprime en el log spring.jpa.show-sql=true # Le da un form\u00e1to legible por un humano para una mejor depuraci\u00f3n en el log. spring.jpa.properties.hibernate.format_sql=true #Pruebas #logging.level.org.hibernate.SQL=debug #logging.level.org.hibernate.type.descriptor.sql=trace /database.properties Este archivo contendr\u00e1 la configuraci\u00f3n de la conexi\u00f3n a la base de datos.\u001c Para el ejemplo se utilizar\u00e1 SQLITE. driverClassName=org.sqlite.JDBC url=jdbc:sqlite:basedatos.db username=jpaspring password=sa","title":"/src/main/resources/"},{"location":"modulos/mod_5/uni003/lectura002_001/#basedatosdb","text":"Este archivo no contiene informaci\u00f3n, lo creamos con la extensi\u00f3n , lo abrimos con el cliente DBEAVER \u001d, usando las credenciales. Hasta ahora, solamente podemos ejecutar la aplicaci\u00f3n, sin errores, no comprobamos el funcionamiento.","title":"/basedatos.db"},{"location":"modulos/mod_5/uni003/lectura002_002/","text":"Unidad 3.2.2 - Modelo La siguiente aplicaci\u00f3n ser\u00e1 finalmente un mantenedor de personas, con un control de acceso de usuarios. La aplicaci\u00f3n contendr\u00e1 5 Hitos. Hito 2: Se crean los servicios necesarios, para que funcionen los test (Uso real de Mockito ). 3.2.2.1 Creando los servicios necesarios para la aplicaci\u00f3n En esta secci\u00f3n usaremos TDD para poder realizar los servicios con la utilizaci\u00f3n de mockito \u001d, simulamos la interacci\u00f3n con la base de datos. Esto no prueba realmente la base, si no que la simula, as\u00ed que el correcto funcionamiento de la capa de acceso a datos no se prueba con esta t\u00e9cnica. Archivos modificados basedatos.db // no importa siempre se modifica. src/main/java/cl/lherrera/jpaspring/entities/Persona.java src/main/java/cl/lherrera/jpaspring/repositories/PersonaRepo.java src/main/java/cl/lherrera/jpaspring/services/PersonaService.java src/main/java/cl/lherrera/jpaspring/services/PersonaServiceImpl.java src/main/resources/application.properties // ya est\u00e1 el mejor puesto desde el principio src/test/java/cl/lherrera/jpaspring/services/PersonaServiceTest.java /src/test/java/cl/lherrera/jpaspring/services \u001d /PersonaServiceTest.java Primero lo primero, partimos especulando mediante el uso de los test. El mock del DAO permite que el el servicio no use nuestro DAO , si no que el del mock , donde le decimos exactamente que debe traer, con ello verificamos todo el funcionamiento que requiera una simulaci\u00f3n del comportamiento de la base de datos. Si se quiere probar la persistencia, este tipo de test, no son \u00fatiles. Para eso hay que dise\u00f1ar alguno que use realmente la base, con una base de datos de prueba. package cl.lherrera.jpaspring.services; import static org.assertj.core.api.Assertions.assertThat; import static org.mockito.Mockito.when; import java.util.ArrayList; import java.util.List; import java.util.Optional; import org.junit.jupiter.api.DisplayName; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.context.SpringBootTest; import org.springframework.boot.test.mock.mockito.MockBean; import cl.lherrera.jpaspring.entities.Persona; import cl.lherrera.jpaspring.repositories.PersonaRepo; @SpringBootTest public class PersonaServiceTest { @Autowired PersonaService servicio; @MockBean PersonaRepo mockRepo; @Test @DisplayName(\"Buscar personas por nombre\") public void prueba005() { // crear la persona en la base mockdatos List<Persona> personas = new ArrayList<>(); personas.add(new Persona(1, \"luis\")); personas.add(new Persona(2, \"luis\")); when(mockRepo.findAllByNombre(\"luis\")).thenReturn(personas); // comprobamos la persona assertThat(personas).isEqualTo(servicio.obtenerPersonasPorNombre(\"luis\")); } @Test @DisplayName(\"obtener una lista de las personas\") public void prueba004() { // una lista de personas List<Persona> personas = new ArrayList<>(); personas.add(new Persona(1, \"luis\")); personas.add(new Persona(2, \"ana\")); // simular petici\u00f3n en la base de datos when((List<Persona>)mockRepo.findAll()).thenReturn(personas); assertThat(personas).isEqualTo(servicio.obtenerPersonas()); } @Test @DisplayName(\"almacenar persona\") public void prueba001() { // creamos el dato en memoria Persona persona = new Persona(1, \"luis\"); // simulaci\u00f3n de dato en la base de datos when(mockRepo.save(persona)).thenReturn(persona); // funcionamiento del servicio. (se ejecuta el mockRepo y no // el repo que est\u00e1 en su clase, el que llama a // la base datos as\u00ed esta petici\u00f3n // se simula sin escribir // realmente en la BD assertThat(servicio.IngresarPersona(persona)).isEqualTo(persona); } @Test @DisplayName(\"actualizar una persona\") public void prueba002() { // creamos la persona Persona persona = new Persona(1, \"Luis\"); // se simula persona encontrada when(mockRepo.findById(1)).thenReturn(Optional.of(persona)); Persona personaUdt = servicio.encontrarPersona(1); // se actualiza el valor. se puede ver que la primera simulaci\u00f3n // tuvo efecto, el mockRepo actu\u00f3 como el repositorio // oficial ya que usamos el servicio para traer // la persona usando el servicio. personaUdt.setNombre(\"Ana\"); // simulaci\u00f3n de actualizaci\u00f3n (es el repo el que simulamos y // save(cuando existe actualiza o crea) when(mockRepo.save(personaUdt)).thenReturn(personaUdt); assertThat(servicio.actualizarPersona(personaUdt).getNombre()).isEqualTo(\"Ana\"); } @Test @DisplayName(\"eliminar persona\") public void prueba003() { // encontrar la perosona para eliminarla ya que esta // debe existir en la base de datos. when(mockRepo.findById(1)) .thenReturn(Optional.of(new Persona(1, \"luis\"))); // con la base de datos simulada, utlizamos el servicio. Persona persona = servicio.encontrarPersona(1); // simulamos la interacci\u00f3n de la base de datos when(mockRepo.myDeleteById(1)).thenReturn(Optional.of(persona)); // ocupamos el servicio Persona personaEliminada = servicio.eliminarPersona(persona); assertThat(personaEliminada.getId()).isEqualTo(persona.getId()); } } /src/main/java/cl/lherrera/jpaspring/entities /Persona.java Entidad encargada de llevar el registro de la base, adem\u00e1s es la gu\u00eda para la creaci\u00f3n del DDL . package cl.lherrera.jpaspring.entities; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; @Entity public class Persona { @Id @GeneratedValue(strategy=GenerationType.AUTO) // https://www.objectdb.com/java/jpa/entity/generated private Integer id; private String nombre; public Persona() {} public Persona(Integer id, String nombre) { this.id = id; this.nombre = nombre; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } } /jpaspring/src/main/java/cl/lherrera/jpaspring/repositories Like a DAO. /PersonaRepo.java Esta es la magia de JPA. con solamente extender la interfaz JpaRepository , tenemos un crud armado, \u001c PagingAndSortingRepository , posibilita la paginaci\u00f3n que veremos m\u00e1s adelante. No se necesita implementar, Spring se encarga de esto. Si necesitamos personalizar una consulta lo podemos hacer con una anotaci\u00f3n en la misma interfaz. Esta interfaz es lo m\u00e1s parecido al dao que est\u00e1bamos acostumbrados, de hecho, a veces lo veremos en los paquetes dao , lo cual no est\u00e1 incorrecto, por que esta es precisamente la capa de acceso a los datos. package cl.lherrera.jpaspring.repositories; import java.util.List; import java.util.Optional; import org.springframework.data.jpa.repository.Query; import org.springframework.data.repository.CrudRepository; import cl.lherrera.jpaspring.entities.Persona; public interface PersonaRepo extends CrudRepository<Persona, Integer> { /** * Se puede parecer mucho a una consulta en la base de datos pero es una * consulta al modelo, la respuesta es un @Entity. por eso la \"tabla\" est\u00e1 en * may\u00fasculas. * * Eso es debido a que no renemos un PersonaRepoImpl que maneje la * personalizaci\u00f3n de esta consulta y como la original delete, retorna void no * es muy buena para hacer test ya que no tenemos contra qu\u00e9 validar si * simulamos la base de datos * */ @Query(\"DELETE FROM Persona WHERE id = ?1\") Optional<Persona> myDeleteById(Integer id); // no posee un nombre personalizado, cumple con la nomenclatura find // debe ir aunque siga la nomenclatura List<Persona> findAllByNombre(String nombre); } /src/main/java/cl/lherrera/jpaspring/services /PersonaService.java Interfaz de los servicios que se desarrollar\u00e1n. package cl.lherrera.jpaspring.services; import java.util.List; import cl.lherrera.jpaspring.entities.Persona; public interface PersonaService { List<Persona> obtenerPersonas(); List<Persona> obtenerPersonasPorNombre(String nombre); Persona IngresarPersona(Persona persona); Persona encontrarPersona(Integer id); Persona eliminarPersona(Persona persona); Persona actualizarPersona(Persona persona); } /PersonaServiceImpl.java Implementaci\u00f3n de los servicios. package cl.lherrera.jpaspring.services; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import cl.lherrera.jpaspring.entities.Persona; import cl.lherrera.jpaspring.repositories.PersonaRepo; @Service public class PersonaServiceImpl implements PersonaService{ @Autowired PersonaRepo repo; @Override public List<Persona> obtenerPersonas() { return (List<Persona>) repo.findAll(); } @Override public List<Persona> obtenerPersonasPorNombre(String nombre) { return repo.findAllByNombre(nombre); } @Override public Persona encontrarPersona(Integer id) { // as\u00ed nos evitamos un null pointer exception return repo.findById(id).orElse(new Persona()); } @Override public Persona eliminarPersona(Persona persona) { return repo.myDeleteById(persona.getId()).orElse(new Persona()); } @Override public Persona actualizarPersona(Persona persona) { return repo.save(persona); } @Override public Persona IngresarPersona(Persona persona) { return repo.save(persona); } }","title":"Lectura002 002"},{"location":"modulos/mod_5/uni003/lectura002_002/#unidad-322-modelo","text":"La siguiente aplicaci\u00f3n ser\u00e1 finalmente un mantenedor de personas, con un control de acceso de usuarios. La aplicaci\u00f3n contendr\u00e1 5 Hitos. Hito 2: Se crean los servicios necesarios, para que funcionen los test (Uso real de Mockito ).","title":"Unidad 3.2.2 - Modelo"},{"location":"modulos/mod_5/uni003/lectura002_002/#3221-creando-los-servicios-necesarios-para-la-aplicacion","text":"En esta secci\u00f3n usaremos TDD para poder realizar los servicios con la utilizaci\u00f3n de mockito \u001d, simulamos la interacci\u00f3n con la base de datos. Esto no prueba realmente la base, si no que la simula, as\u00ed que el correcto funcionamiento de la capa de acceso a datos no se prueba con esta t\u00e9cnica.","title":"3.2.2.1 Creando los servicios necesarios para la aplicaci\u00f3n"},{"location":"modulos/mod_5/uni003/lectura002_002/#archivos-modificados","text":"basedatos.db // no importa siempre se modifica. src/main/java/cl/lherrera/jpaspring/entities/Persona.java src/main/java/cl/lherrera/jpaspring/repositories/PersonaRepo.java src/main/java/cl/lherrera/jpaspring/services/PersonaService.java src/main/java/cl/lherrera/jpaspring/services/PersonaServiceImpl.java src/main/resources/application.properties // ya est\u00e1 el mejor puesto desde el principio src/test/java/cl/lherrera/jpaspring/services/PersonaServiceTest.java","title":"Archivos modificados"},{"location":"modulos/mod_5/uni003/lectura002_002/#srctestjavacllherrerajpaspringservices","text":"/PersonaServiceTest.java Primero lo primero, partimos especulando mediante el uso de los test. El mock del DAO permite que el el servicio no use nuestro DAO , si no que el del mock , donde le decimos exactamente que debe traer, con ello verificamos todo el funcionamiento que requiera una simulaci\u00f3n del comportamiento de la base de datos. Si se quiere probar la persistencia, este tipo de test, no son \u00fatiles. Para eso hay que dise\u00f1ar alguno que use realmente la base, con una base de datos de prueba. package cl.lherrera.jpaspring.services; import static org.assertj.core.api.Assertions.assertThat; import static org.mockito.Mockito.when; import java.util.ArrayList; import java.util.List; import java.util.Optional; import org.junit.jupiter.api.DisplayName; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.context.SpringBootTest; import org.springframework.boot.test.mock.mockito.MockBean; import cl.lherrera.jpaspring.entities.Persona; import cl.lherrera.jpaspring.repositories.PersonaRepo; @SpringBootTest public class PersonaServiceTest { @Autowired PersonaService servicio; @MockBean PersonaRepo mockRepo; @Test @DisplayName(\"Buscar personas por nombre\") public void prueba005() { // crear la persona en la base mockdatos List<Persona> personas = new ArrayList<>(); personas.add(new Persona(1, \"luis\")); personas.add(new Persona(2, \"luis\")); when(mockRepo.findAllByNombre(\"luis\")).thenReturn(personas); // comprobamos la persona assertThat(personas).isEqualTo(servicio.obtenerPersonasPorNombre(\"luis\")); } @Test @DisplayName(\"obtener una lista de las personas\") public void prueba004() { // una lista de personas List<Persona> personas = new ArrayList<>(); personas.add(new Persona(1, \"luis\")); personas.add(new Persona(2, \"ana\")); // simular petici\u00f3n en la base de datos when((List<Persona>)mockRepo.findAll()).thenReturn(personas); assertThat(personas).isEqualTo(servicio.obtenerPersonas()); } @Test @DisplayName(\"almacenar persona\") public void prueba001() { // creamos el dato en memoria Persona persona = new Persona(1, \"luis\"); // simulaci\u00f3n de dato en la base de datos when(mockRepo.save(persona)).thenReturn(persona); // funcionamiento del servicio. (se ejecuta el mockRepo y no // el repo que est\u00e1 en su clase, el que llama a // la base datos as\u00ed esta petici\u00f3n // se simula sin escribir // realmente en la BD assertThat(servicio.IngresarPersona(persona)).isEqualTo(persona); } @Test @DisplayName(\"actualizar una persona\") public void prueba002() { // creamos la persona Persona persona = new Persona(1, \"Luis\"); // se simula persona encontrada when(mockRepo.findById(1)).thenReturn(Optional.of(persona)); Persona personaUdt = servicio.encontrarPersona(1); // se actualiza el valor. se puede ver que la primera simulaci\u00f3n // tuvo efecto, el mockRepo actu\u00f3 como el repositorio // oficial ya que usamos el servicio para traer // la persona usando el servicio. personaUdt.setNombre(\"Ana\"); // simulaci\u00f3n de actualizaci\u00f3n (es el repo el que simulamos y // save(cuando existe actualiza o crea) when(mockRepo.save(personaUdt)).thenReturn(personaUdt); assertThat(servicio.actualizarPersona(personaUdt).getNombre()).isEqualTo(\"Ana\"); } @Test @DisplayName(\"eliminar persona\") public void prueba003() { // encontrar la perosona para eliminarla ya que esta // debe existir en la base de datos. when(mockRepo.findById(1)) .thenReturn(Optional.of(new Persona(1, \"luis\"))); // con la base de datos simulada, utlizamos el servicio. Persona persona = servicio.encontrarPersona(1); // simulamos la interacci\u00f3n de la base de datos when(mockRepo.myDeleteById(1)).thenReturn(Optional.of(persona)); // ocupamos el servicio Persona personaEliminada = servicio.eliminarPersona(persona); assertThat(personaEliminada.getId()).isEqualTo(persona.getId()); } }","title":"/src/test/java/cl/lherrera/jpaspring/services"},{"location":"modulos/mod_5/uni003/lectura002_002/#srcmainjavacllherrerajpaspringentities","text":"/Persona.java Entidad encargada de llevar el registro de la base, adem\u00e1s es la gu\u00eda para la creaci\u00f3n del DDL . package cl.lherrera.jpaspring.entities; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; @Entity public class Persona { @Id @GeneratedValue(strategy=GenerationType.AUTO) // https://www.objectdb.com/java/jpa/entity/generated private Integer id; private String nombre; public Persona() {} public Persona(Integer id, String nombre) { this.id = id; this.nombre = nombre; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } }","title":"/src/main/java/cl/lherrera/jpaspring/entities"},{"location":"modulos/mod_5/uni003/lectura002_002/#jpaspringsrcmainjavacllherrerajpaspringrepositories","text":"Like a DAO. /PersonaRepo.java Esta es la magia de JPA. con solamente extender la interfaz JpaRepository , tenemos un crud armado, \u001c PagingAndSortingRepository , posibilita la paginaci\u00f3n que veremos m\u00e1s adelante. No se necesita implementar, Spring se encarga de esto. Si necesitamos personalizar una consulta lo podemos hacer con una anotaci\u00f3n en la misma interfaz. Esta interfaz es lo m\u00e1s parecido al dao que est\u00e1bamos acostumbrados, de hecho, a veces lo veremos en los paquetes dao , lo cual no est\u00e1 incorrecto, por que esta es precisamente la capa de acceso a los datos. package cl.lherrera.jpaspring.repositories; import java.util.List; import java.util.Optional; import org.springframework.data.jpa.repository.Query; import org.springframework.data.repository.CrudRepository; import cl.lherrera.jpaspring.entities.Persona; public interface PersonaRepo extends CrudRepository<Persona, Integer> { /** * Se puede parecer mucho a una consulta en la base de datos pero es una * consulta al modelo, la respuesta es un @Entity. por eso la \"tabla\" est\u00e1 en * may\u00fasculas. * * Eso es debido a que no renemos un PersonaRepoImpl que maneje la * personalizaci\u00f3n de esta consulta y como la original delete, retorna void no * es muy buena para hacer test ya que no tenemos contra qu\u00e9 validar si * simulamos la base de datos * */ @Query(\"DELETE FROM Persona WHERE id = ?1\") Optional<Persona> myDeleteById(Integer id); // no posee un nombre personalizado, cumple con la nomenclatura find // debe ir aunque siga la nomenclatura List<Persona> findAllByNombre(String nombre); }","title":"/jpaspring/src/main/java/cl/lherrera/jpaspring/repositories"},{"location":"modulos/mod_5/uni003/lectura002_002/#srcmainjavacllherrerajpaspringservices","text":"/PersonaService.java Interfaz de los servicios que se desarrollar\u00e1n. package cl.lherrera.jpaspring.services; import java.util.List; import cl.lherrera.jpaspring.entities.Persona; public interface PersonaService { List<Persona> obtenerPersonas(); List<Persona> obtenerPersonasPorNombre(String nombre); Persona IngresarPersona(Persona persona); Persona encontrarPersona(Integer id); Persona eliminarPersona(Persona persona); Persona actualizarPersona(Persona persona); } /PersonaServiceImpl.java Implementaci\u00f3n de los servicios. package cl.lherrera.jpaspring.services; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import cl.lherrera.jpaspring.entities.Persona; import cl.lherrera.jpaspring.repositories.PersonaRepo; @Service public class PersonaServiceImpl implements PersonaService{ @Autowired PersonaRepo repo; @Override public List<Persona> obtenerPersonas() { return (List<Persona>) repo.findAll(); } @Override public List<Persona> obtenerPersonasPorNombre(String nombre) { return repo.findAllByNombre(nombre); } @Override public Persona encontrarPersona(Integer id) { // as\u00ed nos evitamos un null pointer exception return repo.findById(id).orElse(new Persona()); } @Override public Persona eliminarPersona(Persona persona) { return repo.myDeleteById(persona.getId()).orElse(new Persona()); } @Override public Persona actualizarPersona(Persona persona) { return repo.save(persona); } @Override public Persona IngresarPersona(Persona persona) { return repo.save(persona); } }","title":"/src/main/java/cl/lherrera/jpaspring/services"},{"location":"modulos/mod_5/uni003/lectura002_003/","text":"Unidad 3.2.3 - Modelo La siguiente aplicaci\u00f3n ser\u00e1 finalmente un mantenedor de personas, con un control de acceso de usuarios. La aplicaci\u00f3n contendr\u00e1 5 Hitos. Hito 3: Creando la web del proyecto. El hito finaliza con la ejecuci\u00f3n de la aplicaci\u00f3n en el servidor y visto en un navegador web. 3.2.3.1 CRUD con web Los servicios que se implementaron, ahora tendr\u00e1n forma en la web. Veremos como trabaja Spring la parte visual utilizando jsp . Archivos modificados src/main/java/cl/lherrera/jpaspring/controllers/AplicationController.java src/main/java/cl/lherrera/jpaspring/controllers/PersonaController.java src/main/java/cl/lherrera/jpaspring/repositories/PersonaRepo.java src/main/java/cl/lherrera/jpaspring/services/PersonaServiceImpl.java src/main/resources/application.properties src/main/webapp/WEB-INF/index.jsp src/main/webapp/WEB-INF/pages/index.jsp src/main/webapp/WEB-INF/pages/htmlTemplates/footerTemplate.jsp src/main/webapp/WEB-INF/pages/htmlTemplates/headTemplate.jsp src/main/webapp/WEB-INF/pages/htmlTemplates/navTemplate.jsp src/main/webapp/WEB-INF/pages/personas/actualizar.jsp src/main/webapp/WEB-INF/pages/personas/eliminar.jsp src/main/webapp/WEB-INF/pages/personas/personas.jsp src/test/java/cl/lherrera/jpaspring/services/PersonaServiceTest.java src/main/java/cl/lherrera/jpaspring/controllers/ /AplicationController.java package cl.lherrera.jpaspring.controllers; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; @Controller public class AplicationController { private static final Logger logger = LoggerFactory.getLogger(AplicationController.class); @GetMapping(\"/\") public String home() { logger.info(\"llamada a : '/'\"); return \"index\"; } } /PersonaController.java package cl.lherrera.jpaspring.controllers; import java.util.List; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpStatus; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.ResponseStatus; import org.springframework.web.servlet.mvc.support.RedirectAttributes; import cl.lherrera.jpaspring.entities.Persona; import cl.lherrera.jpaspring.services.PersonaService; @Controller @RequestMapping(\"/personas\") public class PersonaController { private static final Logger logger = LoggerFactory.getLogger(PersonaController.class); @Autowired PersonaService servicio; @GetMapping(\"/ingresar\") @ResponseStatus(code = HttpStatus.OK) public String inicio(Model modelo) { logger.info(\"Petici\u00f3n: /personas/\"); List<Persona> personas = servicio.obtenerPersonas(); modelo.addAttribute(\"personas\", personas); return \"personas/personas\"; } // @ResponseStatus(code = HttpStatus.CREATED) // con esto no funciona el redirect @PostMapping(\"/ingresar\") public String ingresar( @ModelAttribute(\"foo\") Persona persona, @RequestParam String nombre, RedirectAttributes attributes) { logger.info(\"Petici\u00f3n post /ingresar\"); Persona respuesta = servicio.IngresarPersona(persona); if(persona == null) logger.error(\"error en ingreso de persona\"); return \"redirect:ingresar\"; } @GetMapping(\"/actualizar\") public String actualizar( Model modelo, @RequestParam String id) { logger.info(\"Petici\u00f3n-GET: /actualizar\"); Persona persona = servicio.encontrarPersona(Integer.parseInt(id)); modelo.addAttribute(\"persona\", persona); return \"personas/actualizar\"; } // el formulario debe estar completo con los names, para que lo // reconozca como la misma entidad y no una nueva @PostMapping(\"/actualizar\") public String doActualizar(@ModelAttribute(\"foo\") Persona persona) { logger.info(\"Petici\u00f3n-POST: /actualizar\"); servicio.actualizarPersona(persona); return \"redirect:ingresar\"; } @GetMapping(\"/eliminar\") public String eliminar( Model modelo, @RequestParam String id) { logger.info(\"Petici\u00f3n-GET: /eliminar\"); Persona persona = servicio.encontrarPersona(Integer.parseInt(id)); modelo.addAttribute(\"persona\", persona); return \"personas/eliminar\"; } @PostMapping(\"/eliminar\") public String doEliminar( @ModelAttribute(\"foo\") Persona persona, @RequestParam String id) { logger.info(\"Petici\u00f3n-POST: /eliminar\"); Persona respuesta = servicio.eliminarPersona(persona); if(respuesta == null) logger.info(\"Petici\u00f3n-POST: /eliminar\"); return \"redirect:ingresar\"; } } src/main/java/cl/lherrera/jpaspring/repositories /PersonaRepo.java package cl.lherrera.jpaspring.repositories; import java.util.List; import java.util.Optional; import org.springframework.data.jpa.repository.Modifying; import org.springframework.data.jpa.repository.Query; import org.springframework.data.repository.CrudRepository; import cl.lherrera.jpaspring.entities.Persona; public interface PersonaRepo extends CrudRepository<Persona, Integer> { /** * Se puede parecer mucho a una consulta en la base de datos pero es una * consulta al modelo, la respuesta es un @Entity. por eso la \"tabla\" est\u00e1 en * may\u00fasculas. * * Eso es debido a que no renemos un PersonaRepoImpl que maneje la * personalizaci\u00f3n de esta consulta y como la original delete, retorna void no * es muy buena para hacer test ya que no tenemos contra qu\u00e9 validar si * simulamos la base de datos. * * En el fondo es solamente un deleteById(), pero se expone para su ejemplo * Que podemos aplicar queries a las entidades. * */ @Modifying @Query(\"DELETE FROM Persona WHERE id = ?1\") Integer myDeleteById(Integer id); // no posee un nombre personalizado, cumple con la nomenclatura find // debe ir aunque siga la nomenclatura List<Persona> findAllByNombre(String nombre); } src/main/java/cl/lherrera/jpaspring/services /PersonaServiceImpl.java package cl.lherrera.jpaspring.services; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional; import cl.lherrera.jpaspring.entities.Persona; import cl.lherrera.jpaspring.repositories.PersonaRepo; @Service public class PersonaServiceImpl implements PersonaService{ @Autowired PersonaRepo repo; @Override @Transactional(readOnly = true) public List<Persona> obtenerPersonas() { return (List<Persona>) repo.findAll(); } @Override @Transactional(readOnly = true) public List<Persona> obtenerPersonasPorNombre(String nombre) { return repo.findAllByNombre(nombre); } @Override @Transactional(readOnly = true) public Persona encontrarPersona(Integer id) { // as\u00ed nos evitamos un null pointer exception return repo.findById(id).orElse(new Persona()); } @Override @Transactional public Persona eliminarPersona(Persona persona) { int numeroQueAunNoSeOcupa = repo.myDeleteById(persona.getId()); return persona; } @Override @Transactional public Persona actualizarPersona(Persona persona) { return repo.save(persona); } @Override @Transactional public Persona IngresarPersona(Persona persona) { return repo.save(persona); } } src/main/webapp/WEB-INF /index.jsp \u001c Eliminado /pages/index.jsp \u001c <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@taglib uri=\"http://www.springframework.org/tags/form\" prefix=\"form\"%> <%@taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%> <!DOCTYPE html> <html> <jsp:include page=\"htmlTemplates/headTemplate.jsp\"></jsp:include> <body> <jsp:include page=\"htmlTemplates/navTemplate.jsp\"></jsp:include> <h1>Inicio de la web</h1> <jsp:include page=\"htmlTemplates/footerTemplate.jsp\"></jsp:include> </body> </html> /pages/htmlTemplates/footerTemplate.jsp <footer> <!-- bootstrap 4 --> <script src=\"https://code.jquery.com/jquery-3.4.1.slim.min.js\" integrity=\"sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n\" crossorigin=\"anonymous\"></script> <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js\" integrity=\"sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo\" crossorigin=\"anonymous\"></script> <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js\" integrity=\"sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6\" crossorigin=\"anonymous\"></script> <!-- bootstrap #--> </footer> /pages/htmlTemplates/headTemplate.jsp <!-- Este template, est\u00e1 dise\u00f1ado para mantener la cabecera del sitio --> <!-- unificada en una sola, ya que la comparten. --> <head> <meta charset=\"UTF-8\"> <title>FPA-EJEMPLO</title> <!-- cdn bootstrap 4 --> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\"> <!-- cdn bootstrap 4 #--> </head> /pages/htmlTemplates/navTemplate.jsp <nav class=\"navbar navbar-expand-lg navbar-light bg-light\"> <a class=\"navbar-brand\" href=\"#\">JPA-EJEMPLO</a> <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"> <span class=\"navbar-toggler-icon\"></span> </button> <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\"> <ul class=\"navbar-nav mr-auto\"> <!-- Home --> <li class=\"nav-item active\"><a class=\"nav-link\" href=\"/\">Home <span class=\"sr-only\">(current)</span> </a></li> <!-- Home #--> <li class=\"nav-item dropdown\"> <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"> Mantenedor de personas </a> <div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\"> <a class=\"dropdown-item\" href=\"/personas/ingresar\">Ingresar</a> </div> </li> </ul> </div> </nav> /pages/personas/actualizar.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@taglib uri=\"http://www.springframework.org/tags/form\" prefix=\"form\"%> <%@taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%> <html> <jsp:include page=\"../htmlTemplates/headTemplate.jsp\"></jsp:include> <body> <jsp:include page=\"../htmlTemplates/navTemplate.jsp\"></jsp:include> <div class=\"container\"> <div class=\"row\"> <div class=\"col\"> <form:form class=\"form-horizontal\" method=\"post\" action=\"/personas/actualizar\" modelAttribute=\"Persona\"> <div class=\"form-group\"> <label for=\"nombre\">Nombre</label> <input type=\"hidden\" name=\"id\" value=\"${persona.getId()}\"> <input type=\"text\" class=\"form-control\" id=\"nombre\" name=\"nombre\" value=\"${persona.getNombre()}\"> </div> <a href=\"/personas/ingresar\" class=\"btn btn-primary mb-2\" role=\"button\" aria-pressed=\"true\">Cancelar</a> <button type=\"submit\" class=\"btn btn-warning mb-2\">Actualizar</button> </form:form> </div> </div> </div> <jsp:include page=\"../htmlTemplates/footerTemplate.jsp\"></jsp:include> </body> </html> /pages/personas/eliminar.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@taglib uri=\"http://www.springframework.org/tags/form\" prefix=\"form\"%> <%@taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%> <html> <jsp:include page=\"../htmlTemplates/headTemplate.jsp\"></jsp:include> <body> <jsp:include page=\"../htmlTemplates/navTemplate.jsp\"></jsp:include> <div class=\"container\"> <div class=\"row\"> <div class=\"col\"> <form:form class=\"form-horizontal\" method=\"post\" action=\"/personas/eliminar\" modelAttribute=\"Persona\"> <div class=\"form-group\"> <label for=\"nombre\">Nombre</label> <input type=\"hidden\" name=\"id\" value=\"${persona.getId()}\"> <input type=\"text\" class=\"form-control\" id=\"nombre\" name=\"nombre\" disabled disabled value=\"${persona.getNombre()}\"> </div> <a href=\"/personas/ingresar\" class=\"btn btn-primary mb-2\" role=\"button\" aria-pressed=\"true\">Cancelar</a> <button type=\"submit\" class=\"btn btn-danger mb-2\">Confirmar</button> </form:form> </div> </div> </div> <jsp:include page=\"../htmlTemplates/footerTemplate.jsp\"></jsp:include> </body> </html> /pages/personas/personas.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@taglib uri=\"http://www.springframework.org/tags/form\" prefix=\"form\"%> <%@taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%> <!DOCTYPE html> <html> <jsp:include page=\"../htmlTemplates/headTemplate.jsp\"></jsp:include> <body> <jsp:include page=\"../htmlTemplates/navTemplate.jsp\"></jsp:include> <div class=\"container\"> <div class=\"row\"> <div class=\"col\"> <form:form class=\"form-horizontal\" method=\"post\" action=\"/personas/ingresar\" modelAttribute=\"Persona\"> <div class=\"form-group\"> <label for=\"nombre\">Nombre</label> <input type=\"text\" class=\"form-control\" id=\"nombre\" name=\"nombre\" placeholder=\"Ingrese el nombre\"> </div> <button type=\"submit\" class=\"btn btn-primary mb-2\">Ingresar</button> </form:form> <div class=\"table-responsive\"> <table class=\"table table-hover table-striped table-bordered\"> <tr> <th>Id</th> <th>Nombre</th> <th>Acci\u00f3n</th> </tr> <c:forEach items=\"${personas}\" var=\"persona\"> <tr> <td>${persona.getId()}</td> <td>${persona.getNombre()}</td> <td> <a href=\"/personas/actualizar?id=${persona.getId()}\">Actualizar</a> | <a href=\"/personas/eliminar?id=${persona.getId()}\" >Elimininar</a> </td> </tr> </c:forEach> </table> </div> </div> </div> </div> <jsp:include page=\"../htmlTemplates/footerTemplate.jsp\"></jsp:include> </body> </html> src/test/java/cl/lherrera/jpaspring/services /PersonaServiceTest.java \u001c package cl.lherrera.jpaspring.services; import static org.assertj.core.api.Assertions.assertThat; import static org.mockito.Mockito.when; import java.util.ArrayList; import java.util.List; import java.util.Optional; import org.junit.jupiter.api.DisplayName; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.context.SpringBootTest; import org.springframework.boot.test.mock.mockito.MockBean; import cl.lherrera.jpaspring.entities.Persona; import cl.lherrera.jpaspring.repositories.PersonaRepo; @SpringBootTest public class PersonaServiceTest { @Autowired PersonaService servicio; @MockBean PersonaRepo mockRepo; @Test @DisplayName(\"Buscar personas por nombre\") public void prueba005() { // crear la persona en la base mockdatos List<Persona> personas = new ArrayList<>(); personas.add(new Persona(1, \"luis\")); personas.add(new Persona(2, \"luis\")); when(mockRepo.findAllByNombre(\"luis\")).thenReturn(personas); // comprobamos la persona assertThat(personas).isEqualTo(servicio.obtenerPersonasPorNombre(\"luis\")); } @Test @DisplayName(\"obtener una lista de las personas\") public void prueba004() { // una lista de personas List<Persona> personas = new ArrayList<>(); personas.add(new Persona(1, \"luis\")); personas.add(new Persona(2, \"ana\")); // simular petici\u00f3n en la base de datos when((List<Persona>)mockRepo.findAll()).thenReturn(personas); assertThat(personas).isEqualTo(servicio.obtenerPersonas()); } @Test @DisplayName(\"almacenar persona\") public void prueba001() { // creamos el dato en memoria Persona persona = new Persona(1, \"luis\"); // simulaci\u00f3n de dato en la base de datos when(mockRepo.save(persona)).thenReturn(persona); // funcionamiento del servicio. (se ejecuta el mockRepo y no // el repo que est\u00e1 en su clase, el que llama a // la base datos as\u00ed esta petici\u00f3n // se simula sin escribir // realmente en la BD assertThat(servicio.IngresarPersona(persona)).isEqualTo(persona); } @Test @DisplayName(\"actualizar una persona\") public void prueba002() { // creamos la persona Persona persona = new Persona(1, \"Luis\"); // se simula persona encontrada when(mockRepo.findById(1)).thenReturn(Optional.of(persona)); Persona personaUdt = servicio.encontrarPersona(1); // se actualiza el valor. se puede ver que la primera simulaci\u00f3n // tuvo efecto, el mockRepo actu\u00f3 como el repositorio // oficial ya que usamos el servicio para traer // la persona usando el servicio. personaUdt.setNombre(\"Ana\"); // simulaci\u00f3n de actualizaci\u00f3n (es el repo el que simulamos y // save(cuando existe actualiza o crea) when(mockRepo.save(personaUdt)).thenReturn(personaUdt); assertThat(servicio.actualizarPersona(personaUdt).getNombre()).isEqualTo(\"Ana\"); } @Test @DisplayName(\"eliminar persona\") public void prueba003() { // encontrar la perosona para eliminarla ya que esta // debe existir en la base de datos. when(mockRepo.findById(1)) .thenReturn(Optional.of(new Persona(1, \"luis\"))); // con la base de datos simulada, utlizamos el servicio. Persona persona = servicio.encontrarPersona(1); // simulamos la interacci\u00f3n de la base de datos when(mockRepo.myDeleteById(1)).thenReturn(1); // ocupamos el servicio Persona personaEliminada = servicio.eliminarPersona(persona); assertThat(personaEliminada.getId()).isEqualTo(persona.getId()); } }","title":"Lectura002 003"},{"location":"modulos/mod_5/uni003/lectura002_003/#unidad-323-modelo","text":"La siguiente aplicaci\u00f3n ser\u00e1 finalmente un mantenedor de personas, con un control de acceso de usuarios. La aplicaci\u00f3n contendr\u00e1 5 Hitos. Hito 3: Creando la web del proyecto. El hito finaliza con la ejecuci\u00f3n de la aplicaci\u00f3n en el servidor y visto en un navegador web.","title":"Unidad 3.2.3 - Modelo"},{"location":"modulos/mod_5/uni003/lectura002_003/#3231-crud-con-web","text":"Los servicios que se implementaron, ahora tendr\u00e1n forma en la web. Veremos como trabaja Spring la parte visual utilizando jsp .","title":"3.2.3.1 CRUD con web"},{"location":"modulos/mod_5/uni003/lectura002_003/#archivos-modificados","text":"src/main/java/cl/lherrera/jpaspring/controllers/AplicationController.java src/main/java/cl/lherrera/jpaspring/controllers/PersonaController.java src/main/java/cl/lherrera/jpaspring/repositories/PersonaRepo.java src/main/java/cl/lherrera/jpaspring/services/PersonaServiceImpl.java src/main/resources/application.properties src/main/webapp/WEB-INF/index.jsp src/main/webapp/WEB-INF/pages/index.jsp src/main/webapp/WEB-INF/pages/htmlTemplates/footerTemplate.jsp src/main/webapp/WEB-INF/pages/htmlTemplates/headTemplate.jsp src/main/webapp/WEB-INF/pages/htmlTemplates/navTemplate.jsp src/main/webapp/WEB-INF/pages/personas/actualizar.jsp src/main/webapp/WEB-INF/pages/personas/eliminar.jsp src/main/webapp/WEB-INF/pages/personas/personas.jsp src/test/java/cl/lherrera/jpaspring/services/PersonaServiceTest.java","title":"Archivos modificados"},{"location":"modulos/mod_5/uni003/lectura002_003/#srcmainjavacllherrerajpaspringcontrollers","text":"/AplicationController.java package cl.lherrera.jpaspring.controllers; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; @Controller public class AplicationController { private static final Logger logger = LoggerFactory.getLogger(AplicationController.class); @GetMapping(\"/\") public String home() { logger.info(\"llamada a : '/'\"); return \"index\"; } } /PersonaController.java package cl.lherrera.jpaspring.controllers; import java.util.List; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpStatus; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.ResponseStatus; import org.springframework.web.servlet.mvc.support.RedirectAttributes; import cl.lherrera.jpaspring.entities.Persona; import cl.lherrera.jpaspring.services.PersonaService; @Controller @RequestMapping(\"/personas\") public class PersonaController { private static final Logger logger = LoggerFactory.getLogger(PersonaController.class); @Autowired PersonaService servicio; @GetMapping(\"/ingresar\") @ResponseStatus(code = HttpStatus.OK) public String inicio(Model modelo) { logger.info(\"Petici\u00f3n: /personas/\"); List<Persona> personas = servicio.obtenerPersonas(); modelo.addAttribute(\"personas\", personas); return \"personas/personas\"; } // @ResponseStatus(code = HttpStatus.CREATED) // con esto no funciona el redirect @PostMapping(\"/ingresar\") public String ingresar( @ModelAttribute(\"foo\") Persona persona, @RequestParam String nombre, RedirectAttributes attributes) { logger.info(\"Petici\u00f3n post /ingresar\"); Persona respuesta = servicio.IngresarPersona(persona); if(persona == null) logger.error(\"error en ingreso de persona\"); return \"redirect:ingresar\"; } @GetMapping(\"/actualizar\") public String actualizar( Model modelo, @RequestParam String id) { logger.info(\"Petici\u00f3n-GET: /actualizar\"); Persona persona = servicio.encontrarPersona(Integer.parseInt(id)); modelo.addAttribute(\"persona\", persona); return \"personas/actualizar\"; } // el formulario debe estar completo con los names, para que lo // reconozca como la misma entidad y no una nueva @PostMapping(\"/actualizar\") public String doActualizar(@ModelAttribute(\"foo\") Persona persona) { logger.info(\"Petici\u00f3n-POST: /actualizar\"); servicio.actualizarPersona(persona); return \"redirect:ingresar\"; } @GetMapping(\"/eliminar\") public String eliminar( Model modelo, @RequestParam String id) { logger.info(\"Petici\u00f3n-GET: /eliminar\"); Persona persona = servicio.encontrarPersona(Integer.parseInt(id)); modelo.addAttribute(\"persona\", persona); return \"personas/eliminar\"; } @PostMapping(\"/eliminar\") public String doEliminar( @ModelAttribute(\"foo\") Persona persona, @RequestParam String id) { logger.info(\"Petici\u00f3n-POST: /eliminar\"); Persona respuesta = servicio.eliminarPersona(persona); if(respuesta == null) logger.info(\"Petici\u00f3n-POST: /eliminar\"); return \"redirect:ingresar\"; } }","title":"src/main/java/cl/lherrera/jpaspring/controllers/"},{"location":"modulos/mod_5/uni003/lectura002_003/#srcmainjavacllherrerajpaspringrepositories","text":"/PersonaRepo.java package cl.lherrera.jpaspring.repositories; import java.util.List; import java.util.Optional; import org.springframework.data.jpa.repository.Modifying; import org.springframework.data.jpa.repository.Query; import org.springframework.data.repository.CrudRepository; import cl.lherrera.jpaspring.entities.Persona; public interface PersonaRepo extends CrudRepository<Persona, Integer> { /** * Se puede parecer mucho a una consulta en la base de datos pero es una * consulta al modelo, la respuesta es un @Entity. por eso la \"tabla\" est\u00e1 en * may\u00fasculas. * * Eso es debido a que no renemos un PersonaRepoImpl que maneje la * personalizaci\u00f3n de esta consulta y como la original delete, retorna void no * es muy buena para hacer test ya que no tenemos contra qu\u00e9 validar si * simulamos la base de datos. * * En el fondo es solamente un deleteById(), pero se expone para su ejemplo * Que podemos aplicar queries a las entidades. * */ @Modifying @Query(\"DELETE FROM Persona WHERE id = ?1\") Integer myDeleteById(Integer id); // no posee un nombre personalizado, cumple con la nomenclatura find // debe ir aunque siga la nomenclatura List<Persona> findAllByNombre(String nombre); }","title":"src/main/java/cl/lherrera/jpaspring/repositories"},{"location":"modulos/mod_5/uni003/lectura002_003/#srcmainjavacllherrerajpaspringservices","text":"/PersonaServiceImpl.java package cl.lherrera.jpaspring.services; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional; import cl.lherrera.jpaspring.entities.Persona; import cl.lherrera.jpaspring.repositories.PersonaRepo; @Service public class PersonaServiceImpl implements PersonaService{ @Autowired PersonaRepo repo; @Override @Transactional(readOnly = true) public List<Persona> obtenerPersonas() { return (List<Persona>) repo.findAll(); } @Override @Transactional(readOnly = true) public List<Persona> obtenerPersonasPorNombre(String nombre) { return repo.findAllByNombre(nombre); } @Override @Transactional(readOnly = true) public Persona encontrarPersona(Integer id) { // as\u00ed nos evitamos un null pointer exception return repo.findById(id).orElse(new Persona()); } @Override @Transactional public Persona eliminarPersona(Persona persona) { int numeroQueAunNoSeOcupa = repo.myDeleteById(persona.getId()); return persona; } @Override @Transactional public Persona actualizarPersona(Persona persona) { return repo.save(persona); } @Override @Transactional public Persona IngresarPersona(Persona persona) { return repo.save(persona); } }","title":"src/main/java/cl/lherrera/jpaspring/services"},{"location":"modulos/mod_5/uni003/lectura002_003/#srcmainwebappweb-inf","text":"/index.jsp \u001c Eliminado /pages/index.jsp \u001c <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@taglib uri=\"http://www.springframework.org/tags/form\" prefix=\"form\"%> <%@taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%> <!DOCTYPE html> <html> <jsp:include page=\"htmlTemplates/headTemplate.jsp\"></jsp:include> <body> <jsp:include page=\"htmlTemplates/navTemplate.jsp\"></jsp:include> <h1>Inicio de la web</h1> <jsp:include page=\"htmlTemplates/footerTemplate.jsp\"></jsp:include> </body> </html> /pages/htmlTemplates/footerTemplate.jsp <footer> <!-- bootstrap 4 --> <script src=\"https://code.jquery.com/jquery-3.4.1.slim.min.js\" integrity=\"sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n\" crossorigin=\"anonymous\"></script> <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js\" integrity=\"sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo\" crossorigin=\"anonymous\"></script> <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js\" integrity=\"sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6\" crossorigin=\"anonymous\"></script> <!-- bootstrap #--> </footer> /pages/htmlTemplates/headTemplate.jsp <!-- Este template, est\u00e1 dise\u00f1ado para mantener la cabecera del sitio --> <!-- unificada en una sola, ya que la comparten. --> <head> <meta charset=\"UTF-8\"> <title>FPA-EJEMPLO</title> <!-- cdn bootstrap 4 --> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\"> <!-- cdn bootstrap 4 #--> </head> /pages/htmlTemplates/navTemplate.jsp <nav class=\"navbar navbar-expand-lg navbar-light bg-light\"> <a class=\"navbar-brand\" href=\"#\">JPA-EJEMPLO</a> <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"> <span class=\"navbar-toggler-icon\"></span> </button> <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\"> <ul class=\"navbar-nav mr-auto\"> <!-- Home --> <li class=\"nav-item active\"><a class=\"nav-link\" href=\"/\">Home <span class=\"sr-only\">(current)</span> </a></li> <!-- Home #--> <li class=\"nav-item dropdown\"> <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"> Mantenedor de personas </a> <div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\"> <a class=\"dropdown-item\" href=\"/personas/ingresar\">Ingresar</a> </div> </li> </ul> </div> </nav> /pages/personas/actualizar.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@taglib uri=\"http://www.springframework.org/tags/form\" prefix=\"form\"%> <%@taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%> <html> <jsp:include page=\"../htmlTemplates/headTemplate.jsp\"></jsp:include> <body> <jsp:include page=\"../htmlTemplates/navTemplate.jsp\"></jsp:include> <div class=\"container\"> <div class=\"row\"> <div class=\"col\"> <form:form class=\"form-horizontal\" method=\"post\" action=\"/personas/actualizar\" modelAttribute=\"Persona\"> <div class=\"form-group\"> <label for=\"nombre\">Nombre</label> <input type=\"hidden\" name=\"id\" value=\"${persona.getId()}\"> <input type=\"text\" class=\"form-control\" id=\"nombre\" name=\"nombre\" value=\"${persona.getNombre()}\"> </div> <a href=\"/personas/ingresar\" class=\"btn btn-primary mb-2\" role=\"button\" aria-pressed=\"true\">Cancelar</a> <button type=\"submit\" class=\"btn btn-warning mb-2\">Actualizar</button> </form:form> </div> </div> </div> <jsp:include page=\"../htmlTemplates/footerTemplate.jsp\"></jsp:include> </body> </html> /pages/personas/eliminar.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@taglib uri=\"http://www.springframework.org/tags/form\" prefix=\"form\"%> <%@taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%> <html> <jsp:include page=\"../htmlTemplates/headTemplate.jsp\"></jsp:include> <body> <jsp:include page=\"../htmlTemplates/navTemplate.jsp\"></jsp:include> <div class=\"container\"> <div class=\"row\"> <div class=\"col\"> <form:form class=\"form-horizontal\" method=\"post\" action=\"/personas/eliminar\" modelAttribute=\"Persona\"> <div class=\"form-group\"> <label for=\"nombre\">Nombre</label> <input type=\"hidden\" name=\"id\" value=\"${persona.getId()}\"> <input type=\"text\" class=\"form-control\" id=\"nombre\" name=\"nombre\" disabled disabled value=\"${persona.getNombre()}\"> </div> <a href=\"/personas/ingresar\" class=\"btn btn-primary mb-2\" role=\"button\" aria-pressed=\"true\">Cancelar</a> <button type=\"submit\" class=\"btn btn-danger mb-2\">Confirmar</button> </form:form> </div> </div> </div> <jsp:include page=\"../htmlTemplates/footerTemplate.jsp\"></jsp:include> </body> </html> /pages/personas/personas.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@taglib uri=\"http://www.springframework.org/tags/form\" prefix=\"form\"%> <%@taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%> <!DOCTYPE html> <html> <jsp:include page=\"../htmlTemplates/headTemplate.jsp\"></jsp:include> <body> <jsp:include page=\"../htmlTemplates/navTemplate.jsp\"></jsp:include> <div class=\"container\"> <div class=\"row\"> <div class=\"col\"> <form:form class=\"form-horizontal\" method=\"post\" action=\"/personas/ingresar\" modelAttribute=\"Persona\"> <div class=\"form-group\"> <label for=\"nombre\">Nombre</label> <input type=\"text\" class=\"form-control\" id=\"nombre\" name=\"nombre\" placeholder=\"Ingrese el nombre\"> </div> <button type=\"submit\" class=\"btn btn-primary mb-2\">Ingresar</button> </form:form> <div class=\"table-responsive\"> <table class=\"table table-hover table-striped table-bordered\"> <tr> <th>Id</th> <th>Nombre</th> <th>Acci\u00f3n</th> </tr> <c:forEach items=\"${personas}\" var=\"persona\"> <tr> <td>${persona.getId()}</td> <td>${persona.getNombre()}</td> <td> <a href=\"/personas/actualizar?id=${persona.getId()}\">Actualizar</a> | <a href=\"/personas/eliminar?id=${persona.getId()}\" >Elimininar</a> </td> </tr> </c:forEach> </table> </div> </div> </div> </div> <jsp:include page=\"../htmlTemplates/footerTemplate.jsp\"></jsp:include> </body> </html>","title":"src/main/webapp/WEB-INF"},{"location":"modulos/mod_5/uni003/lectura002_003/#srctestjavacllherrerajpaspringservices","text":"/PersonaServiceTest.java \u001c package cl.lherrera.jpaspring.services; import static org.assertj.core.api.Assertions.assertThat; import static org.mockito.Mockito.when; import java.util.ArrayList; import java.util.List; import java.util.Optional; import org.junit.jupiter.api.DisplayName; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.context.SpringBootTest; import org.springframework.boot.test.mock.mockito.MockBean; import cl.lherrera.jpaspring.entities.Persona; import cl.lherrera.jpaspring.repositories.PersonaRepo; @SpringBootTest public class PersonaServiceTest { @Autowired PersonaService servicio; @MockBean PersonaRepo mockRepo; @Test @DisplayName(\"Buscar personas por nombre\") public void prueba005() { // crear la persona en la base mockdatos List<Persona> personas = new ArrayList<>(); personas.add(new Persona(1, \"luis\")); personas.add(new Persona(2, \"luis\")); when(mockRepo.findAllByNombre(\"luis\")).thenReturn(personas); // comprobamos la persona assertThat(personas).isEqualTo(servicio.obtenerPersonasPorNombre(\"luis\")); } @Test @DisplayName(\"obtener una lista de las personas\") public void prueba004() { // una lista de personas List<Persona> personas = new ArrayList<>(); personas.add(new Persona(1, \"luis\")); personas.add(new Persona(2, \"ana\")); // simular petici\u00f3n en la base de datos when((List<Persona>)mockRepo.findAll()).thenReturn(personas); assertThat(personas).isEqualTo(servicio.obtenerPersonas()); } @Test @DisplayName(\"almacenar persona\") public void prueba001() { // creamos el dato en memoria Persona persona = new Persona(1, \"luis\"); // simulaci\u00f3n de dato en la base de datos when(mockRepo.save(persona)).thenReturn(persona); // funcionamiento del servicio. (se ejecuta el mockRepo y no // el repo que est\u00e1 en su clase, el que llama a // la base datos as\u00ed esta petici\u00f3n // se simula sin escribir // realmente en la BD assertThat(servicio.IngresarPersona(persona)).isEqualTo(persona); } @Test @DisplayName(\"actualizar una persona\") public void prueba002() { // creamos la persona Persona persona = new Persona(1, \"Luis\"); // se simula persona encontrada when(mockRepo.findById(1)).thenReturn(Optional.of(persona)); Persona personaUdt = servicio.encontrarPersona(1); // se actualiza el valor. se puede ver que la primera simulaci\u00f3n // tuvo efecto, el mockRepo actu\u00f3 como el repositorio // oficial ya que usamos el servicio para traer // la persona usando el servicio. personaUdt.setNombre(\"Ana\"); // simulaci\u00f3n de actualizaci\u00f3n (es el repo el que simulamos y // save(cuando existe actualiza o crea) when(mockRepo.save(personaUdt)).thenReturn(personaUdt); assertThat(servicio.actualizarPersona(personaUdt).getNombre()).isEqualTo(\"Ana\"); } @Test @DisplayName(\"eliminar persona\") public void prueba003() { // encontrar la perosona para eliminarla ya que esta // debe existir en la base de datos. when(mockRepo.findById(1)) .thenReturn(Optional.of(new Persona(1, \"luis\"))); // con la base de datos simulada, utlizamos el servicio. Persona persona = servicio.encontrarPersona(1); // simulamos la interacci\u00f3n de la base de datos when(mockRepo.myDeleteById(1)).thenReturn(1); // ocupamos el servicio Persona personaEliminada = servicio.eliminarPersona(persona); assertThat(personaEliminada.getId()).isEqualTo(persona.getId()); } }","title":"src/test/java/cl/lherrera/jpaspring/services"},{"location":"modulos/mod_5/uni003/lectura002_004/","text":"Unidad 3.2.4 - Modelo La siguiente aplicaci\u00f3n ser\u00e1 finalmente un mantenedor de personas, con un control de acceso de usuarios. La aplicaci\u00f3n contendr\u00e1 5 Hitos. Hito 4: Aprendiendo a paginar los resultados. 3.2.4.1 Creando resultados paginados En diferentes ocaciones, podremos usar alg\u00fan componente como datatable de javascript para poder crear tablas de resultados, pero vamos a aprender a dise\u00f1arla personalizadamente con Java y Spring \u001d. Archivos modificados basedatos.db pom.xml src/main/java/cl/lherrera/jpaspring/JpaspringApplication.java src/main/java/cl/lherrera/jpaspring/SQLiteDialect.java src/main/java/cl/lherrera/jpaspring/controllers/PersonaController.java src/main/java/cl/lherrera/jpaspring/dtos/PersonaDTO.java src/main/java/cl/lherrera/jpaspring/entities/Persona.java src/main/java/cl/lherrera/jpaspring/repositories/PersonaRepo.java src/main/java/cl/lherrera/jpaspring/services/PersonaService.java src/main/java/cl/lherrera/jpaspring/services/PersonaServiceImpl.java src/main/resources/application.properties src/main/webapp/WEB-INF/pages/personas/personas.jsp pom.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.6.RELEASE</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>cl.lherrera.jpaspring</groupId> <artifactId>jpaspring</artifactId> <version>20.0.0</version> <packaging>war</packaging> <name>jpaspring</name> <description>proyecto JPA SQLITE</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-jpa</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> <scope>provided</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> <!-- SOPORTE ARCHIVOS JSP --> <dependency> <groupId>org.apache.tomcat.embed</groupId> <artifactId>tomcat-embed-jasper</artifactId> <scope>provided</scope> </dependency> <!-- SOPORTE ARCHIVOS JSP # --> <!-- JSTL --> <dependency> <groupId>javax.servlet</groupId> <artifactId>jstl</artifactId> </dependency> <dependency> <groupId>javax.servlet</groupId> <artifactId>javax.servlet-api</artifactId> </dependency> <!-- JSTL # --> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project> src/main/java/cl/lherrera/jpaspring/ JpaspringApplication.java Sin modificaciones, la comentada es para ejecutar operaciones antes que se ejecute la aplicaci\u00f3n. package cl.lherrera.jpaspring; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.context.annotation.Bean; import org.springframework.boot.CommandLineRunner; @SpringBootApplication public class JpaspringApplication { public static void main(String[] args) { SpringApplication.run(JpaspringApplication.class, args); } // @Bean // public CommandLineRunner demo(PersonaServiceImpl servicio) { // return (args) -> { // servicio.obtenerPersonasPaginadas(0, 3); // }; // } } /SQLiteDialect.java Esto ya estaba solucionado, pero prosaicos lo pongo. package cl.lherrera.jpaspring; import java.sql.Types; import org.hibernate.dialect.Dialect; import org.hibernate.dialect.function.StandardSQLFunction; import org.hibernate.dialect.function.SQLFunctionTemplate; import org.hibernate.dialect.function.VarArgsSQLFunction; import org.hibernate.type.StandardBasicTypes; import org.hibernate.Hibernate; public class SQLiteDialect extends Dialect { public SQLiteDialect() { super(); registerColumnType(Types.BIT, \"integer\"); registerColumnType(Types.TINYINT, \"tinyint\"); registerColumnType(Types.SMALLINT, \"smallint\"); registerColumnType(Types.INTEGER, \"integer\"); registerColumnType(Types.BIGINT, \"bigint\"); registerColumnType(Types.FLOAT, \"float\"); registerColumnType(Types.REAL, \"real\"); registerColumnType(Types.DOUBLE, \"double\"); registerColumnType(Types.NUMERIC, \"numeric\"); registerColumnType(Types.DECIMAL, \"decimal\"); registerColumnType(Types.CHAR, \"char\"); registerColumnType(Types.VARCHAR, \"varchar\"); registerColumnType(Types.LONGVARCHAR, \"longvarchar\"); registerColumnType(Types.DATE, \"date\"); registerColumnType(Types.TIME, \"time\"); registerColumnType(Types.TIMESTAMP, \"timestamp\"); registerColumnType(Types.BINARY, \"blob\"); registerColumnType(Types.VARBINARY, \"blob\"); registerColumnType(Types.LONGVARBINARY, \"blob\"); // registerColumnType(Types.NULL, \"null\"); registerColumnType(Types.BLOB, \"blob\"); registerColumnType(Types.CLOB, \"clob\"); registerColumnType(Types.BOOLEAN, \"integer\"); registerFunction(\"concat\", new VarArgsSQLFunction(StandardBasicTypes.STRING, \"\", \"||\", \"\")); registerFunction(\"mod\", new SQLFunctionTemplate(StandardBasicTypes.INTEGER, \"?1 % ?2\")); registerFunction(\"substr\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); registerFunction(\"substring\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); } public boolean supportsIdentityColumns() { return true; } public boolean hasDataTypeInIdentityColumn() { return false; // As specify in NHibernate dialect } public String getIdentityColumnString() { // return \"integer primary key autoincrement\"; return \"integer\"; } public String getIdentitySelectString() { return \"select last_insert_rowid()\"; } public boolean supportsLimit() { return true; } public String getLimitString(String query, boolean hasOffset) { return new StringBuffer(query.length() + 20).append(query).append( hasOffset ? \" limit ? offset ?\" : \" limit ?\").toString(); } public boolean bindLimitParametersInReverseOrder() { return true; } public boolean supportsTemporaryTables() { return true; } public String getCreateTemporaryTableString() { return \"create temporary table if not exists\"; } public boolean dropTemporaryTableAfterUse() { return false; } public boolean supportsCurrentTimestampSelection() { return true; } public boolean isCurrentTimestampSelectStringCallable() { return false; } public String getCurrentTimestampSelectString() { return \"select current_timestamp\"; } public boolean supportsUnionAll() { return true; } public boolean hasAlterTable() { return false; // As specify in NHibernate dialect } public boolean dropConstraints() { return false; } public String getAddColumnString() { return \"add column\"; } public String getForUpdateString() { return \"\"; } public boolean supportsOuterJoinForUpdate() { return false; } public String getDropForeignKeyString() { throw new UnsupportedOperationException( \"No drop foreign key syntax supported by SQLiteDialect\"); } public String getAddForeignKeyConstraintString(String constraintName, String[] foreignKey, String referencedTable, String[] primaryKey, boolean referencesPrimaryKey) { throw new UnsupportedOperationException( \"No add foreign key syntax supported by SQLiteDialect\"); } public String getAddPrimaryKeyConstraintString(String constraintName) { throw new UnsupportedOperationException( \"No add primary key syntax supported by SQLiteDialect\"); } public boolean supportsIfExistsBeforeTableName() { return true; } public boolean supportsCascadeDelete() { return false; } } /controllers /PersonaController.java package cl.lherrera.jpaspring.controllers; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpStatus; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.ResponseStatus; import org.springframework.web.servlet.mvc.support.RedirectAttributes; import cl.lherrera.jpaspring.dtos.PersonaDTO; import cl.lherrera.jpaspring.entities.Persona; import cl.lherrera.jpaspring.services.PersonaService; @Controller @RequestMapping(\"/personas\") public class PersonaController { private static final Logger logger = LoggerFactory.getLogger(PersonaController.class); private static final Integer FILAS_POR_PAGINA = 3; @Autowired PersonaService servicio; @GetMapping(\"/ingresar\") @ResponseStatus(code = HttpStatus.OK) public String inicio( Model modelo, @RequestParam(required = false) Integer pagina) { logger.info(\"Petici\u00f3n: /personas/ingresar\"); // si no viene la p\u00e1gina, se simula la primera, el m\u00e9todo PageRequest.of(pagina // pide que la primera sea cero; pero esto es manejado por el servicio // en el controlador sabemos que la primera p\u00e1gina es la 1, si esto no es // as\u00ed, el servicio lo debe manejar if(pagina == null) pagina = 1; PersonaDTO dtoPersona = servicio.obtenerPersonasPaginadas(pagina, FILAS_POR_PAGINA); modelo.addAttribute(\"dtoPersona\", dtoPersona); // si no hay m\u00e1s de una p\u00e1gina, no es necesario paginar modelo.addAttribute(\"paginar\", dtoPersona.getPaginas().size() > 1); return \"personas/personas\"; } // @ResponseStatus(code = HttpStatus.CREATED) // con esto no funciona el redirect @PostMapping(\"/ingresar\") public String ingresar( @ModelAttribute(\"foo\") Persona persona, @RequestParam String nombre, RedirectAttributes attributes) { logger.info(\"Petici\u00f3n post /ingresar\"); // sin usar el retorno a\u00fan Persona respuesta = servicio.IngresarPersona(persona); if(persona == null) logger.error(\"error en ingreso de persona\"); return \"redirect:ingresar\"; } @GetMapping(\"/actualizar\") public String actualizar( Model modelo, @RequestParam String id) { logger.info(\"Petici\u00f3n-GET: /actualizar\"); Persona persona = servicio.encontrarPersona(Integer.parseInt(id)); modelo.addAttribute(\"persona\", persona); return \"personas/actualizar\"; } // el formulario debe estar completo con los names, para que lo // reconozca como la misma entidad y no una nueva @PostMapping(\"/actualizar\") public String doActualizar(@ModelAttribute(\"foo\") Persona persona) { logger.info(\"Petici\u00f3n-POST: /actualizar\"); servicio.actualizarPersona(persona); return \"redirect:ingresar\"; } @GetMapping(\"/eliminar\") public String eliminar( Model modelo, @RequestParam String id) { logger.info(\"Petici\u00f3n-GET: /eliminar\"); Persona persona = servicio.encontrarPersona(Integer.parseInt(id)); modelo.addAttribute(\"persona\", persona); return \"personas/eliminar\"; } @PostMapping(\"/eliminar\") public String doEliminar( @ModelAttribute(\"foo\") Persona persona, @RequestParam String id) { logger.info(\"Petici\u00f3n-POST: /eliminar\"); Persona respuesta = servicio.eliminarPersona(persona); if(respuesta == null) logger.info(\"Petici\u00f3n-POST: /eliminar\"); return \"redirect:ingresar\"; } } /dtos PersonaDTO.java package cl.lherrera.jpaspring.dtos; import java.util.List; import cl.lherrera.jpaspring.entities.Persona; public class PersonaDTO { private List<Persona> personas; private List<Integer> paginas; private Integer paginaActual; public List<Persona> getPersonas() { return personas; } public void setPersonas(List<Persona> personas) { this.personas = personas; } public List<Integer> getPaginas() { return paginas; } public void setPaginas(List<Integer> paginas) { this.paginas = paginas; } public Integer getPaginaActual() { return paginaActual; } public void setPaginaActual(Integer paginaActual) { this.paginaActual = paginaActual; } @Override public String toString() { return \"PersonaDTO [personas=\" + personas + \", paginas=\" + paginas + \", paginaActual=\" + paginaActual + \"]\"; } } /entities /Persona.java package cl.lherrera.jpaspring.entities; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; @Entity public class Persona { @Id @GeneratedValue(strategy=GenerationType.AUTO) // https://www.objectdb.com/java/jpa/entity/generated private Integer id; private String nombre; public Persona() {} public Persona(Integer id, String nombre) { this.id = id; this.nombre = nombre; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } @Override public String toString() { return \"Persona [id=\" + id + \", nombre=\" + nombre + \"]\"; } } /repositories /PersonaRepo.java package cl.lherrera.jpaspring.repositories; import java.util.List; import org.springframework.data.jpa.repository.JpaRepository; import org.springframework.data.jpa.repository.Modifying; import org.springframework.data.jpa.repository.Query; import org.springframework.data.repository.CrudRepository; import org.springframework.data.repository.PagingAndSortingRepository; import cl.lherrera.jpaspring.entities.Persona; public interface PersonaRepo extends JpaRepository<Persona, Integer>, PagingAndSortingRepository<Persona, Integer> { /** * Se puede parecer mucho a una consulta en la base de datos pero es una * consulta al modelo, la respuesta es un @Entity. por eso la \"tabla\" est\u00e1 en * may\u00fasculas. * * Eso es debido a que no renemos un PersonaRepoImpl que maneje la * personalizaci\u00f3n de esta consulta y como la original delete, retorna void no * es muy buena para hacer test ya que no tenemos contra qu\u00e9 validar si * simulamos la base de datos. * * En el fondo es solamente un deleteById(), pero se expone para su ejemplo * Que podemos aplicar queries a las entidades. * */ @Modifying @Query(\"DELETE FROM Persona WHERE id = ?1\") Integer myDeleteById(Integer id); // no posee un nombre personalizado, cumple con la nomenclatura find // debe ir aunque siga la nomenclatura List<Persona> findAllByNombre(String nombre); } /services /PersonaService.java package cl.lherrera.jpaspring.services; import java.util.List; import cl.lherrera.jpaspring.dtos.PersonaDTO; import cl.lherrera.jpaspring.entities.Persona; public interface PersonaService { PersonaDTO obtenerPersonasPaginadas(Integer pagina, Integer cantidad); List<Persona> obtenerPersonas(); List<Persona> obtenerPersonasPorNombre(String nombre); Persona IngresarPersona(Persona persona); Persona encontrarPersona(Integer id); Persona eliminarPersona(Persona persona); Persona actualizarPersona(Persona persona); } /PersonaServiceImpl.java package cl.lherrera.jpaspring.services; import java.util.ArrayList; import java.util.List; import javax.persistence.criteria.Order; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.data.domain.Page; import org.springframework.data.domain.PageRequest; import org.springframework.data.domain.Pageable; import org.springframework.data.domain.Sort; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional; import cl.lherrera.jpaspring.dtos.PersonaDTO; import cl.lherrera.jpaspring.entities.Persona; import cl.lherrera.jpaspring.repositories.PersonaRepo; @Service public class PersonaServiceImpl implements PersonaService{ private static final Logger logger = LoggerFactory.getLogger(PersonaServiceImpl.class.getName()); @Autowired PersonaRepo repo; @Override @Transactional(readOnly = true) public List<Persona> obtenerPersonas() { return (List<Persona>) repo.findAll(); } @Override @Transactional(readOnly = true) public List<Persona> obtenerPersonasPorNombre(String nombre) { return repo.findAllByNombre(nombre); } @Override @Transactional(readOnly = true) public Persona encontrarPersona(Integer id) { // as\u00ed nos evitamos un null pointer exception return repo.findById(id).orElse(new Persona()); } @Override @Transactional public Persona eliminarPersona(Persona persona) { int numeroQueAunNoSeOcupa = repo.myDeleteById(persona.getId()); return persona; } @Override @Transactional public Persona actualizarPersona(Persona persona) { return repo.save(persona); } @Override @Transactional public Persona IngresarPersona(Persona persona) { return repo.save(persona); } @Override public PersonaDTO obtenerPersonasPaginadas(Integer pagina, Integer cantidad) { logger.info(\"Num Pagina: \" + pagina); PersonaDTO personaDTO = new PersonaDTO(); // comienza en cero, para que con la p\u00e1gina 1 // busque en la p\u00e1gina 0 y lo retorne como p\u00e1gina 1. Pageable paginado = PageRequest.of(pagina - 1, 2, Sort.by(\"id\").ascending()); // consulta a la base Page<Persona> personaPaginas = repo.findAll(paginado); logger.info(personaPaginas.getContent().toString()); // ingreso de personas al DTO personaDTO.setPersonas(personaPaginas.getContent()); // ingresamos el n\u00famero de p\u00e1gina actual // el getNumber nos entrega un cero en caso de ser la primera p\u00e1gina // el argumento pagina, viene desde el front con el click // que se hace y llegar\u00e1 fielmente el verdadero n\u00famero a buscar // el \u00fanico aproblemado con esto es el PageRequest.of(pagina... ya que // \u00e9l busca por el n\u00famero consultado menos uno. personaDTO.setPaginaActual(pagina); // llenamos la lista de n\u00fameros del paginador List<Integer> paginas = new ArrayList<>(); for(int i = 0; i < personaPaginas.getTotalPages(); i ++) paginas.add(i + 1); personaDTO.setPaginas(paginas); logger.info(\"personaDTO: \" + personaDTO.toString()); return personaDTO; } } src/main/resources /application.properties Solucionado pero igual... # Configuraci\u00f3n para la vista. (http://localhost:8080/) no es (http://localhost:8080/jpaspring/) # Eso es para un servlet spring.mvc.view.prefix=/WEB-INF/pages/ spring.mvc.view.suffix=.jsp # Permiso para clear el ddl de las entidades spring.jpa.generate-ddl=true # Ejecuta la configuraci\u00f3n de la clase que mapea los tipos de datos. spring.jpa.database-platform=cl.lherrera.jpaspring.SQLiteDialect # Crea la base si no est\u00e1 y cuando finaliza la ejecuci\u00f3n la borra. spring.jpa.hibernate.ddl-auto=create-drop # Muestra las consultas realizadas por el framework y las imprime en el log spring.jpa.show-sql=true # Le da un form\u00e1to legible por un humano para una mejor depuraci\u00f3n en el log. spring.jpa.properties.hibernate.format_sql=true #Pruebas #logging.level.org.hibernate.SQL=debug #logging.level.org.hibernate.type.descriptor.sql=trace src/main/webapp/WEB-INF/pages/personas /personas.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@taglib uri=\"http://www.springframework.org/tags/form\" prefix=\"form\"%> <%@taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%> <!DOCTYPE html> <html> <jsp:include page=\"../htmlTemplates/headTemplate.jsp\"></jsp:include> <body> <jsp:include page=\"../htmlTemplates/navTemplate.jsp\"></jsp:include> <div class=\"container\"> <div class=\"row\"> <div class=\"col\"> <form:form class=\"form-horizontal\" method=\"post\" action=\"/personas/ingresar\" modelAttribute=\"Persona\"> <div class=\"form-group\"> <label for=\"nombre\">Nombre</label> <input type=\"text\" class=\"form-control\" id=\"nombre\" name=\"nombre\" placeholder=\"Ingrese el nombre\"> </div> <button type=\"submit\" class=\"btn btn-primary mb-2\">Ingresar</button> </form:form> <div class=\"table-responsive\"> <table class=\"table table-hover table-striped table-bordered\"> <tr> <th>Id</th> <th>Nombre</th> <th>Acci\u00f3n</th> </tr> <c:choose> <c:when test=\"${dtoPersona.getPersonas().size() > 0}\"> <c:forEach items=\"${dtoPersona.getPersonas()}\" var=\"persona\"> <tr> <td>${persona.getId()}</td> <td>${persona.getNombre()}</td> <td><a href=\"/personas/actualizar?id=${persona.getId()}\">Actualizar</a> | <a href=\"/personas/eliminar?id=${persona.getId()}\">Elimininar</a> </td> </tr> </c:forEach> </c:when> <c:otherwise> <tr> <td colspan=\"3\">${\"Sin registros...\"}</td> </tr> </c:otherwise> </c:choose> </table> <!-- PAGINACI\u00d6N --> <c:choose> <c:when test=\"${paginar}\"> <nav aria-label=\"Ejemplo de paginaci\u00f3n\"> <ul class=\"pagination\"> <c:choose> <c:when test=\"${dtoPersona.getPersonas().size() > 0}\"> <!-- l\u00f3gica para mostrar el anterior --> <c:choose> <c:when test=\"${dtoPersona.getPaginaActual() > 1}\"> <li class=\"page-item\"><a class=\"page-link\" href=\"/personas/ingresar?pagina=${dtoPersona.getPaginaActual() - 1}\">Anterior</a></li> </c:when> <c:otherwise> <li class=\"page-item disabled\"><a class=\"page-link\" href=\"#\">Anterior</a></li> </c:otherwise> </c:choose> <!-- l\u00f3gica para mostrar el anterior #--> <!-- L\u00f3gica de llenado de n\u00fameros --> <c:forEach items=\"${dtoPersona.getPaginas()}\" var=\"pagina\"> <!-- L\u00f3gica para seleccionar el n\u00famero de p\u00e1gina --> <c:choose> <c:when test=\"${dtoPersona.getPaginaActual() == pagina}\"> <li class=\"page-item active\"><a class=\"page-link\" href=\"/personas/ingresar?pagina=${pagina}\">${pagina}</a></li> </c:when> <c:otherwise> <li class=\"page-item \"><a class=\"page-link\" href=\"/personas/ingresar?pagina=${pagina}\">${pagina}</a></li> </c:otherwise> </c:choose> <!-- L\u00f3gica para seleccionar el n\u00famero de p\u00e1gina #--> </c:forEach> <!-- L\u00f3gica de llenado de n\u00fameros #--> <!-- l\u00f3gica para habilitar el siguiente --> <c:choose> <c:when test=\"${dtoPersona.getPaginas().size() > dtoPersona.getPaginaActual() }\"> <li class=\"page-item\"><a class=\"page-link\" href=\"/personas/ingresar?pagina=${dtoPersona.getPaginaActual() + 1}\">Siguiente</a></li> </c:when> <c:otherwise> <li class=\"page-item disabled\"><a class=\"page-link\" href=\"#\">Siguiente</a></li> </c:otherwise> </c:choose> <!-- l\u00f3gica para habilitar el siguiente ##--> </c:when> </c:choose> </ul> </nav> </c:when> </c:choose> <!-- PAGINACI\u00d6N #--> </div> </div> </div> </div> <jsp:include page=\"../htmlTemplates/footerTemplate.jsp\"></jsp:include> </body> </html>","title":"Lectura002 004"},{"location":"modulos/mod_5/uni003/lectura002_004/#unidad-324-modelo","text":"La siguiente aplicaci\u00f3n ser\u00e1 finalmente un mantenedor de personas, con un control de acceso de usuarios. La aplicaci\u00f3n contendr\u00e1 5 Hitos. Hito 4: Aprendiendo a paginar los resultados.","title":"Unidad 3.2.4 - Modelo"},{"location":"modulos/mod_5/uni003/lectura002_004/#3241-creando-resultados-paginados","text":"En diferentes ocaciones, podremos usar alg\u00fan componente como datatable de javascript para poder crear tablas de resultados, pero vamos a aprender a dise\u00f1arla personalizadamente con Java y Spring \u001d.","title":"3.2.4.1 Creando resultados paginados"},{"location":"modulos/mod_5/uni003/lectura002_004/#archivos-modificados","text":"basedatos.db pom.xml src/main/java/cl/lherrera/jpaspring/JpaspringApplication.java src/main/java/cl/lherrera/jpaspring/SQLiteDialect.java src/main/java/cl/lherrera/jpaspring/controllers/PersonaController.java src/main/java/cl/lherrera/jpaspring/dtos/PersonaDTO.java src/main/java/cl/lherrera/jpaspring/entities/Persona.java src/main/java/cl/lherrera/jpaspring/repositories/PersonaRepo.java src/main/java/cl/lherrera/jpaspring/services/PersonaService.java src/main/java/cl/lherrera/jpaspring/services/PersonaServiceImpl.java src/main/resources/application.properties src/main/webapp/WEB-INF/pages/personas/personas.jsp","title":"Archivos modificados"},{"location":"modulos/mod_5/uni003/lectura002_004/#pomxml","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.6.RELEASE</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>cl.lherrera.jpaspring</groupId> <artifactId>jpaspring</artifactId> <version>20.0.0</version> <packaging>war</packaging> <name>jpaspring</name> <description>proyecto JPA SQLITE</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-jpa</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> <scope>provided</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> <!-- SOPORTE ARCHIVOS JSP --> <dependency> <groupId>org.apache.tomcat.embed</groupId> <artifactId>tomcat-embed-jasper</artifactId> <scope>provided</scope> </dependency> <!-- SOPORTE ARCHIVOS JSP # --> <!-- JSTL --> <dependency> <groupId>javax.servlet</groupId> <artifactId>jstl</artifactId> </dependency> <dependency> <groupId>javax.servlet</groupId> <artifactId>javax.servlet-api</artifactId> </dependency> <!-- JSTL # --> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project>","title":"pom.xml"},{"location":"modulos/mod_5/uni003/lectura002_004/#srcmainjavacllherrerajpaspring","text":"JpaspringApplication.java Sin modificaciones, la comentada es para ejecutar operaciones antes que se ejecute la aplicaci\u00f3n. package cl.lherrera.jpaspring; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.context.annotation.Bean; import org.springframework.boot.CommandLineRunner; @SpringBootApplication public class JpaspringApplication { public static void main(String[] args) { SpringApplication.run(JpaspringApplication.class, args); } // @Bean // public CommandLineRunner demo(PersonaServiceImpl servicio) { // return (args) -> { // servicio.obtenerPersonasPaginadas(0, 3); // }; // } } /SQLiteDialect.java Esto ya estaba solucionado, pero prosaicos lo pongo. package cl.lherrera.jpaspring; import java.sql.Types; import org.hibernate.dialect.Dialect; import org.hibernate.dialect.function.StandardSQLFunction; import org.hibernate.dialect.function.SQLFunctionTemplate; import org.hibernate.dialect.function.VarArgsSQLFunction; import org.hibernate.type.StandardBasicTypes; import org.hibernate.Hibernate; public class SQLiteDialect extends Dialect { public SQLiteDialect() { super(); registerColumnType(Types.BIT, \"integer\"); registerColumnType(Types.TINYINT, \"tinyint\"); registerColumnType(Types.SMALLINT, \"smallint\"); registerColumnType(Types.INTEGER, \"integer\"); registerColumnType(Types.BIGINT, \"bigint\"); registerColumnType(Types.FLOAT, \"float\"); registerColumnType(Types.REAL, \"real\"); registerColumnType(Types.DOUBLE, \"double\"); registerColumnType(Types.NUMERIC, \"numeric\"); registerColumnType(Types.DECIMAL, \"decimal\"); registerColumnType(Types.CHAR, \"char\"); registerColumnType(Types.VARCHAR, \"varchar\"); registerColumnType(Types.LONGVARCHAR, \"longvarchar\"); registerColumnType(Types.DATE, \"date\"); registerColumnType(Types.TIME, \"time\"); registerColumnType(Types.TIMESTAMP, \"timestamp\"); registerColumnType(Types.BINARY, \"blob\"); registerColumnType(Types.VARBINARY, \"blob\"); registerColumnType(Types.LONGVARBINARY, \"blob\"); // registerColumnType(Types.NULL, \"null\"); registerColumnType(Types.BLOB, \"blob\"); registerColumnType(Types.CLOB, \"clob\"); registerColumnType(Types.BOOLEAN, \"integer\"); registerFunction(\"concat\", new VarArgsSQLFunction(StandardBasicTypes.STRING, \"\", \"||\", \"\")); registerFunction(\"mod\", new SQLFunctionTemplate(StandardBasicTypes.INTEGER, \"?1 % ?2\")); registerFunction(\"substr\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); registerFunction(\"substring\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); } public boolean supportsIdentityColumns() { return true; } public boolean hasDataTypeInIdentityColumn() { return false; // As specify in NHibernate dialect } public String getIdentityColumnString() { // return \"integer primary key autoincrement\"; return \"integer\"; } public String getIdentitySelectString() { return \"select last_insert_rowid()\"; } public boolean supportsLimit() { return true; } public String getLimitString(String query, boolean hasOffset) { return new StringBuffer(query.length() + 20).append(query).append( hasOffset ? \" limit ? offset ?\" : \" limit ?\").toString(); } public boolean bindLimitParametersInReverseOrder() { return true; } public boolean supportsTemporaryTables() { return true; } public String getCreateTemporaryTableString() { return \"create temporary table if not exists\"; } public boolean dropTemporaryTableAfterUse() { return false; } public boolean supportsCurrentTimestampSelection() { return true; } public boolean isCurrentTimestampSelectStringCallable() { return false; } public String getCurrentTimestampSelectString() { return \"select current_timestamp\"; } public boolean supportsUnionAll() { return true; } public boolean hasAlterTable() { return false; // As specify in NHibernate dialect } public boolean dropConstraints() { return false; } public String getAddColumnString() { return \"add column\"; } public String getForUpdateString() { return \"\"; } public boolean supportsOuterJoinForUpdate() { return false; } public String getDropForeignKeyString() { throw new UnsupportedOperationException( \"No drop foreign key syntax supported by SQLiteDialect\"); } public String getAddForeignKeyConstraintString(String constraintName, String[] foreignKey, String referencedTable, String[] primaryKey, boolean referencesPrimaryKey) { throw new UnsupportedOperationException( \"No add foreign key syntax supported by SQLiteDialect\"); } public String getAddPrimaryKeyConstraintString(String constraintName) { throw new UnsupportedOperationException( \"No add primary key syntax supported by SQLiteDialect\"); } public boolean supportsIfExistsBeforeTableName() { return true; } public boolean supportsCascadeDelete() { return false; } }","title":"src/main/java/cl/lherrera/jpaspring/"},{"location":"modulos/mod_5/uni003/lectura002_004/#controllers","text":"/PersonaController.java package cl.lherrera.jpaspring.controllers; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpStatus; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.ResponseStatus; import org.springframework.web.servlet.mvc.support.RedirectAttributes; import cl.lherrera.jpaspring.dtos.PersonaDTO; import cl.lherrera.jpaspring.entities.Persona; import cl.lherrera.jpaspring.services.PersonaService; @Controller @RequestMapping(\"/personas\") public class PersonaController { private static final Logger logger = LoggerFactory.getLogger(PersonaController.class); private static final Integer FILAS_POR_PAGINA = 3; @Autowired PersonaService servicio; @GetMapping(\"/ingresar\") @ResponseStatus(code = HttpStatus.OK) public String inicio( Model modelo, @RequestParam(required = false) Integer pagina) { logger.info(\"Petici\u00f3n: /personas/ingresar\"); // si no viene la p\u00e1gina, se simula la primera, el m\u00e9todo PageRequest.of(pagina // pide que la primera sea cero; pero esto es manejado por el servicio // en el controlador sabemos que la primera p\u00e1gina es la 1, si esto no es // as\u00ed, el servicio lo debe manejar if(pagina == null) pagina = 1; PersonaDTO dtoPersona = servicio.obtenerPersonasPaginadas(pagina, FILAS_POR_PAGINA); modelo.addAttribute(\"dtoPersona\", dtoPersona); // si no hay m\u00e1s de una p\u00e1gina, no es necesario paginar modelo.addAttribute(\"paginar\", dtoPersona.getPaginas().size() > 1); return \"personas/personas\"; } // @ResponseStatus(code = HttpStatus.CREATED) // con esto no funciona el redirect @PostMapping(\"/ingresar\") public String ingresar( @ModelAttribute(\"foo\") Persona persona, @RequestParam String nombre, RedirectAttributes attributes) { logger.info(\"Petici\u00f3n post /ingresar\"); // sin usar el retorno a\u00fan Persona respuesta = servicio.IngresarPersona(persona); if(persona == null) logger.error(\"error en ingreso de persona\"); return \"redirect:ingresar\"; } @GetMapping(\"/actualizar\") public String actualizar( Model modelo, @RequestParam String id) { logger.info(\"Petici\u00f3n-GET: /actualizar\"); Persona persona = servicio.encontrarPersona(Integer.parseInt(id)); modelo.addAttribute(\"persona\", persona); return \"personas/actualizar\"; } // el formulario debe estar completo con los names, para que lo // reconozca como la misma entidad y no una nueva @PostMapping(\"/actualizar\") public String doActualizar(@ModelAttribute(\"foo\") Persona persona) { logger.info(\"Petici\u00f3n-POST: /actualizar\"); servicio.actualizarPersona(persona); return \"redirect:ingresar\"; } @GetMapping(\"/eliminar\") public String eliminar( Model modelo, @RequestParam String id) { logger.info(\"Petici\u00f3n-GET: /eliminar\"); Persona persona = servicio.encontrarPersona(Integer.parseInt(id)); modelo.addAttribute(\"persona\", persona); return \"personas/eliminar\"; } @PostMapping(\"/eliminar\") public String doEliminar( @ModelAttribute(\"foo\") Persona persona, @RequestParam String id) { logger.info(\"Petici\u00f3n-POST: /eliminar\"); Persona respuesta = servicio.eliminarPersona(persona); if(respuesta == null) logger.info(\"Petici\u00f3n-POST: /eliminar\"); return \"redirect:ingresar\"; } }","title":"/controllers"},{"location":"modulos/mod_5/uni003/lectura002_004/#dtos","text":"PersonaDTO.java package cl.lherrera.jpaspring.dtos; import java.util.List; import cl.lherrera.jpaspring.entities.Persona; public class PersonaDTO { private List<Persona> personas; private List<Integer> paginas; private Integer paginaActual; public List<Persona> getPersonas() { return personas; } public void setPersonas(List<Persona> personas) { this.personas = personas; } public List<Integer> getPaginas() { return paginas; } public void setPaginas(List<Integer> paginas) { this.paginas = paginas; } public Integer getPaginaActual() { return paginaActual; } public void setPaginaActual(Integer paginaActual) { this.paginaActual = paginaActual; } @Override public String toString() { return \"PersonaDTO [personas=\" + personas + \", paginas=\" + paginas + \", paginaActual=\" + paginaActual + \"]\"; } }","title":"/dtos"},{"location":"modulos/mod_5/uni003/lectura002_004/#entities","text":"/Persona.java package cl.lherrera.jpaspring.entities; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; @Entity public class Persona { @Id @GeneratedValue(strategy=GenerationType.AUTO) // https://www.objectdb.com/java/jpa/entity/generated private Integer id; private String nombre; public Persona() {} public Persona(Integer id, String nombre) { this.id = id; this.nombre = nombre; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } @Override public String toString() { return \"Persona [id=\" + id + \", nombre=\" + nombre + \"]\"; } }","title":"/entities"},{"location":"modulos/mod_5/uni003/lectura002_004/#repositories","text":"/PersonaRepo.java package cl.lherrera.jpaspring.repositories; import java.util.List; import org.springframework.data.jpa.repository.JpaRepository; import org.springframework.data.jpa.repository.Modifying; import org.springframework.data.jpa.repository.Query; import org.springframework.data.repository.CrudRepository; import org.springframework.data.repository.PagingAndSortingRepository; import cl.lherrera.jpaspring.entities.Persona; public interface PersonaRepo extends JpaRepository<Persona, Integer>, PagingAndSortingRepository<Persona, Integer> { /** * Se puede parecer mucho a una consulta en la base de datos pero es una * consulta al modelo, la respuesta es un @Entity. por eso la \"tabla\" est\u00e1 en * may\u00fasculas. * * Eso es debido a que no renemos un PersonaRepoImpl que maneje la * personalizaci\u00f3n de esta consulta y como la original delete, retorna void no * es muy buena para hacer test ya que no tenemos contra qu\u00e9 validar si * simulamos la base de datos. * * En el fondo es solamente un deleteById(), pero se expone para su ejemplo * Que podemos aplicar queries a las entidades. * */ @Modifying @Query(\"DELETE FROM Persona WHERE id = ?1\") Integer myDeleteById(Integer id); // no posee un nombre personalizado, cumple con la nomenclatura find // debe ir aunque siga la nomenclatura List<Persona> findAllByNombre(String nombre); }","title":"/repositories"},{"location":"modulos/mod_5/uni003/lectura002_004/#services","text":"/PersonaService.java package cl.lherrera.jpaspring.services; import java.util.List; import cl.lherrera.jpaspring.dtos.PersonaDTO; import cl.lherrera.jpaspring.entities.Persona; public interface PersonaService { PersonaDTO obtenerPersonasPaginadas(Integer pagina, Integer cantidad); List<Persona> obtenerPersonas(); List<Persona> obtenerPersonasPorNombre(String nombre); Persona IngresarPersona(Persona persona); Persona encontrarPersona(Integer id); Persona eliminarPersona(Persona persona); Persona actualizarPersona(Persona persona); } /PersonaServiceImpl.java package cl.lherrera.jpaspring.services; import java.util.ArrayList; import java.util.List; import javax.persistence.criteria.Order; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.data.domain.Page; import org.springframework.data.domain.PageRequest; import org.springframework.data.domain.Pageable; import org.springframework.data.domain.Sort; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional; import cl.lherrera.jpaspring.dtos.PersonaDTO; import cl.lherrera.jpaspring.entities.Persona; import cl.lherrera.jpaspring.repositories.PersonaRepo; @Service public class PersonaServiceImpl implements PersonaService{ private static final Logger logger = LoggerFactory.getLogger(PersonaServiceImpl.class.getName()); @Autowired PersonaRepo repo; @Override @Transactional(readOnly = true) public List<Persona> obtenerPersonas() { return (List<Persona>) repo.findAll(); } @Override @Transactional(readOnly = true) public List<Persona> obtenerPersonasPorNombre(String nombre) { return repo.findAllByNombre(nombre); } @Override @Transactional(readOnly = true) public Persona encontrarPersona(Integer id) { // as\u00ed nos evitamos un null pointer exception return repo.findById(id).orElse(new Persona()); } @Override @Transactional public Persona eliminarPersona(Persona persona) { int numeroQueAunNoSeOcupa = repo.myDeleteById(persona.getId()); return persona; } @Override @Transactional public Persona actualizarPersona(Persona persona) { return repo.save(persona); } @Override @Transactional public Persona IngresarPersona(Persona persona) { return repo.save(persona); } @Override public PersonaDTO obtenerPersonasPaginadas(Integer pagina, Integer cantidad) { logger.info(\"Num Pagina: \" + pagina); PersonaDTO personaDTO = new PersonaDTO(); // comienza en cero, para que con la p\u00e1gina 1 // busque en la p\u00e1gina 0 y lo retorne como p\u00e1gina 1. Pageable paginado = PageRequest.of(pagina - 1, 2, Sort.by(\"id\").ascending()); // consulta a la base Page<Persona> personaPaginas = repo.findAll(paginado); logger.info(personaPaginas.getContent().toString()); // ingreso de personas al DTO personaDTO.setPersonas(personaPaginas.getContent()); // ingresamos el n\u00famero de p\u00e1gina actual // el getNumber nos entrega un cero en caso de ser la primera p\u00e1gina // el argumento pagina, viene desde el front con el click // que se hace y llegar\u00e1 fielmente el verdadero n\u00famero a buscar // el \u00fanico aproblemado con esto es el PageRequest.of(pagina... ya que // \u00e9l busca por el n\u00famero consultado menos uno. personaDTO.setPaginaActual(pagina); // llenamos la lista de n\u00fameros del paginador List<Integer> paginas = new ArrayList<>(); for(int i = 0; i < personaPaginas.getTotalPages(); i ++) paginas.add(i + 1); personaDTO.setPaginas(paginas); logger.info(\"personaDTO: \" + personaDTO.toString()); return personaDTO; } }","title":"/services"},{"location":"modulos/mod_5/uni003/lectura002_004/#srcmainresources","text":"/application.properties Solucionado pero igual... # Configuraci\u00f3n para la vista. (http://localhost:8080/) no es (http://localhost:8080/jpaspring/) # Eso es para un servlet spring.mvc.view.prefix=/WEB-INF/pages/ spring.mvc.view.suffix=.jsp # Permiso para clear el ddl de las entidades spring.jpa.generate-ddl=true # Ejecuta la configuraci\u00f3n de la clase que mapea los tipos de datos. spring.jpa.database-platform=cl.lherrera.jpaspring.SQLiteDialect # Crea la base si no est\u00e1 y cuando finaliza la ejecuci\u00f3n la borra. spring.jpa.hibernate.ddl-auto=create-drop # Muestra las consultas realizadas por el framework y las imprime en el log spring.jpa.show-sql=true # Le da un form\u00e1to legible por un humano para una mejor depuraci\u00f3n en el log. spring.jpa.properties.hibernate.format_sql=true #Pruebas #logging.level.org.hibernate.SQL=debug #logging.level.org.hibernate.type.descriptor.sql=trace","title":"src/main/resources"},{"location":"modulos/mod_5/uni003/lectura002_004/#srcmainwebappweb-infpagespersonas","text":"/personas.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@taglib uri=\"http://www.springframework.org/tags/form\" prefix=\"form\"%> <%@taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%> <!DOCTYPE html> <html> <jsp:include page=\"../htmlTemplates/headTemplate.jsp\"></jsp:include> <body> <jsp:include page=\"../htmlTemplates/navTemplate.jsp\"></jsp:include> <div class=\"container\"> <div class=\"row\"> <div class=\"col\"> <form:form class=\"form-horizontal\" method=\"post\" action=\"/personas/ingresar\" modelAttribute=\"Persona\"> <div class=\"form-group\"> <label for=\"nombre\">Nombre</label> <input type=\"text\" class=\"form-control\" id=\"nombre\" name=\"nombre\" placeholder=\"Ingrese el nombre\"> </div> <button type=\"submit\" class=\"btn btn-primary mb-2\">Ingresar</button> </form:form> <div class=\"table-responsive\"> <table class=\"table table-hover table-striped table-bordered\"> <tr> <th>Id</th> <th>Nombre</th> <th>Acci\u00f3n</th> </tr> <c:choose> <c:when test=\"${dtoPersona.getPersonas().size() > 0}\"> <c:forEach items=\"${dtoPersona.getPersonas()}\" var=\"persona\"> <tr> <td>${persona.getId()}</td> <td>${persona.getNombre()}</td> <td><a href=\"/personas/actualizar?id=${persona.getId()}\">Actualizar</a> | <a href=\"/personas/eliminar?id=${persona.getId()}\">Elimininar</a> </td> </tr> </c:forEach> </c:when> <c:otherwise> <tr> <td colspan=\"3\">${\"Sin registros...\"}</td> </tr> </c:otherwise> </c:choose> </table> <!-- PAGINACI\u00d6N --> <c:choose> <c:when test=\"${paginar}\"> <nav aria-label=\"Ejemplo de paginaci\u00f3n\"> <ul class=\"pagination\"> <c:choose> <c:when test=\"${dtoPersona.getPersonas().size() > 0}\"> <!-- l\u00f3gica para mostrar el anterior --> <c:choose> <c:when test=\"${dtoPersona.getPaginaActual() > 1}\"> <li class=\"page-item\"><a class=\"page-link\" href=\"/personas/ingresar?pagina=${dtoPersona.getPaginaActual() - 1}\">Anterior</a></li> </c:when> <c:otherwise> <li class=\"page-item disabled\"><a class=\"page-link\" href=\"#\">Anterior</a></li> </c:otherwise> </c:choose> <!-- l\u00f3gica para mostrar el anterior #--> <!-- L\u00f3gica de llenado de n\u00fameros --> <c:forEach items=\"${dtoPersona.getPaginas()}\" var=\"pagina\"> <!-- L\u00f3gica para seleccionar el n\u00famero de p\u00e1gina --> <c:choose> <c:when test=\"${dtoPersona.getPaginaActual() == pagina}\"> <li class=\"page-item active\"><a class=\"page-link\" href=\"/personas/ingresar?pagina=${pagina}\">${pagina}</a></li> </c:when> <c:otherwise> <li class=\"page-item \"><a class=\"page-link\" href=\"/personas/ingresar?pagina=${pagina}\">${pagina}</a></li> </c:otherwise> </c:choose> <!-- L\u00f3gica para seleccionar el n\u00famero de p\u00e1gina #--> </c:forEach> <!-- L\u00f3gica de llenado de n\u00fameros #--> <!-- l\u00f3gica para habilitar el siguiente --> <c:choose> <c:when test=\"${dtoPersona.getPaginas().size() > dtoPersona.getPaginaActual() }\"> <li class=\"page-item\"><a class=\"page-link\" href=\"/personas/ingresar?pagina=${dtoPersona.getPaginaActual() + 1}\">Siguiente</a></li> </c:when> <c:otherwise> <li class=\"page-item disabled\"><a class=\"page-link\" href=\"#\">Siguiente</a></li> </c:otherwise> </c:choose> <!-- l\u00f3gica para habilitar el siguiente ##--> </c:when> </c:choose> </ul> </nav> </c:when> </c:choose> <!-- PAGINACI\u00d6N #--> </div> </div> </div> </div> <jsp:include page=\"../htmlTemplates/footerTemplate.jsp\"></jsp:include> </body> </html>","title":"src/main/webapp/WEB-INF/pages/personas"},{"location":"modulos/mod_5/uni003/lectura002_005/","text":"Unidad 3.2.5 - Modelo La siguiente aplicaci\u00f3n ser\u00e1 finalmente un mantenedor de personas, con un control de acceso de usuarios. La aplicaci\u00f3n contendr\u00e1 5 Hitos. Hito 5: Implementando el control de acceso. 3.2.5.1 Control de acceso Se implementa un login program\u00e1tico , donde podemos ver como Spring trabaja las sesiones. Esto controla el acceso de una forma muy poco segura, pero es mejor que nada. En futuras unidades se mejora la implementaci\u00f3n con Spring Security . Archivos modificados: basedatos.db pom.xml src/main/java/cl/lherrera/jpaspring/JpaspringApplication.java src/main/java/cl/lherrera/jpaspring/SQLiteDialect.java src/main/java/cl/lherrera/jpaspring/auth/LoginController.java src/main/java/cl/lherrera/jpaspring/controllers/AplicationController.java src/main/java/cl/lherrera/jpaspring/controllers/PersonaController.java src/main/java/cl/lherrera/jpaspring/entities/Usuario.java src/main/java/cl/lherrera/jpaspring/repositories/PersonaRepo.java src/main/java/cl/lherrera/jpaspring/repositories/UsuarioRepo.java src/main/java/cl/lherrera/jpaspring/services/AutentificacionServicio.java src/main/java/cl/lherrera/jpaspring/services/AutentificacionServicioImpl.java src/main/java/cl/lherrera/jpaspring/services/PersonaServiceImpl.java src/main/java/cl/lherrera/jpaspring/services/UsuarioService.java src/main/java/cl/lherrera/jpaspring/services/UsuarioServiceImpl.java src/main/resources/application.properties src/main/webapp/WEB-INF/pages/auth/login.jsp src/main/webapp/WEB-INF/pages/htmlTemplates/footerTemplate.jsp src/main/webapp/WEB-INF/pages/htmlTemplates/headTemplate.jsp src/main/webapp/WEB-INF/pages/htmlTemplates/navTemplate.jsp basedatos.db Este archivo cambia por que los datos cambian as\u00ed que no se tomar\u00e1 en cuenta el cambio pom.xml Tenemos finalmente la siguiente lista de dependencias: Soporte de archivos jsp : tomcat-embed-jasper , javax.servlet-api . Soporte a JSTL: jstl . Soporte SQLITE: sqlite-jdbc . Soporte herramientas de desarrollo para eclipse: spring-boot-devtools . Soporte Bootstrap webjars : bootstrap . Soporte JQuery webjars \u001d: jquery . Soporte webjars Ubicaci\u00f3n de recursos: webjars-locator . <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.6.RELEASE</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>cl.lherrera.jpaspring</groupId> <artifactId>jpaspring</artifactId> <version>20.0.0</version> <packaging>war</packaging> <name>jpaspring</name> <description>proyecto JPA SQLITE</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-jpa</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> <scope>provided</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> <!-- SOPORTE ARCHIVOS JSP --> <dependency> <groupId>org.apache.tomcat.embed</groupId> <artifactId>tomcat-embed-jasper</artifactId> <scope>provided</scope> </dependency> <!-- SOPORTE ARCHIVOS JSP # --> <!-- JSTL --> <dependency> <groupId>javax.servlet</groupId> <artifactId>jstl</artifactId> </dependency> <dependency> <groupId>javax.servlet</groupId> <artifactId>javax.servlet-api</artifactId> </dependency> <!-- JSTL # --> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> </dependency> <!-- DevsTools --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <optional>true</optional> </dependency> <!-- DevsTools # --> <!-- webjars --> <dependency> <groupId>org.webjars</groupId> <artifactId>webjars-locator</artifactId> <version>0.30</version> </dependency> <dependency> <groupId>org.webjars</groupId> <artifactId>bootstrap</artifactId> <version>4.3.0</version> </dependency> <dependency> <groupId>org.webjars</groupId> <artifactId>jquery</artifactId> <version>3.1.1</version> </dependency> <!-- webjars --> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project> src/main/java/cl/lherrera/jpaspring JpaspringApplication.java Se agrega un m\u00e9todo para poder ingresar un usuario de prueba. package cl.lherrera.jpaspring; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.CommandLineRunner; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.stereotype.Component; import cl.lherrera.jpaspring.entities.Usuario; import cl.lherrera.jpaspring.services.UsuarioServiceImpl; @SpringBootApplication public class JpaspringApplication { public static void main(String[] args) { SpringApplication.run(JpaspringApplication.class, args); } } /** * Este m\u00e9todo, realiza acciones antes que la aplicaci\u00f3n est\u00e1 en ejecuci\u00f3n as\u00ed, * el usuario est\u00e1 ingresado antes de iniciar sesi\u00f3n. * */ @Component class SeEjecutaAntes implements CommandLineRunner { @Autowired UsuarioServiceImpl servicioUsuario; @Override public void run(String... args) throws Exception { // para probar con este usuario al menos Usuario usuarioPueba = new Usuario(); usuarioPueba.setNombre(\"Luis herrera\"); usuarioPueba.setEmail(\"l.herrera.garnica@gmail.com\"); usuarioPueba.setContrasenia(\"1234\"); servicioUsuario.ingresarUsuario(usuarioPueba); // para probar con este usuario al menos ## } } /SQLiteDialect.java Se repara el final, aunque el que estaba es este mismo que se copia ya que el que estaba antes de este, no permit\u00eda ingresar el usuario al principio de la ejecuci\u00f3n de la aplicaci\u00f3n. Es decir que esta versi\u00f3n probablemente sea la que ya est\u00e1 por que la he puesta esta versi\u00f3n desde el hito 1. package cl.lherrera.jpaspring; import java.sql.Types; import org.hibernate.dialect.Dialect; import org.hibernate.dialect.function.StandardSQLFunction; import org.hibernate.dialect.function.SQLFunctionTemplate; import org.hibernate.dialect.function.VarArgsSQLFunction; import org.hibernate.type.StandardBasicTypes; public class SQLiteDialect extends Dialect { public SQLiteDialect() { super(); registerColumnType(Types.BIT, \"integer\"); registerColumnType(Types.TINYINT, \"tinyint\"); registerColumnType(Types.SMALLINT, \"smallint\"); registerColumnType(Types.INTEGER, \"integer\"); registerColumnType(Types.BIGINT, \"bigint\"); registerColumnType(Types.FLOAT, \"float\"); registerColumnType(Types.REAL, \"real\"); registerColumnType(Types.DOUBLE, \"double\"); registerColumnType(Types.NUMERIC, \"numeric\"); registerColumnType(Types.DECIMAL, \"decimal\"); registerColumnType(Types.CHAR, \"char\"); registerColumnType(Types.VARCHAR, \"varchar\"); registerColumnType(Types.LONGVARCHAR, \"longvarchar\"); registerColumnType(Types.DATE, \"date\"); registerColumnType(Types.TIME, \"time\"); registerColumnType(Types.TIMESTAMP, \"timestamp\"); registerColumnType(Types.BINARY, \"blob\"); registerColumnType(Types.VARBINARY, \"blob\"); registerColumnType(Types.LONGVARBINARY, \"blob\"); // registerColumnType(Types.NULL, \"null\"); registerColumnType(Types.BLOB, \"blob\"); registerColumnType(Types.CLOB, \"clob\"); registerColumnType(Types.BOOLEAN, \"integer\"); registerFunction(\"concat\", new VarArgsSQLFunction(StandardBasicTypes.STRING, \"\", \"||\", \"\")); registerFunction(\"mod\", new SQLFunctionTemplate(StandardBasicTypes.INTEGER, \"?1 % ?2\")); registerFunction(\"substr\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); registerFunction(\"substring\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); } public boolean supportsIdentityColumns() { return true; } public boolean hasDataTypeInIdentityColumn() { return false; // As specify in NHibernate dialect } public String getIdentityColumnString() { // return \"integer primary key autoincrement\"; return \"integer\"; } public String getIdentitySelectString() { return \"select last_insert_rowid()\"; } public boolean supportsLimit() { return true; } public String getLimitString(String query, boolean hasOffset) { return new StringBuffer(query.length() + 20).append(query).append( hasOffset ? \" limit ? offset ?\" : \" limit ?\").toString(); } public boolean bindLimitParametersInReverseOrder() { return true; } public boolean supportsTemporaryTables() { return true; } public String getCreateTemporaryTableString() { return \"create temporary table if not exists\"; } public boolean dropTemporaryTableAfterUse() { return false; } public boolean supportsCurrentTimestampSelection() { return true; } public boolean isCurrentTimestampSelectStringCallable() { return false; } public String getCurrentTimestampSelectString() { return \"select current_timestamp\"; } public boolean supportsUnionAll() { return true; } public boolean hasAlterTable() { return false; // As specify in NHibernate dialect } public boolean dropConstraints() { return false; } public String getAddColumnString() { return \"add column\"; } public String getForUpdateString() { return \"\"; } public boolean supportsOuterJoinForUpdate() { return false; } public String getDropForeignKeyString() { throw new UnsupportedOperationException( \"No drop foreign key syntax supported by SQLiteDialect\"); } public String getAddForeignKeyConstraintString(String constraintName, String[] foreignKey, String referencedTable, String[] primaryKey, boolean referencesPrimaryKey) { throw new UnsupportedOperationException( \"No add foreign key syntax supported by SQLiteDialect\"); } public String getAddPrimaryKeyConstraintString(String constraintName) { throw new UnsupportedOperationException( \"No add primary key syntax supported by SQLiteDialect\"); } public boolean supportsIfExistsBeforeTableName() { return true; } public boolean supportsCascadeDelete() { return false; } } /auth/ /LoginController.java Este controlador, ser\u00e1 el encargado de organizar las solicitudes referentes al control de acceso. package cl.lherrera.jpaspring.auth; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.servlet.mvc.support.RedirectAttributes; import cl.lherrera.jpaspring.entities.Usuario; import cl.lherrera.jpaspring.services.AutentificacionServicio; @Controller @RequestMapping(path = \"/auth\") public class LoginController { private static Logger logger = LoggerFactory.getLogger(LoginController.class.getName()); @Autowired AutentificacionServicio servicio; @GetMapping(path = \"/login\") public String login() { logger.info(\"Llamado a: /auth/login\"); return \"auth/login\"; } @GetMapping(path = \"/doLogout\") public String doLogout() { servicio.sairDelSistema(); return \"auth/login\"; } @PostMapping(path = \"/doLogin\") public String doLogin(@ModelAttribute Usuario usuario, RedirectAttributes ra) { String irHacia = \"redirect:/auth/login\"; if (servicio.estaLogueado()) { irHacia = \"redirect:/\"; } else { Usuario logueado = servicio.ingresarAlSistema(usuario); boolean seRealizaLogueo = logueado != null; if (seRealizaLogueo) { irHacia = \"redirect:/\"; } else { ra.addFlashAttribute(\"loginErrorFlash\", \"Credenciales inv\u00e1lidas\"); } } return irHacia; } } /controllers /AplicationController.java Todas las peticiones referentes a la administraci\u00f3n de la aplicaci\u00f3n, como por ejemplo, ir al index del sitio y no a las funcionalidades que tienen que ver con la manutenci\u00f3n de los datos de la persona o usuarios. package cl.lherrera.jpaspring.controllers; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.GetMapping; import cl.lherrera.jpaspring.entities.Usuario; import cl.lherrera.jpaspring.services.AutentificacionServicio; import cl.lherrera.jpaspring.services.PersonaServiceImpl; import cl.lherrera.jpaspring.services.UsuarioServiceImpl; @Controller public class AplicationController { private static final Logger logger = LoggerFactory.getLogger(AplicationController.class); @Autowired AutentificacionServicio authService; @Autowired PersonaServiceImpl servicioPersona; @Autowired UsuarioServiceImpl servicioUsuario; @GetMapping(\"/\") public String home(Model modelo) { logger.info(\"llamada a : '/'\"); if(!authService.estaLogueado()) { return \"auth/login\"; }else { Usuario authUsuario = authService.obtenerUsuarioLogeado(); modelo.addAttribute(\"authUsuario\", authUsuario); } return \"index\"; } } /PersonaController.java Se encarga de controlar todas las interacciones que tengan que ver con la manutenci\u00f3n de los datos de las personas como por ejemplo el CRUD . package cl.lherrera.jpaspring.controllers; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpStatus; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.ResponseStatus; import org.springframework.web.servlet.mvc.support.RedirectAttributes; import cl.lherrera.jpaspring.dtos.PersonaDTO; import cl.lherrera.jpaspring.entities.Persona; import cl.lherrera.jpaspring.entities.Usuario; import cl.lherrera.jpaspring.services.AutentificacionServicio; import cl.lherrera.jpaspring.services.PersonaService; @Controller @RequestMapping(\"/personas\") public class PersonaController { private static final Logger logger = LoggerFactory.getLogger(PersonaController.class); private static final Integer FILAS_POR_PAGINA = 3; @Autowired PersonaService servicio; @Autowired AutentificacionServicio authService; @GetMapping(\"/ingresar\") @ResponseStatus(code = HttpStatus.OK) public String inicio( Model modelo, @RequestParam(required = false) Integer pagina) { logger.info(\"Petici\u00f3n: /personas/ingresar\"); // controlando el acceso if(!authService.estaLogueado()) { return \"auth/login\"; }else { Usuario authUsuario = authService.obtenerUsuarioLogeado(); modelo.addAttribute(\"authUsuario\", authUsuario); } // controlando el acceso ## // si no viene la p\u00e1gina, se simula la primera, el m\u00e9todo PageRequest.of(pagina // pide que la primera sea cero; pero esto es manejado por el servicio // en el controlador sabemos que la primera p\u00e1gina es la 1, si esto no es // as\u00ed, el servicio lo debe manejar if(pagina == null) pagina = 1; PersonaDTO dtoPersona = servicio.obtenerPersonasPaginadas(pagina, FILAS_POR_PAGINA); modelo.addAttribute(\"dtoPersona\", dtoPersona); // si no hay m\u00e1s de una p\u00e1gina, no es necesario paginar modelo.addAttribute(\"paginar\", dtoPersona.getPaginas().size() > 1); return \"personas/personas\"; } // @ResponseStatus(code = HttpStatus.CREATED) // con esto no funciona el redirect @PostMapping(\"/ingresar\") public String ingresar( @ModelAttribute(\"foo\") Persona persona, @RequestParam String nombre, RedirectAttributes attributes) { logger.info(\"Petici\u00f3n post /ingresar\"); // sin usar el retorno a\u00fan Persona respuesta = servicio.IngresarPersona(persona); if(respuesta == null) logger.error(\"error en ingreso de persona\"); return \"redirect:ingresar\"; } @GetMapping(\"/actualizar\") public String actualizar( Model modelo, @RequestParam String id) { logger.info(\"Petici\u00f3n-GET: /actualizar\"); // controlando el acceso if(!authService.estaLogueado()) { return \"auth/login\"; }else { Usuario authUsuario = authService.obtenerUsuarioLogeado(); modelo.addAttribute(\"authUsuario\", authUsuario); } // controlando el acceso ## Persona persona = servicio.encontrarPersona(Integer.parseInt(id)); modelo.addAttribute(\"persona\", persona); return \"personas/actualizar\"; } // el formulario debe estar completo con los names, para que lo // reconozca como la misma entidad y no una nueva @PostMapping(\"/actualizar\") public String doActualizar(@ModelAttribute(\"foo\") Persona persona) { logger.info(\"Petici\u00f3n-POST: /actualizar\"); servicio.actualizarPersona(persona); return \"redirect:ingresar\"; } @GetMapping(\"/eliminar\") public String eliminar( Model modelo, @RequestParam String id) { // controlando el acceso if(!authService.estaLogueado()) { return \"auth/login\"; }else { Usuario authUsuario = authService.obtenerUsuarioLogeado(); modelo.addAttribute(\"authUsuario\", authUsuario); } // controlando el acceso ## logger.info(\"Petici\u00f3n-GET: /eliminar\"); Persona persona = servicio.encontrarPersona(Integer.parseInt(id)); modelo.addAttribute(\"persona\", persona); return \"personas/eliminar\"; } @PostMapping(\"/eliminar\") public String doEliminar( @ModelAttribute(\"foo\") Persona persona, @RequestParam String id) { logger.info(\"Petici\u00f3n-POST: /eliminar\"); Persona respuesta = servicio.eliminarPersona(persona); if(respuesta == null) logger.info(\"Petici\u00f3n-POST: /eliminar\"); return \"redirect:ingresar\"; } } /entities /Usuario.java Podemos utilizar la potencia del paradigma OO, para poder modelar los datos de la aplicaci\u00f3n, podemos tratar a una persona como un usuario y que sea administrado en la misma tabla. El usuario est\u00e1 orientado a la administraci\u00f3n del sitio como el inicio de sesi\u00f3n. Las personas son una funcionalidad independiente a pesar de diferir en la base de datos, en la aplicaci\u00f3n esto puede variar. package cl.lherrera.jpaspring.entities; import javax.persistence.Entity; import javax.persistence.Table; @Entity @Table(name=\"persona\") public class Usuario extends Persona { private String email; private String contrasenia; public Usuario() {} public Usuario(Integer id, String nombre, String email, String contrasenia) { super(id, nombre); this.email = email; this.contrasenia = contrasenia; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getContrasenia() { return contrasenia; } public void setContrasenia(String contrasenia) { this.contrasenia = contrasenia; } @Override public String toString() { return \"Usuario [email=\" + email + \", contrasenia=\" + contrasenia + \"]\"; } } /repositories /PersonaRepo.java Solo quitamos la dependencia de CrudRepository . package cl.lherrera.jpaspring.repositories; import java.util.List; import org.springframework.context.annotation.Primary; import org.springframework.data.jpa.repository.JpaRepository; import org.springframework.data.jpa.repository.Modifying; import org.springframework.data.jpa.repository.Query; import org.springframework.data.repository.PagingAndSortingRepository; import cl.lherrera.jpaspring.entities.Persona; // la herencia de beans con hilos seguros @Primary public interface PersonaRepo extends JpaRepository<Persona, Integer>, PagingAndSortingRepository<Persona, Integer> { /** * Se puede parecer mucho a una consulta en la base de datos pero es una * consulta al modelo, la respuesta es un @Entity. por eso la \"tabla\" est\u00e1 en * may\u00fasculas. * * Eso es debido a que no renemos un PersonaRepoImpl que maneje la * personalizaci\u00f3n de esta consulta y como la original delete, retorna void no * es muy buena para hacer test ya que no tenemos contra qu\u00e9 validar si * simulamos la base de datos. * * En el fondo es solamente un deleteById(), pero se expone para su ejemplo * Que podemos aplicar queries a las entidades. * */ @Modifying @Query(\"DELETE FROM Persona WHERE id = ?1\") Integer myDeleteById(Integer id); // no posee un nombre personalizado, cumple con la nomenclatura find // debe ir aunque siga la nomenclatura List<Persona> findAllByNombre(String nombre); } /UsuarioRepo.java Vemos la ventaja del uso de la orientaci\u00f3n de objetos, ya que esta interfaz es implementada por spring , entonces ya que los nombres como findAll() son gen\u00e9ricos, no como encontrarPersna , podemos extender la funcionalidad. No hay que olvidar la anotaci\u00f3n @Primary en el bean principal. https://www.baeldung.com/spring-primary .\u001c package cl.lherrera.jpaspring.repositories; import java.util.Optional; import cl.lherrera.jpaspring.entities.Usuario; public interface UsuarioRepo extends PersonaRepo{ Optional<Usuario> findOneByEmailAndContrasenia(String email, String contrasenia); } /services /AutentificacionServicio.java Servicios encargados de la autenticaci\u00f3n. package cl.lherrera.jpaspring.services; import cl.lherrera.jpaspring.entities.Usuario; public interface AutentificacionServicio { Boolean estaLogueado(); Usuario obtenerUsuarioLogeado(); Usuario ingresarAlSistema(Usuario usuario); void sairDelSistema(); } /AutentificacionServicioImpl.java package cl.lherrera.jpaspring.services; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import org.springframework.web.context.annotation.SessionScope; import cl.lherrera.jpaspring.entities.Usuario; import cl.lherrera.jpaspring.repositories.UsuarioRepo; @Service @SessionScope public class AutentificacionServicioImpl implements AutentificacionServicio { @Autowired private UsuarioRepo usuarioRepo; private Usuario usuarioAutent; @Override public Boolean estaLogueado() { return usuarioAutent != null; } @Override public Usuario obtenerUsuarioLogeado() { return usuarioAutent; } @Override public Usuario ingresarAlSistema(Usuario usuario) { usuarioAutent = usuarioRepo.findOneByEmailAndContrasenia( usuario.getEmail(), usuario.getContrasenia()) .orElse(null); return usuarioAutent; } @Override public void sairDelSistema() { usuarioAutent = null; } } /PersonaServiceImpl.java Simple reparaci\u00f3n. package cl.lherrera.jpaspring.services; import java.util.ArrayList; import java.util.List; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.data.domain.Page; import org.springframework.data.domain.PageRequest; import org.springframework.data.domain.Pageable; import org.springframework.data.domain.Sort; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional; import cl.lherrera.jpaspring.dtos.PersonaDTO; import cl.lherrera.jpaspring.entities.Persona; import cl.lherrera.jpaspring.repositories.PersonaRepo; @Service //@Primary // util solamente si tenemos m\u00e1s servicios que implementan PersonaService. public class PersonaServiceImpl implements PersonaService{ private static final Logger logger = LoggerFactory.getLogger(PersonaServiceImpl.class.getName()); @Autowired PersonaRepo repo; @Override @Transactional(readOnly = true) public List<Persona> obtenerPersonas() { return (List<Persona>) repo.findAll(); } @Override @Transactional(readOnly = true) public List<Persona> obtenerPersonasPorNombre(String nombre) { return repo.findAllByNombre(nombre); } @Override @Transactional(readOnly = true) public Persona encontrarPersona(Integer id) { // as\u00ed nos evitamos un null pointer exception return repo.findById(id).orElse(new Persona()); } @Override @Transactional public Persona eliminarPersona(Persona persona) { int filasAfectadas = repo.myDeleteById(persona.getId()); if(!(filasAfectadas > 0)) { logger.info(\"Error al eliminal persona: \" + persona.toString()); } return persona; } @Override @Transactional public Persona actualizarPersona(Persona persona) { return repo.save(persona); } @Override @Transactional public Persona IngresarPersona(Persona persona) { return repo.save(persona); } @Override public PersonaDTO obtenerPersonasPaginadas(Integer pagina, Integer cantidad) { logger.info(\"Num Pagina: \" + pagina); PersonaDTO personaDTO = new PersonaDTO(); // comienza en cero, para que con la p\u00e1gina 1 // busque en la p\u00e1gina 0 y lo retorne como p\u00e1gina 1. Pageable paginado = PageRequest.of(pagina - 1, 2, Sort.by(\"id\").ascending()); // consulta a la base Page<Persona> personaPaginas = repo.findAll(paginado); logger.info(personaPaginas.getContent().toString()); // ingreso de personas al DTO personaDTO.setPersonas(personaPaginas.getContent()); // ingresamos el n\u00famero de p\u00e1gina actual // el getNumber nos entrega un cero en caso de ser la primera p\u00e1gina // el argumento pagina, viene desde el front con el click // que se hace y llegar\u00e1 fielmente el verdadero n\u00famero a buscar // el \u00fanico aproblemado con esto es el PageRequest.of(pagina... ya que // \u00e9l busca por el n\u00famero consultado menos uno. personaDTO.setPaginaActual(pagina); // llenamos la lista de n\u00fameros del paginador List<Integer> paginas = new ArrayList<>(); for(int i = 0; i < personaPaginas.getTotalPages(); i ++) paginas.add(i + 1); personaDTO.setPaginas(paginas); logger.info(\"personaDTO: \" + personaDTO.toString()); return personaDTO; } } /UsuarioService.java El servicio es personalizado, por que son con nomenclaturas espec\u00edficas del propio servicio. package cl.lherrera.jpaspring.services; import cl.lherrera.jpaspring.entities.Usuario; public interface UsuarioService { void ingresarUsuario(Usuario usuario); } /UsuarioServiceImpl.java package cl.lherrera.jpaspring.services; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import cl.lherrera.jpaspring.entities.Usuario; import cl.lherrera.jpaspring.repositories.UsuarioRepo; @Service public class UsuarioServiceImpl implements UsuarioService { @Autowired UsuarioRepo repo; @Override public void ingresarUsuario(Usuario usuario) { repo.save(usuario); } } src/main/resources /application.properties # Configuraci\u00f3n para la vista. (http://localhost:8080/) no es (http://localhost:8080/jpaspring/) # Eso es para un servlet spring.mvc.view.prefix=/WEB-INF/pages/ spring.mvc.view.suffix=.jsp # Permiso para clear el ddl de las entidades spring.jpa.generate-ddl=true # Ejecuta la configuraci\u00f3n de la clase que mapea los tipos de datos. spring.jpa.database-platform=cl.lherrera.jpaspring.SQLiteDialect # Crea la base si no est\u00e1 y cuando finaliza la ejecuci\u00f3n la borra. spring.jpa.hibernate.ddl-auto=create-drop # Muestra las consultas realizadas por el framework y las imprime en el log spring.jpa.show-sql=true # Le da un form\u00e1to legible por un humano para una mejor depuraci\u00f3n en el log. spring.jpa.properties.hibernate.format_sql=true #Pruebas #logging.level.org.hibernate.SQL=debug #logging.level.org.hibernate.type.descriptor.sql=trace src/main/webapp/WEB-INF /pages/auth/login.jsp Podemos ver como interact\u00faan los mensajes del tipo flash y que una vez enviado desde un m\u00e9todo redireccionado \u001d, no hay necesidad de reemitirlo \u001d a la vista, por que ya viene con RedirectAttributes . <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@taglib uri=\"http://www.springframework.org/tags/form\" prefix=\"form\"%> <%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%> <%@ taglib uri=\"http://java.sun.com/jsp/jstl/functions\" prefix=\"fn\"%> <!DOCTYPE html> <html> <jsp:include page=\"../htmlTemplates/headTemplate.jsp\"></jsp:include> <body> <div class=\"container my-5\"> <div class=\"row\"> <div class=\"col\"></div> <div class=\"col\"> <!-- Mensaje flash de control de acceso --> <div class=\"card\" style=\"width: 18rem;\"> <!-- Mensaje flash de control de acceso --> <c:choose> <c:when test=\"${loginErrorFlash != null}\"> <div class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\"> <strong>Error de acceso: </strong> ${loginErrorFlash} <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\"> <span aria-hidden=\"true\">&times;</span> </button> </div> </c:when> </c:choose> <!-- Mensaje flash de control de acceso ##--> <div class=\"card-body\"> <h5 class=\"card-title\">Ingreso al sistema</h5> <!-- Formunarioi de login --> <form:form class=\"form-horizontal\" method=\"post\" action=\"/auth/doLogin\" modelAttribute=\"Usuario\"> <div class=\"form-group\"> <label for=\"email\">Correo electr\u00f3nicos</label> <input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" aria-describedby=\"emailHelp\"> <small id=\"emailHelp\" class=\"form-text text-muted\">No compartimos t\u00fa informaci\u00f3n con nadie.</small> </div> <div class=\"form-group\"> <label for=\"contrasenia\">Contrase\u00f1a</label> <input type=\"password\" class=\"form-control\" id=\"contrasenia\" name=\"contrasenia\"> </div> <div class=\"form-group form-check\"> <input type=\"checkbox\" class=\"form-check-input\" id=\"exampleCheck1\"> <label class=\"form-check-label\" for=\"exampleCheck1\">Recordar usuario</label> </div> <button type=\"submit\" class=\"btn btn-primary\">Ingresar</button> </form:form> <!-- Formunarioi de login #--> </div> </div> </div> <div class=\"col\"></div> </div> </div> <jsp:include page=\"../htmlTemplates/footerTemplate.jsp\"></jsp:include> </body> </html> /pages/htmlTemplates/footerTemplate.jsp C\u00f3digo comentado, ya que para web-jars debe estar cargado jquery antes. Es por esa raz\u00f3n que los c\u00f3digos js no ir\u00e1n en el footer . <footer> <!-- bootstrap 4 --> <!-- <script src=\"https://code.jquery.com/jquery-3.4.1.slim.min.js\" --> <!-- integrity=\"sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n\" --> <!-- crossorigin=\"anonymous\"></script> --> <!-- <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js\" --> <!-- integrity=\"sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo\" --> <!-- crossorigin=\"anonymous\"></script> --> <!-- <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js\" --> <!-- integrity=\"sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6\" --> <!-- crossorigin=\"anonymous\"></script> --> <!-- bootstrap #--> </footer> /pages/htmlTemplates/headTemplate.jsp Integraci\u00f3n de la vista con webjars , se comenta el CDN , se pueden ver estas dependencias en maven dependencies , dentro estar\u00e1n las carpetas con las versiones en caso de no saber cual se ha descargado. <!-- Este template, est\u00e1 dise\u00f1ado para mantener la cabecera del sitio --> <!-- unificada en una sola, ya que la comparten. --> <head> <meta charset=\"UTF-8\"> <title>FPA-EJEMPLO</title> <!-- cdn bootstrap 4 --> <!-- <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\" --> <!-- integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\"> --> <!-- cdn bootstrap 4 #--> <script src=\"/webjars/jquery/3.1.1/jquery.min.js\"></script> <script src=\"/webjars/bootstrap/4.3.0/js/bootstrap.min.js\"></script> <link rel=\"stylesheet\" href=\"/webjars/bootstrap/4.3.0/css/bootstrap.min.css\" /> </head> /pages/htmlTemplates/navTemplate.jsp Se puede ver que podemos disponer de la informaci\u00f3n del usuario conectado, guardado en la sesi\u00f3n, mediante el mecanismo de scope que el servidor trabajar\u00e1 mediante la conexi\u00f3n de cada usuario. Bienvenido - <strong>${authUsuario.getNombre()}</strong> .\u001c <nav class=\"navbar navbar-expand-lg navbar-light bg-light\"> <a class=\"navbar-brand\" href=\"#\">JPA-EJEMPLO</a> <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"> <span class=\"navbar-toggler-icon\"></span> </button> <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\"> <ul class=\"navbar-nav ml-auto\"> <!-- Home --> <li class=\"nav-item active\"><a class=\"nav-link\" href=\"/\">Home <span class=\"sr-only\">(current)</span> </a></li> <!-- Home #--> <li class=\"nav-item dropdown\"> <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"> Mantenedor de personas </a> <div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\"> <a class=\"dropdown-item\" href=\"/personas/ingresar\">Ingresar</a> </div> </li> <!-- Usuario conectado --> <li class=\"nav-item dropdown ml-5\"><a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"> Bienvenido - <strong>${authUsuario.getNombre()}</strong> </a> <div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\"> <a class=\"dropdown-item\" href=\"#\">Personalizar datos - (tarea)</a> <div class=\"dropdown-divider\"></div> <a class=\"dropdown-item\" href=\"/auth/doLogout\">Cerrar sesi\u00f3n</a> </div> </li> </ul> </div> </nav> 3.2.5.2 DDL DE PRUEBA delete from persona; select * from persona; INSERT into persona values (1, \"Uno\"); INSERT into persona values (2, \"Dos\"); INSERT into persona values (3, \"Tres\"); INSERT into persona values (4, \"Cuatro\"); INSERT into persona values (5, \"Cinco\"); INSERT into persona values (6, \"Seis\"); INSERT into persona values (7, \"Siete\"); INSERT into persona values (9, \"Ocho\"); INSERT into persona values (10, \"Nueve\"); INSERT into persona values (11, \"Diez\"); INSERT into persona values (12, \"Once\"); INSERT into persona values (13, \"Doce\"); INSERT into persona values (14, \"Trece\"); INSERT into persona values (15, \"Catorce\"); INSERT into persona values (16, \"Quince\"); INSERT into persona values (17, \"Dieciseis\"); INSERT into persona values (18, \"Diecisiete\"); -- despu\u00e9s de ingresar usuario INSERT into persona values (\"Usuario\", 19, \"Luis herrera\", \"1234\", \"l.herrera.garnica@gmail.com\"); select persona0_.id as id1_0_, persona0_.nombre as nombre2_0_ from persona persona0_ limit 3 offset 9; select persona0_.id as id1_0_, persona0_.nombre as nombre2_0_ from persona persona0_ limit 3 offset 4; select persona0_.id as id1_0_, persona0_.nombre as nombre2_0_ from persona persona0_ order by persona0_.id asc limit ? offset ? 3.2.5.3 TODO Realizar el mantenedor de usuarios. (registro el sistema).","title":"Lectura002 005"},{"location":"modulos/mod_5/uni003/lectura002_005/#unidad-325-modelo","text":"La siguiente aplicaci\u00f3n ser\u00e1 finalmente un mantenedor de personas, con un control de acceso de usuarios. La aplicaci\u00f3n contendr\u00e1 5 Hitos. Hito 5: Implementando el control de acceso.","title":"Unidad 3.2.5 - Modelo"},{"location":"modulos/mod_5/uni003/lectura002_005/#3251-control-de-acceso","text":"Se implementa un login program\u00e1tico , donde podemos ver como Spring trabaja las sesiones. Esto controla el acceso de una forma muy poco segura, pero es mejor que nada. En futuras unidades se mejora la implementaci\u00f3n con Spring Security .","title":"3.2.5.1 Control de acceso"},{"location":"modulos/mod_5/uni003/lectura002_005/#archivos-modificados","text":"basedatos.db pom.xml src/main/java/cl/lherrera/jpaspring/JpaspringApplication.java src/main/java/cl/lherrera/jpaspring/SQLiteDialect.java src/main/java/cl/lherrera/jpaspring/auth/LoginController.java src/main/java/cl/lherrera/jpaspring/controllers/AplicationController.java src/main/java/cl/lherrera/jpaspring/controllers/PersonaController.java src/main/java/cl/lherrera/jpaspring/entities/Usuario.java src/main/java/cl/lherrera/jpaspring/repositories/PersonaRepo.java src/main/java/cl/lherrera/jpaspring/repositories/UsuarioRepo.java src/main/java/cl/lherrera/jpaspring/services/AutentificacionServicio.java src/main/java/cl/lherrera/jpaspring/services/AutentificacionServicioImpl.java src/main/java/cl/lherrera/jpaspring/services/PersonaServiceImpl.java src/main/java/cl/lherrera/jpaspring/services/UsuarioService.java src/main/java/cl/lherrera/jpaspring/services/UsuarioServiceImpl.java src/main/resources/application.properties src/main/webapp/WEB-INF/pages/auth/login.jsp src/main/webapp/WEB-INF/pages/htmlTemplates/footerTemplate.jsp src/main/webapp/WEB-INF/pages/htmlTemplates/headTemplate.jsp src/main/webapp/WEB-INF/pages/htmlTemplates/navTemplate.jsp basedatos.db Este archivo cambia por que los datos cambian as\u00ed que no se tomar\u00e1 en cuenta el cambio","title":"Archivos modificados:"},{"location":"modulos/mod_5/uni003/lectura002_005/#pomxml","text":"Tenemos finalmente la siguiente lista de dependencias: Soporte de archivos jsp : tomcat-embed-jasper , javax.servlet-api . Soporte a JSTL: jstl . Soporte SQLITE: sqlite-jdbc . Soporte herramientas de desarrollo para eclipse: spring-boot-devtools . Soporte Bootstrap webjars : bootstrap . Soporte JQuery webjars \u001d: jquery . Soporte webjars Ubicaci\u00f3n de recursos: webjars-locator . <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.6.RELEASE</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>cl.lherrera.jpaspring</groupId> <artifactId>jpaspring</artifactId> <version>20.0.0</version> <packaging>war</packaging> <name>jpaspring</name> <description>proyecto JPA SQLITE</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-jpa</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> <scope>provided</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> <!-- SOPORTE ARCHIVOS JSP --> <dependency> <groupId>org.apache.tomcat.embed</groupId> <artifactId>tomcat-embed-jasper</artifactId> <scope>provided</scope> </dependency> <!-- SOPORTE ARCHIVOS JSP # --> <!-- JSTL --> <dependency> <groupId>javax.servlet</groupId> <artifactId>jstl</artifactId> </dependency> <dependency> <groupId>javax.servlet</groupId> <artifactId>javax.servlet-api</artifactId> </dependency> <!-- JSTL # --> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> </dependency> <!-- DevsTools --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <optional>true</optional> </dependency> <!-- DevsTools # --> <!-- webjars --> <dependency> <groupId>org.webjars</groupId> <artifactId>webjars-locator</artifactId> <version>0.30</version> </dependency> <dependency> <groupId>org.webjars</groupId> <artifactId>bootstrap</artifactId> <version>4.3.0</version> </dependency> <dependency> <groupId>org.webjars</groupId> <artifactId>jquery</artifactId> <version>3.1.1</version> </dependency> <!-- webjars --> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project>","title":"pom.xml"},{"location":"modulos/mod_5/uni003/lectura002_005/#srcmainjavacllherrerajpaspring","text":"JpaspringApplication.java Se agrega un m\u00e9todo para poder ingresar un usuario de prueba. package cl.lherrera.jpaspring; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.CommandLineRunner; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.stereotype.Component; import cl.lherrera.jpaspring.entities.Usuario; import cl.lherrera.jpaspring.services.UsuarioServiceImpl; @SpringBootApplication public class JpaspringApplication { public static void main(String[] args) { SpringApplication.run(JpaspringApplication.class, args); } } /** * Este m\u00e9todo, realiza acciones antes que la aplicaci\u00f3n est\u00e1 en ejecuci\u00f3n as\u00ed, * el usuario est\u00e1 ingresado antes de iniciar sesi\u00f3n. * */ @Component class SeEjecutaAntes implements CommandLineRunner { @Autowired UsuarioServiceImpl servicioUsuario; @Override public void run(String... args) throws Exception { // para probar con este usuario al menos Usuario usuarioPueba = new Usuario(); usuarioPueba.setNombre(\"Luis herrera\"); usuarioPueba.setEmail(\"l.herrera.garnica@gmail.com\"); usuarioPueba.setContrasenia(\"1234\"); servicioUsuario.ingresarUsuario(usuarioPueba); // para probar con este usuario al menos ## } } /SQLiteDialect.java Se repara el final, aunque el que estaba es este mismo que se copia ya que el que estaba antes de este, no permit\u00eda ingresar el usuario al principio de la ejecuci\u00f3n de la aplicaci\u00f3n. Es decir que esta versi\u00f3n probablemente sea la que ya est\u00e1 por que la he puesta esta versi\u00f3n desde el hito 1. package cl.lherrera.jpaspring; import java.sql.Types; import org.hibernate.dialect.Dialect; import org.hibernate.dialect.function.StandardSQLFunction; import org.hibernate.dialect.function.SQLFunctionTemplate; import org.hibernate.dialect.function.VarArgsSQLFunction; import org.hibernate.type.StandardBasicTypes; public class SQLiteDialect extends Dialect { public SQLiteDialect() { super(); registerColumnType(Types.BIT, \"integer\"); registerColumnType(Types.TINYINT, \"tinyint\"); registerColumnType(Types.SMALLINT, \"smallint\"); registerColumnType(Types.INTEGER, \"integer\"); registerColumnType(Types.BIGINT, \"bigint\"); registerColumnType(Types.FLOAT, \"float\"); registerColumnType(Types.REAL, \"real\"); registerColumnType(Types.DOUBLE, \"double\"); registerColumnType(Types.NUMERIC, \"numeric\"); registerColumnType(Types.DECIMAL, \"decimal\"); registerColumnType(Types.CHAR, \"char\"); registerColumnType(Types.VARCHAR, \"varchar\"); registerColumnType(Types.LONGVARCHAR, \"longvarchar\"); registerColumnType(Types.DATE, \"date\"); registerColumnType(Types.TIME, \"time\"); registerColumnType(Types.TIMESTAMP, \"timestamp\"); registerColumnType(Types.BINARY, \"blob\"); registerColumnType(Types.VARBINARY, \"blob\"); registerColumnType(Types.LONGVARBINARY, \"blob\"); // registerColumnType(Types.NULL, \"null\"); registerColumnType(Types.BLOB, \"blob\"); registerColumnType(Types.CLOB, \"clob\"); registerColumnType(Types.BOOLEAN, \"integer\"); registerFunction(\"concat\", new VarArgsSQLFunction(StandardBasicTypes.STRING, \"\", \"||\", \"\")); registerFunction(\"mod\", new SQLFunctionTemplate(StandardBasicTypes.INTEGER, \"?1 % ?2\")); registerFunction(\"substr\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); registerFunction(\"substring\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); } public boolean supportsIdentityColumns() { return true; } public boolean hasDataTypeInIdentityColumn() { return false; // As specify in NHibernate dialect } public String getIdentityColumnString() { // return \"integer primary key autoincrement\"; return \"integer\"; } public String getIdentitySelectString() { return \"select last_insert_rowid()\"; } public boolean supportsLimit() { return true; } public String getLimitString(String query, boolean hasOffset) { return new StringBuffer(query.length() + 20).append(query).append( hasOffset ? \" limit ? offset ?\" : \" limit ?\").toString(); } public boolean bindLimitParametersInReverseOrder() { return true; } public boolean supportsTemporaryTables() { return true; } public String getCreateTemporaryTableString() { return \"create temporary table if not exists\"; } public boolean dropTemporaryTableAfterUse() { return false; } public boolean supportsCurrentTimestampSelection() { return true; } public boolean isCurrentTimestampSelectStringCallable() { return false; } public String getCurrentTimestampSelectString() { return \"select current_timestamp\"; } public boolean supportsUnionAll() { return true; } public boolean hasAlterTable() { return false; // As specify in NHibernate dialect } public boolean dropConstraints() { return false; } public String getAddColumnString() { return \"add column\"; } public String getForUpdateString() { return \"\"; } public boolean supportsOuterJoinForUpdate() { return false; } public String getDropForeignKeyString() { throw new UnsupportedOperationException( \"No drop foreign key syntax supported by SQLiteDialect\"); } public String getAddForeignKeyConstraintString(String constraintName, String[] foreignKey, String referencedTable, String[] primaryKey, boolean referencesPrimaryKey) { throw new UnsupportedOperationException( \"No add foreign key syntax supported by SQLiteDialect\"); } public String getAddPrimaryKeyConstraintString(String constraintName) { throw new UnsupportedOperationException( \"No add primary key syntax supported by SQLiteDialect\"); } public boolean supportsIfExistsBeforeTableName() { return true; } public boolean supportsCascadeDelete() { return false; } }","title":"src/main/java/cl/lherrera/jpaspring"},{"location":"modulos/mod_5/uni003/lectura002_005/#auth","text":"/LoginController.java Este controlador, ser\u00e1 el encargado de organizar las solicitudes referentes al control de acceso. package cl.lherrera.jpaspring.auth; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.servlet.mvc.support.RedirectAttributes; import cl.lherrera.jpaspring.entities.Usuario; import cl.lherrera.jpaspring.services.AutentificacionServicio; @Controller @RequestMapping(path = \"/auth\") public class LoginController { private static Logger logger = LoggerFactory.getLogger(LoginController.class.getName()); @Autowired AutentificacionServicio servicio; @GetMapping(path = \"/login\") public String login() { logger.info(\"Llamado a: /auth/login\"); return \"auth/login\"; } @GetMapping(path = \"/doLogout\") public String doLogout() { servicio.sairDelSistema(); return \"auth/login\"; } @PostMapping(path = \"/doLogin\") public String doLogin(@ModelAttribute Usuario usuario, RedirectAttributes ra) { String irHacia = \"redirect:/auth/login\"; if (servicio.estaLogueado()) { irHacia = \"redirect:/\"; } else { Usuario logueado = servicio.ingresarAlSistema(usuario); boolean seRealizaLogueo = logueado != null; if (seRealizaLogueo) { irHacia = \"redirect:/\"; } else { ra.addFlashAttribute(\"loginErrorFlash\", \"Credenciales inv\u00e1lidas\"); } } return irHacia; } }","title":"/auth/"},{"location":"modulos/mod_5/uni003/lectura002_005/#controllers","text":"/AplicationController.java Todas las peticiones referentes a la administraci\u00f3n de la aplicaci\u00f3n, como por ejemplo, ir al index del sitio y no a las funcionalidades que tienen que ver con la manutenci\u00f3n de los datos de la persona o usuarios. package cl.lherrera.jpaspring.controllers; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.GetMapping; import cl.lherrera.jpaspring.entities.Usuario; import cl.lherrera.jpaspring.services.AutentificacionServicio; import cl.lherrera.jpaspring.services.PersonaServiceImpl; import cl.lherrera.jpaspring.services.UsuarioServiceImpl; @Controller public class AplicationController { private static final Logger logger = LoggerFactory.getLogger(AplicationController.class); @Autowired AutentificacionServicio authService; @Autowired PersonaServiceImpl servicioPersona; @Autowired UsuarioServiceImpl servicioUsuario; @GetMapping(\"/\") public String home(Model modelo) { logger.info(\"llamada a : '/'\"); if(!authService.estaLogueado()) { return \"auth/login\"; }else { Usuario authUsuario = authService.obtenerUsuarioLogeado(); modelo.addAttribute(\"authUsuario\", authUsuario); } return \"index\"; } } /PersonaController.java Se encarga de controlar todas las interacciones que tengan que ver con la manutenci\u00f3n de los datos de las personas como por ejemplo el CRUD . package cl.lherrera.jpaspring.controllers; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpStatus; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.ResponseStatus; import org.springframework.web.servlet.mvc.support.RedirectAttributes; import cl.lherrera.jpaspring.dtos.PersonaDTO; import cl.lherrera.jpaspring.entities.Persona; import cl.lherrera.jpaspring.entities.Usuario; import cl.lherrera.jpaspring.services.AutentificacionServicio; import cl.lherrera.jpaspring.services.PersonaService; @Controller @RequestMapping(\"/personas\") public class PersonaController { private static final Logger logger = LoggerFactory.getLogger(PersonaController.class); private static final Integer FILAS_POR_PAGINA = 3; @Autowired PersonaService servicio; @Autowired AutentificacionServicio authService; @GetMapping(\"/ingresar\") @ResponseStatus(code = HttpStatus.OK) public String inicio( Model modelo, @RequestParam(required = false) Integer pagina) { logger.info(\"Petici\u00f3n: /personas/ingresar\"); // controlando el acceso if(!authService.estaLogueado()) { return \"auth/login\"; }else { Usuario authUsuario = authService.obtenerUsuarioLogeado(); modelo.addAttribute(\"authUsuario\", authUsuario); } // controlando el acceso ## // si no viene la p\u00e1gina, se simula la primera, el m\u00e9todo PageRequest.of(pagina // pide que la primera sea cero; pero esto es manejado por el servicio // en el controlador sabemos que la primera p\u00e1gina es la 1, si esto no es // as\u00ed, el servicio lo debe manejar if(pagina == null) pagina = 1; PersonaDTO dtoPersona = servicio.obtenerPersonasPaginadas(pagina, FILAS_POR_PAGINA); modelo.addAttribute(\"dtoPersona\", dtoPersona); // si no hay m\u00e1s de una p\u00e1gina, no es necesario paginar modelo.addAttribute(\"paginar\", dtoPersona.getPaginas().size() > 1); return \"personas/personas\"; } // @ResponseStatus(code = HttpStatus.CREATED) // con esto no funciona el redirect @PostMapping(\"/ingresar\") public String ingresar( @ModelAttribute(\"foo\") Persona persona, @RequestParam String nombre, RedirectAttributes attributes) { logger.info(\"Petici\u00f3n post /ingresar\"); // sin usar el retorno a\u00fan Persona respuesta = servicio.IngresarPersona(persona); if(respuesta == null) logger.error(\"error en ingreso de persona\"); return \"redirect:ingresar\"; } @GetMapping(\"/actualizar\") public String actualizar( Model modelo, @RequestParam String id) { logger.info(\"Petici\u00f3n-GET: /actualizar\"); // controlando el acceso if(!authService.estaLogueado()) { return \"auth/login\"; }else { Usuario authUsuario = authService.obtenerUsuarioLogeado(); modelo.addAttribute(\"authUsuario\", authUsuario); } // controlando el acceso ## Persona persona = servicio.encontrarPersona(Integer.parseInt(id)); modelo.addAttribute(\"persona\", persona); return \"personas/actualizar\"; } // el formulario debe estar completo con los names, para que lo // reconozca como la misma entidad y no una nueva @PostMapping(\"/actualizar\") public String doActualizar(@ModelAttribute(\"foo\") Persona persona) { logger.info(\"Petici\u00f3n-POST: /actualizar\"); servicio.actualizarPersona(persona); return \"redirect:ingresar\"; } @GetMapping(\"/eliminar\") public String eliminar( Model modelo, @RequestParam String id) { // controlando el acceso if(!authService.estaLogueado()) { return \"auth/login\"; }else { Usuario authUsuario = authService.obtenerUsuarioLogeado(); modelo.addAttribute(\"authUsuario\", authUsuario); } // controlando el acceso ## logger.info(\"Petici\u00f3n-GET: /eliminar\"); Persona persona = servicio.encontrarPersona(Integer.parseInt(id)); modelo.addAttribute(\"persona\", persona); return \"personas/eliminar\"; } @PostMapping(\"/eliminar\") public String doEliminar( @ModelAttribute(\"foo\") Persona persona, @RequestParam String id) { logger.info(\"Petici\u00f3n-POST: /eliminar\"); Persona respuesta = servicio.eliminarPersona(persona); if(respuesta == null) logger.info(\"Petici\u00f3n-POST: /eliminar\"); return \"redirect:ingresar\"; } }","title":"/controllers"},{"location":"modulos/mod_5/uni003/lectura002_005/#entities","text":"/Usuario.java Podemos utilizar la potencia del paradigma OO, para poder modelar los datos de la aplicaci\u00f3n, podemos tratar a una persona como un usuario y que sea administrado en la misma tabla. El usuario est\u00e1 orientado a la administraci\u00f3n del sitio como el inicio de sesi\u00f3n. Las personas son una funcionalidad independiente a pesar de diferir en la base de datos, en la aplicaci\u00f3n esto puede variar. package cl.lherrera.jpaspring.entities; import javax.persistence.Entity; import javax.persistence.Table; @Entity @Table(name=\"persona\") public class Usuario extends Persona { private String email; private String contrasenia; public Usuario() {} public Usuario(Integer id, String nombre, String email, String contrasenia) { super(id, nombre); this.email = email; this.contrasenia = contrasenia; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getContrasenia() { return contrasenia; } public void setContrasenia(String contrasenia) { this.contrasenia = contrasenia; } @Override public String toString() { return \"Usuario [email=\" + email + \", contrasenia=\" + contrasenia + \"]\"; } }","title":"/entities"},{"location":"modulos/mod_5/uni003/lectura002_005/#repositories","text":"/PersonaRepo.java Solo quitamos la dependencia de CrudRepository . package cl.lherrera.jpaspring.repositories; import java.util.List; import org.springframework.context.annotation.Primary; import org.springframework.data.jpa.repository.JpaRepository; import org.springframework.data.jpa.repository.Modifying; import org.springframework.data.jpa.repository.Query; import org.springframework.data.repository.PagingAndSortingRepository; import cl.lherrera.jpaspring.entities.Persona; // la herencia de beans con hilos seguros @Primary public interface PersonaRepo extends JpaRepository<Persona, Integer>, PagingAndSortingRepository<Persona, Integer> { /** * Se puede parecer mucho a una consulta en la base de datos pero es una * consulta al modelo, la respuesta es un @Entity. por eso la \"tabla\" est\u00e1 en * may\u00fasculas. * * Eso es debido a que no renemos un PersonaRepoImpl que maneje la * personalizaci\u00f3n de esta consulta y como la original delete, retorna void no * es muy buena para hacer test ya que no tenemos contra qu\u00e9 validar si * simulamos la base de datos. * * En el fondo es solamente un deleteById(), pero se expone para su ejemplo * Que podemos aplicar queries a las entidades. * */ @Modifying @Query(\"DELETE FROM Persona WHERE id = ?1\") Integer myDeleteById(Integer id); // no posee un nombre personalizado, cumple con la nomenclatura find // debe ir aunque siga la nomenclatura List<Persona> findAllByNombre(String nombre); } /UsuarioRepo.java Vemos la ventaja del uso de la orientaci\u00f3n de objetos, ya que esta interfaz es implementada por spring , entonces ya que los nombres como findAll() son gen\u00e9ricos, no como encontrarPersna , podemos extender la funcionalidad. No hay que olvidar la anotaci\u00f3n @Primary en el bean principal. https://www.baeldung.com/spring-primary .\u001c package cl.lherrera.jpaspring.repositories; import java.util.Optional; import cl.lherrera.jpaspring.entities.Usuario; public interface UsuarioRepo extends PersonaRepo{ Optional<Usuario> findOneByEmailAndContrasenia(String email, String contrasenia); }","title":"/repositories"},{"location":"modulos/mod_5/uni003/lectura002_005/#services","text":"/AutentificacionServicio.java Servicios encargados de la autenticaci\u00f3n. package cl.lherrera.jpaspring.services; import cl.lherrera.jpaspring.entities.Usuario; public interface AutentificacionServicio { Boolean estaLogueado(); Usuario obtenerUsuarioLogeado(); Usuario ingresarAlSistema(Usuario usuario); void sairDelSistema(); } /AutentificacionServicioImpl.java package cl.lherrera.jpaspring.services; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import org.springframework.web.context.annotation.SessionScope; import cl.lherrera.jpaspring.entities.Usuario; import cl.lherrera.jpaspring.repositories.UsuarioRepo; @Service @SessionScope public class AutentificacionServicioImpl implements AutentificacionServicio { @Autowired private UsuarioRepo usuarioRepo; private Usuario usuarioAutent; @Override public Boolean estaLogueado() { return usuarioAutent != null; } @Override public Usuario obtenerUsuarioLogeado() { return usuarioAutent; } @Override public Usuario ingresarAlSistema(Usuario usuario) { usuarioAutent = usuarioRepo.findOneByEmailAndContrasenia( usuario.getEmail(), usuario.getContrasenia()) .orElse(null); return usuarioAutent; } @Override public void sairDelSistema() { usuarioAutent = null; } } /PersonaServiceImpl.java Simple reparaci\u00f3n. package cl.lherrera.jpaspring.services; import java.util.ArrayList; import java.util.List; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.data.domain.Page; import org.springframework.data.domain.PageRequest; import org.springframework.data.domain.Pageable; import org.springframework.data.domain.Sort; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional; import cl.lherrera.jpaspring.dtos.PersonaDTO; import cl.lherrera.jpaspring.entities.Persona; import cl.lherrera.jpaspring.repositories.PersonaRepo; @Service //@Primary // util solamente si tenemos m\u00e1s servicios que implementan PersonaService. public class PersonaServiceImpl implements PersonaService{ private static final Logger logger = LoggerFactory.getLogger(PersonaServiceImpl.class.getName()); @Autowired PersonaRepo repo; @Override @Transactional(readOnly = true) public List<Persona> obtenerPersonas() { return (List<Persona>) repo.findAll(); } @Override @Transactional(readOnly = true) public List<Persona> obtenerPersonasPorNombre(String nombre) { return repo.findAllByNombre(nombre); } @Override @Transactional(readOnly = true) public Persona encontrarPersona(Integer id) { // as\u00ed nos evitamos un null pointer exception return repo.findById(id).orElse(new Persona()); } @Override @Transactional public Persona eliminarPersona(Persona persona) { int filasAfectadas = repo.myDeleteById(persona.getId()); if(!(filasAfectadas > 0)) { logger.info(\"Error al eliminal persona: \" + persona.toString()); } return persona; } @Override @Transactional public Persona actualizarPersona(Persona persona) { return repo.save(persona); } @Override @Transactional public Persona IngresarPersona(Persona persona) { return repo.save(persona); } @Override public PersonaDTO obtenerPersonasPaginadas(Integer pagina, Integer cantidad) { logger.info(\"Num Pagina: \" + pagina); PersonaDTO personaDTO = new PersonaDTO(); // comienza en cero, para que con la p\u00e1gina 1 // busque en la p\u00e1gina 0 y lo retorne como p\u00e1gina 1. Pageable paginado = PageRequest.of(pagina - 1, 2, Sort.by(\"id\").ascending()); // consulta a la base Page<Persona> personaPaginas = repo.findAll(paginado); logger.info(personaPaginas.getContent().toString()); // ingreso de personas al DTO personaDTO.setPersonas(personaPaginas.getContent()); // ingresamos el n\u00famero de p\u00e1gina actual // el getNumber nos entrega un cero en caso de ser la primera p\u00e1gina // el argumento pagina, viene desde el front con el click // que se hace y llegar\u00e1 fielmente el verdadero n\u00famero a buscar // el \u00fanico aproblemado con esto es el PageRequest.of(pagina... ya que // \u00e9l busca por el n\u00famero consultado menos uno. personaDTO.setPaginaActual(pagina); // llenamos la lista de n\u00fameros del paginador List<Integer> paginas = new ArrayList<>(); for(int i = 0; i < personaPaginas.getTotalPages(); i ++) paginas.add(i + 1); personaDTO.setPaginas(paginas); logger.info(\"personaDTO: \" + personaDTO.toString()); return personaDTO; } } /UsuarioService.java El servicio es personalizado, por que son con nomenclaturas espec\u00edficas del propio servicio. package cl.lherrera.jpaspring.services; import cl.lherrera.jpaspring.entities.Usuario; public interface UsuarioService { void ingresarUsuario(Usuario usuario); } /UsuarioServiceImpl.java package cl.lherrera.jpaspring.services; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import cl.lherrera.jpaspring.entities.Usuario; import cl.lherrera.jpaspring.repositories.UsuarioRepo; @Service public class UsuarioServiceImpl implements UsuarioService { @Autowired UsuarioRepo repo; @Override public void ingresarUsuario(Usuario usuario) { repo.save(usuario); } }","title":"/services"},{"location":"modulos/mod_5/uni003/lectura002_005/#srcmainresources","text":"/application.properties # Configuraci\u00f3n para la vista. (http://localhost:8080/) no es (http://localhost:8080/jpaspring/) # Eso es para un servlet spring.mvc.view.prefix=/WEB-INF/pages/ spring.mvc.view.suffix=.jsp # Permiso para clear el ddl de las entidades spring.jpa.generate-ddl=true # Ejecuta la configuraci\u00f3n de la clase que mapea los tipos de datos. spring.jpa.database-platform=cl.lherrera.jpaspring.SQLiteDialect # Crea la base si no est\u00e1 y cuando finaliza la ejecuci\u00f3n la borra. spring.jpa.hibernate.ddl-auto=create-drop # Muestra las consultas realizadas por el framework y las imprime en el log spring.jpa.show-sql=true # Le da un form\u00e1to legible por un humano para una mejor depuraci\u00f3n en el log. spring.jpa.properties.hibernate.format_sql=true #Pruebas #logging.level.org.hibernate.SQL=debug #logging.level.org.hibernate.type.descriptor.sql=trace","title":"src/main/resources"},{"location":"modulos/mod_5/uni003/lectura002_005/#srcmainwebappweb-inf","text":"/pages/auth/login.jsp Podemos ver como interact\u00faan los mensajes del tipo flash y que una vez enviado desde un m\u00e9todo redireccionado \u001d, no hay necesidad de reemitirlo \u001d a la vista, por que ya viene con RedirectAttributes . <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@taglib uri=\"http://www.springframework.org/tags/form\" prefix=\"form\"%> <%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%> <%@ taglib uri=\"http://java.sun.com/jsp/jstl/functions\" prefix=\"fn\"%> <!DOCTYPE html> <html> <jsp:include page=\"../htmlTemplates/headTemplate.jsp\"></jsp:include> <body> <div class=\"container my-5\"> <div class=\"row\"> <div class=\"col\"></div> <div class=\"col\"> <!-- Mensaje flash de control de acceso --> <div class=\"card\" style=\"width: 18rem;\"> <!-- Mensaje flash de control de acceso --> <c:choose> <c:when test=\"${loginErrorFlash != null}\"> <div class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\"> <strong>Error de acceso: </strong> ${loginErrorFlash} <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\"> <span aria-hidden=\"true\">&times;</span> </button> </div> </c:when> </c:choose> <!-- Mensaje flash de control de acceso ##--> <div class=\"card-body\"> <h5 class=\"card-title\">Ingreso al sistema</h5> <!-- Formunarioi de login --> <form:form class=\"form-horizontal\" method=\"post\" action=\"/auth/doLogin\" modelAttribute=\"Usuario\"> <div class=\"form-group\"> <label for=\"email\">Correo electr\u00f3nicos</label> <input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" aria-describedby=\"emailHelp\"> <small id=\"emailHelp\" class=\"form-text text-muted\">No compartimos t\u00fa informaci\u00f3n con nadie.</small> </div> <div class=\"form-group\"> <label for=\"contrasenia\">Contrase\u00f1a</label> <input type=\"password\" class=\"form-control\" id=\"contrasenia\" name=\"contrasenia\"> </div> <div class=\"form-group form-check\"> <input type=\"checkbox\" class=\"form-check-input\" id=\"exampleCheck1\"> <label class=\"form-check-label\" for=\"exampleCheck1\">Recordar usuario</label> </div> <button type=\"submit\" class=\"btn btn-primary\">Ingresar</button> </form:form> <!-- Formunarioi de login #--> </div> </div> </div> <div class=\"col\"></div> </div> </div> <jsp:include page=\"../htmlTemplates/footerTemplate.jsp\"></jsp:include> </body> </html> /pages/htmlTemplates/footerTemplate.jsp C\u00f3digo comentado, ya que para web-jars debe estar cargado jquery antes. Es por esa raz\u00f3n que los c\u00f3digos js no ir\u00e1n en el footer . <footer> <!-- bootstrap 4 --> <!-- <script src=\"https://code.jquery.com/jquery-3.4.1.slim.min.js\" --> <!-- integrity=\"sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n\" --> <!-- crossorigin=\"anonymous\"></script> --> <!-- <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js\" --> <!-- integrity=\"sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo\" --> <!-- crossorigin=\"anonymous\"></script> --> <!-- <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js\" --> <!-- integrity=\"sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6\" --> <!-- crossorigin=\"anonymous\"></script> --> <!-- bootstrap #--> </footer> /pages/htmlTemplates/headTemplate.jsp Integraci\u00f3n de la vista con webjars , se comenta el CDN , se pueden ver estas dependencias en maven dependencies , dentro estar\u00e1n las carpetas con las versiones en caso de no saber cual se ha descargado. <!-- Este template, est\u00e1 dise\u00f1ado para mantener la cabecera del sitio --> <!-- unificada en una sola, ya que la comparten. --> <head> <meta charset=\"UTF-8\"> <title>FPA-EJEMPLO</title> <!-- cdn bootstrap 4 --> <!-- <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\" --> <!-- integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\"> --> <!-- cdn bootstrap 4 #--> <script src=\"/webjars/jquery/3.1.1/jquery.min.js\"></script> <script src=\"/webjars/bootstrap/4.3.0/js/bootstrap.min.js\"></script> <link rel=\"stylesheet\" href=\"/webjars/bootstrap/4.3.0/css/bootstrap.min.css\" /> </head> /pages/htmlTemplates/navTemplate.jsp Se puede ver que podemos disponer de la informaci\u00f3n del usuario conectado, guardado en la sesi\u00f3n, mediante el mecanismo de scope que el servidor trabajar\u00e1 mediante la conexi\u00f3n de cada usuario. Bienvenido - <strong>${authUsuario.getNombre()}</strong> .\u001c <nav class=\"navbar navbar-expand-lg navbar-light bg-light\"> <a class=\"navbar-brand\" href=\"#\">JPA-EJEMPLO</a> <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"> <span class=\"navbar-toggler-icon\"></span> </button> <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\"> <ul class=\"navbar-nav ml-auto\"> <!-- Home --> <li class=\"nav-item active\"><a class=\"nav-link\" href=\"/\">Home <span class=\"sr-only\">(current)</span> </a></li> <!-- Home #--> <li class=\"nav-item dropdown\"> <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"> Mantenedor de personas </a> <div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\"> <a class=\"dropdown-item\" href=\"/personas/ingresar\">Ingresar</a> </div> </li> <!-- Usuario conectado --> <li class=\"nav-item dropdown ml-5\"><a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"> Bienvenido - <strong>${authUsuario.getNombre()}</strong> </a> <div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\"> <a class=\"dropdown-item\" href=\"#\">Personalizar datos - (tarea)</a> <div class=\"dropdown-divider\"></div> <a class=\"dropdown-item\" href=\"/auth/doLogout\">Cerrar sesi\u00f3n</a> </div> </li> </ul> </div> </nav>","title":"src/main/webapp/WEB-INF"},{"location":"modulos/mod_5/uni003/lectura002_005/#3252-ddl-de-prueba","text":"delete from persona; select * from persona; INSERT into persona values (1, \"Uno\"); INSERT into persona values (2, \"Dos\"); INSERT into persona values (3, \"Tres\"); INSERT into persona values (4, \"Cuatro\"); INSERT into persona values (5, \"Cinco\"); INSERT into persona values (6, \"Seis\"); INSERT into persona values (7, \"Siete\"); INSERT into persona values (9, \"Ocho\"); INSERT into persona values (10, \"Nueve\"); INSERT into persona values (11, \"Diez\"); INSERT into persona values (12, \"Once\"); INSERT into persona values (13, \"Doce\"); INSERT into persona values (14, \"Trece\"); INSERT into persona values (15, \"Catorce\"); INSERT into persona values (16, \"Quince\"); INSERT into persona values (17, \"Dieciseis\"); INSERT into persona values (18, \"Diecisiete\"); -- despu\u00e9s de ingresar usuario INSERT into persona values (\"Usuario\", 19, \"Luis herrera\", \"1234\", \"l.herrera.garnica@gmail.com\"); select persona0_.id as id1_0_, persona0_.nombre as nombre2_0_ from persona persona0_ limit 3 offset 9; select persona0_.id as id1_0_, persona0_.nombre as nombre2_0_ from persona persona0_ limit 3 offset 4; select persona0_.id as id1_0_, persona0_.nombre as nombre2_0_ from persona persona0_ order by persona0_.id asc limit ? offset ?","title":"3.2.5.2 DDL DE PRUEBA"},{"location":"modulos/mod_5/uni003/lectura002_005/#3253-todo","text":"Realizar el mantenedor de usuarios. (registro el sistema).","title":"3.2.5.3 TODO"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/","text":"Unidad 3.2 - Modelo La siguiente aplicaci\u00f3n ser\u00e1 finalmente un mantenedor de personas, con un control de acceso de usuarios. Hito 1: Solamente crear el proyecto y modificarlo para que la base de datos SQLITE funcione. Hito 2: Se crean los servicios necesarios, para que funcionen los test (Uso real de Mockito). Hito 3: Creando la web del proyecto. 3.2.1 Aplicaci\u00f3n - JPA Hito 1 - Configuraci\u00f3n de la base de datos Se crea un proyecto spring-boot: 2.2.6 con las siguientes dependencias: Spring-data JPA Lombok Spring Web Spring boot DevToools Tipo de deploy -> war , con esto se crea el ServletInitializer \u001c Estructura final del hito. ./ \u251c\u2500\u2500 HELP.md \u251c\u2500\u2500 basedatos.db \u251c\u2500\u2500 mvnw \u251c\u2500\u2500 mvnw.cmd \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 jpaspring \u2502 \u2502 \u2502 \u251c\u2500\u2500 AppConfig.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 JpaspringApplication.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 SQLiteDialect.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 ServletInitializer.java \u2502 \u2502 \u251c\u2500\u2500 resources \u2502 \u2502 \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2502 \u2502 \u251c\u2500\u2500 database.properties \u2502 \u2502 \u2502 \u251c\u2500\u2500 static \u2502 \u2502 \u2502 \u2514\u2500\u2500 templates \u2502 \u2502 \u2514\u2500\u2500 webapp \u2502 \u2502 \u2514\u2500\u2500 WEB-INF \u2502 \u2514\u2500\u2500 test \u2502 \u2514\u2500\u2500 java \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 jpaspring \u2502 \u2514\u2500\u2500 JpaspringApplicationTests.java \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2514\u2500\u2500 database.properties \u251c\u2500\u2500 m2e-wtp \u2502 \u2514\u2500\u2500 web-resources \u2502 \u2514\u2500\u2500 META-INF \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 maven \u2502 \u2514\u2500\u2500 cl.lherrera.jpaspring \u2502 \u2514\u2500\u2500 jpaspring \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2514\u2500\u2500 pom.xml \u2514\u2500\u2500 test-classes 25 directories, 18 files Archivos modificados /pom.xml Archivo de dependencias del proyecto. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.6.RELEASE</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>cl.lherrera.jpaspring</groupId> <artifactId>jpaspring</artifactId> <version>20.0.0</version> <packaging>war</packaging> <name>jpaspring</name> <description>proyecto JPA SQLITE</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-jpa</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> <scope>provided</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> <!-- SOPORTE ARCHIVOS JSP --> <dependency> <groupId>org.apache.tomcat.embed</groupId> <artifactId>tomcat-embed-jasper</artifactId> <scope>provided</scope> </dependency> <!-- SOPORTE ARCHIVOS JSP # --> <!-- JSTL --> <dependency> <groupId>javax.servlet</groupId> <artifactId>jstl</artifactId> </dependency> <dependency> <groupId>javax.servlet</groupId> <artifactId>javax.servlet-api</artifactId> </dependency> <!-- JSTL # --> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project> cl.lherrera.jpaspring /jpaspring/src/main/java/cl/lherrera/jpaspring/SQLiteDialect.java Archivo necesario para la configuraci\u00f3n de SQLITE para Spring , es un archivo est\u00e1ndar. package cl.lherrera.jpaspring; import java.sql.Types; import org.hibernate.dialect.Dialect; import org.hibernate.dialect.function.StandardSQLFunction; import org.hibernate.dialect.function.SQLFunctionTemplate; import org.hibernate.dialect.function.VarArgsSQLFunction; import org.hibernate.type.StandardBasicTypes; public class SQLiteDialect extends Dialect { public SQLiteDialect() { super(); registerColumnType(Types.BIT, \"integer\"); registerColumnType(Types.TINYINT, \"tinyint\"); registerColumnType(Types.SMALLINT, \"smallint\"); registerColumnType(Types.INTEGER, \"integer\"); registerColumnType(Types.BIGINT, \"bigint\"); registerColumnType(Types.FLOAT, \"float\"); registerColumnType(Types.REAL, \"real\"); registerColumnType(Types.DOUBLE, \"double\"); registerColumnType(Types.NUMERIC, \"numeric\"); registerColumnType(Types.DECIMAL, \"decimal\"); registerColumnType(Types.CHAR, \"char\"); registerColumnType(Types.VARCHAR, \"varchar\"); registerColumnType(Types.LONGVARCHAR, \"longvarchar\"); registerColumnType(Types.DATE, \"date\"); registerColumnType(Types.TIME, \"time\"); registerColumnType(Types.TIMESTAMP, \"timestamp\"); registerColumnType(Types.BINARY, \"blob\"); registerColumnType(Types.VARBINARY, \"blob\"); registerColumnType(Types.LONGVARBINARY, \"blob\"); // registerColumnType(Types.NULL, \"null\"); registerColumnType(Types.BLOB, \"blob\"); registerColumnType(Types.CLOB, \"clob\"); registerColumnType(Types.BOOLEAN, \"integer\"); registerFunction(\"concat\", new VarArgsSQLFunction(StandardBasicTypes.STRING, \"\", \"||\", \"\")); registerFunction(\"mod\", new SQLFunctionTemplate(StandardBasicTypes.INTEGER, \"?1 % ?2\")); registerFunction(\"substr\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); registerFunction(\"substring\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); } public boolean supportsIdentityColumns() { return true; } public boolean hasDataTypeInIdentityColumn() { return false; // As specify in NHibernate dialect } public String getIdentityColumnString() { // return \"integer primary key autoincrement\"; return \"integer\"; } public String getIdentitySelectString() { return \"select last_insert_rowid()\"; } public boolean supportsLimit() { return true; } public String getLimitString(String query, boolean hasOffset) { return new StringBuffer(query.length() + 20).append(query).append( hasOffset ? \" limit ? offset ?\" : \" limit ?\").toString(); } public boolean bindLimitParametersInReverseOrder() { return true; } public boolean supportsTemporaryTables() { return true; } public String getCreateTemporaryTableString() { return \"create temporary table if not exists\"; } public boolean dropTemporaryTableAfterUse() { return false; } public boolean supportsCurrentTimestampSelection() { return true; } public boolean isCurrentTimestampSelectStringCallable() { return false; } public String getCurrentTimestampSelectString() { return \"select current_timestamp\"; } public boolean supportsUnionAll() { return true; } public boolean hasAlterTable() { return false; // As specify in NHibernate dialect } public boolean dropConstraints() { return false; } public String getAddColumnString() { return \"add column\"; } public String getForUpdateString() { return \"\"; } public boolean supportsOuterJoinForUpdate() { return false; } public String getDropForeignKeyString() { throw new UnsupportedOperationException( \"No drop foreign key syntax supported by SQLiteDialect\"); } public String getAddForeignKeyConstraintString(String constraintName, String[] foreignKey, String referencedTable, String[] primaryKey, boolean referencesPrimaryKey) { throw new UnsupportedOperationException( \"No add foreign key syntax supported by SQLiteDialect\"); } public String getAddPrimaryKeyConstraintString(String constraintName) { throw new UnsupportedOperationException( \"No add primary key syntax supported by SQLiteDialect\"); } public boolean supportsIfExistsBeforeTableName() { return true; } public boolean supportsCascadeDelete() { return false; } } /jpaspring/src/main/java/cl/lherrera/jpaspring/AppConfig.java Es donde agregamos la personalizaci\u00f3n de la base de datos, donde la informaci\u00f3n se trae desde un archivo. Esto es debido a que cuando se sube a producci\u00f3n, este ambiente, posee su propio archivo y las credenciales no quedan expuestas. package cl.lherrera.jpaspring; import javax.sql.DataSource; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.PropertySource; import org.springframework.core.env.Environment; import org.springframework.jdbc.datasource.DriverManagerDataSource; @Configuration @ComponentScan(\"cl.lherrera.jpaspring\") @PropertySource(\"classpath:database.properties\") public class AppConfig { @Autowired Environment environment; @Bean DataSource dataSource() { DriverManagerDataSource driverManagerDataSource = new DriverManagerDataSource(); driverManagerDataSource.setUrl(environment.getProperty(\"url\")); driverManagerDataSource.setUsername(environment.getProperty(\"username\")); driverManagerDataSource.setPassword(environment.getProperty(\"dbpassword\")); driverManagerDataSource.setDriverClassName(environment.getProperty(\"driverClassName\")); return driverManagerDataSource; } } /src/main/resources/ \u001d /application.properties Se listan las configuraciones de la aplicaci\u00f3n, como por ejemplo el lugar donde ir\u00e1n los archivos JSP, adem\u00e1s de configuraciones para la base de datos. # Configuraci\u00f3n para la vista. (http://localhost:8080/) no es (http://localhost:8080/jpaspring/) # Eso es para un servlet spring.mvc.view.prefix=/WEB-INF/pages/ spring.mvc.view.suffix=.jsp # Permiso para clear el ddl de las entidades spring.jpa.generate-ddl=true # Ejecuta la configuraci\u00f3n de la clase que mapea los tipos de datos. spring.jpa.database-platform=cl.lherrera.jpaspring.SQLiteDialect # Crea la base si no est\u00e1 y cuando finaliza la ejecuci\u00f3n la borra. spring.jpa.hibernate.ddl-auto=create-drop # Muestra las consultas realizadas por el framework y las imprime en el log spring.jpa.show-sql=true # Le da un form\u00e1to legible por un humano para una mejor depuraci\u00f3n en el log. spring.jpa.properties.hibernate.format_sql=true #Pruebas #logging.level.org.hibernate.SQL=debug #logging.level.org.hibernate.type.descriptor.sql=trace /database.properties Este archivo contendr\u00e1 la configuraci\u00f3n de la conexi\u00f3n a la base de datos.\u001c Para el ejemplo se utilizar\u00e1 SQLITE. driverClassName=org.sqlite.JDBC url=jdbc:sqlite:basedatos.db username=jpaspring password=sa /basedatos.db Este archivo no contiene informaci\u00f3n, lo creamos con la extensi\u00f3n , lo abrimos con el cliente DBEAVER \u001d, usando las credenciales. Hasta ahora, solamente podemos ejecutar la aplicaci\u00f3n, sin errores, no comprobamos el funcionamiento. Hito 2 - Creando los servicios necesarios para la aplicaci\u00f3n. En esta secci\u00f3n usaremos TDD para poder realizar los servicios con la utilizaci\u00f3n de mockito \u001d, simulamos la interacci\u00f3n con la base de datos. Esto no prueba realmente la base, si no que la simula, as\u00ed que el correcto funcionamiento de la capa de acceso a datos no se prueba con esta t\u00e9cnica. Archivos modificados basedatos.db // no importa siempre se modifica. src/main/java/cl/lherrera/jpaspring/entities/Persona.java src/main/java/cl/lherrera/jpaspring/repositories/PersonaRepo.java src/main/java/cl/lherrera/jpaspring/services/PersonaService.java src/main/java/cl/lherrera/jpaspring/services/PersonaServiceImpl.java src/main/resources/application.properties // ya est\u00e1 el mejor puesto desde el principio src/test/java/cl/lherrera/jpaspring/services/PersonaServiceTest.java /src/test/java/cl/lherrera/jpaspring/services /PersonaServiceTest.java Primero lo primero, partimos especulando mediante el uso de los test. El mock del DAO permite que el el servicio no use nuestro DAO , si no que el del mock , donde le decimos exactamente que debe traer, con ello verificamos todo el funcionamiento que requiera una simulaci\u00f3n del comportamiento de la base de datos. Si se quiere probar la persistencia, este tipo de test, no son \u00fatiles. Para eso hay que dise\u00f1ar alguno que use realmente la base, con una base de datos de prueba. package cl.lherrera.jpaspring.services; import static org.assertj.core.api.Assertions.assertThat; import static org.mockito.Mockito.when; import java.util.ArrayList; import java.util.List; import java.util.Optional; import org.junit.jupiter.api.DisplayName; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.context.SpringBootTest; import org.springframework.boot.test.mock.mockito.MockBean; import cl.lherrera.jpaspring.entities.Persona; import cl.lherrera.jpaspring.repositories.PersonaRepo; @SpringBootTest public class PersonaServiceTest { @Autowired PersonaService servicio; @MockBean PersonaRepo mockRepo; @Test @DisplayName(\"Buscar personas por nombre\") public void prueba005() { // crear la persona en la base mockdatos List<Persona> personas = new ArrayList<>(); personas.add(new Persona(1, \"luis\")); personas.add(new Persona(2, \"luis\")); when(mockRepo.findAllByNombre(\"luis\")).thenReturn(personas); // comprobamos la persona assertThat(personas).isEqualTo(servicio.obtenerPersonasPorNombre(\"luis\")); } @Test @DisplayName(\"obtener una lista de las personas\") public void prueba004() { // una lista de personas List<Persona> personas = new ArrayList<>(); personas.add(new Persona(1, \"luis\")); personas.add(new Persona(2, \"ana\")); // simular petici\u00f3n en la base de datos when((List<Persona>)mockRepo.findAll()).thenReturn(personas); assertThat(personas).isEqualTo(servicio.obtenerPersonas()); } @Test @DisplayName(\"almacenar persona\") public void prueba001() { // creamos el dato en memoria Persona persona = new Persona(1, \"luis\"); // simulaci\u00f3n de dato en la base de datos when(mockRepo.save(persona)).thenReturn(persona); // funcionamiento del servicio. (se ejecuta el mockRepo y no // el repo que est\u00e1 en su clase, el que llama a // la base datos as\u00ed esta petici\u00f3n // se simula sin escribir // realmente en la BD assertThat(servicio.IngresarPersona(persona)).isEqualTo(persona); } @Test @DisplayName(\"actualizar una persona\") public void prueba002() { // creamos la persona Persona persona = new Persona(1, \"Luis\"); // se simula persona encontrada when(mockRepo.findById(1)).thenReturn(Optional.of(persona)); Persona personaUdt = servicio.encontrarPersona(1); // se actualiza el valor. se puede ver que la primera simulaci\u00f3n // tuvo efecto, el mockRepo actu\u00f3 como el repositorio // oficial ya que usamos el servicio para traer // la persona usando el servicio. personaUdt.setNombre(\"Ana\"); // simulaci\u00f3n de actualizaci\u00f3n (es el repo el que simulamos y // save(cuando existe actualiza o crea) when(mockRepo.save(personaUdt)).thenReturn(personaUdt); assertThat(servicio.actualizarPersona(personaUdt).getNombre()).isEqualTo(\"Ana\"); } @Test @DisplayName(\"eliminar persona\") public void prueba003() { // encontrar la perosona para eliminarla ya que esta // debe existir en la base de datos. when(mockRepo.findById(1)) .thenReturn(Optional.of(new Persona(1, \"luis\"))); // con la base de datos simulada, utlizamos el servicio. Persona persona = servicio.encontrarPersona(1); // simulamos la interacci\u00f3n de la base de datos when(mockRepo.myDeleteById(1)).thenReturn(Optional.of(persona)); // ocupamos el servicio Persona personaEliminada = servicio.eliminarPersona(persona); assertThat(personaEliminada.getId()).isEqualTo(persona.getId()); } } /src/main/java/cl/lherrera/jpaspring/entities /Persona.java Entidad encargada de llevar el registro de la base, adem\u00e1s es la gu\u00eda para la creaci\u00f3n del DDL . package cl.lherrera.jpaspring.entities; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; @Entity public class Persona { @Id @GeneratedValue(strategy=GenerationType.AUTO) // https://www.objectdb.com/java/jpa/entity/generated private Integer id; private String nombre; public Persona() {} public Persona(Integer id, String nombre) { this.id = id; this.nombre = nombre; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } } /jpaspring/src/main/java/cl/lherrera/jpaspring/repositories Like a DAO. /PersonaRepo.java Esta es la magia de JPA. con solamente extender la interfaz JpaRepository , tenemos un crud armado, \u001c PagingAndSortingRepository , posibilita la paginaci\u00f3n que veremos m\u00e1s adelante. No se necesita implementar, Spring se encarga de esto. Si necesitamos personalizar una consulta lo podemos hacer con una anotaci\u00f3n en la misma interfaz. Esta interfaz es lo m\u00e1s parecido al dao que est\u00e1bamos acostumbrados, de hecho, a veces lo veremos en los paquetes dao , lo cual no est\u00e1 incorrecto, por que esta es precisamente la capa de acceso a los datos. package cl.lherrera.jpaspring.repositories; import java.util.List; import java.util.Optional; import org.springframework.data.jpa.repository.Query; import org.springframework.data.repository.CrudRepository; import cl.lherrera.jpaspring.entities.Persona; public interface PersonaRepo extends CrudRepository<Persona, Integer> { /** * Se puede parecer mucho a una consulta en la base de datos pero es una * consulta al modelo, la respuesta es un @Entity. por eso la \"tabla\" est\u00e1 en * may\u00fasculas. * * Eso es debido a que no renemos un PersonaRepoImpl que maneje la * personalizaci\u00f3n de esta consulta y como la original delete, retorna void no * es muy buena para hacer test ya que no tenemos contra qu\u00e9 validar si * simulamos la base de datos * */ @Query(\"DELETE FROM Persona WHERE id = ?1\") Optional<Persona> myDeleteById(Integer id); // no posee un nombre personalizado, cumple con la nomenclatura find // debe ir aunque siga la nomenclatura List<Persona> findAllByNombre(String nombre); } /src/main/java/cl/lherrera/jpaspring/services /PersonaService.java Interfaz de los servicios que se desarrollar\u00e1n. package cl.lherrera.jpaspring.services; import java.util.List; import cl.lherrera.jpaspring.entities.Persona; public interface PersonaService { List<Persona> obtenerPersonas(); List<Persona> obtenerPersonasPorNombre(String nombre); Persona IngresarPersona(Persona persona); Persona encontrarPersona(Integer id); Persona eliminarPersona(Persona persona); Persona actualizarPersona(Persona persona); } /PersonaServiceImpl.java Implementaci\u00f3n de los servicios. package cl.lherrera.jpaspring.services; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import cl.lherrera.jpaspring.entities.Persona; import cl.lherrera.jpaspring.repositories.PersonaRepo; @Service public class PersonaServiceImpl implements PersonaService{ @Autowired PersonaRepo repo; @Override public List<Persona> obtenerPersonas() { return (List<Persona>) repo.findAll(); } @Override public List<Persona> obtenerPersonasPorNombre(String nombre) { return repo.findAllByNombre(nombre); } @Override public Persona encontrarPersona(Integer id) { // as\u00ed nos evitamos un null pointer exception return repo.findById(id).orElse(new Persona()); } @Override public Persona eliminarPersona(Persona persona) { return repo.myDeleteById(persona.getId()).orElse(new Persona()); } @Override public Persona actualizarPersona(Persona persona) { return repo.save(persona); } @Override public Persona IngresarPersona(Persona persona) { return repo.save(persona); } } Hito 3 - CRUD con web. Los servicios que se implementaron, ahora tendr\u00e1n forma en la web. Veremos como trabaja Spring la parte visual utilizando jsp . Archivos modificados: src/main/java/cl/lherrera/jpaspring/controllers/AplicationController.java src/main/java/cl/lherrera/jpaspring/controllers/PersonaController.java src/main/java/cl/lherrera/jpaspring/repositories/PersonaRepo.java src/main/java/cl/lherrera/jpaspring/services/PersonaServiceImpl.java src/main/resources/application.properties src/main/webapp/WEB-INF/index.jsp src/main/webapp/WEB-INF/pages/index.jsp src/main/webapp/WEB-INF/pages/htmlTemplates/footerTemplate.jsp src/main/webapp/WEB-INF/pages/htmlTemplates/headTemplate.jsp src/main/webapp/WEB-INF/pages/htmlTemplates/navTemplate.jsp src/main/webapp/WEB-INF/pages/personas/actualizar.jsp src/main/webapp/WEB-INF/pages/personas/eliminar.jsp src/main/webapp/WEB-INF/pages/personas/personas.jsp src/test/java/cl/lherrera/jpaspring/services/PersonaServiceTest.java src/main/java/cl/lherrera/jpaspring/controllers/ /AplicationController.java package cl.lherrera.jpaspring.controllers; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; @Controller public class AplicationController { private static final Logger logger = LoggerFactory.getLogger(AplicationController.class); @GetMapping(\"/\") public String home() { logger.info(\"llamada a : '/'\"); return \"index\"; } } /PersonaController.java package cl.lherrera.jpaspring.controllers; import java.util.List; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpStatus; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.ResponseStatus; import org.springframework.web.servlet.mvc.support.RedirectAttributes; import cl.lherrera.jpaspring.entities.Persona; import cl.lherrera.jpaspring.services.PersonaService; @Controller @RequestMapping(\"/personas\") public class PersonaController { private static final Logger logger = LoggerFactory.getLogger(PersonaController.class); @Autowired PersonaService servicio; @GetMapping(\"/ingresar\") @ResponseStatus(code = HttpStatus.OK) public String inicio(Model modelo) { logger.info(\"Petici\u00f3n: /personas/\"); List<Persona> personas = servicio.obtenerPersonas(); modelo.addAttribute(\"personas\", personas); return \"personas/personas\"; } // @ResponseStatus(code = HttpStatus.CREATED) // con esto no funciona el redirect @PostMapping(\"/ingresar\") public String ingresar( @ModelAttribute(\"foo\") Persona persona, @RequestParam String nombre, RedirectAttributes attributes) { logger.info(\"Petici\u00f3n post /ingresar\"); Persona respuesta = servicio.IngresarPersona(persona); if(persona == null) logger.error(\"error en ingreso de persona\"); return \"redirect:ingresar\"; } @GetMapping(\"/actualizar\") public String actualizar( Model modelo, @RequestParam String id) { logger.info(\"Petici\u00f3n-GET: /actualizar\"); Persona persona = servicio.encontrarPersona(Integer.parseInt(id)); modelo.addAttribute(\"persona\", persona); return \"personas/actualizar\"; } // el formulario debe estar completo con los names, para que lo // reconozca como la misma entidad y no una nueva @PostMapping(\"/actualizar\") public String doActualizar(@ModelAttribute(\"foo\") Persona persona) { logger.info(\"Petici\u00f3n-POST: /actualizar\"); servicio.actualizarPersona(persona); return \"redirect:ingresar\"; } @GetMapping(\"/eliminar\") public String eliminar( Model modelo, @RequestParam String id) { logger.info(\"Petici\u00f3n-GET: /eliminar\"); Persona persona = servicio.encontrarPersona(Integer.parseInt(id)); modelo.addAttribute(\"persona\", persona); return \"personas/eliminar\"; } @PostMapping(\"/eliminar\") public String doEliminar( @ModelAttribute(\"foo\") Persona persona, @RequestParam String id) { logger.info(\"Petici\u00f3n-POST: /eliminar\"); Persona respuesta = servicio.eliminarPersona(persona); if(respuesta == null) logger.info(\"Petici\u00f3n-POST: /eliminar\"); return \"redirect:ingresar\"; } } src/main/java/cl/lherrera/jpaspring/repositories /PersonaRepo.java package cl.lherrera.jpaspring.repositories; import java.util.List; import java.util.Optional; import org.springframework.data.jpa.repository.Modifying; import org.springframework.data.jpa.repository.Query; import org.springframework.data.repository.CrudRepository; import cl.lherrera.jpaspring.entities.Persona; public interface PersonaRepo extends CrudRepository<Persona, Integer> { /** * Se puede parecer mucho a una consulta en la base de datos pero es una * consulta al modelo, la respuesta es un @Entity. por eso la \"tabla\" est\u00e1 en * may\u00fasculas. * * Eso es debido a que no renemos un PersonaRepoImpl que maneje la * personalizaci\u00f3n de esta consulta y como la original delete, retorna void no * es muy buena para hacer test ya que no tenemos contra qu\u00e9 validar si * simulamos la base de datos. * * En el fondo es solamente un deleteById(), pero se expone para su ejemplo * Que podemos aplicar queries a las entidades. * */ @Modifying @Query(\"DELETE FROM Persona WHERE id = ?1\") Integer myDeleteById(Integer id); // no posee un nombre personalizado, cumple con la nomenclatura find // debe ir aunque siga la nomenclatura List<Persona> findAllByNombre(String nombre); } src/main/java/cl/lherrera/jpaspring/services /PersonaServiceImpl.java package cl.lherrera.jpaspring.services; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional; import cl.lherrera.jpaspring.entities.Persona; import cl.lherrera.jpaspring.repositories.PersonaRepo; @Service public class PersonaServiceImpl implements PersonaService{ @Autowired PersonaRepo repo; @Override @Transactional(readOnly = true) public List<Persona> obtenerPersonas() { return (List<Persona>) repo.findAll(); } @Override @Transactional(readOnly = true) public List<Persona> obtenerPersonasPorNombre(String nombre) { return repo.findAllByNombre(nombre); } @Override @Transactional(readOnly = true) public Persona encontrarPersona(Integer id) { // as\u00ed nos evitamos un null pointer exception return repo.findById(id).orElse(new Persona()); } @Override @Transactional public Persona eliminarPersona(Persona persona) { int numeroQueAunNoSeOcupa = repo.myDeleteById(persona.getId()); return persona; } @Override @Transactional public Persona actualizarPersona(Persona persona) { return repo.save(persona); } @Override @Transactional public Persona IngresarPersona(Persona persona) { return repo.save(persona); } } src/main/webapp/WEB-INF /index.jsp \u001c Eliminado /pages/index.jsp \u001c <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@taglib uri=\"http://www.springframework.org/tags/form\" prefix=\"form\"%> <%@taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%> <!DOCTYPE html> <html> <jsp:include page=\"htmlTemplates/headTemplate.jsp\"></jsp:include> <body> <jsp:include page=\"htmlTemplates/navTemplate.jsp\"></jsp:include> <h1>Inicio de la web</h1> <jsp:include page=\"htmlTemplates/footerTemplate.jsp\"></jsp:include> </body> </html> /pages/htmlTemplates/footerTemplate.jsp <footer> <!-- bootstrap 4 --> <script src=\"https://code.jquery.com/jquery-3.4.1.slim.min.js\" integrity=\"sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n\" crossorigin=\"anonymous\"></script> <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js\" integrity=\"sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo\" crossorigin=\"anonymous\"></script> <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js\" integrity=\"sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6\" crossorigin=\"anonymous\"></script> <!-- bootstrap #--> </footer> /pages/htmlTemplates/headTemplate.jsp <!-- Este template, est\u00e1 dise\u00f1ado para mantener la cabecera del sitio --> <!-- unificada en una sola, ya que la comparten. --> <head> <meta charset=\"UTF-8\"> <title>FPA-EJEMPLO</title> <!-- cdn bootstrap 4 --> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\"> <!-- cdn bootstrap 4 #--> </head> /pages/htmlTemplates/navTemplate.jsp <nav class=\"navbar navbar-expand-lg navbar-light bg-light\"> <a class=\"navbar-brand\" href=\"#\">JPA-EJEMPLO</a> <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"> <span class=\"navbar-toggler-icon\"></span> </button> <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\"> <ul class=\"navbar-nav mr-auto\"> <!-- Home --> <li class=\"nav-item active\"><a class=\"nav-link\" href=\"/\">Home <span class=\"sr-only\">(current)</span> </a></li> <!-- Home #--> <li class=\"nav-item dropdown\"> <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"> Mantenedor de personas </a> <div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\"> <a class=\"dropdown-item\" href=\"/personas/ingresar\">Ingresar</a> </div> </li> </ul> </div> </nav> /pages/personas/actualizar.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@taglib uri=\"http://www.springframework.org/tags/form\" prefix=\"form\"%> <%@taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%> <html> <jsp:include page=\"../htmlTemplates/headTemplate.jsp\"></jsp:include> <body> <jsp:include page=\"../htmlTemplates/navTemplate.jsp\"></jsp:include> <div class=\"container\"> <div class=\"row\"> <div class=\"col\"> <form:form class=\"form-horizontal\" method=\"post\" action=\"/personas/actualizar\" modelAttribute=\"Persona\"> <div class=\"form-group\"> <label for=\"nombre\">Nombre</label> <input type=\"hidden\" name=\"id\" value=\"${persona.getId()}\"> <input type=\"text\" class=\"form-control\" id=\"nombre\" name=\"nombre\" value=\"${persona.getNombre()}\"> </div> <a href=\"/personas/ingresar\" class=\"btn btn-primary mb-2\" role=\"button\" aria-pressed=\"true\">Cancelar</a> <button type=\"submit\" class=\"btn btn-warning mb-2\">Actualizar</button> </form:form> </div> </div> </div> <jsp:include page=\"../htmlTemplates/footerTemplate.jsp\"></jsp:include> </body> </html> /pages/personas/eliminar.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@taglib uri=\"http://www.springframework.org/tags/form\" prefix=\"form\"%> <%@taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%> <html> <jsp:include page=\"../htmlTemplates/headTemplate.jsp\"></jsp:include> <body> <jsp:include page=\"../htmlTemplates/navTemplate.jsp\"></jsp:include> <div class=\"container\"> <div class=\"row\"> <div class=\"col\"> <form:form class=\"form-horizontal\" method=\"post\" action=\"/personas/eliminar\" modelAttribute=\"Persona\"> <div class=\"form-group\"> <label for=\"nombre\">Nombre</label> <input type=\"hidden\" name=\"id\" value=\"${persona.getId()}\"> <input type=\"text\" class=\"form-control\" id=\"nombre\" name=\"nombre\" disabled disabled value=\"${persona.getNombre()}\"> </div> <a href=\"/personas/ingresar\" class=\"btn btn-primary mb-2\" role=\"button\" aria-pressed=\"true\">Cancelar</a> <button type=\"submit\" class=\"btn btn-danger mb-2\">Confirmar</button> </form:form> </div> </div> </div> <jsp:include page=\"../htmlTemplates/footerTemplate.jsp\"></jsp:include> </body> </html> /pages/personas/personas.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@taglib uri=\"http://www.springframework.org/tags/form\" prefix=\"form\"%> <%@taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%> <!DOCTYPE html> <html> <jsp:include page=\"../htmlTemplates/headTemplate.jsp\"></jsp:include> <body> <jsp:include page=\"../htmlTemplates/navTemplate.jsp\"></jsp:include> <div class=\"container\"> <div class=\"row\"> <div class=\"col\"> <form:form class=\"form-horizontal\" method=\"post\" action=\"/personas/ingresar\" modelAttribute=\"Persona\"> <div class=\"form-group\"> <label for=\"nombre\">Nombre</label> <input type=\"text\" class=\"form-control\" id=\"nombre\" name=\"nombre\" placeholder=\"Ingrese el nombre\"> </div> <button type=\"submit\" class=\"btn btn-primary mb-2\">Ingresar</button> </form:form> <div class=\"table-responsive\"> <table class=\"table table-hover table-striped table-bordered\"> <tr> <th>Id</th> <th>Nombre</th> <th>Acci\u00f3n</th> </tr> <c:forEach items=\"${personas}\" var=\"persona\"> <tr> <td>${persona.getId()}</td> <td>${persona.getNombre()}</td> <td> <a href=\"/personas/actualizar?id=${persona.getId()}\">Actualizar</a> | <a href=\"/personas/eliminar?id=${persona.getId()}\" >Elimininar</a> </td> </tr> </c:forEach> </table> </div> </div> </div> </div> <jsp:include page=\"../htmlTemplates/footerTemplate.jsp\"></jsp:include> </body> </html> src/test/java/cl/lherrera/jpaspring/services /PersonaServiceTest.java \u001c package cl.lherrera.jpaspring.services; import static org.assertj.core.api.Assertions.assertThat; import static org.mockito.Mockito.when; import java.util.ArrayList; import java.util.List; import java.util.Optional; import org.junit.jupiter.api.DisplayName; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.context.SpringBootTest; import org.springframework.boot.test.mock.mockito.MockBean; import cl.lherrera.jpaspring.entities.Persona; import cl.lherrera.jpaspring.repositories.PersonaRepo; @SpringBootTest public class PersonaServiceTest { @Autowired PersonaService servicio; @MockBean PersonaRepo mockRepo; @Test @DisplayName(\"Buscar personas por nombre\") public void prueba005() { // crear la persona en la base mockdatos List<Persona> personas = new ArrayList<>(); personas.add(new Persona(1, \"luis\")); personas.add(new Persona(2, \"luis\")); when(mockRepo.findAllByNombre(\"luis\")).thenReturn(personas); // comprobamos la persona assertThat(personas).isEqualTo(servicio.obtenerPersonasPorNombre(\"luis\")); } @Test @DisplayName(\"obtener una lista de las personas\") public void prueba004() { // una lista de personas List<Persona> personas = new ArrayList<>(); personas.add(new Persona(1, \"luis\")); personas.add(new Persona(2, \"ana\")); // simular petici\u00f3n en la base de datos when((List<Persona>)mockRepo.findAll()).thenReturn(personas); assertThat(personas).isEqualTo(servicio.obtenerPersonas()); } @Test @DisplayName(\"almacenar persona\") public void prueba001() { // creamos el dato en memoria Persona persona = new Persona(1, \"luis\"); // simulaci\u00f3n de dato en la base de datos when(mockRepo.save(persona)).thenReturn(persona); // funcionamiento del servicio. (se ejecuta el mockRepo y no // el repo que est\u00e1 en su clase, el que llama a // la base datos as\u00ed esta petici\u00f3n // se simula sin escribir // realmente en la BD assertThat(servicio.IngresarPersona(persona)).isEqualTo(persona); } @Test @DisplayName(\"actualizar una persona\") public void prueba002() { // creamos la persona Persona persona = new Persona(1, \"Luis\"); // se simula persona encontrada when(mockRepo.findById(1)).thenReturn(Optional.of(persona)); Persona personaUdt = servicio.encontrarPersona(1); // se actualiza el valor. se puede ver que la primera simulaci\u00f3n // tuvo efecto, el mockRepo actu\u00f3 como el repositorio // oficial ya que usamos el servicio para traer // la persona usando el servicio. personaUdt.setNombre(\"Ana\"); // simulaci\u00f3n de actualizaci\u00f3n (es el repo el que simulamos y // save(cuando existe actualiza o crea) when(mockRepo.save(personaUdt)).thenReturn(personaUdt); assertThat(servicio.actualizarPersona(personaUdt).getNombre()).isEqualTo(\"Ana\"); } @Test @DisplayName(\"eliminar persona\") public void prueba003() { // encontrar la perosona para eliminarla ya que esta // debe existir en la base de datos. when(mockRepo.findById(1)) .thenReturn(Optional.of(new Persona(1, \"luis\"))); // con la base de datos simulada, utlizamos el servicio. Persona persona = servicio.encontrarPersona(1); // simulamos la interacci\u00f3n de la base de datos when(mockRepo.myDeleteById(1)).thenReturn(1); // ocupamos el servicio Persona personaEliminada = servicio.eliminarPersona(persona); assertThat(personaEliminada.getId()).isEqualTo(persona.getId()); } } Hito 4 - Creando resultados paginados. En diferentes ocaciones, podremos usar alg\u00fan componente como datatable de javascript para poder crear tablas de resultados, pero vamos a aprender a dise\u00f1arla personalizada mente con Java y Spring \u001d. Archivos modificados: basedatos.db pom.xml src/main/java/cl/lherrera/jpaspring/JpaspringApplication.java src/main/java/cl/lherrera/jpaspring/SQLiteDialect.java src/main/java/cl/lherrera/jpaspring/controllers/PersonaController.java src/main/java/cl/lherrera/jpaspring/dtos/PersonaDTO.java src/main/java/cl/lherrera/jpaspring/entities/Persona.java src/main/java/cl/lherrera/jpaspring/repositories/PersonaRepo.java src/main/java/cl/lherrera/jpaspring/services/PersonaService.java src/main/java/cl/lherrera/jpaspring/services/PersonaServiceImpl.java src/main/resources/application.properties src/main/webapp/WEB-INF/pages/personas/personas.jsp pom.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.6.RELEASE</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>cl.lherrera.jpaspring</groupId> <artifactId>jpaspring</artifactId> <version>20.0.0</version> <packaging>war</packaging> <name>jpaspring</name> <description>proyecto JPA SQLITE</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-jpa</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> <scope>provided</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> <!-- SOPORTE ARCHIVOS JSP --> <dependency> <groupId>org.apache.tomcat.embed</groupId> <artifactId>tomcat-embed-jasper</artifactId> <scope>provided</scope> </dependency> <!-- SOPORTE ARCHIVOS JSP # --> <!-- JSTL --> <dependency> <groupId>javax.servlet</groupId> <artifactId>jstl</artifactId> </dependency> <dependency> <groupId>javax.servlet</groupId> <artifactId>javax.servlet-api</artifactId> </dependency> <!-- JSTL # --> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project> src/main/java/cl/lherrera/jpaspring/JpaspringApplication.java package cl.lherrera.jpaspring; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.context.annotation.Bean; import org.springframework.boot.CommandLineRunner; @SpringBootApplication public class JpaspringApplication { public static void main(String[] args) { SpringApplication.run(JpaspringApplication.class, args); } // @Bean // public CommandLineRunner demo(PersonaServiceImpl servicio) { // return (args) -> { // servicio.obtenerPersonasPaginadas(0, 3); // }; // } } src/main/java/cl/lherrera/jpaspring/SQLiteDialect.java Esto ya estaba solucionado, pero prosaicos lo pongo. package cl.lherrera.jpaspring; import java.sql.Types; import org.hibernate.dialect.Dialect; import org.hibernate.dialect.function.StandardSQLFunction; import org.hibernate.dialect.function.SQLFunctionTemplate; import org.hibernate.dialect.function.VarArgsSQLFunction; import org.hibernate.type.StandardBasicTypes; import org.hibernate.Hibernate; public class SQLiteDialect extends Dialect { public SQLiteDialect() { super(); registerColumnType(Types.BIT, \"integer\"); registerColumnType(Types.TINYINT, \"tinyint\"); registerColumnType(Types.SMALLINT, \"smallint\"); registerColumnType(Types.INTEGER, \"integer\"); registerColumnType(Types.BIGINT, \"bigint\"); registerColumnType(Types.FLOAT, \"float\"); registerColumnType(Types.REAL, \"real\"); registerColumnType(Types.DOUBLE, \"double\"); registerColumnType(Types.NUMERIC, \"numeric\"); registerColumnType(Types.DECIMAL, \"decimal\"); registerColumnType(Types.CHAR, \"char\"); registerColumnType(Types.VARCHAR, \"varchar\"); registerColumnType(Types.LONGVARCHAR, \"longvarchar\"); registerColumnType(Types.DATE, \"date\"); registerColumnType(Types.TIME, \"time\"); registerColumnType(Types.TIMESTAMP, \"timestamp\"); registerColumnType(Types.BINARY, \"blob\"); registerColumnType(Types.VARBINARY, \"blob\"); registerColumnType(Types.LONGVARBINARY, \"blob\"); // registerColumnType(Types.NULL, \"null\"); registerColumnType(Types.BLOB, \"blob\"); registerColumnType(Types.CLOB, \"clob\"); registerColumnType(Types.BOOLEAN, \"integer\"); registerFunction(\"concat\", new VarArgsSQLFunction(StandardBasicTypes.STRING, \"\", \"||\", \"\")); registerFunction(\"mod\", new SQLFunctionTemplate(StandardBasicTypes.INTEGER, \"?1 % ?2\")); registerFunction(\"substr\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); registerFunction(\"substring\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); } public boolean supportsIdentityColumns() { return true; } public boolean hasDataTypeInIdentityColumn() { return false; // As specify in NHibernate dialect } public String getIdentityColumnString() { // return \"integer primary key autoincrement\"; return \"integer\"; } public String getIdentitySelectString() { return \"select last_insert_rowid()\"; } public boolean supportsLimit() { return true; } public String getLimitString(String query, boolean hasOffset) { return new StringBuffer(query.length() + 20).append(query).append( hasOffset ? \" limit ? offset ?\" : \" limit ?\").toString(); } public boolean bindLimitParametersInReverseOrder() { return true; } public boolean supportsTemporaryTables() { return true; } public String getCreateTemporaryTableString() { return \"create temporary table if not exists\"; } public boolean dropTemporaryTableAfterUse() { return false; } public boolean supportsCurrentTimestampSelection() { return true; } public boolean isCurrentTimestampSelectStringCallable() { return false; } public String getCurrentTimestampSelectString() { return \"select current_timestamp\"; } public boolean supportsUnionAll() { return true; } public boolean hasAlterTable() { return false; // As specify in NHibernate dialect } public boolean dropConstraints() { return false; } public String getAddColumnString() { return \"add column\"; } public String getForUpdateString() { return \"\"; } public boolean supportsOuterJoinForUpdate() { return false; } public String getDropForeignKeyString() { throw new UnsupportedOperationException( \"No drop foreign key syntax supported by SQLiteDialect\"); } public String getAddForeignKeyConstraintString(String constraintName, String[] foreignKey, String referencedTable, String[] primaryKey, boolean referencesPrimaryKey) { throw new UnsupportedOperationException( \"No add foreign key syntax supported by SQLiteDialect\"); } public String getAddPrimaryKeyConstraintString(String constraintName) { throw new UnsupportedOperationException( \"No add primary key syntax supported by SQLiteDialect\"); } public boolean supportsIfExistsBeforeTableName() { return true; } public boolean supportsCascadeDelete() { return false; } } src/main/java/cl/lherrera/jpaspring/controllers/PersonaController.java package cl.lherrera.jpaspring.controllers; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpStatus; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.ResponseStatus; import org.springframework.web.servlet.mvc.support.RedirectAttributes; import cl.lherrera.jpaspring.dtos.PersonaDTO; import cl.lherrera.jpaspring.entities.Persona; import cl.lherrera.jpaspring.services.PersonaService; @Controller @RequestMapping(\"/personas\") public class PersonaController { private static final Logger logger = LoggerFactory.getLogger(PersonaController.class); private static final Integer FILAS_POR_PAGINA = 3; @Autowired PersonaService servicio; @GetMapping(\"/ingresar\") @ResponseStatus(code = HttpStatus.OK) public String inicio( Model modelo, @RequestParam(required = false) Integer pagina) { logger.info(\"Petici\u00f3n: /personas/ingresar\"); // si no viene la p\u00e1gina, se simula la primera, el m\u00e9todo PageRequest.of(pagina // pide que la primera sea cero; pero esto es manejado por el servicio // en el controlador sabemos que la primera p\u00e1gina es la 1, si esto no es // as\u00ed, el servicio lo debe manejar if(pagina == null) pagina = 1; PersonaDTO dtoPersona = servicio.obtenerPersonasPaginadas(pagina, FILAS_POR_PAGINA); modelo.addAttribute(\"dtoPersona\", dtoPersona); // si no hay m\u00e1s de una p\u00e1gina, no es necesario paginar modelo.addAttribute(\"paginar\", dtoPersona.getPaginas().size() > 1); return \"personas/personas\"; } // @ResponseStatus(code = HttpStatus.CREATED) // con esto no funciona el redirect @PostMapping(\"/ingresar\") public String ingresar( @ModelAttribute(\"foo\") Persona persona, @RequestParam String nombre, RedirectAttributes attributes) { logger.info(\"Petici\u00f3n post /ingresar\"); // sin usar el retorno a\u00fan Persona respuesta = servicio.IngresarPersona(persona); if(persona == null) logger.error(\"error en ingreso de persona\"); return \"redirect:ingresar\"; } @GetMapping(\"/actualizar\") public String actualizar( Model modelo, @RequestParam String id) { logger.info(\"Petici\u00f3n-GET: /actualizar\"); Persona persona = servicio.encontrarPersona(Integer.parseInt(id)); modelo.addAttribute(\"persona\", persona); return \"personas/actualizar\"; } // el formulario debe estar completo con los names, para que lo // reconozca como la misma entidad y no una nueva @PostMapping(\"/actualizar\") public String doActualizar(@ModelAttribute(\"foo\") Persona persona) { logger.info(\"Petici\u00f3n-POST: /actualizar\"); servicio.actualizarPersona(persona); return \"redirect:ingresar\"; } @GetMapping(\"/eliminar\") public String eliminar( Model modelo, @RequestParam String id) { logger.info(\"Petici\u00f3n-GET: /eliminar\"); Persona persona = servicio.encontrarPersona(Integer.parseInt(id)); modelo.addAttribute(\"persona\", persona); return \"personas/eliminar\"; } @PostMapping(\"/eliminar\") public String doEliminar( @ModelAttribute(\"foo\") Persona persona, @RequestParam String id) { logger.info(\"Petici\u00f3n-POST: /eliminar\"); Persona respuesta = servicio.eliminarPersona(persona); if(respuesta == null) logger.info(\"Petici\u00f3n-POST: /eliminar\"); return \"redirect:ingresar\"; } } src/main/java/cl/lherrera/jpaspring/dtos/PersonaDTO.java package cl.lherrera.jpaspring.dtos; import java.util.List; import cl.lherrera.jpaspring.entities.Persona; public class PersonaDTO { private List<Persona> personas; private List<Integer> paginas; private Integer paginaActual; public List<Persona> getPersonas() { return personas; } public void setPersonas(List<Persona> personas) { this.personas = personas; } public List<Integer> getPaginas() { return paginas; } public void setPaginas(List<Integer> paginas) { this.paginas = paginas; } public Integer getPaginaActual() { return paginaActual; } public void setPaginaActual(Integer paginaActual) { this.paginaActual = paginaActual; } @Override public String toString() { return \"PersonaDTO [personas=\" + personas + \", paginas=\" + paginas + \", paginaActual=\" + paginaActual + \"]\"; } } src/main/java/cl/lherrera/jpaspring/entities/Persona.java package cl.lherrera.jpaspring.entities; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; @Entity public class Persona { @Id @GeneratedValue(strategy=GenerationType.AUTO) // https://www.objectdb.com/java/jpa/entity/generated private Integer id; private String nombre; public Persona() {} public Persona(Integer id, String nombre) { this.id = id; this.nombre = nombre; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } @Override public String toString() { return \"Persona [id=\" + id + \", nombre=\" + nombre + \"]\"; } } src/main/java/cl/lherrera/jpaspring/repositories/PersonaRepo.java package cl.lherrera.jpaspring.repositories; import java.util.List; import org.springframework.data.jpa.repository.JpaRepository; import org.springframework.data.jpa.repository.Modifying; import org.springframework.data.jpa.repository.Query; import org.springframework.data.repository.CrudRepository; import org.springframework.data.repository.PagingAndSortingRepository; import cl.lherrera.jpaspring.entities.Persona; public interface PersonaRepo extends JpaRepository<Persona, Integer>, PagingAndSortingRepository<Persona, Integer> { /** * Se puede parecer mucho a una consulta en la base de datos pero es una * consulta al modelo, la respuesta es un @Entity. por eso la \"tabla\" est\u00e1 en * may\u00fasculas. * * Eso es debido a que no renemos un PersonaRepoImpl que maneje la * personalizaci\u00f3n de esta consulta y como la original delete, retorna void no * es muy buena para hacer test ya que no tenemos contra qu\u00e9 validar si * simulamos la base de datos. * * En el fondo es solamente un deleteById(), pero se expone para su ejemplo * Que podemos aplicar queries a las entidades. * */ @Modifying @Query(\"DELETE FROM Persona WHERE id = ?1\") Integer myDeleteById(Integer id); // no posee un nombre personalizado, cumple con la nomenclatura find // debe ir aunque siga la nomenclatura List<Persona> findAllByNombre(String nombre); } src/main/java/cl/lherrera/jpaspring/services/PersonaService.java package cl.lherrera.jpaspring.services; import java.util.List; import cl.lherrera.jpaspring.dtos.PersonaDTO; import cl.lherrera.jpaspring.entities.Persona; public interface PersonaService { PersonaDTO obtenerPersonasPaginadas(Integer pagina, Integer cantidad); List<Persona> obtenerPersonas(); List<Persona> obtenerPersonasPorNombre(String nombre); Persona IngresarPersona(Persona persona); Persona encontrarPersona(Integer id); Persona eliminarPersona(Persona persona); Persona actualizarPersona(Persona persona); } src/main/java/cl/lherrera/jpaspring/services/PersonaServiceImpl.java package cl.lherrera.jpaspring.services; import java.util.ArrayList; import java.util.List; import javax.persistence.criteria.Order; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.data.domain.Page; import org.springframework.data.domain.PageRequest; import org.springframework.data.domain.Pageable; import org.springframework.data.domain.Sort; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional; import cl.lherrera.jpaspring.dtos.PersonaDTO; import cl.lherrera.jpaspring.entities.Persona; import cl.lherrera.jpaspring.repositories.PersonaRepo; @Service public class PersonaServiceImpl implements PersonaService{ private static final Logger logger = LoggerFactory.getLogger(PersonaServiceImpl.class.getName()); @Autowired PersonaRepo repo; @Override @Transactional(readOnly = true) public List<Persona> obtenerPersonas() { return (List<Persona>) repo.findAll(); } @Override @Transactional(readOnly = true) public List<Persona> obtenerPersonasPorNombre(String nombre) { return repo.findAllByNombre(nombre); } @Override @Transactional(readOnly = true) public Persona encontrarPersona(Integer id) { // as\u00ed nos evitamos un null pointer exception return repo.findById(id).orElse(new Persona()); } @Override @Transactional public Persona eliminarPersona(Persona persona) { int numeroQueAunNoSeOcupa = repo.myDeleteById(persona.getId()); return persona; } @Override @Transactional public Persona actualizarPersona(Persona persona) { return repo.save(persona); } @Override @Transactional public Persona IngresarPersona(Persona persona) { return repo.save(persona); } @Override public PersonaDTO obtenerPersonasPaginadas(Integer pagina, Integer cantidad) { logger.info(\"Num Pagina: \" + pagina); PersonaDTO personaDTO = new PersonaDTO(); // comienza en cero, para que con la p\u00e1gina 1 // busque en la p\u00e1gina 0 y lo retorne como p\u00e1gina 1. Pageable paginado = PageRequest.of(pagina - 1, 2, Sort.by(\"id\").ascending()); // consulta a la base Page<Persona> personaPaginas = repo.findAll(paginado); logger.info(personaPaginas.getContent().toString()); // ingreso de personas al DTO personaDTO.setPersonas(personaPaginas.getContent()); // ingresamos el n\u00famero de p\u00e1gina actual // el getNumber nos entrega un cero en caso de ser la primera p\u00e1gina // el argumento pagina, viene desde el front con el click // que se hace y llegar\u00e1 fielmente el verdadero n\u00famero a buscar // el \u00fanico aproblemado con esto es el PageRequest.of(pagina... ya que // \u00e9l busca por el n\u00famero consultado menos uno. personaDTO.setPaginaActual(pagina); // llenamos la lista de n\u00fameros del paginador List<Integer> paginas = new ArrayList<>(); for(int i = 0; i < personaPaginas.getTotalPages(); i ++) paginas.add(i + 1); personaDTO.setPaginas(paginas); logger.info(\"personaDTO: \" + personaDTO.toString()); return personaDTO; } } src/main/resources/application.properties Solucionado pero igual... # Configuraci\u00f3n para la vista. (http://localhost:8080/) no es (http://localhost:8080/jpaspring/) # Eso es para un servlet spring.mvc.view.prefix=/WEB-INF/pages/ spring.mvc.view.suffix=.jsp # Permiso para clear el ddl de las entidades spring.jpa.generate-ddl=true # Ejecuta la configuraci\u00f3n de la clase que mapea los tipos de datos. spring.jpa.database-platform=cl.lherrera.jpaspring.SQLiteDialect # Crea la base si no est\u00e1 y cuando finaliza la ejecuci\u00f3n la borra. spring.jpa.hibernate.ddl-auto=create-drop # Muestra las consultas realizadas por el framework y las imprime en el log spring.jpa.show-sql=true # Le da un form\u00e1to legible por un humano para una mejor depuraci\u00f3n en el log. spring.jpa.properties.hibernate.format_sql=true #Pruebas #logging.level.org.hibernate.SQL=debug #logging.level.org.hibernate.type.descriptor.sql=trace src/main/webapp/WEB-INF/pages/personas/personas.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@taglib uri=\"http://www.springframework.org/tags/form\" prefix=\"form\"%> <%@taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%> <!DOCTYPE html> <html> <jsp:include page=\"../htmlTemplates/headTemplate.jsp\"></jsp:include> <body> <jsp:include page=\"../htmlTemplates/navTemplate.jsp\"></jsp:include> <div class=\"container\"> <div class=\"row\"> <div class=\"col\"> <form:form class=\"form-horizontal\" method=\"post\" action=\"/personas/ingresar\" modelAttribute=\"Persona\"> <div class=\"form-group\"> <label for=\"nombre\">Nombre</label> <input type=\"text\" class=\"form-control\" id=\"nombre\" name=\"nombre\" placeholder=\"Ingrese el nombre\"> </div> <button type=\"submit\" class=\"btn btn-primary mb-2\">Ingresar</button> </form:form> <div class=\"table-responsive\"> <table class=\"table table-hover table-striped table-bordered\"> <tr> <th>Id</th> <th>Nombre</th> <th>Acci\u00f3n</th> </tr> <c:choose> <c:when test=\"${dtoPersona.getPersonas().size() > 0}\"> <c:forEach items=\"${dtoPersona.getPersonas()}\" var=\"persona\"> <tr> <td>${persona.getId()}</td> <td>${persona.getNombre()}</td> <td><a href=\"/personas/actualizar?id=${persona.getId()}\">Actualizar</a> | <a href=\"/personas/eliminar?id=${persona.getId()}\">Elimininar</a> </td> </tr> </c:forEach> </c:when> <c:otherwise> <tr> <td colspan=\"3\">${\"Sin registros...\"}</td> </tr> </c:otherwise> </c:choose> </table> <!-- PAGINACI\u00d6N --> <c:choose> <c:when test=\"${paginar}\"> <nav aria-label=\"Ejemplo de paginaci\u00f3n\"> <ul class=\"pagination\"> <c:choose> <c:when test=\"${dtoPersona.getPersonas().size() > 0}\"> <!-- l\u00f3gica para mostrar el anterior --> <c:choose> <c:when test=\"${dtoPersona.getPaginaActual() > 1}\"> <li class=\"page-item\"><a class=\"page-link\" href=\"/personas/ingresar?pagina=${dtoPersona.getPaginaActual() - 1}\">Anterior</a></li> </c:when> <c:otherwise> <li class=\"page-item disabled\"><a class=\"page-link\" href=\"#\">Anterior</a></li> </c:otherwise> </c:choose> <!-- l\u00f3gica para mostrar el anterior #--> <!-- L\u00f3gica de llenado de n\u00fameros --> <c:forEach items=\"${dtoPersona.getPaginas()}\" var=\"pagina\"> <!-- L\u00f3gica para seleccionar el n\u00famero de p\u00e1gina --> <c:choose> <c:when test=\"${dtoPersona.getPaginaActual() == pagina}\"> <li class=\"page-item active\"><a class=\"page-link\" href=\"/personas/ingresar?pagina=${pagina}\">${pagina}</a></li> </c:when> <c:otherwise> <li class=\"page-item \"><a class=\"page-link\" href=\"/personas/ingresar?pagina=${pagina}\">${pagina}</a></li> </c:otherwise> </c:choose> <!-- L\u00f3gica para seleccionar el n\u00famero de p\u00e1gina #--> </c:forEach> <!-- L\u00f3gica de llenado de n\u00fameros #--> <!-- l\u00f3gica para habilitar el siguiente --> <c:choose> <c:when test=\"${dtoPersona.getPaginas().size() > dtoPersona.getPaginaActual() }\"> <li class=\"page-item\"><a class=\"page-link\" href=\"/personas/ingresar?pagina=${dtoPersona.getPaginaActual() + 1}\">Siguiente</a></li> </c:when> <c:otherwise> <li class=\"page-item disabled\"><a class=\"page-link\" href=\"#\">Siguiente</a></li> </c:otherwise> </c:choose> <!-- l\u00f3gica para habilitar el siguiente ##--> </c:when> </c:choose> </ul> </nav> </c:when> </c:choose> <!-- PAGINACI\u00d6N #--> </div> </div> </div> </div> <jsp:include page=\"../htmlTemplates/footerTemplate.jsp\"></jsp:include> </body> </html> Hito 5 - Control de acceso. Se implementa un login program\u00e1tico, donde podemos ver como Spring trabaja las sesiones. Archivos modificados: basedatos.db pom.xml src/main/java/cl/lherrera/jpaspring/JpaspringApplication.java src/main/java/cl/lherrera/jpaspring/SQLiteDialect.java src/main/java/cl/lherrera/jpaspring/auth/LoginController.java src/main/java/cl/lherrera/jpaspring/controllers/AplicationController.java src/main/java/cl/lherrera/jpaspring/controllers/PersonaController.java src/main/java/cl/lherrera/jpaspring/entities/Usuario.java src/main/java/cl/lherrera/jpaspring/repositories/PersonaRepo.java src/main/java/cl/lherrera/jpaspring/repositories/UsuarioRepo.java src/main/java/cl/lherrera/jpaspring/services/AutentificacionServicio.java src/main/java/cl/lherrera/jpaspring/services/AutentificacionServicioImpl.java src/main/java/cl/lherrera/jpaspring/services/PersonaServiceImpl.java src/main/java/cl/lherrera/jpaspring/services/UsuarioService.java src/main/java/cl/lherrera/jpaspring/services/UsuarioServiceImpl.java src/main/resources/application.properties src/main/webapp/WEB-INF/pages/auth/login.jsp src/main/webapp/WEB-INF/pages/htmlTemplates/footerTemplate.jsp src/main/webapp/WEB-INF/pages/htmlTemplates/headTemplate.jsp src/main/webapp/WEB-INF/pages/htmlTemplates/navTemplate.jsp basedatos.db Este archivo cambia por que los datos cambian as\u00ed que no se tomar\u00e1 en cuenta el cambio pom.xml Tenemos finalmente la siguiente lista de dependencias: Soporte de archivos jsp : tomcat-embed-jasper , javax.servlet-api . Soporte a JSTL: jstl . Soporte SQLITE: sqlite-jdbc . Soporte herramientas de desarrollo para eclipse: spring-boot-devtools . Soporte Bootstrap webjars : bootstrap . Soporte JQuery webjars \u001d: jquery . Soporte webjars Ubicaci\u00f3n de recursos: webjars-locator . <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.6.RELEASE</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>cl.lherrera.jpaspring</groupId> <artifactId>jpaspring</artifactId> <version>20.0.0</version> <packaging>war</packaging> <name>jpaspring</name> <description>proyecto JPA SQLITE</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-jpa</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> <scope>provided</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> <!-- SOPORTE ARCHIVOS JSP --> <dependency> <groupId>org.apache.tomcat.embed</groupId> <artifactId>tomcat-embed-jasper</artifactId> <scope>provided</scope> </dependency> <!-- SOPORTE ARCHIVOS JSP # --> <!-- JSTL --> <dependency> <groupId>javax.servlet</groupId> <artifactId>jstl</artifactId> </dependency> <dependency> <groupId>javax.servlet</groupId> <artifactId>javax.servlet-api</artifactId> </dependency> <!-- JSTL # --> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> </dependency> <!-- DevsTools --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <optional>true</optional> </dependency> <!-- DevsTools # --> <!-- webjars --> <dependency> <groupId>org.webjars</groupId> <artifactId>webjars-locator</artifactId> <version>0.30</version> </dependency> <dependency> <groupId>org.webjars</groupId> <artifactId>bootstrap</artifactId> <version>4.3.0</version> </dependency> <dependency> <groupId>org.webjars</groupId> <artifactId>jquery</artifactId> <version>3.1.1</version> </dependency> <!-- webjars --> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project> src/main/java/cl/lherrera/jpaspring/JpaspringApplication.java Se agrega un m\u00e9todo para poder ingresar un usuario de prueba. package cl.lherrera.jpaspring; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.CommandLineRunner; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.stereotype.Component; import cl.lherrera.jpaspring.entities.Usuario; import cl.lherrera.jpaspring.services.UsuarioServiceImpl; @SpringBootApplication public class JpaspringApplication { public static void main(String[] args) { SpringApplication.run(JpaspringApplication.class, args); } } /** * Este m\u00e9todo, realiza acciones antes que la aplicaci\u00f3n est\u00e1 en ejecuci\u00f3n as\u00ed, * el usuario est\u00e1 ingresado antes de iniciar sesi\u00f3n. * */ @Component class SeEjecutaAntes implements CommandLineRunner { @Autowired UsuarioServiceImpl servicioUsuario; @Override public void run(String... args) throws Exception { // para probar con este usuario al menos Usuario usuarioPueba = new Usuario(); usuarioPueba.setNombre(\"Luis herrera\"); usuarioPueba.setEmail(\"l.herrera.garnica@gmail.com\"); usuarioPueba.setContrasenia(\"1234\"); servicioUsuario.ingresarUsuario(usuarioPueba); // para probar con este usuario al menos ## } } src/main/java/cl/lherrera/jpaspring/SQLiteDialect.java Se repara el final, aunque el que estaba es este mismo que se copia ya que el que estaba antes de este, no permit\u00eda ingresar el usuario al principio de la ejecuci\u00f3n de la aplicaci\u00f3n. Es decir que esta versi\u00f3n probablemente sea la que ya est\u00e1 por que la he puesta esta versi\u00f3n desde el hito 1. package cl.lherrera.jpaspring; import java.sql.Types; import org.hibernate.dialect.Dialect; import org.hibernate.dialect.function.StandardSQLFunction; import org.hibernate.dialect.function.SQLFunctionTemplate; import org.hibernate.dialect.function.VarArgsSQLFunction; import org.hibernate.type.StandardBasicTypes; public class SQLiteDialect extends Dialect { public SQLiteDialect() { super(); registerColumnType(Types.BIT, \"integer\"); registerColumnType(Types.TINYINT, \"tinyint\"); registerColumnType(Types.SMALLINT, \"smallint\"); registerColumnType(Types.INTEGER, \"integer\"); registerColumnType(Types.BIGINT, \"bigint\"); registerColumnType(Types.FLOAT, \"float\"); registerColumnType(Types.REAL, \"real\"); registerColumnType(Types.DOUBLE, \"double\"); registerColumnType(Types.NUMERIC, \"numeric\"); registerColumnType(Types.DECIMAL, \"decimal\"); registerColumnType(Types.CHAR, \"char\"); registerColumnType(Types.VARCHAR, \"varchar\"); registerColumnType(Types.LONGVARCHAR, \"longvarchar\"); registerColumnType(Types.DATE, \"date\"); registerColumnType(Types.TIME, \"time\"); registerColumnType(Types.TIMESTAMP, \"timestamp\"); registerColumnType(Types.BINARY, \"blob\"); registerColumnType(Types.VARBINARY, \"blob\"); registerColumnType(Types.LONGVARBINARY, \"blob\"); // registerColumnType(Types.NULL, \"null\"); registerColumnType(Types.BLOB, \"blob\"); registerColumnType(Types.CLOB, \"clob\"); registerColumnType(Types.BOOLEAN, \"integer\"); registerFunction(\"concat\", new VarArgsSQLFunction(StandardBasicTypes.STRING, \"\", \"||\", \"\")); registerFunction(\"mod\", new SQLFunctionTemplate(StandardBasicTypes.INTEGER, \"?1 % ?2\")); registerFunction(\"substr\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); registerFunction(\"substring\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); } public boolean supportsIdentityColumns() { return true; } public boolean hasDataTypeInIdentityColumn() { return false; // As specify in NHibernate dialect } public String getIdentityColumnString() { // return \"integer primary key autoincrement\"; return \"integer\"; } public String getIdentitySelectString() { return \"select last_insert_rowid()\"; } public boolean supportsLimit() { return true; } public String getLimitString(String query, boolean hasOffset) { return new StringBuffer(query.length() + 20).append(query).append( hasOffset ? \" limit ? offset ?\" : \" limit ?\").toString(); } public boolean bindLimitParametersInReverseOrder() { return true; } public boolean supportsTemporaryTables() { return true; } public String getCreateTemporaryTableString() { return \"create temporary table if not exists\"; } public boolean dropTemporaryTableAfterUse() { return false; } public boolean supportsCurrentTimestampSelection() { return true; } public boolean isCurrentTimestampSelectStringCallable() { return false; } public String getCurrentTimestampSelectString() { return \"select current_timestamp\"; } public boolean supportsUnionAll() { return true; } public boolean hasAlterTable() { return false; // As specify in NHibernate dialect } public boolean dropConstraints() { return false; } public String getAddColumnString() { return \"add column\"; } public String getForUpdateString() { return \"\"; } public boolean supportsOuterJoinForUpdate() { return false; } public String getDropForeignKeyString() { throw new UnsupportedOperationException( \"No drop foreign key syntax supported by SQLiteDialect\"); } public String getAddForeignKeyConstraintString(String constraintName, String[] foreignKey, String referencedTable, String[] primaryKey, boolean referencesPrimaryKey) { throw new UnsupportedOperationException( \"No add foreign key syntax supported by SQLiteDialect\"); } public String getAddPrimaryKeyConstraintString(String constraintName) { throw new UnsupportedOperationException( \"No add primary key syntax supported by SQLiteDialect\"); } public boolean supportsIfExistsBeforeTableName() { return true; } public boolean supportsCascadeDelete() { return false; } } src/main/java/cl/lherrera/jpaspring/auth/LoginController.java Este controlador, ser\u00e1 el encargado de organizar las solicitudes referentes al control de acceso. package cl.lherrera.jpaspring.auth; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.servlet.mvc.support.RedirectAttributes; import cl.lherrera.jpaspring.entities.Usuario; import cl.lherrera.jpaspring.services.AutentificacionServicio; @Controller @RequestMapping(path = \"/auth\") public class LoginController { private static Logger logger = LoggerFactory.getLogger(LoginController.class.getName()); @Autowired AutentificacionServicio servicio; @GetMapping(path = \"/login\") public String login() { logger.info(\"Llamado a: /auth/login\"); return \"auth/login\"; } @GetMapping(path = \"/doLogout\") public String doLogout() { servicio.sairDelSistema(); return \"auth/login\"; } @PostMapping(path = \"/doLogin\") public String doLogin(@ModelAttribute Usuario usuario, RedirectAttributes ra) { String irHacia = \"redirect:/auth/login\"; if (servicio.estaLogueado()) { irHacia = \"redirect:/\"; } else { Usuario logueado = servicio.ingresarAlSistema(usuario); boolean seRealizaLogueo = logueado != null; if (seRealizaLogueo) { irHacia = \"redirect:/\"; } else { ra.addFlashAttribute(\"loginErrorFlash\", \"Credenciales inv\u00e1lidas\"); } } return irHacia; } } src/main/java/cl/lherrera/jpaspring/controllers/AplicationController.java Todas las peticiones referentes a la administraci\u00f3n de la aplicaci\u00f3n, como por ejemplo, ir al index del sitio y no a las funcionalidades que tienen que ver con la manutenci\u00f3n de los datos de la persona o usuarios. package cl.lherrera.jpaspring.controllers; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.GetMapping; import cl.lherrera.jpaspring.entities.Usuario; import cl.lherrera.jpaspring.services.AutentificacionServicio; import cl.lherrera.jpaspring.services.PersonaServiceImpl; import cl.lherrera.jpaspring.services.UsuarioServiceImpl; @Controller public class AplicationController { private static final Logger logger = LoggerFactory.getLogger(AplicationController.class); @Autowired AutentificacionServicio authService; @Autowired PersonaServiceImpl servicioPersona; @Autowired UsuarioServiceImpl servicioUsuario; @GetMapping(\"/\") public String home(Model modelo) { logger.info(\"llamada a : '/'\"); if(!authService.estaLogueado()) { return \"auth/login\"; }else { Usuario authUsuario = authService.obtenerUsuarioLogeado(); modelo.addAttribute(\"authUsuario\", authUsuario); } return \"index\"; } } src/main/java/cl/lherrera/jpaspring/controllers/PersonaController.java Se encarga de controlar todas las interacciones que tengan que ver con la manutenci\u00f3n de los datos de las personas como por ejemplo el CRUD . package cl.lherrera.jpaspring.controllers; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpStatus; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.ResponseStatus; import org.springframework.web.servlet.mvc.support.RedirectAttributes; import cl.lherrera.jpaspring.dtos.PersonaDTO; import cl.lherrera.jpaspring.entities.Persona; import cl.lherrera.jpaspring.entities.Usuario; import cl.lherrera.jpaspring.services.AutentificacionServicio; import cl.lherrera.jpaspring.services.PersonaService; @Controller @RequestMapping(\"/personas\") public class PersonaController { private static final Logger logger = LoggerFactory.getLogger(PersonaController.class); private static final Integer FILAS_POR_PAGINA = 3; @Autowired PersonaService servicio; @Autowired AutentificacionServicio authService; @GetMapping(\"/ingresar\") @ResponseStatus(code = HttpStatus.OK) public String inicio( Model modelo, @RequestParam(required = false) Integer pagina) { logger.info(\"Petici\u00f3n: /personas/ingresar\"); // controlando el acceso if(!authService.estaLogueado()) { return \"auth/login\"; }else { Usuario authUsuario = authService.obtenerUsuarioLogeado(); modelo.addAttribute(\"authUsuario\", authUsuario); } // controlando el acceso ## // si no viene la p\u00e1gina, se simula la primera, el m\u00e9todo PageRequest.of(pagina // pide que la primera sea cero; pero esto es manejado por el servicio // en el controlador sabemos que la primera p\u00e1gina es la 1, si esto no es // as\u00ed, el servicio lo debe manejar if(pagina == null) pagina = 1; PersonaDTO dtoPersona = servicio.obtenerPersonasPaginadas(pagina, FILAS_POR_PAGINA); modelo.addAttribute(\"dtoPersona\", dtoPersona); // si no hay m\u00e1s de una p\u00e1gina, no es necesario paginar modelo.addAttribute(\"paginar\", dtoPersona.getPaginas().size() > 1); return \"personas/personas\"; } // @ResponseStatus(code = HttpStatus.CREATED) // con esto no funciona el redirect @PostMapping(\"/ingresar\") public String ingresar( @ModelAttribute(\"foo\") Persona persona, @RequestParam String nombre, RedirectAttributes attributes) { logger.info(\"Petici\u00f3n post /ingresar\"); // sin usar el retorno a\u00fan Persona respuesta = servicio.IngresarPersona(persona); if(respuesta == null) logger.error(\"error en ingreso de persona\"); return \"redirect:ingresar\"; } @GetMapping(\"/actualizar\") public String actualizar( Model modelo, @RequestParam String id) { logger.info(\"Petici\u00f3n-GET: /actualizar\"); // controlando el acceso if(!authService.estaLogueado()) { return \"auth/login\"; }else { Usuario authUsuario = authService.obtenerUsuarioLogeado(); modelo.addAttribute(\"authUsuario\", authUsuario); } // controlando el acceso ## Persona persona = servicio.encontrarPersona(Integer.parseInt(id)); modelo.addAttribute(\"persona\", persona); return \"personas/actualizar\"; } // el formulario debe estar completo con los names, para que lo // reconozca como la misma entidad y no una nueva @PostMapping(\"/actualizar\") public String doActualizar(@ModelAttribute(\"foo\") Persona persona) { logger.info(\"Petici\u00f3n-POST: /actualizar\"); servicio.actualizarPersona(persona); return \"redirect:ingresar\"; } @GetMapping(\"/eliminar\") public String eliminar( Model modelo, @RequestParam String id) { // controlando el acceso if(!authService.estaLogueado()) { return \"auth/login\"; }else { Usuario authUsuario = authService.obtenerUsuarioLogeado(); modelo.addAttribute(\"authUsuario\", authUsuario); } // controlando el acceso ## logger.info(\"Petici\u00f3n-GET: /eliminar\"); Persona persona = servicio.encontrarPersona(Integer.parseInt(id)); modelo.addAttribute(\"persona\", persona); return \"personas/eliminar\"; } @PostMapping(\"/eliminar\") public String doEliminar( @ModelAttribute(\"foo\") Persona persona, @RequestParam String id) { logger.info(\"Petici\u00f3n-POST: /eliminar\"); Persona respuesta = servicio.eliminarPersona(persona); if(respuesta == null) logger.info(\"Petici\u00f3n-POST: /eliminar\"); return \"redirect:ingresar\"; } } src/main/java/cl/lherrera/jpaspring/entities/Usuario.java Podemos utilizar la potencia del paradigma OO, para poder modelar los datos de la aplicaci\u00f3n, podemos tratar a una persona como un usuario y que sea administrado en la misma tabla. El usuario est\u00e1 orientado a la administraci\u00f3n del sitio como el inicio de sesi\u00f3n. Las personas son una funcionalidad independiente a pesar de diferir en la base de datos, en la aplicaci\u00f3n esto puede variar. package cl.lherrera.jpaspring.entities; import javax.persistence.Entity; import javax.persistence.Table; @Entity @Table(name=\"persona\") public class Usuario extends Persona { private String email; private String contrasenia; public Usuario() {} public Usuario(Integer id, String nombre, String email, String contrasenia) { super(id, nombre); this.email = email; this.contrasenia = contrasenia; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getContrasenia() { return contrasenia; } public void setContrasenia(String contrasenia) { this.contrasenia = contrasenia; } @Override public String toString() { return \"Usuario [email=\" + email + \", contrasenia=\" + contrasenia + \"]\"; } } src/main/java/cl/lherrera/jpaspring/repositories/PersonaRepo.java Solo quitamos la dependencia de CrudRepository . package cl.lherrera.jpaspring.repositories; import java.util.List; import org.springframework.context.annotation.Primary; import org.springframework.data.jpa.repository.JpaRepository; import org.springframework.data.jpa.repository.Modifying; import org.springframework.data.jpa.repository.Query; import org.springframework.data.repository.PagingAndSortingRepository; import cl.lherrera.jpaspring.entities.Persona; // la herencia de beans con hilos seguros @Primary public interface PersonaRepo extends JpaRepository<Persona, Integer>, PagingAndSortingRepository<Persona, Integer> { /** * Se puede parecer mucho a una consulta en la base de datos pero es una * consulta al modelo, la respuesta es un @Entity. por eso la \"tabla\" est\u00e1 en * may\u00fasculas. * * Eso es debido a que no renemos un PersonaRepoImpl que maneje la * personalizaci\u00f3n de esta consulta y como la original delete, retorna void no * es muy buena para hacer test ya que no tenemos contra qu\u00e9 validar si * simulamos la base de datos. * * En el fondo es solamente un deleteById(), pero se expone para su ejemplo * Que podemos aplicar queries a las entidades. * */ @Modifying @Query(\"DELETE FROM Persona WHERE id = ?1\") Integer myDeleteById(Integer id); // no posee un nombre personalizado, cumple con la nomenclatura find // debe ir aunque siga la nomenclatura List<Persona> findAllByNombre(String nombre); } src/main/java/cl/lherrera/jpaspring/repositories/UsuarioRepo.java Vemos la ventaja del uso de la orientaci\u00f3n de objetos, ya que esta interfaz es implementada por spring , entonces ya que los nombres como findAll() son gen\u00e9ricos, no como encontrarPersna , podemos extender la funcionalidad. No hay que olvidar la anotaci\u00f3n @Primary en el bean principal. https://www.baeldung.com/spring-primary .\u001c package cl.lherrera.jpaspring.repositories; import java.util.Optional; import cl.lherrera.jpaspring.entities.Usuario; public interface UsuarioRepo extends PersonaRepo{ Optional<Usuario> findOneByEmailAndContrasenia(String email, String contrasenia); } src/main/java/cl/lherrera/jpaspring/services/AutentificacionServicio.java Servicios encargados de la autenticaci\u00f3n. package cl.lherrera.jpaspring.services; import cl.lherrera.jpaspring.entities.Usuario; public interface AutentificacionServicio { Boolean estaLogueado(); Usuario obtenerUsuarioLogeado(); Usuario ingresarAlSistema(Usuario usuario); void sairDelSistema(); } src/main/java/cl/lherrera/jpaspring/services/AutentificacionServicioImpl.java package cl.lherrera.jpaspring.services; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import org.springframework.web.context.annotation.SessionScope; import cl.lherrera.jpaspring.entities.Usuario; import cl.lherrera.jpaspring.repositories.UsuarioRepo; @Service @SessionScope public class AutentificacionServicioImpl implements AutentificacionServicio { @Autowired private UsuarioRepo usuarioRepo; private Usuario usuarioAutent; @Override public Boolean estaLogueado() { return usuarioAutent != null; } @Override public Usuario obtenerUsuarioLogeado() { return usuarioAutent; } @Override public Usuario ingresarAlSistema(Usuario usuario) { usuarioAutent = usuarioRepo.findOneByEmailAndContrasenia( usuario.getEmail(), usuario.getContrasenia()) .orElse(null); return usuarioAutent; } @Override public void sairDelSistema() { usuarioAutent = null; } } src/main/java/cl/lherrera/jpaspring/services/PersonaServiceImpl.java Simple reparaci\u00f3n. package cl.lherrera.jpaspring.services; import java.util.ArrayList; import java.util.List; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.data.domain.Page; import org.springframework.data.domain.PageRequest; import org.springframework.data.domain.Pageable; import org.springframework.data.domain.Sort; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional; import cl.lherrera.jpaspring.dtos.PersonaDTO; import cl.lherrera.jpaspring.entities.Persona; import cl.lherrera.jpaspring.repositories.PersonaRepo; @Service //@Primary // util solamente si tenemos m\u00e1s servicios que implementan PersonaService. public class PersonaServiceImpl implements PersonaService{ private static final Logger logger = LoggerFactory.getLogger(PersonaServiceImpl.class.getName()); @Autowired PersonaRepo repo; @Override @Transactional(readOnly = true) public List<Persona> obtenerPersonas() { return (List<Persona>) repo.findAll(); } @Override @Transactional(readOnly = true) public List<Persona> obtenerPersonasPorNombre(String nombre) { return repo.findAllByNombre(nombre); } @Override @Transactional(readOnly = true) public Persona encontrarPersona(Integer id) { // as\u00ed nos evitamos un null pointer exception return repo.findById(id).orElse(new Persona()); } @Override @Transactional public Persona eliminarPersona(Persona persona) { int filasAfectadas = repo.myDeleteById(persona.getId()); if(!(filasAfectadas > 0)) { logger.info(\"Error al eliminal persona: \" + persona.toString()); } return persona; } @Override @Transactional public Persona actualizarPersona(Persona persona) { return repo.save(persona); } @Override @Transactional public Persona IngresarPersona(Persona persona) { return repo.save(persona); } @Override public PersonaDTO obtenerPersonasPaginadas(Integer pagina, Integer cantidad) { logger.info(\"Num Pagina: \" + pagina); PersonaDTO personaDTO = new PersonaDTO(); // comienza en cero, para que con la p\u00e1gina 1 // busque en la p\u00e1gina 0 y lo retorne como p\u00e1gina 1. Pageable paginado = PageRequest.of(pagina - 1, 2, Sort.by(\"id\").ascending()); // consulta a la base Page<Persona> personaPaginas = repo.findAll(paginado); logger.info(personaPaginas.getContent().toString()); // ingreso de personas al DTO personaDTO.setPersonas(personaPaginas.getContent()); // ingresamos el n\u00famero de p\u00e1gina actual // el getNumber nos entrega un cero en caso de ser la primera p\u00e1gina // el argumento pagina, viene desde el front con el click // que se hace y llegar\u00e1 fielmente el verdadero n\u00famero a buscar // el \u00fanico aproblemado con esto es el PageRequest.of(pagina... ya que // \u00e9l busca por el n\u00famero consultado menos uno. personaDTO.setPaginaActual(pagina); // llenamos la lista de n\u00fameros del paginador List<Integer> paginas = new ArrayList<>(); for(int i = 0; i < personaPaginas.getTotalPages(); i ++) paginas.add(i + 1); personaDTO.setPaginas(paginas); logger.info(\"personaDTO: \" + personaDTO.toString()); return personaDTO; } } src/main/java/cl/lherrera/jpaspring/services/UsuarioService.java El servicio es personalizado, por que son con nomenclaturas espec\u00edficas del propio servicio. package cl.lherrera.jpaspring.services; import cl.lherrera.jpaspring.entities.Usuario; public interface UsuarioService { void ingresarUsuario(Usuario usuario); } src/main/java/cl/lherrera/jpaspring/services/UsuarioServiceImpl.java package cl.lherrera.jpaspring.services; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import cl.lherrera.jpaspring.entities.Usuario; import cl.lherrera.jpaspring.repositories.UsuarioRepo; @Service public class UsuarioServiceImpl implements UsuarioService { @Autowired UsuarioRepo repo; @Override public void ingresarUsuario(Usuario usuario) { repo.save(usuario); } } src/main/resources/application.properties # Configuraci\u00f3n para la vista. (http://localhost:8080/) no es (http://localhost:8080/jpaspring/) # Eso es para un servlet spring.mvc.view.prefix=/WEB-INF/pages/ spring.mvc.view.suffix=.jsp # Permiso para clear el ddl de las entidades spring.jpa.generate-ddl=true # Ejecuta la configuraci\u00f3n de la clase que mapea los tipos de datos. spring.jpa.database-platform=cl.lherrera.jpaspring.SQLiteDialect # Crea la base si no est\u00e1 y cuando finaliza la ejecuci\u00f3n la borra. spring.jpa.hibernate.ddl-auto=create-drop # Muestra las consultas realizadas por el framework y las imprime en el log spring.jpa.show-sql=true # Le da un form\u00e1to legible por un humano para una mejor depuraci\u00f3n en el log. spring.jpa.properties.hibernate.format_sql=true #Pruebas #logging.level.org.hibernate.SQL=debug #logging.level.org.hibernate.type.descriptor.sql=trace src/main/webapp/WEB-INF/pages/auth/login.jsp Podemos ver como interact\u00faan los mensajes del tipo flash y que una vez enviado desde un m\u00e9todo redireccionado \u001d, no hay necesidad de reemitirlo \u001d a la vista, por que ya viene con RedirectAttributes . <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@taglib uri=\"http://www.springframework.org/tags/form\" prefix=\"form\"%> <%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%> <%@ taglib uri=\"http://java.sun.com/jsp/jstl/functions\" prefix=\"fn\"%> <!DOCTYPE html> <html> <jsp:include page=\"../htmlTemplates/headTemplate.jsp\"></jsp:include> <body> <div class=\"container my-5\"> <div class=\"row\"> <div class=\"col\"></div> <div class=\"col\"> <!-- Mensaje flash de control de acceso --> <div class=\"card\" style=\"width: 18rem;\"> <!-- Mensaje flash de control de acceso --> <c:choose> <c:when test=\"${loginErrorFlash != null}\"> <div class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\"> <strong>Error de acceso: </strong> ${loginErrorFlash} <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\"> <span aria-hidden=\"true\">&times;</span> </button> </div> </c:when> </c:choose> <!-- Mensaje flash de control de acceso ##--> <div class=\"card-body\"> <h5 class=\"card-title\">Ingreso al sistema</h5> <!-- Formunarioi de login --> <form:form class=\"form-horizontal\" method=\"post\" action=\"/auth/doLogin\" modelAttribute=\"Usuario\"> <div class=\"form-group\"> <label for=\"email\">Correo electr\u00f3nicos</label> <input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" aria-describedby=\"emailHelp\"> <small id=\"emailHelp\" class=\"form-text text-muted\">No compartimos t\u00fa informaci\u00f3n con nadie.</small> </div> <div class=\"form-group\"> <label for=\"contrasenia\">Contrase\u00f1a</label> <input type=\"password\" class=\"form-control\" id=\"contrasenia\" name=\"contrasenia\"> </div> <div class=\"form-group form-check\"> <input type=\"checkbox\" class=\"form-check-input\" id=\"exampleCheck1\"> <label class=\"form-check-label\" for=\"exampleCheck1\">Recordar usuario</label> </div> <button type=\"submit\" class=\"btn btn-primary\">Ingresar</button> </form:form> <!-- Formunarioi de login #--> </div> </div> </div> <div class=\"col\"></div> </div> </div> <jsp:include page=\"../htmlTemplates/footerTemplate.jsp\"></jsp:include> </body> </html> src/main/webapp/WEB-INF/pages/htmlTemplates/footerTemplate.jsp C\u00f3digo comentado, ya que para web-jars debe estar cargado jquery antes. Es por esa raz\u00f3n que los c\u00f3digos js no ir\u00e1n en el footer . <footer> <!-- bootstrap 4 --> <!-- <script src=\"https://code.jquery.com/jquery-3.4.1.slim.min.js\" --> <!-- integrity=\"sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n\" --> <!-- crossorigin=\"anonymous\"></script> --> <!-- <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js\" --> <!-- integrity=\"sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo\" --> <!-- crossorigin=\"anonymous\"></script> --> <!-- <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js\" --> <!-- integrity=\"sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6\" --> <!-- crossorigin=\"anonymous\"></script> --> <!-- bootstrap #--> </footer> src/main/webapp/WEB-INF/pages/htmlTemplates/headTemplate.jsp Integraci\u00f3n de la vista con webjars , se comenta el CDN , se pueden ver estas dependencias en maven dependencies , dentro estar\u00e1n las carpetas con las versiones en caso de no saber cual se ha descargado. <!-- Este template, est\u00e1 dise\u00f1ado para mantener la cabecera del sitio --> <!-- unificada en una sola, ya que la comparten. --> <head> <meta charset=\"UTF-8\"> <title>FPA-EJEMPLO</title> <!-- cdn bootstrap 4 --> <!-- <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\" --> <!-- integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\"> --> <!-- cdn bootstrap 4 #--> <script src=\"/webjars/jquery/3.1.1/jquery.min.js\"></script> <script src=\"/webjars/bootstrap/4.3.0/js/bootstrap.min.js\"></script> <link rel=\"stylesheet\" href=\"/webjars/bootstrap/4.3.0/css/bootstrap.min.css\" /> </head> src/main/webapp/WEB-INF/pages/htmlTemplates/navTemplate.jsp Se puede ver que podemos disponer de la informaci\u00f3n del usuario conectado, guardado en la sesi\u00f3n, mediante el mecanismo de scope que el servidor trabajar\u00e1 mediante la conexi\u00f3n de cada usuario. Bienvenido - <strong>${authUsuario.getNombre()}</strong> .\u001c <nav class=\"navbar navbar-expand-lg navbar-light bg-light\"> <a class=\"navbar-brand\" href=\"#\">JPA-EJEMPLO</a> <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"> <span class=\"navbar-toggler-icon\"></span> </button> <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\"> <ul class=\"navbar-nav ml-auto\"> <!-- Home --> <li class=\"nav-item active\"><a class=\"nav-link\" href=\"/\">Home <span class=\"sr-only\">(current)</span> </a></li> <!-- Home #--> <li class=\"nav-item dropdown\"> <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"> Mantenedor de personas </a> <div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\"> <a class=\"dropdown-item\" href=\"/personas/ingresar\">Ingresar</a> </div> </li> <!-- Usuario conectado --> <li class=\"nav-item dropdown ml-5\"><a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"> Bienvenido - <strong>${authUsuario.getNombre()}</strong> </a> <div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\"> <a class=\"dropdown-item\" href=\"#\">Personalizar datos - (tarea)</a> <div class=\"dropdown-divider\"></div> <a class=\"dropdown-item\" href=\"/auth/doLogout\">Cerrar sesi\u00f3n</a> </div> </li> </ul> </div> </nav> DDL DE PRUEBA delete from persona; select * from persona; INSERT into persona values (1, \"Uno\"); INSERT into persona values (2, \"Dos\"); INSERT into persona values (3, \"Tres\"); INSERT into persona values (4, \"Cuatro\"); INSERT into persona values (5, \"Cinco\"); INSERT into persona values (6, \"Seis\"); INSERT into persona values (7, \"Siete\"); INSERT into persona values (9, \"Ocho\"); INSERT into persona values (10, \"Nueve\"); INSERT into persona values (11, \"Diez\"); INSERT into persona values (12, \"Once\"); INSERT into persona values (13, \"Doce\"); INSERT into persona values (14, \"Trece\"); INSERT into persona values (15, \"Catorce\"); INSERT into persona values (16, \"Quince\"); INSERT into persona values (17, \"Dieciseis\"); INSERT into persona values (18, \"Diecisiete\"); -- despu\u00e9s de ingresar usuario INSERT into persona values (\"Usuario\", 19, \"Luis herrera\", \"1234\", \"l.herrera.garnica@gmail.com\"); select persona0_.id as id1_0_, persona0_.nombre as nombre2_0_ from persona persona0_ limit 3 offset 9; select persona0_.id as id1_0_, persona0_.nombre as nombre2_0_ from persona persona0_ limit 3 offset 4; select persona0_.id as id1_0_, persona0_.nombre as nombre2_0_ from persona persona0_ order by persona0_.id asc limit ? offset ? TODO Realizar el mantenedor de usuarios. (registro el sistema).","title":"Lectura002"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#unidad-32-modelo","text":"La siguiente aplicaci\u00f3n ser\u00e1 finalmente un mantenedor de personas, con un control de acceso de usuarios. Hito 1: Solamente crear el proyecto y modificarlo para que la base de datos SQLITE funcione. Hito 2: Se crean los servicios necesarios, para que funcionen los test (Uso real de Mockito). Hito 3: Creando la web del proyecto.","title":"Unidad 3.2 - Modelo"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#321-aplicacion-jpa","text":"","title":"3.2.1 Aplicaci\u00f3n - JPA"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#hito-1-configuracion-de-la-base-de-datos","text":"Se crea un proyecto spring-boot: 2.2.6 con las siguientes dependencias: Spring-data JPA Lombok Spring Web Spring boot DevToools Tipo de deploy -> war , con esto se crea el ServletInitializer","title":"Hito 1 - Configuraci\u00f3n de la base de datos"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#estructura-final-del-hito","text":"./ \u251c\u2500\u2500 HELP.md \u251c\u2500\u2500 basedatos.db \u251c\u2500\u2500 mvnw \u251c\u2500\u2500 mvnw.cmd \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 jpaspring \u2502 \u2502 \u2502 \u251c\u2500\u2500 AppConfig.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 JpaspringApplication.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 SQLiteDialect.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 ServletInitializer.java \u2502 \u2502 \u251c\u2500\u2500 resources \u2502 \u2502 \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2502 \u2502 \u251c\u2500\u2500 database.properties \u2502 \u2502 \u2502 \u251c\u2500\u2500 static \u2502 \u2502 \u2502 \u2514\u2500\u2500 templates \u2502 \u2502 \u2514\u2500\u2500 webapp \u2502 \u2502 \u2514\u2500\u2500 WEB-INF \u2502 \u2514\u2500\u2500 test \u2502 \u2514\u2500\u2500 java \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 jpaspring \u2502 \u2514\u2500\u2500 JpaspringApplicationTests.java \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2514\u2500\u2500 database.properties \u251c\u2500\u2500 m2e-wtp \u2502 \u2514\u2500\u2500 web-resources \u2502 \u2514\u2500\u2500 META-INF \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 maven \u2502 \u2514\u2500\u2500 cl.lherrera.jpaspring \u2502 \u2514\u2500\u2500 jpaspring \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2514\u2500\u2500 pom.xml \u2514\u2500\u2500 test-classes 25 directories, 18 files","title":"Estructura final del hito."},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#archivos-modificados","text":"","title":"Archivos modificados"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#pomxml","text":"Archivo de dependencias del proyecto. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.6.RELEASE</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>cl.lherrera.jpaspring</groupId> <artifactId>jpaspring</artifactId> <version>20.0.0</version> <packaging>war</packaging> <name>jpaspring</name> <description>proyecto JPA SQLITE</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-jpa</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> <scope>provided</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> <!-- SOPORTE ARCHIVOS JSP --> <dependency> <groupId>org.apache.tomcat.embed</groupId> <artifactId>tomcat-embed-jasper</artifactId> <scope>provided</scope> </dependency> <!-- SOPORTE ARCHIVOS JSP # --> <!-- JSTL --> <dependency> <groupId>javax.servlet</groupId> <artifactId>jstl</artifactId> </dependency> <dependency> <groupId>javax.servlet</groupId> <artifactId>javax.servlet-api</artifactId> </dependency> <!-- JSTL # --> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project>","title":"/pom.xml"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#cllherrerajpaspring","text":"/jpaspring/src/main/java/cl/lherrera/jpaspring/SQLiteDialect.java Archivo necesario para la configuraci\u00f3n de SQLITE para Spring , es un archivo est\u00e1ndar. package cl.lherrera.jpaspring; import java.sql.Types; import org.hibernate.dialect.Dialect; import org.hibernate.dialect.function.StandardSQLFunction; import org.hibernate.dialect.function.SQLFunctionTemplate; import org.hibernate.dialect.function.VarArgsSQLFunction; import org.hibernate.type.StandardBasicTypes; public class SQLiteDialect extends Dialect { public SQLiteDialect() { super(); registerColumnType(Types.BIT, \"integer\"); registerColumnType(Types.TINYINT, \"tinyint\"); registerColumnType(Types.SMALLINT, \"smallint\"); registerColumnType(Types.INTEGER, \"integer\"); registerColumnType(Types.BIGINT, \"bigint\"); registerColumnType(Types.FLOAT, \"float\"); registerColumnType(Types.REAL, \"real\"); registerColumnType(Types.DOUBLE, \"double\"); registerColumnType(Types.NUMERIC, \"numeric\"); registerColumnType(Types.DECIMAL, \"decimal\"); registerColumnType(Types.CHAR, \"char\"); registerColumnType(Types.VARCHAR, \"varchar\"); registerColumnType(Types.LONGVARCHAR, \"longvarchar\"); registerColumnType(Types.DATE, \"date\"); registerColumnType(Types.TIME, \"time\"); registerColumnType(Types.TIMESTAMP, \"timestamp\"); registerColumnType(Types.BINARY, \"blob\"); registerColumnType(Types.VARBINARY, \"blob\"); registerColumnType(Types.LONGVARBINARY, \"blob\"); // registerColumnType(Types.NULL, \"null\"); registerColumnType(Types.BLOB, \"blob\"); registerColumnType(Types.CLOB, \"clob\"); registerColumnType(Types.BOOLEAN, \"integer\"); registerFunction(\"concat\", new VarArgsSQLFunction(StandardBasicTypes.STRING, \"\", \"||\", \"\")); registerFunction(\"mod\", new SQLFunctionTemplate(StandardBasicTypes.INTEGER, \"?1 % ?2\")); registerFunction(\"substr\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); registerFunction(\"substring\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); } public boolean supportsIdentityColumns() { return true; } public boolean hasDataTypeInIdentityColumn() { return false; // As specify in NHibernate dialect } public String getIdentityColumnString() { // return \"integer primary key autoincrement\"; return \"integer\"; } public String getIdentitySelectString() { return \"select last_insert_rowid()\"; } public boolean supportsLimit() { return true; } public String getLimitString(String query, boolean hasOffset) { return new StringBuffer(query.length() + 20).append(query).append( hasOffset ? \" limit ? offset ?\" : \" limit ?\").toString(); } public boolean bindLimitParametersInReverseOrder() { return true; } public boolean supportsTemporaryTables() { return true; } public String getCreateTemporaryTableString() { return \"create temporary table if not exists\"; } public boolean dropTemporaryTableAfterUse() { return false; } public boolean supportsCurrentTimestampSelection() { return true; } public boolean isCurrentTimestampSelectStringCallable() { return false; } public String getCurrentTimestampSelectString() { return \"select current_timestamp\"; } public boolean supportsUnionAll() { return true; } public boolean hasAlterTable() { return false; // As specify in NHibernate dialect } public boolean dropConstraints() { return false; } public String getAddColumnString() { return \"add column\"; } public String getForUpdateString() { return \"\"; } public boolean supportsOuterJoinForUpdate() { return false; } public String getDropForeignKeyString() { throw new UnsupportedOperationException( \"No drop foreign key syntax supported by SQLiteDialect\"); } public String getAddForeignKeyConstraintString(String constraintName, String[] foreignKey, String referencedTable, String[] primaryKey, boolean referencesPrimaryKey) { throw new UnsupportedOperationException( \"No add foreign key syntax supported by SQLiteDialect\"); } public String getAddPrimaryKeyConstraintString(String constraintName) { throw new UnsupportedOperationException( \"No add primary key syntax supported by SQLiteDialect\"); } public boolean supportsIfExistsBeforeTableName() { return true; } public boolean supportsCascadeDelete() { return false; } } /jpaspring/src/main/java/cl/lherrera/jpaspring/AppConfig.java Es donde agregamos la personalizaci\u00f3n de la base de datos, donde la informaci\u00f3n se trae desde un archivo. Esto es debido a que cuando se sube a producci\u00f3n, este ambiente, posee su propio archivo y las credenciales no quedan expuestas. package cl.lherrera.jpaspring; import javax.sql.DataSource; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.PropertySource; import org.springframework.core.env.Environment; import org.springframework.jdbc.datasource.DriverManagerDataSource; @Configuration @ComponentScan(\"cl.lherrera.jpaspring\") @PropertySource(\"classpath:database.properties\") public class AppConfig { @Autowired Environment environment; @Bean DataSource dataSource() { DriverManagerDataSource driverManagerDataSource = new DriverManagerDataSource(); driverManagerDataSource.setUrl(environment.getProperty(\"url\")); driverManagerDataSource.setUsername(environment.getProperty(\"username\")); driverManagerDataSource.setPassword(environment.getProperty(\"dbpassword\")); driverManagerDataSource.setDriverClassName(environment.getProperty(\"driverClassName\")); return driverManagerDataSource; } }","title":"cl.lherrera.jpaspring"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#srcmainresources","text":"/application.properties Se listan las configuraciones de la aplicaci\u00f3n, como por ejemplo el lugar donde ir\u00e1n los archivos JSP, adem\u00e1s de configuraciones para la base de datos. # Configuraci\u00f3n para la vista. (http://localhost:8080/) no es (http://localhost:8080/jpaspring/) # Eso es para un servlet spring.mvc.view.prefix=/WEB-INF/pages/ spring.mvc.view.suffix=.jsp # Permiso para clear el ddl de las entidades spring.jpa.generate-ddl=true # Ejecuta la configuraci\u00f3n de la clase que mapea los tipos de datos. spring.jpa.database-platform=cl.lherrera.jpaspring.SQLiteDialect # Crea la base si no est\u00e1 y cuando finaliza la ejecuci\u00f3n la borra. spring.jpa.hibernate.ddl-auto=create-drop # Muestra las consultas realizadas por el framework y las imprime en el log spring.jpa.show-sql=true # Le da un form\u00e1to legible por un humano para una mejor depuraci\u00f3n en el log. spring.jpa.properties.hibernate.format_sql=true #Pruebas #logging.level.org.hibernate.SQL=debug #logging.level.org.hibernate.type.descriptor.sql=trace /database.properties Este archivo contendr\u00e1 la configuraci\u00f3n de la conexi\u00f3n a la base de datos.\u001c Para el ejemplo se utilizar\u00e1 SQLITE. driverClassName=org.sqlite.JDBC url=jdbc:sqlite:basedatos.db username=jpaspring password=sa","title":"/src/main/resources/"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#basedatosdb","text":"Este archivo no contiene informaci\u00f3n, lo creamos con la extensi\u00f3n , lo abrimos con el cliente DBEAVER \u001d, usando las credenciales. Hasta ahora, solamente podemos ejecutar la aplicaci\u00f3n, sin errores, no comprobamos el funcionamiento.","title":"/basedatos.db"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#hito-2-creando-los-servicios-necesarios-para-la-aplicacion","text":"En esta secci\u00f3n usaremos TDD para poder realizar los servicios con la utilizaci\u00f3n de mockito \u001d, simulamos la interacci\u00f3n con la base de datos. Esto no prueba realmente la base, si no que la simula, as\u00ed que el correcto funcionamiento de la capa de acceso a datos no se prueba con esta t\u00e9cnica.","title":"Hito 2 - Creando los servicios necesarios para la aplicaci\u00f3n."},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#archivos-modificados_1","text":"basedatos.db // no importa siempre se modifica. src/main/java/cl/lherrera/jpaspring/entities/Persona.java src/main/java/cl/lherrera/jpaspring/repositories/PersonaRepo.java src/main/java/cl/lherrera/jpaspring/services/PersonaService.java src/main/java/cl/lherrera/jpaspring/services/PersonaServiceImpl.java src/main/resources/application.properties // ya est\u00e1 el mejor puesto desde el principio src/test/java/cl/lherrera/jpaspring/services/PersonaServiceTest.java","title":"Archivos modificados"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#srctestjavacllherrerajpaspringservices","text":"/PersonaServiceTest.java Primero lo primero, partimos especulando mediante el uso de los test. El mock del DAO permite que el el servicio no use nuestro DAO , si no que el del mock , donde le decimos exactamente que debe traer, con ello verificamos todo el funcionamiento que requiera una simulaci\u00f3n del comportamiento de la base de datos. Si se quiere probar la persistencia, este tipo de test, no son \u00fatiles. Para eso hay que dise\u00f1ar alguno que use realmente la base, con una base de datos de prueba. package cl.lherrera.jpaspring.services; import static org.assertj.core.api.Assertions.assertThat; import static org.mockito.Mockito.when; import java.util.ArrayList; import java.util.List; import java.util.Optional; import org.junit.jupiter.api.DisplayName; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.context.SpringBootTest; import org.springframework.boot.test.mock.mockito.MockBean; import cl.lherrera.jpaspring.entities.Persona; import cl.lherrera.jpaspring.repositories.PersonaRepo; @SpringBootTest public class PersonaServiceTest { @Autowired PersonaService servicio; @MockBean PersonaRepo mockRepo; @Test @DisplayName(\"Buscar personas por nombre\") public void prueba005() { // crear la persona en la base mockdatos List<Persona> personas = new ArrayList<>(); personas.add(new Persona(1, \"luis\")); personas.add(new Persona(2, \"luis\")); when(mockRepo.findAllByNombre(\"luis\")).thenReturn(personas); // comprobamos la persona assertThat(personas).isEqualTo(servicio.obtenerPersonasPorNombre(\"luis\")); } @Test @DisplayName(\"obtener una lista de las personas\") public void prueba004() { // una lista de personas List<Persona> personas = new ArrayList<>(); personas.add(new Persona(1, \"luis\")); personas.add(new Persona(2, \"ana\")); // simular petici\u00f3n en la base de datos when((List<Persona>)mockRepo.findAll()).thenReturn(personas); assertThat(personas).isEqualTo(servicio.obtenerPersonas()); } @Test @DisplayName(\"almacenar persona\") public void prueba001() { // creamos el dato en memoria Persona persona = new Persona(1, \"luis\"); // simulaci\u00f3n de dato en la base de datos when(mockRepo.save(persona)).thenReturn(persona); // funcionamiento del servicio. (se ejecuta el mockRepo y no // el repo que est\u00e1 en su clase, el que llama a // la base datos as\u00ed esta petici\u00f3n // se simula sin escribir // realmente en la BD assertThat(servicio.IngresarPersona(persona)).isEqualTo(persona); } @Test @DisplayName(\"actualizar una persona\") public void prueba002() { // creamos la persona Persona persona = new Persona(1, \"Luis\"); // se simula persona encontrada when(mockRepo.findById(1)).thenReturn(Optional.of(persona)); Persona personaUdt = servicio.encontrarPersona(1); // se actualiza el valor. se puede ver que la primera simulaci\u00f3n // tuvo efecto, el mockRepo actu\u00f3 como el repositorio // oficial ya que usamos el servicio para traer // la persona usando el servicio. personaUdt.setNombre(\"Ana\"); // simulaci\u00f3n de actualizaci\u00f3n (es el repo el que simulamos y // save(cuando existe actualiza o crea) when(mockRepo.save(personaUdt)).thenReturn(personaUdt); assertThat(servicio.actualizarPersona(personaUdt).getNombre()).isEqualTo(\"Ana\"); } @Test @DisplayName(\"eliminar persona\") public void prueba003() { // encontrar la perosona para eliminarla ya que esta // debe existir en la base de datos. when(mockRepo.findById(1)) .thenReturn(Optional.of(new Persona(1, \"luis\"))); // con la base de datos simulada, utlizamos el servicio. Persona persona = servicio.encontrarPersona(1); // simulamos la interacci\u00f3n de la base de datos when(mockRepo.myDeleteById(1)).thenReturn(Optional.of(persona)); // ocupamos el servicio Persona personaEliminada = servicio.eliminarPersona(persona); assertThat(personaEliminada.getId()).isEqualTo(persona.getId()); } }","title":"/src/test/java/cl/lherrera/jpaspring/services"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#srcmainjavacllherrerajpaspringentities","text":"/Persona.java Entidad encargada de llevar el registro de la base, adem\u00e1s es la gu\u00eda para la creaci\u00f3n del DDL . package cl.lherrera.jpaspring.entities; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; @Entity public class Persona { @Id @GeneratedValue(strategy=GenerationType.AUTO) // https://www.objectdb.com/java/jpa/entity/generated private Integer id; private String nombre; public Persona() {} public Persona(Integer id, String nombre) { this.id = id; this.nombre = nombre; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } }","title":"/src/main/java/cl/lherrera/jpaspring/entities"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#jpaspringsrcmainjavacllherrerajpaspringrepositories","text":"Like a DAO. /PersonaRepo.java Esta es la magia de JPA. con solamente extender la interfaz JpaRepository , tenemos un crud armado, \u001c PagingAndSortingRepository , posibilita la paginaci\u00f3n que veremos m\u00e1s adelante. No se necesita implementar, Spring se encarga de esto. Si necesitamos personalizar una consulta lo podemos hacer con una anotaci\u00f3n en la misma interfaz. Esta interfaz es lo m\u00e1s parecido al dao que est\u00e1bamos acostumbrados, de hecho, a veces lo veremos en los paquetes dao , lo cual no est\u00e1 incorrecto, por que esta es precisamente la capa de acceso a los datos. package cl.lherrera.jpaspring.repositories; import java.util.List; import java.util.Optional; import org.springframework.data.jpa.repository.Query; import org.springframework.data.repository.CrudRepository; import cl.lherrera.jpaspring.entities.Persona; public interface PersonaRepo extends CrudRepository<Persona, Integer> { /** * Se puede parecer mucho a una consulta en la base de datos pero es una * consulta al modelo, la respuesta es un @Entity. por eso la \"tabla\" est\u00e1 en * may\u00fasculas. * * Eso es debido a que no renemos un PersonaRepoImpl que maneje la * personalizaci\u00f3n de esta consulta y como la original delete, retorna void no * es muy buena para hacer test ya que no tenemos contra qu\u00e9 validar si * simulamos la base de datos * */ @Query(\"DELETE FROM Persona WHERE id = ?1\") Optional<Persona> myDeleteById(Integer id); // no posee un nombre personalizado, cumple con la nomenclatura find // debe ir aunque siga la nomenclatura List<Persona> findAllByNombre(String nombre); }","title":"/jpaspring/src/main/java/cl/lherrera/jpaspring/repositories"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#srcmainjavacllherrerajpaspringservices","text":"/PersonaService.java Interfaz de los servicios que se desarrollar\u00e1n. package cl.lherrera.jpaspring.services; import java.util.List; import cl.lherrera.jpaspring.entities.Persona; public interface PersonaService { List<Persona> obtenerPersonas(); List<Persona> obtenerPersonasPorNombre(String nombre); Persona IngresarPersona(Persona persona); Persona encontrarPersona(Integer id); Persona eliminarPersona(Persona persona); Persona actualizarPersona(Persona persona); } /PersonaServiceImpl.java Implementaci\u00f3n de los servicios. package cl.lherrera.jpaspring.services; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import cl.lherrera.jpaspring.entities.Persona; import cl.lherrera.jpaspring.repositories.PersonaRepo; @Service public class PersonaServiceImpl implements PersonaService{ @Autowired PersonaRepo repo; @Override public List<Persona> obtenerPersonas() { return (List<Persona>) repo.findAll(); } @Override public List<Persona> obtenerPersonasPorNombre(String nombre) { return repo.findAllByNombre(nombre); } @Override public Persona encontrarPersona(Integer id) { // as\u00ed nos evitamos un null pointer exception return repo.findById(id).orElse(new Persona()); } @Override public Persona eliminarPersona(Persona persona) { return repo.myDeleteById(persona.getId()).orElse(new Persona()); } @Override public Persona actualizarPersona(Persona persona) { return repo.save(persona); } @Override public Persona IngresarPersona(Persona persona) { return repo.save(persona); } }","title":"/src/main/java/cl/lherrera/jpaspring/services"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#hito-3-crud-con-web","text":"Los servicios que se implementaron, ahora tendr\u00e1n forma en la web. Veremos como trabaja Spring la parte visual utilizando jsp .","title":"Hito 3 - CRUD con web."},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#archivos-modificados_2","text":"src/main/java/cl/lherrera/jpaspring/controllers/AplicationController.java src/main/java/cl/lherrera/jpaspring/controllers/PersonaController.java src/main/java/cl/lherrera/jpaspring/repositories/PersonaRepo.java src/main/java/cl/lherrera/jpaspring/services/PersonaServiceImpl.java src/main/resources/application.properties src/main/webapp/WEB-INF/index.jsp src/main/webapp/WEB-INF/pages/index.jsp src/main/webapp/WEB-INF/pages/htmlTemplates/footerTemplate.jsp src/main/webapp/WEB-INF/pages/htmlTemplates/headTemplate.jsp src/main/webapp/WEB-INF/pages/htmlTemplates/navTemplate.jsp src/main/webapp/WEB-INF/pages/personas/actualizar.jsp src/main/webapp/WEB-INF/pages/personas/eliminar.jsp src/main/webapp/WEB-INF/pages/personas/personas.jsp src/test/java/cl/lherrera/jpaspring/services/PersonaServiceTest.java","title":"Archivos modificados:"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#srcmainjavacllherrerajpaspringcontrollers","text":"/AplicationController.java package cl.lherrera.jpaspring.controllers; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; @Controller public class AplicationController { private static final Logger logger = LoggerFactory.getLogger(AplicationController.class); @GetMapping(\"/\") public String home() { logger.info(\"llamada a : '/'\"); return \"index\"; } } /PersonaController.java package cl.lherrera.jpaspring.controllers; import java.util.List; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpStatus; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.ResponseStatus; import org.springframework.web.servlet.mvc.support.RedirectAttributes; import cl.lherrera.jpaspring.entities.Persona; import cl.lherrera.jpaspring.services.PersonaService; @Controller @RequestMapping(\"/personas\") public class PersonaController { private static final Logger logger = LoggerFactory.getLogger(PersonaController.class); @Autowired PersonaService servicio; @GetMapping(\"/ingresar\") @ResponseStatus(code = HttpStatus.OK) public String inicio(Model modelo) { logger.info(\"Petici\u00f3n: /personas/\"); List<Persona> personas = servicio.obtenerPersonas(); modelo.addAttribute(\"personas\", personas); return \"personas/personas\"; } // @ResponseStatus(code = HttpStatus.CREATED) // con esto no funciona el redirect @PostMapping(\"/ingresar\") public String ingresar( @ModelAttribute(\"foo\") Persona persona, @RequestParam String nombre, RedirectAttributes attributes) { logger.info(\"Petici\u00f3n post /ingresar\"); Persona respuesta = servicio.IngresarPersona(persona); if(persona == null) logger.error(\"error en ingreso de persona\"); return \"redirect:ingresar\"; } @GetMapping(\"/actualizar\") public String actualizar( Model modelo, @RequestParam String id) { logger.info(\"Petici\u00f3n-GET: /actualizar\"); Persona persona = servicio.encontrarPersona(Integer.parseInt(id)); modelo.addAttribute(\"persona\", persona); return \"personas/actualizar\"; } // el formulario debe estar completo con los names, para que lo // reconozca como la misma entidad y no una nueva @PostMapping(\"/actualizar\") public String doActualizar(@ModelAttribute(\"foo\") Persona persona) { logger.info(\"Petici\u00f3n-POST: /actualizar\"); servicio.actualizarPersona(persona); return \"redirect:ingresar\"; } @GetMapping(\"/eliminar\") public String eliminar( Model modelo, @RequestParam String id) { logger.info(\"Petici\u00f3n-GET: /eliminar\"); Persona persona = servicio.encontrarPersona(Integer.parseInt(id)); modelo.addAttribute(\"persona\", persona); return \"personas/eliminar\"; } @PostMapping(\"/eliminar\") public String doEliminar( @ModelAttribute(\"foo\") Persona persona, @RequestParam String id) { logger.info(\"Petici\u00f3n-POST: /eliminar\"); Persona respuesta = servicio.eliminarPersona(persona); if(respuesta == null) logger.info(\"Petici\u00f3n-POST: /eliminar\"); return \"redirect:ingresar\"; } }","title":"src/main/java/cl/lherrera/jpaspring/controllers/"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#srcmainjavacllherrerajpaspringrepositories","text":"/PersonaRepo.java package cl.lherrera.jpaspring.repositories; import java.util.List; import java.util.Optional; import org.springframework.data.jpa.repository.Modifying; import org.springframework.data.jpa.repository.Query; import org.springframework.data.repository.CrudRepository; import cl.lherrera.jpaspring.entities.Persona; public interface PersonaRepo extends CrudRepository<Persona, Integer> { /** * Se puede parecer mucho a una consulta en la base de datos pero es una * consulta al modelo, la respuesta es un @Entity. por eso la \"tabla\" est\u00e1 en * may\u00fasculas. * * Eso es debido a que no renemos un PersonaRepoImpl que maneje la * personalizaci\u00f3n de esta consulta y como la original delete, retorna void no * es muy buena para hacer test ya que no tenemos contra qu\u00e9 validar si * simulamos la base de datos. * * En el fondo es solamente un deleteById(), pero se expone para su ejemplo * Que podemos aplicar queries a las entidades. * */ @Modifying @Query(\"DELETE FROM Persona WHERE id = ?1\") Integer myDeleteById(Integer id); // no posee un nombre personalizado, cumple con la nomenclatura find // debe ir aunque siga la nomenclatura List<Persona> findAllByNombre(String nombre); }","title":"src/main/java/cl/lherrera/jpaspring/repositories"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#srcmainjavacllherrerajpaspringservices_1","text":"/PersonaServiceImpl.java package cl.lherrera.jpaspring.services; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional; import cl.lherrera.jpaspring.entities.Persona; import cl.lherrera.jpaspring.repositories.PersonaRepo; @Service public class PersonaServiceImpl implements PersonaService{ @Autowired PersonaRepo repo; @Override @Transactional(readOnly = true) public List<Persona> obtenerPersonas() { return (List<Persona>) repo.findAll(); } @Override @Transactional(readOnly = true) public List<Persona> obtenerPersonasPorNombre(String nombre) { return repo.findAllByNombre(nombre); } @Override @Transactional(readOnly = true) public Persona encontrarPersona(Integer id) { // as\u00ed nos evitamos un null pointer exception return repo.findById(id).orElse(new Persona()); } @Override @Transactional public Persona eliminarPersona(Persona persona) { int numeroQueAunNoSeOcupa = repo.myDeleteById(persona.getId()); return persona; } @Override @Transactional public Persona actualizarPersona(Persona persona) { return repo.save(persona); } @Override @Transactional public Persona IngresarPersona(Persona persona) { return repo.save(persona); } }","title":"src/main/java/cl/lherrera/jpaspring/services"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#srcmainwebappweb-inf","text":"/index.jsp \u001c Eliminado /pages/index.jsp \u001c <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@taglib uri=\"http://www.springframework.org/tags/form\" prefix=\"form\"%> <%@taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%> <!DOCTYPE html> <html> <jsp:include page=\"htmlTemplates/headTemplate.jsp\"></jsp:include> <body> <jsp:include page=\"htmlTemplates/navTemplate.jsp\"></jsp:include> <h1>Inicio de la web</h1> <jsp:include page=\"htmlTemplates/footerTemplate.jsp\"></jsp:include> </body> </html> /pages/htmlTemplates/footerTemplate.jsp <footer> <!-- bootstrap 4 --> <script src=\"https://code.jquery.com/jquery-3.4.1.slim.min.js\" integrity=\"sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n\" crossorigin=\"anonymous\"></script> <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js\" integrity=\"sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo\" crossorigin=\"anonymous\"></script> <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js\" integrity=\"sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6\" crossorigin=\"anonymous\"></script> <!-- bootstrap #--> </footer> /pages/htmlTemplates/headTemplate.jsp <!-- Este template, est\u00e1 dise\u00f1ado para mantener la cabecera del sitio --> <!-- unificada en una sola, ya que la comparten. --> <head> <meta charset=\"UTF-8\"> <title>FPA-EJEMPLO</title> <!-- cdn bootstrap 4 --> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\"> <!-- cdn bootstrap 4 #--> </head> /pages/htmlTemplates/navTemplate.jsp <nav class=\"navbar navbar-expand-lg navbar-light bg-light\"> <a class=\"navbar-brand\" href=\"#\">JPA-EJEMPLO</a> <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"> <span class=\"navbar-toggler-icon\"></span> </button> <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\"> <ul class=\"navbar-nav mr-auto\"> <!-- Home --> <li class=\"nav-item active\"><a class=\"nav-link\" href=\"/\">Home <span class=\"sr-only\">(current)</span> </a></li> <!-- Home #--> <li class=\"nav-item dropdown\"> <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"> Mantenedor de personas </a> <div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\"> <a class=\"dropdown-item\" href=\"/personas/ingresar\">Ingresar</a> </div> </li> </ul> </div> </nav> /pages/personas/actualizar.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@taglib uri=\"http://www.springframework.org/tags/form\" prefix=\"form\"%> <%@taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%> <html> <jsp:include page=\"../htmlTemplates/headTemplate.jsp\"></jsp:include> <body> <jsp:include page=\"../htmlTemplates/navTemplate.jsp\"></jsp:include> <div class=\"container\"> <div class=\"row\"> <div class=\"col\"> <form:form class=\"form-horizontal\" method=\"post\" action=\"/personas/actualizar\" modelAttribute=\"Persona\"> <div class=\"form-group\"> <label for=\"nombre\">Nombre</label> <input type=\"hidden\" name=\"id\" value=\"${persona.getId()}\"> <input type=\"text\" class=\"form-control\" id=\"nombre\" name=\"nombre\" value=\"${persona.getNombre()}\"> </div> <a href=\"/personas/ingresar\" class=\"btn btn-primary mb-2\" role=\"button\" aria-pressed=\"true\">Cancelar</a> <button type=\"submit\" class=\"btn btn-warning mb-2\">Actualizar</button> </form:form> </div> </div> </div> <jsp:include page=\"../htmlTemplates/footerTemplate.jsp\"></jsp:include> </body> </html> /pages/personas/eliminar.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@taglib uri=\"http://www.springframework.org/tags/form\" prefix=\"form\"%> <%@taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%> <html> <jsp:include page=\"../htmlTemplates/headTemplate.jsp\"></jsp:include> <body> <jsp:include page=\"../htmlTemplates/navTemplate.jsp\"></jsp:include> <div class=\"container\"> <div class=\"row\"> <div class=\"col\"> <form:form class=\"form-horizontal\" method=\"post\" action=\"/personas/eliminar\" modelAttribute=\"Persona\"> <div class=\"form-group\"> <label for=\"nombre\">Nombre</label> <input type=\"hidden\" name=\"id\" value=\"${persona.getId()}\"> <input type=\"text\" class=\"form-control\" id=\"nombre\" name=\"nombre\" disabled disabled value=\"${persona.getNombre()}\"> </div> <a href=\"/personas/ingresar\" class=\"btn btn-primary mb-2\" role=\"button\" aria-pressed=\"true\">Cancelar</a> <button type=\"submit\" class=\"btn btn-danger mb-2\">Confirmar</button> </form:form> </div> </div> </div> <jsp:include page=\"../htmlTemplates/footerTemplate.jsp\"></jsp:include> </body> </html> /pages/personas/personas.jsp <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@taglib uri=\"http://www.springframework.org/tags/form\" prefix=\"form\"%> <%@taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%> <!DOCTYPE html> <html> <jsp:include page=\"../htmlTemplates/headTemplate.jsp\"></jsp:include> <body> <jsp:include page=\"../htmlTemplates/navTemplate.jsp\"></jsp:include> <div class=\"container\"> <div class=\"row\"> <div class=\"col\"> <form:form class=\"form-horizontal\" method=\"post\" action=\"/personas/ingresar\" modelAttribute=\"Persona\"> <div class=\"form-group\"> <label for=\"nombre\">Nombre</label> <input type=\"text\" class=\"form-control\" id=\"nombre\" name=\"nombre\" placeholder=\"Ingrese el nombre\"> </div> <button type=\"submit\" class=\"btn btn-primary mb-2\">Ingresar</button> </form:form> <div class=\"table-responsive\"> <table class=\"table table-hover table-striped table-bordered\"> <tr> <th>Id</th> <th>Nombre</th> <th>Acci\u00f3n</th> </tr> <c:forEach items=\"${personas}\" var=\"persona\"> <tr> <td>${persona.getId()}</td> <td>${persona.getNombre()}</td> <td> <a href=\"/personas/actualizar?id=${persona.getId()}\">Actualizar</a> | <a href=\"/personas/eliminar?id=${persona.getId()}\" >Elimininar</a> </td> </tr> </c:forEach> </table> </div> </div> </div> </div> <jsp:include page=\"../htmlTemplates/footerTemplate.jsp\"></jsp:include> </body> </html>","title":"src/main/webapp/WEB-INF"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#srctestjavacllherrerajpaspringservices_1","text":"/PersonaServiceTest.java \u001c package cl.lherrera.jpaspring.services; import static org.assertj.core.api.Assertions.assertThat; import static org.mockito.Mockito.when; import java.util.ArrayList; import java.util.List; import java.util.Optional; import org.junit.jupiter.api.DisplayName; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.context.SpringBootTest; import org.springframework.boot.test.mock.mockito.MockBean; import cl.lherrera.jpaspring.entities.Persona; import cl.lherrera.jpaspring.repositories.PersonaRepo; @SpringBootTest public class PersonaServiceTest { @Autowired PersonaService servicio; @MockBean PersonaRepo mockRepo; @Test @DisplayName(\"Buscar personas por nombre\") public void prueba005() { // crear la persona en la base mockdatos List<Persona> personas = new ArrayList<>(); personas.add(new Persona(1, \"luis\")); personas.add(new Persona(2, \"luis\")); when(mockRepo.findAllByNombre(\"luis\")).thenReturn(personas); // comprobamos la persona assertThat(personas).isEqualTo(servicio.obtenerPersonasPorNombre(\"luis\")); } @Test @DisplayName(\"obtener una lista de las personas\") public void prueba004() { // una lista de personas List<Persona> personas = new ArrayList<>(); personas.add(new Persona(1, \"luis\")); personas.add(new Persona(2, \"ana\")); // simular petici\u00f3n en la base de datos when((List<Persona>)mockRepo.findAll()).thenReturn(personas); assertThat(personas).isEqualTo(servicio.obtenerPersonas()); } @Test @DisplayName(\"almacenar persona\") public void prueba001() { // creamos el dato en memoria Persona persona = new Persona(1, \"luis\"); // simulaci\u00f3n de dato en la base de datos when(mockRepo.save(persona)).thenReturn(persona); // funcionamiento del servicio. (se ejecuta el mockRepo y no // el repo que est\u00e1 en su clase, el que llama a // la base datos as\u00ed esta petici\u00f3n // se simula sin escribir // realmente en la BD assertThat(servicio.IngresarPersona(persona)).isEqualTo(persona); } @Test @DisplayName(\"actualizar una persona\") public void prueba002() { // creamos la persona Persona persona = new Persona(1, \"Luis\"); // se simula persona encontrada when(mockRepo.findById(1)).thenReturn(Optional.of(persona)); Persona personaUdt = servicio.encontrarPersona(1); // se actualiza el valor. se puede ver que la primera simulaci\u00f3n // tuvo efecto, el mockRepo actu\u00f3 como el repositorio // oficial ya que usamos el servicio para traer // la persona usando el servicio. personaUdt.setNombre(\"Ana\"); // simulaci\u00f3n de actualizaci\u00f3n (es el repo el que simulamos y // save(cuando existe actualiza o crea) when(mockRepo.save(personaUdt)).thenReturn(personaUdt); assertThat(servicio.actualizarPersona(personaUdt).getNombre()).isEqualTo(\"Ana\"); } @Test @DisplayName(\"eliminar persona\") public void prueba003() { // encontrar la perosona para eliminarla ya que esta // debe existir en la base de datos. when(mockRepo.findById(1)) .thenReturn(Optional.of(new Persona(1, \"luis\"))); // con la base de datos simulada, utlizamos el servicio. Persona persona = servicio.encontrarPersona(1); // simulamos la interacci\u00f3n de la base de datos when(mockRepo.myDeleteById(1)).thenReturn(1); // ocupamos el servicio Persona personaEliminada = servicio.eliminarPersona(persona); assertThat(personaEliminada.getId()).isEqualTo(persona.getId()); } }","title":"src/test/java/cl/lherrera/jpaspring/services"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#hito-4-creando-resultados-paginados","text":"En diferentes ocaciones, podremos usar alg\u00fan componente como datatable de javascript para poder crear tablas de resultados, pero vamos a aprender a dise\u00f1arla personalizada mente con Java y Spring \u001d.","title":"Hito 4 - Creando resultados paginados."},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#archivos-modificados_3","text":"basedatos.db pom.xml src/main/java/cl/lherrera/jpaspring/JpaspringApplication.java src/main/java/cl/lherrera/jpaspring/SQLiteDialect.java src/main/java/cl/lherrera/jpaspring/controllers/PersonaController.java src/main/java/cl/lherrera/jpaspring/dtos/PersonaDTO.java src/main/java/cl/lherrera/jpaspring/entities/Persona.java src/main/java/cl/lherrera/jpaspring/repositories/PersonaRepo.java src/main/java/cl/lherrera/jpaspring/services/PersonaService.java src/main/java/cl/lherrera/jpaspring/services/PersonaServiceImpl.java src/main/resources/application.properties src/main/webapp/WEB-INF/pages/personas/personas.jsp","title":"Archivos modificados:"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#pomxml_1","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.6.RELEASE</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>cl.lherrera.jpaspring</groupId> <artifactId>jpaspring</artifactId> <version>20.0.0</version> <packaging>war</packaging> <name>jpaspring</name> <description>proyecto JPA SQLITE</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-jpa</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> <scope>provided</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> <!-- SOPORTE ARCHIVOS JSP --> <dependency> <groupId>org.apache.tomcat.embed</groupId> <artifactId>tomcat-embed-jasper</artifactId> <scope>provided</scope> </dependency> <!-- SOPORTE ARCHIVOS JSP # --> <!-- JSTL --> <dependency> <groupId>javax.servlet</groupId> <artifactId>jstl</artifactId> </dependency> <dependency> <groupId>javax.servlet</groupId> <artifactId>javax.servlet-api</artifactId> </dependency> <!-- JSTL # --> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project>","title":"pom.xml"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#srcmainjavacllherrerajpaspringjpaspringapplicationjava","text":"package cl.lherrera.jpaspring; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.context.annotation.Bean; import org.springframework.boot.CommandLineRunner; @SpringBootApplication public class JpaspringApplication { public static void main(String[] args) { SpringApplication.run(JpaspringApplication.class, args); } // @Bean // public CommandLineRunner demo(PersonaServiceImpl servicio) { // return (args) -> { // servicio.obtenerPersonasPaginadas(0, 3); // }; // } }","title":"src/main/java/cl/lherrera/jpaspring/JpaspringApplication.java"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#srcmainjavacllherrerajpaspringsqlitedialectjava","text":"Esto ya estaba solucionado, pero prosaicos lo pongo. package cl.lherrera.jpaspring; import java.sql.Types; import org.hibernate.dialect.Dialect; import org.hibernate.dialect.function.StandardSQLFunction; import org.hibernate.dialect.function.SQLFunctionTemplate; import org.hibernate.dialect.function.VarArgsSQLFunction; import org.hibernate.type.StandardBasicTypes; import org.hibernate.Hibernate; public class SQLiteDialect extends Dialect { public SQLiteDialect() { super(); registerColumnType(Types.BIT, \"integer\"); registerColumnType(Types.TINYINT, \"tinyint\"); registerColumnType(Types.SMALLINT, \"smallint\"); registerColumnType(Types.INTEGER, \"integer\"); registerColumnType(Types.BIGINT, \"bigint\"); registerColumnType(Types.FLOAT, \"float\"); registerColumnType(Types.REAL, \"real\"); registerColumnType(Types.DOUBLE, \"double\"); registerColumnType(Types.NUMERIC, \"numeric\"); registerColumnType(Types.DECIMAL, \"decimal\"); registerColumnType(Types.CHAR, \"char\"); registerColumnType(Types.VARCHAR, \"varchar\"); registerColumnType(Types.LONGVARCHAR, \"longvarchar\"); registerColumnType(Types.DATE, \"date\"); registerColumnType(Types.TIME, \"time\"); registerColumnType(Types.TIMESTAMP, \"timestamp\"); registerColumnType(Types.BINARY, \"blob\"); registerColumnType(Types.VARBINARY, \"blob\"); registerColumnType(Types.LONGVARBINARY, \"blob\"); // registerColumnType(Types.NULL, \"null\"); registerColumnType(Types.BLOB, \"blob\"); registerColumnType(Types.CLOB, \"clob\"); registerColumnType(Types.BOOLEAN, \"integer\"); registerFunction(\"concat\", new VarArgsSQLFunction(StandardBasicTypes.STRING, \"\", \"||\", \"\")); registerFunction(\"mod\", new SQLFunctionTemplate(StandardBasicTypes.INTEGER, \"?1 % ?2\")); registerFunction(\"substr\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); registerFunction(\"substring\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); } public boolean supportsIdentityColumns() { return true; } public boolean hasDataTypeInIdentityColumn() { return false; // As specify in NHibernate dialect } public String getIdentityColumnString() { // return \"integer primary key autoincrement\"; return \"integer\"; } public String getIdentitySelectString() { return \"select last_insert_rowid()\"; } public boolean supportsLimit() { return true; } public String getLimitString(String query, boolean hasOffset) { return new StringBuffer(query.length() + 20).append(query).append( hasOffset ? \" limit ? offset ?\" : \" limit ?\").toString(); } public boolean bindLimitParametersInReverseOrder() { return true; } public boolean supportsTemporaryTables() { return true; } public String getCreateTemporaryTableString() { return \"create temporary table if not exists\"; } public boolean dropTemporaryTableAfterUse() { return false; } public boolean supportsCurrentTimestampSelection() { return true; } public boolean isCurrentTimestampSelectStringCallable() { return false; } public String getCurrentTimestampSelectString() { return \"select current_timestamp\"; } public boolean supportsUnionAll() { return true; } public boolean hasAlterTable() { return false; // As specify in NHibernate dialect } public boolean dropConstraints() { return false; } public String getAddColumnString() { return \"add column\"; } public String getForUpdateString() { return \"\"; } public boolean supportsOuterJoinForUpdate() { return false; } public String getDropForeignKeyString() { throw new UnsupportedOperationException( \"No drop foreign key syntax supported by SQLiteDialect\"); } public String getAddForeignKeyConstraintString(String constraintName, String[] foreignKey, String referencedTable, String[] primaryKey, boolean referencesPrimaryKey) { throw new UnsupportedOperationException( \"No add foreign key syntax supported by SQLiteDialect\"); } public String getAddPrimaryKeyConstraintString(String constraintName) { throw new UnsupportedOperationException( \"No add primary key syntax supported by SQLiteDialect\"); } public boolean supportsIfExistsBeforeTableName() { return true; } public boolean supportsCascadeDelete() { return false; } }","title":"src/main/java/cl/lherrera/jpaspring/SQLiteDialect.java"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#srcmainjavacllherrerajpaspringcontrollerspersonacontrollerjava","text":"package cl.lherrera.jpaspring.controllers; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpStatus; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.ResponseStatus; import org.springframework.web.servlet.mvc.support.RedirectAttributes; import cl.lherrera.jpaspring.dtos.PersonaDTO; import cl.lherrera.jpaspring.entities.Persona; import cl.lherrera.jpaspring.services.PersonaService; @Controller @RequestMapping(\"/personas\") public class PersonaController { private static final Logger logger = LoggerFactory.getLogger(PersonaController.class); private static final Integer FILAS_POR_PAGINA = 3; @Autowired PersonaService servicio; @GetMapping(\"/ingresar\") @ResponseStatus(code = HttpStatus.OK) public String inicio( Model modelo, @RequestParam(required = false) Integer pagina) { logger.info(\"Petici\u00f3n: /personas/ingresar\"); // si no viene la p\u00e1gina, se simula la primera, el m\u00e9todo PageRequest.of(pagina // pide que la primera sea cero; pero esto es manejado por el servicio // en el controlador sabemos que la primera p\u00e1gina es la 1, si esto no es // as\u00ed, el servicio lo debe manejar if(pagina == null) pagina = 1; PersonaDTO dtoPersona = servicio.obtenerPersonasPaginadas(pagina, FILAS_POR_PAGINA); modelo.addAttribute(\"dtoPersona\", dtoPersona); // si no hay m\u00e1s de una p\u00e1gina, no es necesario paginar modelo.addAttribute(\"paginar\", dtoPersona.getPaginas().size() > 1); return \"personas/personas\"; } // @ResponseStatus(code = HttpStatus.CREATED) // con esto no funciona el redirect @PostMapping(\"/ingresar\") public String ingresar( @ModelAttribute(\"foo\") Persona persona, @RequestParam String nombre, RedirectAttributes attributes) { logger.info(\"Petici\u00f3n post /ingresar\"); // sin usar el retorno a\u00fan Persona respuesta = servicio.IngresarPersona(persona); if(persona == null) logger.error(\"error en ingreso de persona\"); return \"redirect:ingresar\"; } @GetMapping(\"/actualizar\") public String actualizar( Model modelo, @RequestParam String id) { logger.info(\"Petici\u00f3n-GET: /actualizar\"); Persona persona = servicio.encontrarPersona(Integer.parseInt(id)); modelo.addAttribute(\"persona\", persona); return \"personas/actualizar\"; } // el formulario debe estar completo con los names, para que lo // reconozca como la misma entidad y no una nueva @PostMapping(\"/actualizar\") public String doActualizar(@ModelAttribute(\"foo\") Persona persona) { logger.info(\"Petici\u00f3n-POST: /actualizar\"); servicio.actualizarPersona(persona); return \"redirect:ingresar\"; } @GetMapping(\"/eliminar\") public String eliminar( Model modelo, @RequestParam String id) { logger.info(\"Petici\u00f3n-GET: /eliminar\"); Persona persona = servicio.encontrarPersona(Integer.parseInt(id)); modelo.addAttribute(\"persona\", persona); return \"personas/eliminar\"; } @PostMapping(\"/eliminar\") public String doEliminar( @ModelAttribute(\"foo\") Persona persona, @RequestParam String id) { logger.info(\"Petici\u00f3n-POST: /eliminar\"); Persona respuesta = servicio.eliminarPersona(persona); if(respuesta == null) logger.info(\"Petici\u00f3n-POST: /eliminar\"); return \"redirect:ingresar\"; } }","title":"src/main/java/cl/lherrera/jpaspring/controllers/PersonaController.java"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#srcmainjavacllherrerajpaspringdtospersonadtojava","text":"package cl.lherrera.jpaspring.dtos; import java.util.List; import cl.lherrera.jpaspring.entities.Persona; public class PersonaDTO { private List<Persona> personas; private List<Integer> paginas; private Integer paginaActual; public List<Persona> getPersonas() { return personas; } public void setPersonas(List<Persona> personas) { this.personas = personas; } public List<Integer> getPaginas() { return paginas; } public void setPaginas(List<Integer> paginas) { this.paginas = paginas; } public Integer getPaginaActual() { return paginaActual; } public void setPaginaActual(Integer paginaActual) { this.paginaActual = paginaActual; } @Override public String toString() { return \"PersonaDTO [personas=\" + personas + \", paginas=\" + paginas + \", paginaActual=\" + paginaActual + \"]\"; } }","title":"src/main/java/cl/lherrera/jpaspring/dtos/PersonaDTO.java"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#srcmainjavacllherrerajpaspringentitiespersonajava","text":"package cl.lherrera.jpaspring.entities; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; @Entity public class Persona { @Id @GeneratedValue(strategy=GenerationType.AUTO) // https://www.objectdb.com/java/jpa/entity/generated private Integer id; private String nombre; public Persona() {} public Persona(Integer id, String nombre) { this.id = id; this.nombre = nombre; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } @Override public String toString() { return \"Persona [id=\" + id + \", nombre=\" + nombre + \"]\"; } }","title":"src/main/java/cl/lherrera/jpaspring/entities/Persona.java"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#srcmainjavacllherrerajpaspringrepositoriespersonarepojava","text":"package cl.lherrera.jpaspring.repositories; import java.util.List; import org.springframework.data.jpa.repository.JpaRepository; import org.springframework.data.jpa.repository.Modifying; import org.springframework.data.jpa.repository.Query; import org.springframework.data.repository.CrudRepository; import org.springframework.data.repository.PagingAndSortingRepository; import cl.lherrera.jpaspring.entities.Persona; public interface PersonaRepo extends JpaRepository<Persona, Integer>, PagingAndSortingRepository<Persona, Integer> { /** * Se puede parecer mucho a una consulta en la base de datos pero es una * consulta al modelo, la respuesta es un @Entity. por eso la \"tabla\" est\u00e1 en * may\u00fasculas. * * Eso es debido a que no renemos un PersonaRepoImpl que maneje la * personalizaci\u00f3n de esta consulta y como la original delete, retorna void no * es muy buena para hacer test ya que no tenemos contra qu\u00e9 validar si * simulamos la base de datos. * * En el fondo es solamente un deleteById(), pero se expone para su ejemplo * Que podemos aplicar queries a las entidades. * */ @Modifying @Query(\"DELETE FROM Persona WHERE id = ?1\") Integer myDeleteById(Integer id); // no posee un nombre personalizado, cumple con la nomenclatura find // debe ir aunque siga la nomenclatura List<Persona> findAllByNombre(String nombre); }","title":"src/main/java/cl/lherrera/jpaspring/repositories/PersonaRepo.java"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#srcmainjavacllherrerajpaspringservicespersonaservicejava","text":"package cl.lherrera.jpaspring.services; import java.util.List; import cl.lherrera.jpaspring.dtos.PersonaDTO; import cl.lherrera.jpaspring.entities.Persona; public interface PersonaService { PersonaDTO obtenerPersonasPaginadas(Integer pagina, Integer cantidad); List<Persona> obtenerPersonas(); List<Persona> obtenerPersonasPorNombre(String nombre); Persona IngresarPersona(Persona persona); Persona encontrarPersona(Integer id); Persona eliminarPersona(Persona persona); Persona actualizarPersona(Persona persona); }","title":"src/main/java/cl/lherrera/jpaspring/services/PersonaService.java"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#srcmainjavacllherrerajpaspringservicespersonaserviceimpljava","text":"package cl.lherrera.jpaspring.services; import java.util.ArrayList; import java.util.List; import javax.persistence.criteria.Order; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.data.domain.Page; import org.springframework.data.domain.PageRequest; import org.springframework.data.domain.Pageable; import org.springframework.data.domain.Sort; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional; import cl.lherrera.jpaspring.dtos.PersonaDTO; import cl.lherrera.jpaspring.entities.Persona; import cl.lherrera.jpaspring.repositories.PersonaRepo; @Service public class PersonaServiceImpl implements PersonaService{ private static final Logger logger = LoggerFactory.getLogger(PersonaServiceImpl.class.getName()); @Autowired PersonaRepo repo; @Override @Transactional(readOnly = true) public List<Persona> obtenerPersonas() { return (List<Persona>) repo.findAll(); } @Override @Transactional(readOnly = true) public List<Persona> obtenerPersonasPorNombre(String nombre) { return repo.findAllByNombre(nombre); } @Override @Transactional(readOnly = true) public Persona encontrarPersona(Integer id) { // as\u00ed nos evitamos un null pointer exception return repo.findById(id).orElse(new Persona()); } @Override @Transactional public Persona eliminarPersona(Persona persona) { int numeroQueAunNoSeOcupa = repo.myDeleteById(persona.getId()); return persona; } @Override @Transactional public Persona actualizarPersona(Persona persona) { return repo.save(persona); } @Override @Transactional public Persona IngresarPersona(Persona persona) { return repo.save(persona); } @Override public PersonaDTO obtenerPersonasPaginadas(Integer pagina, Integer cantidad) { logger.info(\"Num Pagina: \" + pagina); PersonaDTO personaDTO = new PersonaDTO(); // comienza en cero, para que con la p\u00e1gina 1 // busque en la p\u00e1gina 0 y lo retorne como p\u00e1gina 1. Pageable paginado = PageRequest.of(pagina - 1, 2, Sort.by(\"id\").ascending()); // consulta a la base Page<Persona> personaPaginas = repo.findAll(paginado); logger.info(personaPaginas.getContent().toString()); // ingreso de personas al DTO personaDTO.setPersonas(personaPaginas.getContent()); // ingresamos el n\u00famero de p\u00e1gina actual // el getNumber nos entrega un cero en caso de ser la primera p\u00e1gina // el argumento pagina, viene desde el front con el click // que se hace y llegar\u00e1 fielmente el verdadero n\u00famero a buscar // el \u00fanico aproblemado con esto es el PageRequest.of(pagina... ya que // \u00e9l busca por el n\u00famero consultado menos uno. personaDTO.setPaginaActual(pagina); // llenamos la lista de n\u00fameros del paginador List<Integer> paginas = new ArrayList<>(); for(int i = 0; i < personaPaginas.getTotalPages(); i ++) paginas.add(i + 1); personaDTO.setPaginas(paginas); logger.info(\"personaDTO: \" + personaDTO.toString()); return personaDTO; } }","title":"src/main/java/cl/lherrera/jpaspring/services/PersonaServiceImpl.java"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#srcmainresourcesapplicationproperties","text":"Solucionado pero igual... # Configuraci\u00f3n para la vista. (http://localhost:8080/) no es (http://localhost:8080/jpaspring/) # Eso es para un servlet spring.mvc.view.prefix=/WEB-INF/pages/ spring.mvc.view.suffix=.jsp # Permiso para clear el ddl de las entidades spring.jpa.generate-ddl=true # Ejecuta la configuraci\u00f3n de la clase que mapea los tipos de datos. spring.jpa.database-platform=cl.lherrera.jpaspring.SQLiteDialect # Crea la base si no est\u00e1 y cuando finaliza la ejecuci\u00f3n la borra. spring.jpa.hibernate.ddl-auto=create-drop # Muestra las consultas realizadas por el framework y las imprime en el log spring.jpa.show-sql=true # Le da un form\u00e1to legible por un humano para una mejor depuraci\u00f3n en el log. spring.jpa.properties.hibernate.format_sql=true #Pruebas #logging.level.org.hibernate.SQL=debug #logging.level.org.hibernate.type.descriptor.sql=trace","title":"src/main/resources/application.properties"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#srcmainwebappweb-infpagespersonaspersonasjsp","text":"<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@taglib uri=\"http://www.springframework.org/tags/form\" prefix=\"form\"%> <%@taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%> <!DOCTYPE html> <html> <jsp:include page=\"../htmlTemplates/headTemplate.jsp\"></jsp:include> <body> <jsp:include page=\"../htmlTemplates/navTemplate.jsp\"></jsp:include> <div class=\"container\"> <div class=\"row\"> <div class=\"col\"> <form:form class=\"form-horizontal\" method=\"post\" action=\"/personas/ingresar\" modelAttribute=\"Persona\"> <div class=\"form-group\"> <label for=\"nombre\">Nombre</label> <input type=\"text\" class=\"form-control\" id=\"nombre\" name=\"nombre\" placeholder=\"Ingrese el nombre\"> </div> <button type=\"submit\" class=\"btn btn-primary mb-2\">Ingresar</button> </form:form> <div class=\"table-responsive\"> <table class=\"table table-hover table-striped table-bordered\"> <tr> <th>Id</th> <th>Nombre</th> <th>Acci\u00f3n</th> </tr> <c:choose> <c:when test=\"${dtoPersona.getPersonas().size() > 0}\"> <c:forEach items=\"${dtoPersona.getPersonas()}\" var=\"persona\"> <tr> <td>${persona.getId()}</td> <td>${persona.getNombre()}</td> <td><a href=\"/personas/actualizar?id=${persona.getId()}\">Actualizar</a> | <a href=\"/personas/eliminar?id=${persona.getId()}\">Elimininar</a> </td> </tr> </c:forEach> </c:when> <c:otherwise> <tr> <td colspan=\"3\">${\"Sin registros...\"}</td> </tr> </c:otherwise> </c:choose> </table> <!-- PAGINACI\u00d6N --> <c:choose> <c:when test=\"${paginar}\"> <nav aria-label=\"Ejemplo de paginaci\u00f3n\"> <ul class=\"pagination\"> <c:choose> <c:when test=\"${dtoPersona.getPersonas().size() > 0}\"> <!-- l\u00f3gica para mostrar el anterior --> <c:choose> <c:when test=\"${dtoPersona.getPaginaActual() > 1}\"> <li class=\"page-item\"><a class=\"page-link\" href=\"/personas/ingresar?pagina=${dtoPersona.getPaginaActual() - 1}\">Anterior</a></li> </c:when> <c:otherwise> <li class=\"page-item disabled\"><a class=\"page-link\" href=\"#\">Anterior</a></li> </c:otherwise> </c:choose> <!-- l\u00f3gica para mostrar el anterior #--> <!-- L\u00f3gica de llenado de n\u00fameros --> <c:forEach items=\"${dtoPersona.getPaginas()}\" var=\"pagina\"> <!-- L\u00f3gica para seleccionar el n\u00famero de p\u00e1gina --> <c:choose> <c:when test=\"${dtoPersona.getPaginaActual() == pagina}\"> <li class=\"page-item active\"><a class=\"page-link\" href=\"/personas/ingresar?pagina=${pagina}\">${pagina}</a></li> </c:when> <c:otherwise> <li class=\"page-item \"><a class=\"page-link\" href=\"/personas/ingresar?pagina=${pagina}\">${pagina}</a></li> </c:otherwise> </c:choose> <!-- L\u00f3gica para seleccionar el n\u00famero de p\u00e1gina #--> </c:forEach> <!-- L\u00f3gica de llenado de n\u00fameros #--> <!-- l\u00f3gica para habilitar el siguiente --> <c:choose> <c:when test=\"${dtoPersona.getPaginas().size() > dtoPersona.getPaginaActual() }\"> <li class=\"page-item\"><a class=\"page-link\" href=\"/personas/ingresar?pagina=${dtoPersona.getPaginaActual() + 1}\">Siguiente</a></li> </c:when> <c:otherwise> <li class=\"page-item disabled\"><a class=\"page-link\" href=\"#\">Siguiente</a></li> </c:otherwise> </c:choose> <!-- l\u00f3gica para habilitar el siguiente ##--> </c:when> </c:choose> </ul> </nav> </c:when> </c:choose> <!-- PAGINACI\u00d6N #--> </div> </div> </div> </div> <jsp:include page=\"../htmlTemplates/footerTemplate.jsp\"></jsp:include> </body> </html>","title":"src/main/webapp/WEB-INF/pages/personas/personas.jsp"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#hito-5-control-de-acceso","text":"Se implementa un login program\u00e1tico, donde podemos ver como Spring trabaja las sesiones.","title":"Hito 5 - Control de acceso."},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#archivos-modificados_4","text":"basedatos.db pom.xml src/main/java/cl/lherrera/jpaspring/JpaspringApplication.java src/main/java/cl/lherrera/jpaspring/SQLiteDialect.java src/main/java/cl/lherrera/jpaspring/auth/LoginController.java src/main/java/cl/lherrera/jpaspring/controllers/AplicationController.java src/main/java/cl/lherrera/jpaspring/controllers/PersonaController.java src/main/java/cl/lherrera/jpaspring/entities/Usuario.java src/main/java/cl/lherrera/jpaspring/repositories/PersonaRepo.java src/main/java/cl/lherrera/jpaspring/repositories/UsuarioRepo.java src/main/java/cl/lherrera/jpaspring/services/AutentificacionServicio.java src/main/java/cl/lherrera/jpaspring/services/AutentificacionServicioImpl.java src/main/java/cl/lherrera/jpaspring/services/PersonaServiceImpl.java src/main/java/cl/lherrera/jpaspring/services/UsuarioService.java src/main/java/cl/lherrera/jpaspring/services/UsuarioServiceImpl.java src/main/resources/application.properties src/main/webapp/WEB-INF/pages/auth/login.jsp src/main/webapp/WEB-INF/pages/htmlTemplates/footerTemplate.jsp src/main/webapp/WEB-INF/pages/htmlTemplates/headTemplate.jsp src/main/webapp/WEB-INF/pages/htmlTemplates/navTemplate.jsp basedatos.db Este archivo cambia por que los datos cambian as\u00ed que no se tomar\u00e1 en cuenta el cambio","title":"Archivos modificados:"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#pomxml_2","text":"Tenemos finalmente la siguiente lista de dependencias: Soporte de archivos jsp : tomcat-embed-jasper , javax.servlet-api . Soporte a JSTL: jstl . Soporte SQLITE: sqlite-jdbc . Soporte herramientas de desarrollo para eclipse: spring-boot-devtools . Soporte Bootstrap webjars : bootstrap . Soporte JQuery webjars \u001d: jquery . Soporte webjars Ubicaci\u00f3n de recursos: webjars-locator . <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.6.RELEASE</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>cl.lherrera.jpaspring</groupId> <artifactId>jpaspring</artifactId> <version>20.0.0</version> <packaging>war</packaging> <name>jpaspring</name> <description>proyecto JPA SQLITE</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-jpa</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> <scope>provided</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> <!-- SOPORTE ARCHIVOS JSP --> <dependency> <groupId>org.apache.tomcat.embed</groupId> <artifactId>tomcat-embed-jasper</artifactId> <scope>provided</scope> </dependency> <!-- SOPORTE ARCHIVOS JSP # --> <!-- JSTL --> <dependency> <groupId>javax.servlet</groupId> <artifactId>jstl</artifactId> </dependency> <dependency> <groupId>javax.servlet</groupId> <artifactId>javax.servlet-api</artifactId> </dependency> <!-- JSTL # --> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> </dependency> <!-- DevsTools --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <optional>true</optional> </dependency> <!-- DevsTools # --> <!-- webjars --> <dependency> <groupId>org.webjars</groupId> <artifactId>webjars-locator</artifactId> <version>0.30</version> </dependency> <dependency> <groupId>org.webjars</groupId> <artifactId>bootstrap</artifactId> <version>4.3.0</version> </dependency> <dependency> <groupId>org.webjars</groupId> <artifactId>jquery</artifactId> <version>3.1.1</version> </dependency> <!-- webjars --> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project>","title":"pom.xml"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#srcmainjavacllherrerajpaspringjpaspringapplicationjava_1","text":"Se agrega un m\u00e9todo para poder ingresar un usuario de prueba. package cl.lherrera.jpaspring; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.CommandLineRunner; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.stereotype.Component; import cl.lherrera.jpaspring.entities.Usuario; import cl.lherrera.jpaspring.services.UsuarioServiceImpl; @SpringBootApplication public class JpaspringApplication { public static void main(String[] args) { SpringApplication.run(JpaspringApplication.class, args); } } /** * Este m\u00e9todo, realiza acciones antes que la aplicaci\u00f3n est\u00e1 en ejecuci\u00f3n as\u00ed, * el usuario est\u00e1 ingresado antes de iniciar sesi\u00f3n. * */ @Component class SeEjecutaAntes implements CommandLineRunner { @Autowired UsuarioServiceImpl servicioUsuario; @Override public void run(String... args) throws Exception { // para probar con este usuario al menos Usuario usuarioPueba = new Usuario(); usuarioPueba.setNombre(\"Luis herrera\"); usuarioPueba.setEmail(\"l.herrera.garnica@gmail.com\"); usuarioPueba.setContrasenia(\"1234\"); servicioUsuario.ingresarUsuario(usuarioPueba); // para probar con este usuario al menos ## } }","title":"src/main/java/cl/lherrera/jpaspring/JpaspringApplication.java"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#srcmainjavacllherrerajpaspringsqlitedialectjava_1","text":"Se repara el final, aunque el que estaba es este mismo que se copia ya que el que estaba antes de este, no permit\u00eda ingresar el usuario al principio de la ejecuci\u00f3n de la aplicaci\u00f3n. Es decir que esta versi\u00f3n probablemente sea la que ya est\u00e1 por que la he puesta esta versi\u00f3n desde el hito 1. package cl.lherrera.jpaspring; import java.sql.Types; import org.hibernate.dialect.Dialect; import org.hibernate.dialect.function.StandardSQLFunction; import org.hibernate.dialect.function.SQLFunctionTemplate; import org.hibernate.dialect.function.VarArgsSQLFunction; import org.hibernate.type.StandardBasicTypes; public class SQLiteDialect extends Dialect { public SQLiteDialect() { super(); registerColumnType(Types.BIT, \"integer\"); registerColumnType(Types.TINYINT, \"tinyint\"); registerColumnType(Types.SMALLINT, \"smallint\"); registerColumnType(Types.INTEGER, \"integer\"); registerColumnType(Types.BIGINT, \"bigint\"); registerColumnType(Types.FLOAT, \"float\"); registerColumnType(Types.REAL, \"real\"); registerColumnType(Types.DOUBLE, \"double\"); registerColumnType(Types.NUMERIC, \"numeric\"); registerColumnType(Types.DECIMAL, \"decimal\"); registerColumnType(Types.CHAR, \"char\"); registerColumnType(Types.VARCHAR, \"varchar\"); registerColumnType(Types.LONGVARCHAR, \"longvarchar\"); registerColumnType(Types.DATE, \"date\"); registerColumnType(Types.TIME, \"time\"); registerColumnType(Types.TIMESTAMP, \"timestamp\"); registerColumnType(Types.BINARY, \"blob\"); registerColumnType(Types.VARBINARY, \"blob\"); registerColumnType(Types.LONGVARBINARY, \"blob\"); // registerColumnType(Types.NULL, \"null\"); registerColumnType(Types.BLOB, \"blob\"); registerColumnType(Types.CLOB, \"clob\"); registerColumnType(Types.BOOLEAN, \"integer\"); registerFunction(\"concat\", new VarArgsSQLFunction(StandardBasicTypes.STRING, \"\", \"||\", \"\")); registerFunction(\"mod\", new SQLFunctionTemplate(StandardBasicTypes.INTEGER, \"?1 % ?2\")); registerFunction(\"substr\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); registerFunction(\"substring\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); } public boolean supportsIdentityColumns() { return true; } public boolean hasDataTypeInIdentityColumn() { return false; // As specify in NHibernate dialect } public String getIdentityColumnString() { // return \"integer primary key autoincrement\"; return \"integer\"; } public String getIdentitySelectString() { return \"select last_insert_rowid()\"; } public boolean supportsLimit() { return true; } public String getLimitString(String query, boolean hasOffset) { return new StringBuffer(query.length() + 20).append(query).append( hasOffset ? \" limit ? offset ?\" : \" limit ?\").toString(); } public boolean bindLimitParametersInReverseOrder() { return true; } public boolean supportsTemporaryTables() { return true; } public String getCreateTemporaryTableString() { return \"create temporary table if not exists\"; } public boolean dropTemporaryTableAfterUse() { return false; } public boolean supportsCurrentTimestampSelection() { return true; } public boolean isCurrentTimestampSelectStringCallable() { return false; } public String getCurrentTimestampSelectString() { return \"select current_timestamp\"; } public boolean supportsUnionAll() { return true; } public boolean hasAlterTable() { return false; // As specify in NHibernate dialect } public boolean dropConstraints() { return false; } public String getAddColumnString() { return \"add column\"; } public String getForUpdateString() { return \"\"; } public boolean supportsOuterJoinForUpdate() { return false; } public String getDropForeignKeyString() { throw new UnsupportedOperationException( \"No drop foreign key syntax supported by SQLiteDialect\"); } public String getAddForeignKeyConstraintString(String constraintName, String[] foreignKey, String referencedTable, String[] primaryKey, boolean referencesPrimaryKey) { throw new UnsupportedOperationException( \"No add foreign key syntax supported by SQLiteDialect\"); } public String getAddPrimaryKeyConstraintString(String constraintName) { throw new UnsupportedOperationException( \"No add primary key syntax supported by SQLiteDialect\"); } public boolean supportsIfExistsBeforeTableName() { return true; } public boolean supportsCascadeDelete() { return false; } }","title":"src/main/java/cl/lherrera/jpaspring/SQLiteDialect.java"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#srcmainjavacllherrerajpaspringauthlogincontrollerjava","text":"Este controlador, ser\u00e1 el encargado de organizar las solicitudes referentes al control de acceso. package cl.lherrera.jpaspring.auth; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.servlet.mvc.support.RedirectAttributes; import cl.lherrera.jpaspring.entities.Usuario; import cl.lherrera.jpaspring.services.AutentificacionServicio; @Controller @RequestMapping(path = \"/auth\") public class LoginController { private static Logger logger = LoggerFactory.getLogger(LoginController.class.getName()); @Autowired AutentificacionServicio servicio; @GetMapping(path = \"/login\") public String login() { logger.info(\"Llamado a: /auth/login\"); return \"auth/login\"; } @GetMapping(path = \"/doLogout\") public String doLogout() { servicio.sairDelSistema(); return \"auth/login\"; } @PostMapping(path = \"/doLogin\") public String doLogin(@ModelAttribute Usuario usuario, RedirectAttributes ra) { String irHacia = \"redirect:/auth/login\"; if (servicio.estaLogueado()) { irHacia = \"redirect:/\"; } else { Usuario logueado = servicio.ingresarAlSistema(usuario); boolean seRealizaLogueo = logueado != null; if (seRealizaLogueo) { irHacia = \"redirect:/\"; } else { ra.addFlashAttribute(\"loginErrorFlash\", \"Credenciales inv\u00e1lidas\"); } } return irHacia; } }","title":"src/main/java/cl/lherrera/jpaspring/auth/LoginController.java"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#srcmainjavacllherrerajpaspringcontrollersaplicationcontrollerjava","text":"Todas las peticiones referentes a la administraci\u00f3n de la aplicaci\u00f3n, como por ejemplo, ir al index del sitio y no a las funcionalidades que tienen que ver con la manutenci\u00f3n de los datos de la persona o usuarios. package cl.lherrera.jpaspring.controllers; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.GetMapping; import cl.lherrera.jpaspring.entities.Usuario; import cl.lherrera.jpaspring.services.AutentificacionServicio; import cl.lherrera.jpaspring.services.PersonaServiceImpl; import cl.lherrera.jpaspring.services.UsuarioServiceImpl; @Controller public class AplicationController { private static final Logger logger = LoggerFactory.getLogger(AplicationController.class); @Autowired AutentificacionServicio authService; @Autowired PersonaServiceImpl servicioPersona; @Autowired UsuarioServiceImpl servicioUsuario; @GetMapping(\"/\") public String home(Model modelo) { logger.info(\"llamada a : '/'\"); if(!authService.estaLogueado()) { return \"auth/login\"; }else { Usuario authUsuario = authService.obtenerUsuarioLogeado(); modelo.addAttribute(\"authUsuario\", authUsuario); } return \"index\"; } }","title":"src/main/java/cl/lherrera/jpaspring/controllers/AplicationController.java"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#srcmainjavacllherrerajpaspringcontrollerspersonacontrollerjava_1","text":"Se encarga de controlar todas las interacciones que tengan que ver con la manutenci\u00f3n de los datos de las personas como por ejemplo el CRUD . package cl.lherrera.jpaspring.controllers; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpStatus; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.ResponseStatus; import org.springframework.web.servlet.mvc.support.RedirectAttributes; import cl.lherrera.jpaspring.dtos.PersonaDTO; import cl.lherrera.jpaspring.entities.Persona; import cl.lherrera.jpaspring.entities.Usuario; import cl.lherrera.jpaspring.services.AutentificacionServicio; import cl.lherrera.jpaspring.services.PersonaService; @Controller @RequestMapping(\"/personas\") public class PersonaController { private static final Logger logger = LoggerFactory.getLogger(PersonaController.class); private static final Integer FILAS_POR_PAGINA = 3; @Autowired PersonaService servicio; @Autowired AutentificacionServicio authService; @GetMapping(\"/ingresar\") @ResponseStatus(code = HttpStatus.OK) public String inicio( Model modelo, @RequestParam(required = false) Integer pagina) { logger.info(\"Petici\u00f3n: /personas/ingresar\"); // controlando el acceso if(!authService.estaLogueado()) { return \"auth/login\"; }else { Usuario authUsuario = authService.obtenerUsuarioLogeado(); modelo.addAttribute(\"authUsuario\", authUsuario); } // controlando el acceso ## // si no viene la p\u00e1gina, se simula la primera, el m\u00e9todo PageRequest.of(pagina // pide que la primera sea cero; pero esto es manejado por el servicio // en el controlador sabemos que la primera p\u00e1gina es la 1, si esto no es // as\u00ed, el servicio lo debe manejar if(pagina == null) pagina = 1; PersonaDTO dtoPersona = servicio.obtenerPersonasPaginadas(pagina, FILAS_POR_PAGINA); modelo.addAttribute(\"dtoPersona\", dtoPersona); // si no hay m\u00e1s de una p\u00e1gina, no es necesario paginar modelo.addAttribute(\"paginar\", dtoPersona.getPaginas().size() > 1); return \"personas/personas\"; } // @ResponseStatus(code = HttpStatus.CREATED) // con esto no funciona el redirect @PostMapping(\"/ingresar\") public String ingresar( @ModelAttribute(\"foo\") Persona persona, @RequestParam String nombre, RedirectAttributes attributes) { logger.info(\"Petici\u00f3n post /ingresar\"); // sin usar el retorno a\u00fan Persona respuesta = servicio.IngresarPersona(persona); if(respuesta == null) logger.error(\"error en ingreso de persona\"); return \"redirect:ingresar\"; } @GetMapping(\"/actualizar\") public String actualizar( Model modelo, @RequestParam String id) { logger.info(\"Petici\u00f3n-GET: /actualizar\"); // controlando el acceso if(!authService.estaLogueado()) { return \"auth/login\"; }else { Usuario authUsuario = authService.obtenerUsuarioLogeado(); modelo.addAttribute(\"authUsuario\", authUsuario); } // controlando el acceso ## Persona persona = servicio.encontrarPersona(Integer.parseInt(id)); modelo.addAttribute(\"persona\", persona); return \"personas/actualizar\"; } // el formulario debe estar completo con los names, para que lo // reconozca como la misma entidad y no una nueva @PostMapping(\"/actualizar\") public String doActualizar(@ModelAttribute(\"foo\") Persona persona) { logger.info(\"Petici\u00f3n-POST: /actualizar\"); servicio.actualizarPersona(persona); return \"redirect:ingresar\"; } @GetMapping(\"/eliminar\") public String eliminar( Model modelo, @RequestParam String id) { // controlando el acceso if(!authService.estaLogueado()) { return \"auth/login\"; }else { Usuario authUsuario = authService.obtenerUsuarioLogeado(); modelo.addAttribute(\"authUsuario\", authUsuario); } // controlando el acceso ## logger.info(\"Petici\u00f3n-GET: /eliminar\"); Persona persona = servicio.encontrarPersona(Integer.parseInt(id)); modelo.addAttribute(\"persona\", persona); return \"personas/eliminar\"; } @PostMapping(\"/eliminar\") public String doEliminar( @ModelAttribute(\"foo\") Persona persona, @RequestParam String id) { logger.info(\"Petici\u00f3n-POST: /eliminar\"); Persona respuesta = servicio.eliminarPersona(persona); if(respuesta == null) logger.info(\"Petici\u00f3n-POST: /eliminar\"); return \"redirect:ingresar\"; } }","title":"src/main/java/cl/lherrera/jpaspring/controllers/PersonaController.java"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#srcmainjavacllherrerajpaspringentitiesusuariojava","text":"Podemos utilizar la potencia del paradigma OO, para poder modelar los datos de la aplicaci\u00f3n, podemos tratar a una persona como un usuario y que sea administrado en la misma tabla. El usuario est\u00e1 orientado a la administraci\u00f3n del sitio como el inicio de sesi\u00f3n. Las personas son una funcionalidad independiente a pesar de diferir en la base de datos, en la aplicaci\u00f3n esto puede variar. package cl.lherrera.jpaspring.entities; import javax.persistence.Entity; import javax.persistence.Table; @Entity @Table(name=\"persona\") public class Usuario extends Persona { private String email; private String contrasenia; public Usuario() {} public Usuario(Integer id, String nombre, String email, String contrasenia) { super(id, nombre); this.email = email; this.contrasenia = contrasenia; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getContrasenia() { return contrasenia; } public void setContrasenia(String contrasenia) { this.contrasenia = contrasenia; } @Override public String toString() { return \"Usuario [email=\" + email + \", contrasenia=\" + contrasenia + \"]\"; } }","title":"src/main/java/cl/lherrera/jpaspring/entities/Usuario.java"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#srcmainjavacllherrerajpaspringrepositoriespersonarepojava_1","text":"Solo quitamos la dependencia de CrudRepository . package cl.lherrera.jpaspring.repositories; import java.util.List; import org.springframework.context.annotation.Primary; import org.springframework.data.jpa.repository.JpaRepository; import org.springframework.data.jpa.repository.Modifying; import org.springframework.data.jpa.repository.Query; import org.springframework.data.repository.PagingAndSortingRepository; import cl.lherrera.jpaspring.entities.Persona; // la herencia de beans con hilos seguros @Primary public interface PersonaRepo extends JpaRepository<Persona, Integer>, PagingAndSortingRepository<Persona, Integer> { /** * Se puede parecer mucho a una consulta en la base de datos pero es una * consulta al modelo, la respuesta es un @Entity. por eso la \"tabla\" est\u00e1 en * may\u00fasculas. * * Eso es debido a que no renemos un PersonaRepoImpl que maneje la * personalizaci\u00f3n de esta consulta y como la original delete, retorna void no * es muy buena para hacer test ya que no tenemos contra qu\u00e9 validar si * simulamos la base de datos. * * En el fondo es solamente un deleteById(), pero se expone para su ejemplo * Que podemos aplicar queries a las entidades. * */ @Modifying @Query(\"DELETE FROM Persona WHERE id = ?1\") Integer myDeleteById(Integer id); // no posee un nombre personalizado, cumple con la nomenclatura find // debe ir aunque siga la nomenclatura List<Persona> findAllByNombre(String nombre); }","title":"src/main/java/cl/lherrera/jpaspring/repositories/PersonaRepo.java"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#srcmainjavacllherrerajpaspringrepositoriesusuariorepojava","text":"Vemos la ventaja del uso de la orientaci\u00f3n de objetos, ya que esta interfaz es implementada por spring , entonces ya que los nombres como findAll() son gen\u00e9ricos, no como encontrarPersna , podemos extender la funcionalidad. No hay que olvidar la anotaci\u00f3n @Primary en el bean principal. https://www.baeldung.com/spring-primary .\u001c package cl.lherrera.jpaspring.repositories; import java.util.Optional; import cl.lherrera.jpaspring.entities.Usuario; public interface UsuarioRepo extends PersonaRepo{ Optional<Usuario> findOneByEmailAndContrasenia(String email, String contrasenia); }","title":"src/main/java/cl/lherrera/jpaspring/repositories/UsuarioRepo.java"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#srcmainjavacllherrerajpaspringservicesautentificacionserviciojava","text":"Servicios encargados de la autenticaci\u00f3n. package cl.lherrera.jpaspring.services; import cl.lherrera.jpaspring.entities.Usuario; public interface AutentificacionServicio { Boolean estaLogueado(); Usuario obtenerUsuarioLogeado(); Usuario ingresarAlSistema(Usuario usuario); void sairDelSistema(); }","title":"src/main/java/cl/lherrera/jpaspring/services/AutentificacionServicio.java"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#srcmainjavacllherrerajpaspringservicesautentificacionservicioimpljava","text":"package cl.lherrera.jpaspring.services; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import org.springframework.web.context.annotation.SessionScope; import cl.lherrera.jpaspring.entities.Usuario; import cl.lherrera.jpaspring.repositories.UsuarioRepo; @Service @SessionScope public class AutentificacionServicioImpl implements AutentificacionServicio { @Autowired private UsuarioRepo usuarioRepo; private Usuario usuarioAutent; @Override public Boolean estaLogueado() { return usuarioAutent != null; } @Override public Usuario obtenerUsuarioLogeado() { return usuarioAutent; } @Override public Usuario ingresarAlSistema(Usuario usuario) { usuarioAutent = usuarioRepo.findOneByEmailAndContrasenia( usuario.getEmail(), usuario.getContrasenia()) .orElse(null); return usuarioAutent; } @Override public void sairDelSistema() { usuarioAutent = null; } }","title":"src/main/java/cl/lherrera/jpaspring/services/AutentificacionServicioImpl.java"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#srcmainjavacllherrerajpaspringservicespersonaserviceimpljava_1","text":"Simple reparaci\u00f3n. package cl.lherrera.jpaspring.services; import java.util.ArrayList; import java.util.List; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.data.domain.Page; import org.springframework.data.domain.PageRequest; import org.springframework.data.domain.Pageable; import org.springframework.data.domain.Sort; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional; import cl.lherrera.jpaspring.dtos.PersonaDTO; import cl.lherrera.jpaspring.entities.Persona; import cl.lherrera.jpaspring.repositories.PersonaRepo; @Service //@Primary // util solamente si tenemos m\u00e1s servicios que implementan PersonaService. public class PersonaServiceImpl implements PersonaService{ private static final Logger logger = LoggerFactory.getLogger(PersonaServiceImpl.class.getName()); @Autowired PersonaRepo repo; @Override @Transactional(readOnly = true) public List<Persona> obtenerPersonas() { return (List<Persona>) repo.findAll(); } @Override @Transactional(readOnly = true) public List<Persona> obtenerPersonasPorNombre(String nombre) { return repo.findAllByNombre(nombre); } @Override @Transactional(readOnly = true) public Persona encontrarPersona(Integer id) { // as\u00ed nos evitamos un null pointer exception return repo.findById(id).orElse(new Persona()); } @Override @Transactional public Persona eliminarPersona(Persona persona) { int filasAfectadas = repo.myDeleteById(persona.getId()); if(!(filasAfectadas > 0)) { logger.info(\"Error al eliminal persona: \" + persona.toString()); } return persona; } @Override @Transactional public Persona actualizarPersona(Persona persona) { return repo.save(persona); } @Override @Transactional public Persona IngresarPersona(Persona persona) { return repo.save(persona); } @Override public PersonaDTO obtenerPersonasPaginadas(Integer pagina, Integer cantidad) { logger.info(\"Num Pagina: \" + pagina); PersonaDTO personaDTO = new PersonaDTO(); // comienza en cero, para que con la p\u00e1gina 1 // busque en la p\u00e1gina 0 y lo retorne como p\u00e1gina 1. Pageable paginado = PageRequest.of(pagina - 1, 2, Sort.by(\"id\").ascending()); // consulta a la base Page<Persona> personaPaginas = repo.findAll(paginado); logger.info(personaPaginas.getContent().toString()); // ingreso de personas al DTO personaDTO.setPersonas(personaPaginas.getContent()); // ingresamos el n\u00famero de p\u00e1gina actual // el getNumber nos entrega un cero en caso de ser la primera p\u00e1gina // el argumento pagina, viene desde el front con el click // que se hace y llegar\u00e1 fielmente el verdadero n\u00famero a buscar // el \u00fanico aproblemado con esto es el PageRequest.of(pagina... ya que // \u00e9l busca por el n\u00famero consultado menos uno. personaDTO.setPaginaActual(pagina); // llenamos la lista de n\u00fameros del paginador List<Integer> paginas = new ArrayList<>(); for(int i = 0; i < personaPaginas.getTotalPages(); i ++) paginas.add(i + 1); personaDTO.setPaginas(paginas); logger.info(\"personaDTO: \" + personaDTO.toString()); return personaDTO; } }","title":"src/main/java/cl/lherrera/jpaspring/services/PersonaServiceImpl.java"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#srcmainjavacllherrerajpaspringservicesusuarioservicejava","text":"El servicio es personalizado, por que son con nomenclaturas espec\u00edficas del propio servicio. package cl.lherrera.jpaspring.services; import cl.lherrera.jpaspring.entities.Usuario; public interface UsuarioService { void ingresarUsuario(Usuario usuario); }","title":"src/main/java/cl/lherrera/jpaspring/services/UsuarioService.java"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#srcmainjavacllherrerajpaspringservicesusuarioserviceimpljava","text":"package cl.lherrera.jpaspring.services; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import cl.lherrera.jpaspring.entities.Usuario; import cl.lherrera.jpaspring.repositories.UsuarioRepo; @Service public class UsuarioServiceImpl implements UsuarioService { @Autowired UsuarioRepo repo; @Override public void ingresarUsuario(Usuario usuario) { repo.save(usuario); } }","title":"src/main/java/cl/lherrera/jpaspring/services/UsuarioServiceImpl.java"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#srcmainresourcesapplicationproperties_1","text":"# Configuraci\u00f3n para la vista. (http://localhost:8080/) no es (http://localhost:8080/jpaspring/) # Eso es para un servlet spring.mvc.view.prefix=/WEB-INF/pages/ spring.mvc.view.suffix=.jsp # Permiso para clear el ddl de las entidades spring.jpa.generate-ddl=true # Ejecuta la configuraci\u00f3n de la clase que mapea los tipos de datos. spring.jpa.database-platform=cl.lherrera.jpaspring.SQLiteDialect # Crea la base si no est\u00e1 y cuando finaliza la ejecuci\u00f3n la borra. spring.jpa.hibernate.ddl-auto=create-drop # Muestra las consultas realizadas por el framework y las imprime en el log spring.jpa.show-sql=true # Le da un form\u00e1to legible por un humano para una mejor depuraci\u00f3n en el log. spring.jpa.properties.hibernate.format_sql=true #Pruebas #logging.level.org.hibernate.SQL=debug #logging.level.org.hibernate.type.descriptor.sql=trace","title":"src/main/resources/application.properties"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#srcmainwebappweb-infpagesauthloginjsp","text":"Podemos ver como interact\u00faan los mensajes del tipo flash y que una vez enviado desde un m\u00e9todo redireccionado \u001d, no hay necesidad de reemitirlo \u001d a la vista, por que ya viene con RedirectAttributes . <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%> <%@taglib uri=\"http://www.springframework.org/tags/form\" prefix=\"form\"%> <%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%> <%@ taglib uri=\"http://java.sun.com/jsp/jstl/functions\" prefix=\"fn\"%> <!DOCTYPE html> <html> <jsp:include page=\"../htmlTemplates/headTemplate.jsp\"></jsp:include> <body> <div class=\"container my-5\"> <div class=\"row\"> <div class=\"col\"></div> <div class=\"col\"> <!-- Mensaje flash de control de acceso --> <div class=\"card\" style=\"width: 18rem;\"> <!-- Mensaje flash de control de acceso --> <c:choose> <c:when test=\"${loginErrorFlash != null}\"> <div class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\"> <strong>Error de acceso: </strong> ${loginErrorFlash} <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\"> <span aria-hidden=\"true\">&times;</span> </button> </div> </c:when> </c:choose> <!-- Mensaje flash de control de acceso ##--> <div class=\"card-body\"> <h5 class=\"card-title\">Ingreso al sistema</h5> <!-- Formunarioi de login --> <form:form class=\"form-horizontal\" method=\"post\" action=\"/auth/doLogin\" modelAttribute=\"Usuario\"> <div class=\"form-group\"> <label for=\"email\">Correo electr\u00f3nicos</label> <input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" aria-describedby=\"emailHelp\"> <small id=\"emailHelp\" class=\"form-text text-muted\">No compartimos t\u00fa informaci\u00f3n con nadie.</small> </div> <div class=\"form-group\"> <label for=\"contrasenia\">Contrase\u00f1a</label> <input type=\"password\" class=\"form-control\" id=\"contrasenia\" name=\"contrasenia\"> </div> <div class=\"form-group form-check\"> <input type=\"checkbox\" class=\"form-check-input\" id=\"exampleCheck1\"> <label class=\"form-check-label\" for=\"exampleCheck1\">Recordar usuario</label> </div> <button type=\"submit\" class=\"btn btn-primary\">Ingresar</button> </form:form> <!-- Formunarioi de login #--> </div> </div> </div> <div class=\"col\"></div> </div> </div> <jsp:include page=\"../htmlTemplates/footerTemplate.jsp\"></jsp:include> </body> </html>","title":"src/main/webapp/WEB-INF/pages/auth/login.jsp"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#srcmainwebappweb-infpageshtmltemplatesfootertemplatejsp","text":"C\u00f3digo comentado, ya que para web-jars debe estar cargado jquery antes. Es por esa raz\u00f3n que los c\u00f3digos js no ir\u00e1n en el footer . <footer> <!-- bootstrap 4 --> <!-- <script src=\"https://code.jquery.com/jquery-3.4.1.slim.min.js\" --> <!-- integrity=\"sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n\" --> <!-- crossorigin=\"anonymous\"></script> --> <!-- <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js\" --> <!-- integrity=\"sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo\" --> <!-- crossorigin=\"anonymous\"></script> --> <!-- <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js\" --> <!-- integrity=\"sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6\" --> <!-- crossorigin=\"anonymous\"></script> --> <!-- bootstrap #--> </footer>","title":"src/main/webapp/WEB-INF/pages/htmlTemplates/footerTemplate.jsp"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#srcmainwebappweb-infpageshtmltemplatesheadtemplatejsp","text":"Integraci\u00f3n de la vista con webjars , se comenta el CDN , se pueden ver estas dependencias en maven dependencies , dentro estar\u00e1n las carpetas con las versiones en caso de no saber cual se ha descargado. <!-- Este template, est\u00e1 dise\u00f1ado para mantener la cabecera del sitio --> <!-- unificada en una sola, ya que la comparten. --> <head> <meta charset=\"UTF-8\"> <title>FPA-EJEMPLO</title> <!-- cdn bootstrap 4 --> <!-- <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\" --> <!-- integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\"> --> <!-- cdn bootstrap 4 #--> <script src=\"/webjars/jquery/3.1.1/jquery.min.js\"></script> <script src=\"/webjars/bootstrap/4.3.0/js/bootstrap.min.js\"></script> <link rel=\"stylesheet\" href=\"/webjars/bootstrap/4.3.0/css/bootstrap.min.css\" /> </head>","title":"src/main/webapp/WEB-INF/pages/htmlTemplates/headTemplate.jsp"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#srcmainwebappweb-infpageshtmltemplatesnavtemplatejsp","text":"Se puede ver que podemos disponer de la informaci\u00f3n del usuario conectado, guardado en la sesi\u00f3n, mediante el mecanismo de scope que el servidor trabajar\u00e1 mediante la conexi\u00f3n de cada usuario. Bienvenido - <strong>${authUsuario.getNombre()}</strong> .\u001c <nav class=\"navbar navbar-expand-lg navbar-light bg-light\"> <a class=\"navbar-brand\" href=\"#\">JPA-EJEMPLO</a> <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"> <span class=\"navbar-toggler-icon\"></span> </button> <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\"> <ul class=\"navbar-nav ml-auto\"> <!-- Home --> <li class=\"nav-item active\"><a class=\"nav-link\" href=\"/\">Home <span class=\"sr-only\">(current)</span> </a></li> <!-- Home #--> <li class=\"nav-item dropdown\"> <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"> Mantenedor de personas </a> <div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\"> <a class=\"dropdown-item\" href=\"/personas/ingresar\">Ingresar</a> </div> </li> <!-- Usuario conectado --> <li class=\"nav-item dropdown ml-5\"><a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"> Bienvenido - <strong>${authUsuario.getNombre()}</strong> </a> <div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\"> <a class=\"dropdown-item\" href=\"#\">Personalizar datos - (tarea)</a> <div class=\"dropdown-divider\"></div> <a class=\"dropdown-item\" href=\"/auth/doLogout\">Cerrar sesi\u00f3n</a> </div> </li> </ul> </div> </nav>","title":"src/main/webapp/WEB-INF/pages/htmlTemplates/navTemplate.jsp"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#ddl-de-prueba","text":"delete from persona; select * from persona; INSERT into persona values (1, \"Uno\"); INSERT into persona values (2, \"Dos\"); INSERT into persona values (3, \"Tres\"); INSERT into persona values (4, \"Cuatro\"); INSERT into persona values (5, \"Cinco\"); INSERT into persona values (6, \"Seis\"); INSERT into persona values (7, \"Siete\"); INSERT into persona values (9, \"Ocho\"); INSERT into persona values (10, \"Nueve\"); INSERT into persona values (11, \"Diez\"); INSERT into persona values (12, \"Once\"); INSERT into persona values (13, \"Doce\"); INSERT into persona values (14, \"Trece\"); INSERT into persona values (15, \"Catorce\"); INSERT into persona values (16, \"Quince\"); INSERT into persona values (17, \"Dieciseis\"); INSERT into persona values (18, \"Diecisiete\"); -- despu\u00e9s de ingresar usuario INSERT into persona values (\"Usuario\", 19, \"Luis herrera\", \"1234\", \"l.herrera.garnica@gmail.com\"); select persona0_.id as id1_0_, persona0_.nombre as nombre2_0_ from persona persona0_ limit 3 offset 9; select persona0_.id as id1_0_, persona0_.nombre as nombre2_0_ from persona persona0_ limit 3 offset 4; select persona0_.id as id1_0_, persona0_.nombre as nombre2_0_ from persona persona0_ order by persona0_.id asc limit ? offset ?","title":"DDL DE PRUEBA"},{"location":"modulos/mod_5/uni003/respaldos/lectura002/#todo","text":"Realizar el mantenedor de usuarios. (registro el sistema).","title":"TODO"},{"location":"modulos/mod_5/uni003/respaldos/lectura002_bkp/","text":"Modelo (Parte II) Aplicaci\u00f3n - JPA La siguiente aplicaci\u00f3n mostrar\u00e1 la forma en que se trabaja con JPA , adem\u00e1s de la utilizaci\u00f3n de lombok , esta es una librer\u00eda que ahora tareas repetitivas como la programaci\u00f3n de los los setters & getters , o los constructores. Se instala agregando la dependencia en el pom , luego vamos a maven dependencies all\u00ed buscamos el paquete y en propiedades sabremos donde est\u00e1. vamos all\u00e1 y ejecutamos el jar que encontremos dentro de la carpeta, el jar que m\u00e1s se parezca al nombre de la extensi\u00f3n. lo ejecutamos y seleccionamos nuestro IDE, si no est\u00e1 en la lista la especificamos, en el caso de mac , es el ini dentro de la carpeta que est\u00e1 en Aplications . Hacer esto con el IDE cerrado o a veces no funciona. Contexto La aplicaci\u00f3n es muy similar a la anterior, pero esta vez se utilizar\u00e1 JPA , que es la forma de trabajar con persistencia m\u00e1s utilizada en Spring . Es la norma en muchas compa\u00f1\u00edas ya que viene desde Hibernate . Hito 1 - Obtener Todos Los Usuarios Crear la aplicaci\u00f3n spring boot con las siguientes dependencias: JPA , Spring web starter , DevTools , Lombok . Estructura: ./ \u251c\u2500\u2500 HELP.md \u251c\u2500\u2500 mvnw \u251c\u2500\u2500 mvnw.cmd \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 m4u3l2001 \u2502 \u2502 \u2502 \u251c\u2500\u2500 AppConfig.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 M4u3l2001Application.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 ServletInitializer.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 entity \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 Usuario.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 repositories \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioRepository.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 services \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 UsuarioService.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioServiceImpl.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 vos \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioVO.java \u2502 \u2502 \u251c\u2500\u2500 resources \u2502 \u2502 \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2502 \u2502 \u251c\u2500\u2500 database.properties \u2502 \u2502 \u2502 \u251c\u2500\u2500 static \u2502 \u2502 \u2502 \u2514\u2500\u2500 templates \u2502 \u2502 \u2514\u2500\u2500 webapp \u2502 \u2514\u2500\u2500 test \u2502 \u2514\u2500\u2500 java \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 m4u3l2001 \u2502 \u251c\u2500\u2500 M4u3l2001ApplicationTests.java \u2502 \u2514\u2500\u2500 services \u2502 \u2514\u2500\u2500 UsuarioServiceImplTest.java \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2514\u2500\u2500 database.properties \u251c\u2500\u2500 generated-sources \u2502 \u2514\u2500\u2500 annotations \u251c\u2500\u2500 generated-test-sources \u2502 \u2514\u2500\u2500 test-annotations \u251c\u2500\u2500 m2e-wtp \u2502 \u2514\u2500\u2500 web-resources \u2502 \u2514\u2500\u2500 META-INF \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 maven \u2502 \u2514\u2500\u2500 cl.lherrera.m4u2l2 \u2502 \u2514\u2500\u2500 m4u3l2001 \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2514\u2500\u2500 pom.xml \u2514\u2500\u2500 test-classes 34 directories, 23 files Archivos modificados /m4u3l2001/src/main/java/cl/lherrera/m4u3l2001/AppConfig.java Configuraci\u00f3n personalizada de la base de datos para el contexto. package cl.lherrera.m4u3l2001; import javax.sql.DataSource; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.PropertySource; import org.springframework.core.env.Environment; import org.springframework.jdbc.datasource.DriverManagerDataSource; @Configuration @ComponentScan(\"com.latam.usuarios\") @PropertySource(\"classpath:database.properties\") public class AppConfig { @Autowired Environment environment; @Bean DataSource dataSource() { DriverManagerDataSource driverManagerDataSource = new DriverManagerDataSource(); driverManagerDataSource.setUrl(environment.getProperty(\"url\")); driverManagerDataSource.setUsername(environment.getProperty(\"dbuser\")); driverManagerDataSource.setPassword(environment.getProperty(\"dbpassword\")); driverManagerDataSource.setDriverClassName(environment.getProperty(\"driver\")); return driverManagerDataSource; } } /m4u3l2001/src/main/java/cl/lherrera/m4u3l2001/entity/Usuario.java Lo que era un modelo, ahora es una entidad, con esta anotaci\u00f3n se proclama esta clase como un componente, y ser\u00e1 tratado como un bean para que pueda ser inyectado. @SequenceGenerator , depende del motor es el tipo de generador, el que se expone es para oracle , un SqLite deber\u00eda ser de incremento autom\u00e1tico.\u001c package cl.lherrera.m4u3l2001.entity; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.SequenceGenerator; import javax.persistence.Table; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; @Entity @SequenceGenerator(name=\"SQUSUARIO\", initialValue=1, allocationSize=1,sequenceName = \"SQUSUARIO\") @Data // setters & getters @NoArgsConstructor // constructor sin argumentos. @AllArgsConstructor // constructor con todos los argumentos. @Table(name=\"usuario\") // nombre de la tabla en en caso que la clase no se llame como la tabla public class Usuario { @Id @GeneratedValue(strategy=GenerationType.SEQUENCE, generator=\"SQUSUARIO\") private Integer idUsuario; // solo a modo de ejemplo, en el caso que la columna en la base // de datos sea diferente. En este caso son el mismo nombre // pero no siempre esto debe ser as\u00ed. @Column(name=\"nombre\") private String nombre; private String clave; private Integer rut; private String dv; } /m4u3l2001/src/main/java/cl/lherrera/m4u3l2001/repositories/UsuarioRepository.java Como la capa de acceso tenemos estos repositorios, reemplazando la tarea que ten\u00edan los DAOS. No necesita implementaci\u00f3n al ser inyectado se crear\u00e1 una implementaci\u00f3n con los m\u00e9todos m\u00e1s comunes como add, delete,...etc . Adem\u00e1s de poder agregar m\u00e1s si se requiere. package cl.lherrera.m4u3l2001.repositories; import org.springframework.data.repository.CrudRepository; import cl.lherrera.m4u3l2001.entity.Usuario; // con s\u00f3lo esto ya tenemos el CRUD public interface UsuarioRepository extends CrudRepository<Usuario, Integer> {} /m4u3l2001/src/main/java/cl/lherrera/m4u3l2001/services/UsuarioService.java package cl.lherrera.m4u3l2001.services; import cl.lherrera.m4u3l2001.vos.UsuarioVO; public interface UsuarioService { UsuarioVO ObtenerTodosLosUsuarios(); } /m4u3l2001/src/main/java/cl/lherrera/m4u3l2001/services/UsuarioServiceImpl.java \u001c package cl.lherrera.m4u3l2001.services; import java.util.ArrayList; import java.util.List; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional; import cl.lherrera.m4u3l2001.entity.Usuario; import cl.lherrera.m4u3l2001.repositories.UsuarioRepository; import cl.lherrera.m4u3l2001.vos.UsuarioVO; @Service public class UsuarioServiceImpl implements UsuarioService{ private static Logger logger = LoggerFactory.getLogger(UsuarioServiceImpl.class.getName()); @Autowired private UsuarioRepository daoUsuario; private UsuarioVO usuarioVO; @Override @Transactional(readOnly = true) public UsuarioVO ObtenerTodosLosUsuarios() { usuarioVO = new UsuarioVO(new ArrayList<Usuario>(), \"Ha ocurrido un error\", \"102\"); try { usuarioVO.setUsuarios((List<Usuario>) daoUsuario.findAll()); usuarioVO.setMensaje(String.format(\"Se ha/n encontrado %d registro/s\", usuarioVO.getUsuarios().size())); usuarioVO.setCodigo(\"0\"); } catch (Exception e) { logger.trace(\"Usuario Service: Error en getAllUsuarios\", e); } return usuarioVO; } } /m4u3l2001/src/main/java/cl/lherrera/m4u3l2001/vos/UsuarioVO.java \u001d Objeto que representar\u00e1 lo que la vista necesita. DTO \u001d package cl.lherrera.m4u3l2001.vos; import java.util.List; import cl.lherrera.m4u3l2001.entity.Usuario; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; // instalar lombok con el ide cerrado // https://stackoverflow.com/questions/52780535/lombok-with-spring-tool-suite-4 // si no funciona implementar los c\u00f3digos no perder el tiempo // si no funciona, aunque en mac es con el ini en windows es con exe especificar // donde est\u00e9 instalado @Data @AllArgsConstructor @NoArgsConstructor public class UsuarioVO { private List<Usuario> usuarios; private String mensaje; private String codigo; } /m4u3l2001/src/main/resources/database.properties Archivo personalizado de propiedades driver=oracle.jdbc.driver.OracleDriver url=jdbc:oracle:thin:@localhost:1521:xe dbuser=mod5u2l1 dbpassword=1234 /m4u3l2001/src/test/java/cl/lherrera/m4u3l2001/services/UsuarioServiceImplTest.java package cl.lherrera.m4u3l2001.services; import static org.junit.jupiter.api.Assertions.assertTrue; import org.junit.jupiter.api.DisplayName; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.context.SpringBootTest; import cl.lherrera.m4u3l2001.vos.UsuarioVO; @SpringBootTest @DisplayName(\"Prueba de servicios\") public class UsuarioServiceImplTest { @Autowired UsuarioServiceImpl servicio; @Test @DisplayName(\"Traer todos los usuarios\") public void prueba001() { // guadamos en una lista los usuarios UsuarioVO usuarioVO = servicio.ObtenerTodosLosUsuarios(); // deben existir 2 usuarios en la base de datos assertTrue(usuarioVO.getUsuarios().size() >= 2); } } /m4u3l2001/pom.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.6.RELEASE</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>cl.lherrera.m4u2l2</groupId> <artifactId>m4u3l2001</artifactId> <version>0.0.1-SNAPSHOT</version> <packaging>war</packaging> <name>m4u3l2001</name> <description>Lectura 2 mod 5 uni 2</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-jpa</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <scope>runtime</scope> <optional>true</optional> </dependency> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <optional>true</optional> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> <scope>provided</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> <!-- ODBC-ORACLE --> <dependency> <groupId>com.oracle.jdbc</groupId> <artifactId>ojdbc8</artifactId> <version>12.2.0.1</version> </dependency> <!-- ODBC-ORACLE # --> </dependencies> <!-- ODBC-ORACLE --> <repositories> <repository> <id>xwiki-externals</id> <name>https://maven.xwiki.org/externals/</name> <url>https://maven.xwiki.org/externals/</url> </repository> </repositories> <!-- ODBC-ORACLE # --> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project> Al ejecutar los test, teniendo al menos dos elementos en la base de datos, estos no deber\u00edan presentar fallas. Hito 2 - Servicio y CRUD Nuestro CRUD se divide en leer, escribir, actualizar y eliminar. Leer: Obtener todos los usuarios. Obtener usuario con su nombre y clave Escribir Ingresar Usuario Actualizar Actualizar Usuario Eliminar Eliminar Usuario Archivos modificados /m4u3l2001/src/main/java/cl/lherrera/m5u3l2001/entity/Usuario.java \u001c FIX \u001d - Se cambia el valor de la secuencia para que sea la misma que la que est\u00e1 en la base de datos. package cl.lherrera.m5u3l2001.entity; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.SequenceGenerator; import javax.persistence.Table; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; @Entity @SequenceGenerator( name=\"SQ_USUARIO\", initialValue=1, allocationSize=1, sequenceName = \"SQ_USUARIO\") // esta es la secuencia que se crea en la base de datos (mismo nombre) @Data // setters & getters @NoArgsConstructor // constructor sin argumentos. @AllArgsConstructor // constructor con todos los argumentos. @Table(name=\"usuario\") // nombre de la tabla en en caso que la clase no se llame como la tabla public class Usuario { @Id @GeneratedValue(strategy=GenerationType.SEQUENCE, generator=\"SQ_USUARIO\") private Integer idUsuario; // solo a modo de ejemplo, en el caso que la columna en la base // de datos sea diferente. En este caso son el mismo nombre // pero no siempre esto debe ser as\u00ed. @Column(name=\"nombre\") private String nombre; private String clave; private Integer rut; private String dv; } /m4u3l2001/src/main/java/cl/lherrera/m5u3l2001/repositories/UsuarioRepository.java package cl.lherrera.m5u3l2001.repositories; import java.util.Optional; import org.springframework.data.repository.CrudRepository; import cl.lherrera.m5u3l2001.entity.Usuario; // con s\u00f3lo esto ya tenemos el CRUD public interface UsuarioRepository extends CrudRepository<Usuario, Integer> { public Optional<Usuario> findOneByNombreAndClave(String nombre, String clave); } /m4u3l2001/src/main/java/cl/lherrera/m5u3l2001/services/UsuarioService.java \u001c Se agregan los m\u00e9todos para el CRUD package cl.lherrera.m5u3l2001.services; import cl.lherrera.m5u3l2001.vos.UsuarioVO; public interface UsuarioService { UsuarioVO ObtenerUsuarioPorNombreYClave(String nombre, String clave); UsuarioVO ObtenerTodosLosUsuarios(); UsuarioVO ingresarUsuario(UsuarioVO usuarioVO); UsuarioVO actualizarUsuario(UsuarioVO usuarioVO); UsuarioVO eliminarUsuario(UsuarioVO usuarioVO); } /m4u3l2001/src/main/java/cl/lherrera/m5u3l2001/services/UsuarioServiceImpl.java \u001c Se implementan los m\u00e9todos necesarios para el CRUD package cl.lherrera.m5u3l2001.services; import java.util.List; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional; import cl.lherrera.m5u3l2001.entity.Usuario; import cl.lherrera.m5u3l2001.repositories.UsuarioRepository; import cl.lherrera.m5u3l2001.vos.UsuarioVO; @Service public class UsuarioServiceImpl implements UsuarioService { private static Logger logger = LoggerFactory.getLogger(UsuarioServiceImpl.class.getName()); @Autowired private UsuarioRepository daoUsuario; public UsuarioVO ObtenerUsuarioPorNombreYClave(String nombre, String clave) { UsuarioVO usuarioVO = new UsuarioVO(\"Ha ocurrido un error\", \"102\"); try { Usuario usuario = daoUsuario.findOneByNombreAndClave(nombre, clave).orElse(null); usuarioVO.setUsuario(usuario); usuarioVO.setMensaje(String.format(\"Se ha/n encontrado %d registro/s\", usuarioVO.getUsuarios().size())); usuarioVO.setCodigo(\"0\"); } catch (Exception e) { logger.trace(\"Usuario Service: Error en getAllUsuarios\", e); } return usuarioVO; } @Override @Transactional(readOnly = true) public UsuarioVO ObtenerTodosLosUsuarios() { UsuarioVO usuarioVO = new UsuarioVO(\"Ha ocurrido un error\", \"102\"); try { usuarioVO.setUsuarios((List<Usuario>) daoUsuario.findAll()); usuarioVO.setMensaje(String.format(\"Se ha/n encontrado %d registro/s\", usuarioVO.getUsuarios().size())); usuarioVO.setCodigo(\"0\"); } catch (Exception e) { logger.trace(\"Usuario Service: Error en getAllUsuarios\", e); } return usuarioVO; } @Override @Transactional public UsuarioVO ingresarUsuario(UsuarioVO usuarioVO) { UsuarioVO voUsuarioResp = new UsuarioVO(\"Ha ocurrido un error\", \"104\"); try { Usuario usuario = daoUsuario.save(usuarioVO.getFirst()); voUsuarioResp.setMensaje( usuario != null ? \"Se ha creado el usuario correctamente\" : \"No se ha podido crear el usuario\"); voUsuarioResp.setCodigo(usuario != null ? \"0\" : \"104\"); } catch (Exception e) { logger.trace(\"Usuario Service: Error en add\", e); } return voUsuarioResp; } @Override @Transactional public UsuarioVO actualizarUsuario(UsuarioVO usuarioVO) { UsuarioVO respuesta = new UsuarioVO(\"Ha ocurrido un error\", \"105\"); try { Usuario usuario = daoUsuario.save(usuarioVO.getFirst()); if (usuario != null) { respuesta.setMensaje(String.format(\"Se ha/n actualizado correctamente %s usuario/s\", usuario.getNombre())); respuesta.setCodigo(\"0\"); } } catch (Exception e) { logger.trace(\"Usuario Service: Error en update\", e); } return respuesta; } @Override @Transactional public UsuarioVO eliminarUsuario(UsuarioVO usuarioVO) { usuarioVO.setMensaje(\"Ha ocurrido un error\"); usuarioVO.setCodigo(\"106\"); try { daoUsuario.delete(usuarioVO.getFirst()); usuarioVO.setMensaje(String.format(\"Se ha/n eliminado correctamente a %s usuario/s\", usuarioVO.getFirst().getNombre())); usuarioVO.setCodigo(\"0\"); } catch (Exception e) { logger.trace(\"Usuario Service: Error en delete\", e); } return usuarioVO; } } /m4u3l2001/src/main/java/cl/lherrera/m5u3l2001/vos/UsuarioVO.java FIX - Modificaci\u00f3n de archivo de usuario visual, para mejor funcionamiento.\u001c\u001c package cl.lherrera.m5u3l2001.vos; import java.util.ArrayList; import java.util.List; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import cl.lherrera.m5u3l2001.entity.Usuario; import lombok.Data; import lombok.NoArgsConstructor; // instalar lombok con el ide cerrado // https://stackoverflow.com/questions/52780535/lombok-with-spring-tool-suite-4 // si no funciona implementar los c\u00f3digos no perder el tiempo // si no funciona, aunque en mac es con el ini en windows es con exe especificar // donde est\u00e9 instalado // https://www.wandercosta.com/lombok-constructors/ @Data @NoArgsConstructor public class UsuarioVO { private List<Usuario> usuarios = new ArrayList<>(); private String mensaje; private String codigo; private static Logger logger = LoggerFactory.getLogger(UsuarioVO.class.getName()); public UsuarioVO(String mensaje, String codigo) { this.mensaje = mensaje; this.codigo = codigo; } /** * Ingresa un usuario para aquellos m\u00e9todos * que solo necesitan ingresar un usuario * y no una lista. */ public Usuario setUsuario(Usuario usuario) { if(usuarios.size() > 0) { logger.warn(\"Advertencia: La lista de usuarios ya existe: \" + usuarios.toString()); }else { usuarios.add(usuario); } return usuario; } /** * Retorna el primer usuario de la lista que fue ingresado. * Es \u00fatil solamente cuando sabemos que hay un solo elemento */ public Usuario getFirst() { if(usuarios.size() > 1) logger.warn(\"Advertencia: El arreglo posee m\u00e1s de un elemento\"); return usuarios.get(0); } } /m4u3l2001/src/test/java/cl/lherrera/m5u3l2001/services/UsuarioServiceImplTest.java \u001c Se agregan los test necesarios para realizar las pruebas restantes para el CRUD. package cl.lherrera.m5u3l2001.services; import static org.junit.jupiter.api.Assertions.assertTrue; import org.junit.jupiter.api.DisplayName; import org.junit.jupiter.api.Test; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.context.SpringBootTest; import cl.lherrera.m5u3l2001.entity.Usuario; import cl.lherrera.m5u3l2001.services.UsuarioServiceImpl; import cl.lherrera.m5u3l2001.vos.UsuarioVO; @SpringBootTest @DisplayName(\"Prueba de servicios\") public class UsuarioServiceImplTest { private Logger logger = LoggerFactory.getLogger(UsuarioServiceImplTest.class.getName()); @Autowired UsuarioServiceImpl servicio; @Test @DisplayName(\"Traer todos los usuarios\") public void prueba001() { // guadamos en una lista los usuarios UsuarioVO usuarioVO = servicio.ObtenerTodosLosUsuarios(); // deben existir 2 usuarios en la base de datos assertTrue(usuarioVO.getUsuarios().size() >= 2); } @Test @DisplayName(\"Probar ingresar usuario\") public void prueba002() { // creamos un usuario Usuario usuario = new Usuario(); usuario.setNombre(\"test1\"); usuario.setClave(\"clave1\"); // cargamos el usuario en el VO UsuarioVO usuarioVO = new UsuarioVO(); usuarioVO.setUsuario(usuario); // ingresamos el usuario con el servicio UsuarioVO respuesta = servicio.ingresarUsuario(usuarioVO); assertTrue(respuesta.getMensaje().contains(\"Se ha creado el usuario correctamente\")); } @Test @DisplayName(\"Prueba servicio update\") public void prueba003() { // llamamos al usuario UsuarioVO usuarioVO = servicio.ObtenerUsuarioPorNombreYClave(\"test1\", \"clave1\"); // cambiamos un valor usuarioVO.getFirst().setNombre(\"test2\"); usuarioVO = servicio.actualizarUsuario(usuarioVO); // comprobamos con mensaje retornado del servicio assertTrue(usuarioVO.getMensaje().contains(\"actualizado correctamente\")); } @Test @DisplayName(\"Prueba de eliminado\") public void prueba004() { // se busca el usuario UsuarioVO usuarioVO = servicio.ObtenerUsuarioPorNombreYClave(\"test2\", \"clave1\"); usuarioVO = servicio.eliminarUsuario(usuarioVO); logger.info(usuarioVO.getMensaje()); assertTrue(usuarioVO.getMensaje().contains(\"eliminado correctamente\")); } } Hito 3 - La web Se crear\u00e1 un mantenedor con los servicios que tenemos La web no ser\u00e1 compleja, estar\u00e1 enfocada a la utilizaci\u00f3n de servicios.","title":"Modelo (Parte II)"},{"location":"modulos/mod_5/uni003/respaldos/lectura002_bkp/#modelo-parte-ii","text":"","title":"Modelo (Parte II)"},{"location":"modulos/mod_5/uni003/respaldos/lectura002_bkp/#aplicacion-jpa","text":"La siguiente aplicaci\u00f3n mostrar\u00e1 la forma en que se trabaja con JPA , adem\u00e1s de la utilizaci\u00f3n de lombok , esta es una librer\u00eda que ahora tareas repetitivas como la programaci\u00f3n de los los setters & getters , o los constructores. Se instala agregando la dependencia en el pom , luego vamos a maven dependencies all\u00ed buscamos el paquete y en propiedades sabremos donde est\u00e1. vamos all\u00e1 y ejecutamos el jar que encontremos dentro de la carpeta, el jar que m\u00e1s se parezca al nombre de la extensi\u00f3n. lo ejecutamos y seleccionamos nuestro IDE, si no est\u00e1 en la lista la especificamos, en el caso de mac , es el ini dentro de la carpeta que est\u00e1 en Aplications . Hacer esto con el IDE cerrado o a veces no funciona.","title":"Aplicaci\u00f3n - JPA"},{"location":"modulos/mod_5/uni003/respaldos/lectura002_bkp/#contexto","text":"La aplicaci\u00f3n es muy similar a la anterior, pero esta vez se utilizar\u00e1 JPA , que es la forma de trabajar con persistencia m\u00e1s utilizada en Spring . Es la norma en muchas compa\u00f1\u00edas ya que viene desde Hibernate .","title":"Contexto"},{"location":"modulos/mod_5/uni003/respaldos/lectura002_bkp/#hito-1-obtener-todos-los-usuarios","text":"Crear la aplicaci\u00f3n spring boot con las siguientes dependencias: JPA , Spring web starter , DevTools , Lombok .","title":"Hito 1 - Obtener Todos Los Usuarios"},{"location":"modulos/mod_5/uni003/respaldos/lectura002_bkp/#estructura","text":"./ \u251c\u2500\u2500 HELP.md \u251c\u2500\u2500 mvnw \u251c\u2500\u2500 mvnw.cmd \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 m4u3l2001 \u2502 \u2502 \u2502 \u251c\u2500\u2500 AppConfig.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 M4u3l2001Application.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 ServletInitializer.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 entity \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 Usuario.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 repositories \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioRepository.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 services \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 UsuarioService.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioServiceImpl.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 vos \u2502 \u2502 \u2502 \u2514\u2500\u2500 UsuarioVO.java \u2502 \u2502 \u251c\u2500\u2500 resources \u2502 \u2502 \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2502 \u2502 \u251c\u2500\u2500 database.properties \u2502 \u2502 \u2502 \u251c\u2500\u2500 static \u2502 \u2502 \u2502 \u2514\u2500\u2500 templates \u2502 \u2502 \u2514\u2500\u2500 webapp \u2502 \u2514\u2500\u2500 test \u2502 \u2514\u2500\u2500 java \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 m4u3l2001 \u2502 \u251c\u2500\u2500 M4u3l2001ApplicationTests.java \u2502 \u2514\u2500\u2500 services \u2502 \u2514\u2500\u2500 UsuarioServiceImplTest.java \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2514\u2500\u2500 database.properties \u251c\u2500\u2500 generated-sources \u2502 \u2514\u2500\u2500 annotations \u251c\u2500\u2500 generated-test-sources \u2502 \u2514\u2500\u2500 test-annotations \u251c\u2500\u2500 m2e-wtp \u2502 \u2514\u2500\u2500 web-resources \u2502 \u2514\u2500\u2500 META-INF \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 maven \u2502 \u2514\u2500\u2500 cl.lherrera.m4u2l2 \u2502 \u2514\u2500\u2500 m4u3l2001 \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2514\u2500\u2500 pom.xml \u2514\u2500\u2500 test-classes 34 directories, 23 files","title":"Estructura:"},{"location":"modulos/mod_5/uni003/respaldos/lectura002_bkp/#archivos-modificados","text":"/m4u3l2001/src/main/java/cl/lherrera/m4u3l2001/AppConfig.java Configuraci\u00f3n personalizada de la base de datos para el contexto. package cl.lherrera.m4u3l2001; import javax.sql.DataSource; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.PropertySource; import org.springframework.core.env.Environment; import org.springframework.jdbc.datasource.DriverManagerDataSource; @Configuration @ComponentScan(\"com.latam.usuarios\") @PropertySource(\"classpath:database.properties\") public class AppConfig { @Autowired Environment environment; @Bean DataSource dataSource() { DriverManagerDataSource driverManagerDataSource = new DriverManagerDataSource(); driverManagerDataSource.setUrl(environment.getProperty(\"url\")); driverManagerDataSource.setUsername(environment.getProperty(\"dbuser\")); driverManagerDataSource.setPassword(environment.getProperty(\"dbpassword\")); driverManagerDataSource.setDriverClassName(environment.getProperty(\"driver\")); return driverManagerDataSource; } } /m4u3l2001/src/main/java/cl/lherrera/m4u3l2001/entity/Usuario.java Lo que era un modelo, ahora es una entidad, con esta anotaci\u00f3n se proclama esta clase como un componente, y ser\u00e1 tratado como un bean para que pueda ser inyectado. @SequenceGenerator , depende del motor es el tipo de generador, el que se expone es para oracle , un SqLite deber\u00eda ser de incremento autom\u00e1tico.\u001c package cl.lherrera.m4u3l2001.entity; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.SequenceGenerator; import javax.persistence.Table; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; @Entity @SequenceGenerator(name=\"SQUSUARIO\", initialValue=1, allocationSize=1,sequenceName = \"SQUSUARIO\") @Data // setters & getters @NoArgsConstructor // constructor sin argumentos. @AllArgsConstructor // constructor con todos los argumentos. @Table(name=\"usuario\") // nombre de la tabla en en caso que la clase no se llame como la tabla public class Usuario { @Id @GeneratedValue(strategy=GenerationType.SEQUENCE, generator=\"SQUSUARIO\") private Integer idUsuario; // solo a modo de ejemplo, en el caso que la columna en la base // de datos sea diferente. En este caso son el mismo nombre // pero no siempre esto debe ser as\u00ed. @Column(name=\"nombre\") private String nombre; private String clave; private Integer rut; private String dv; } /m4u3l2001/src/main/java/cl/lherrera/m4u3l2001/repositories/UsuarioRepository.java Como la capa de acceso tenemos estos repositorios, reemplazando la tarea que ten\u00edan los DAOS. No necesita implementaci\u00f3n al ser inyectado se crear\u00e1 una implementaci\u00f3n con los m\u00e9todos m\u00e1s comunes como add, delete,...etc . Adem\u00e1s de poder agregar m\u00e1s si se requiere. package cl.lherrera.m4u3l2001.repositories; import org.springframework.data.repository.CrudRepository; import cl.lherrera.m4u3l2001.entity.Usuario; // con s\u00f3lo esto ya tenemos el CRUD public interface UsuarioRepository extends CrudRepository<Usuario, Integer> {} /m4u3l2001/src/main/java/cl/lherrera/m4u3l2001/services/UsuarioService.java package cl.lherrera.m4u3l2001.services; import cl.lherrera.m4u3l2001.vos.UsuarioVO; public interface UsuarioService { UsuarioVO ObtenerTodosLosUsuarios(); } /m4u3l2001/src/main/java/cl/lherrera/m4u3l2001/services/UsuarioServiceImpl.java \u001c package cl.lherrera.m4u3l2001.services; import java.util.ArrayList; import java.util.List; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional; import cl.lherrera.m4u3l2001.entity.Usuario; import cl.lherrera.m4u3l2001.repositories.UsuarioRepository; import cl.lherrera.m4u3l2001.vos.UsuarioVO; @Service public class UsuarioServiceImpl implements UsuarioService{ private static Logger logger = LoggerFactory.getLogger(UsuarioServiceImpl.class.getName()); @Autowired private UsuarioRepository daoUsuario; private UsuarioVO usuarioVO; @Override @Transactional(readOnly = true) public UsuarioVO ObtenerTodosLosUsuarios() { usuarioVO = new UsuarioVO(new ArrayList<Usuario>(), \"Ha ocurrido un error\", \"102\"); try { usuarioVO.setUsuarios((List<Usuario>) daoUsuario.findAll()); usuarioVO.setMensaje(String.format(\"Se ha/n encontrado %d registro/s\", usuarioVO.getUsuarios().size())); usuarioVO.setCodigo(\"0\"); } catch (Exception e) { logger.trace(\"Usuario Service: Error en getAllUsuarios\", e); } return usuarioVO; } } /m4u3l2001/src/main/java/cl/lherrera/m4u3l2001/vos/UsuarioVO.java \u001d Objeto que representar\u00e1 lo que la vista necesita. DTO \u001d package cl.lherrera.m4u3l2001.vos; import java.util.List; import cl.lherrera.m4u3l2001.entity.Usuario; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; // instalar lombok con el ide cerrado // https://stackoverflow.com/questions/52780535/lombok-with-spring-tool-suite-4 // si no funciona implementar los c\u00f3digos no perder el tiempo // si no funciona, aunque en mac es con el ini en windows es con exe especificar // donde est\u00e9 instalado @Data @AllArgsConstructor @NoArgsConstructor public class UsuarioVO { private List<Usuario> usuarios; private String mensaje; private String codigo; } /m4u3l2001/src/main/resources/database.properties Archivo personalizado de propiedades driver=oracle.jdbc.driver.OracleDriver url=jdbc:oracle:thin:@localhost:1521:xe dbuser=mod5u2l1 dbpassword=1234 /m4u3l2001/src/test/java/cl/lherrera/m4u3l2001/services/UsuarioServiceImplTest.java package cl.lherrera.m4u3l2001.services; import static org.junit.jupiter.api.Assertions.assertTrue; import org.junit.jupiter.api.DisplayName; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.context.SpringBootTest; import cl.lherrera.m4u3l2001.vos.UsuarioVO; @SpringBootTest @DisplayName(\"Prueba de servicios\") public class UsuarioServiceImplTest { @Autowired UsuarioServiceImpl servicio; @Test @DisplayName(\"Traer todos los usuarios\") public void prueba001() { // guadamos en una lista los usuarios UsuarioVO usuarioVO = servicio.ObtenerTodosLosUsuarios(); // deben existir 2 usuarios en la base de datos assertTrue(usuarioVO.getUsuarios().size() >= 2); } } /m4u3l2001/pom.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.6.RELEASE</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>cl.lherrera.m4u2l2</groupId> <artifactId>m4u3l2001</artifactId> <version>0.0.1-SNAPSHOT</version> <packaging>war</packaging> <name>m4u3l2001</name> <description>Lectura 2 mod 5 uni 2</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-jpa</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <scope>runtime</scope> <optional>true</optional> </dependency> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <optional>true</optional> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> <scope>provided</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> <!-- ODBC-ORACLE --> <dependency> <groupId>com.oracle.jdbc</groupId> <artifactId>ojdbc8</artifactId> <version>12.2.0.1</version> </dependency> <!-- ODBC-ORACLE # --> </dependencies> <!-- ODBC-ORACLE --> <repositories> <repository> <id>xwiki-externals</id> <name>https://maven.xwiki.org/externals/</name> <url>https://maven.xwiki.org/externals/</url> </repository> </repositories> <!-- ODBC-ORACLE # --> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project> Al ejecutar los test, teniendo al menos dos elementos en la base de datos, estos no deber\u00edan presentar fallas.","title":"Archivos modificados"},{"location":"modulos/mod_5/uni003/respaldos/lectura002_bkp/#hito-2-servicio-y-crud","text":"Nuestro CRUD se divide en leer, escribir, actualizar y eliminar. Leer: Obtener todos los usuarios. Obtener usuario con su nombre y clave Escribir Ingresar Usuario Actualizar Actualizar Usuario Eliminar Eliminar Usuario","title":"Hito 2 - Servicio y CRUD"},{"location":"modulos/mod_5/uni003/respaldos/lectura002_bkp/#archivos-modificados_1","text":"/m4u3l2001/src/main/java/cl/lherrera/m5u3l2001/entity/Usuario.java \u001c FIX \u001d - Se cambia el valor de la secuencia para que sea la misma que la que est\u00e1 en la base de datos. package cl.lherrera.m5u3l2001.entity; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.SequenceGenerator; import javax.persistence.Table; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; @Entity @SequenceGenerator( name=\"SQ_USUARIO\", initialValue=1, allocationSize=1, sequenceName = \"SQ_USUARIO\") // esta es la secuencia que se crea en la base de datos (mismo nombre) @Data // setters & getters @NoArgsConstructor // constructor sin argumentos. @AllArgsConstructor // constructor con todos los argumentos. @Table(name=\"usuario\") // nombre de la tabla en en caso que la clase no se llame como la tabla public class Usuario { @Id @GeneratedValue(strategy=GenerationType.SEQUENCE, generator=\"SQ_USUARIO\") private Integer idUsuario; // solo a modo de ejemplo, en el caso que la columna en la base // de datos sea diferente. En este caso son el mismo nombre // pero no siempre esto debe ser as\u00ed. @Column(name=\"nombre\") private String nombre; private String clave; private Integer rut; private String dv; } /m4u3l2001/src/main/java/cl/lherrera/m5u3l2001/repositories/UsuarioRepository.java package cl.lherrera.m5u3l2001.repositories; import java.util.Optional; import org.springframework.data.repository.CrudRepository; import cl.lherrera.m5u3l2001.entity.Usuario; // con s\u00f3lo esto ya tenemos el CRUD public interface UsuarioRepository extends CrudRepository<Usuario, Integer> { public Optional<Usuario> findOneByNombreAndClave(String nombre, String clave); } /m4u3l2001/src/main/java/cl/lherrera/m5u3l2001/services/UsuarioService.java \u001c Se agregan los m\u00e9todos para el CRUD package cl.lherrera.m5u3l2001.services; import cl.lherrera.m5u3l2001.vos.UsuarioVO; public interface UsuarioService { UsuarioVO ObtenerUsuarioPorNombreYClave(String nombre, String clave); UsuarioVO ObtenerTodosLosUsuarios(); UsuarioVO ingresarUsuario(UsuarioVO usuarioVO); UsuarioVO actualizarUsuario(UsuarioVO usuarioVO); UsuarioVO eliminarUsuario(UsuarioVO usuarioVO); } /m4u3l2001/src/main/java/cl/lherrera/m5u3l2001/services/UsuarioServiceImpl.java \u001c Se implementan los m\u00e9todos necesarios para el CRUD package cl.lherrera.m5u3l2001.services; import java.util.List; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional; import cl.lherrera.m5u3l2001.entity.Usuario; import cl.lherrera.m5u3l2001.repositories.UsuarioRepository; import cl.lherrera.m5u3l2001.vos.UsuarioVO; @Service public class UsuarioServiceImpl implements UsuarioService { private static Logger logger = LoggerFactory.getLogger(UsuarioServiceImpl.class.getName()); @Autowired private UsuarioRepository daoUsuario; public UsuarioVO ObtenerUsuarioPorNombreYClave(String nombre, String clave) { UsuarioVO usuarioVO = new UsuarioVO(\"Ha ocurrido un error\", \"102\"); try { Usuario usuario = daoUsuario.findOneByNombreAndClave(nombre, clave).orElse(null); usuarioVO.setUsuario(usuario); usuarioVO.setMensaje(String.format(\"Se ha/n encontrado %d registro/s\", usuarioVO.getUsuarios().size())); usuarioVO.setCodigo(\"0\"); } catch (Exception e) { logger.trace(\"Usuario Service: Error en getAllUsuarios\", e); } return usuarioVO; } @Override @Transactional(readOnly = true) public UsuarioVO ObtenerTodosLosUsuarios() { UsuarioVO usuarioVO = new UsuarioVO(\"Ha ocurrido un error\", \"102\"); try { usuarioVO.setUsuarios((List<Usuario>) daoUsuario.findAll()); usuarioVO.setMensaje(String.format(\"Se ha/n encontrado %d registro/s\", usuarioVO.getUsuarios().size())); usuarioVO.setCodigo(\"0\"); } catch (Exception e) { logger.trace(\"Usuario Service: Error en getAllUsuarios\", e); } return usuarioVO; } @Override @Transactional public UsuarioVO ingresarUsuario(UsuarioVO usuarioVO) { UsuarioVO voUsuarioResp = new UsuarioVO(\"Ha ocurrido un error\", \"104\"); try { Usuario usuario = daoUsuario.save(usuarioVO.getFirst()); voUsuarioResp.setMensaje( usuario != null ? \"Se ha creado el usuario correctamente\" : \"No se ha podido crear el usuario\"); voUsuarioResp.setCodigo(usuario != null ? \"0\" : \"104\"); } catch (Exception e) { logger.trace(\"Usuario Service: Error en add\", e); } return voUsuarioResp; } @Override @Transactional public UsuarioVO actualizarUsuario(UsuarioVO usuarioVO) { UsuarioVO respuesta = new UsuarioVO(\"Ha ocurrido un error\", \"105\"); try { Usuario usuario = daoUsuario.save(usuarioVO.getFirst()); if (usuario != null) { respuesta.setMensaje(String.format(\"Se ha/n actualizado correctamente %s usuario/s\", usuario.getNombre())); respuesta.setCodigo(\"0\"); } } catch (Exception e) { logger.trace(\"Usuario Service: Error en update\", e); } return respuesta; } @Override @Transactional public UsuarioVO eliminarUsuario(UsuarioVO usuarioVO) { usuarioVO.setMensaje(\"Ha ocurrido un error\"); usuarioVO.setCodigo(\"106\"); try { daoUsuario.delete(usuarioVO.getFirst()); usuarioVO.setMensaje(String.format(\"Se ha/n eliminado correctamente a %s usuario/s\", usuarioVO.getFirst().getNombre())); usuarioVO.setCodigo(\"0\"); } catch (Exception e) { logger.trace(\"Usuario Service: Error en delete\", e); } return usuarioVO; } } /m4u3l2001/src/main/java/cl/lherrera/m5u3l2001/vos/UsuarioVO.java FIX - Modificaci\u00f3n de archivo de usuario visual, para mejor funcionamiento.\u001c\u001c package cl.lherrera.m5u3l2001.vos; import java.util.ArrayList; import java.util.List; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import cl.lherrera.m5u3l2001.entity.Usuario; import lombok.Data; import lombok.NoArgsConstructor; // instalar lombok con el ide cerrado // https://stackoverflow.com/questions/52780535/lombok-with-spring-tool-suite-4 // si no funciona implementar los c\u00f3digos no perder el tiempo // si no funciona, aunque en mac es con el ini en windows es con exe especificar // donde est\u00e9 instalado // https://www.wandercosta.com/lombok-constructors/ @Data @NoArgsConstructor public class UsuarioVO { private List<Usuario> usuarios = new ArrayList<>(); private String mensaje; private String codigo; private static Logger logger = LoggerFactory.getLogger(UsuarioVO.class.getName()); public UsuarioVO(String mensaje, String codigo) { this.mensaje = mensaje; this.codigo = codigo; } /** * Ingresa un usuario para aquellos m\u00e9todos * que solo necesitan ingresar un usuario * y no una lista. */ public Usuario setUsuario(Usuario usuario) { if(usuarios.size() > 0) { logger.warn(\"Advertencia: La lista de usuarios ya existe: \" + usuarios.toString()); }else { usuarios.add(usuario); } return usuario; } /** * Retorna el primer usuario de la lista que fue ingresado. * Es \u00fatil solamente cuando sabemos que hay un solo elemento */ public Usuario getFirst() { if(usuarios.size() > 1) logger.warn(\"Advertencia: El arreglo posee m\u00e1s de un elemento\"); return usuarios.get(0); } } /m4u3l2001/src/test/java/cl/lherrera/m5u3l2001/services/UsuarioServiceImplTest.java \u001c Se agregan los test necesarios para realizar las pruebas restantes para el CRUD. package cl.lherrera.m5u3l2001.services; import static org.junit.jupiter.api.Assertions.assertTrue; import org.junit.jupiter.api.DisplayName; import org.junit.jupiter.api.Test; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.context.SpringBootTest; import cl.lherrera.m5u3l2001.entity.Usuario; import cl.lherrera.m5u3l2001.services.UsuarioServiceImpl; import cl.lherrera.m5u3l2001.vos.UsuarioVO; @SpringBootTest @DisplayName(\"Prueba de servicios\") public class UsuarioServiceImplTest { private Logger logger = LoggerFactory.getLogger(UsuarioServiceImplTest.class.getName()); @Autowired UsuarioServiceImpl servicio; @Test @DisplayName(\"Traer todos los usuarios\") public void prueba001() { // guadamos en una lista los usuarios UsuarioVO usuarioVO = servicio.ObtenerTodosLosUsuarios(); // deben existir 2 usuarios en la base de datos assertTrue(usuarioVO.getUsuarios().size() >= 2); } @Test @DisplayName(\"Probar ingresar usuario\") public void prueba002() { // creamos un usuario Usuario usuario = new Usuario(); usuario.setNombre(\"test1\"); usuario.setClave(\"clave1\"); // cargamos el usuario en el VO UsuarioVO usuarioVO = new UsuarioVO(); usuarioVO.setUsuario(usuario); // ingresamos el usuario con el servicio UsuarioVO respuesta = servicio.ingresarUsuario(usuarioVO); assertTrue(respuesta.getMensaje().contains(\"Se ha creado el usuario correctamente\")); } @Test @DisplayName(\"Prueba servicio update\") public void prueba003() { // llamamos al usuario UsuarioVO usuarioVO = servicio.ObtenerUsuarioPorNombreYClave(\"test1\", \"clave1\"); // cambiamos un valor usuarioVO.getFirst().setNombre(\"test2\"); usuarioVO = servicio.actualizarUsuario(usuarioVO); // comprobamos con mensaje retornado del servicio assertTrue(usuarioVO.getMensaje().contains(\"actualizado correctamente\")); } @Test @DisplayName(\"Prueba de eliminado\") public void prueba004() { // se busca el usuario UsuarioVO usuarioVO = servicio.ObtenerUsuarioPorNombreYClave(\"test2\", \"clave1\"); usuarioVO = servicio.eliminarUsuario(usuarioVO); logger.info(usuarioVO.getMensaje()); assertTrue(usuarioVO.getMensaje().contains(\"eliminado correctamente\")); } }","title":"Archivos modificados"},{"location":"modulos/mod_5/uni003/respaldos/lectura002_bkp/#hito-3-la-web","text":"Se crear\u00e1 un mantenedor con los servicios que tenemos La web no ser\u00e1 compleja, estar\u00e1 enfocada a la utilizaci\u00f3n de servicios.","title":"Hito 3 - La web"},{"location":"modulos/mod_5/uni004/lectura001/","text":"Unidad 4.1 - Asociaciones Considerar mostrar materia y pasar a la lectura 2, ya que all\u00ed se crea un proyecto de principio a fin. Se realiza un proyecto con las siguientes cardinalidades. Uno a uno (1:1) Uno a muchos (1:N) Muchos a uno (N:1) En una primera etapa se prueba un test con la relaci\u00f3n uno a uno. Con las entidades listas ya se puede ver el resultado en DBVEAER \u001d. Cada commit \u001d del proyecto contiene una etapa. En la \u00faltima etapa falla el primer test por que la estructura de la entidad cambia. Por eso est\u00e1 comentado. Si se desea, esta es la versi\u00f3n final de la lectura, en la carpeta proyectos, se encuentra la historia comparativa con git, como en la lectura. As\u00ed no se parte desde el c\u00f3digo final de la lectura. El proyecto de la lectura dos, es la continuaci\u00f3n del actual, se puede partir con esa versi\u00f3n completa. Los puntos de la lectura est\u00e1n con GIT . 4.1.1 Implementaci\u00f3n del proyecto Estructura ./ \u251c\u2500\u2500 HELP.md \u251c\u2500\u2500 basedatos.db \u251c\u2500\u2500 mvnw \u251c\u2500\u2500 mvnw.cmd \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 arriendopelis \u2502 \u2502 \u2502 \u251c\u2500\u2500 AppConfig.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 ArriendopelisApplication.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 SQLiteDialect.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 ServletInitializer.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 dao \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ArriendoRepository.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ClienteRepository.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 PeliculaRepository.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 modelo \u2502 \u2502 \u2502 \u251c\u2500\u2500 Arriendo.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 Cliente.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 Pelicula.java \u2502 \u2502 \u251c\u2500\u2500 resources \u2502 \u2502 \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2502 \u2502 \u251c\u2500\u2500 database.properties \u2502 \u2502 \u2502 \u251c\u2500\u2500 static \u2502 \u2502 \u2502 \u2514\u2500\u2500 templates \u2502 \u2502 \u2514\u2500\u2500 webapp \u2502 \u2502 \u2514\u2500\u2500 index.html \u2502 \u2514\u2500\u2500 test \u2502 \u2514\u2500\u2500 java \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 arriendopelis \u2502 \u251c\u2500\u2500 ArriendopelisApplicationTests.java \u2502 \u2514\u2500\u2500 dao \u2502 \u251c\u2500\u2500 ClienteRepositoryTest.java \u2502 \u2514\u2500\u2500 PeliculaRepositoryTest.java \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2514\u2500\u2500 database.properties \u251c\u2500\u2500 m2e-wtp \u2502 \u2514\u2500\u2500 web-resources \u2502 \u2514\u2500\u2500 META-INF \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 maven \u2502 \u2514\u2500\u2500 cl.lherrera.arriendopelis \u2502 \u2514\u2500\u2500 arriendopelis \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2514\u2500\u2500 pom.xml \u2514\u2500\u2500 test-classes 27 directories, 26 files Archivos modificados /arriendopelis/pom.xml /arriendopelis/src/main/resources/database.properties /arriendopelis/src/main/resources/application.properties /arriendopelis/src/main/java/cl/lherrera/arriendopelis/AppConfig.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/SQLiteDialect.java /arriendopelis/src/main/webapp/index.html src/main/java/cl/lherrera/arriendopelis/modelo/Arriendo.java src/main/java/cl/lherrera/arriendopelis/modelo/Cliente.java src/main/java/cl/lherrera/arriendopelis/modelo/Pelicula.java basedatos.db # Se crea solo al indicarlo en las propiedades. src/main/java/cl/lherrera/arriendopelis/dao/ArriendoRepository.java src/main/java/cl/lherrera/arriendopelis/dao/ClienteRepository.java src/main/java/cl/lherrera/arriendopelis/dao/PeliculaRepository.java src/test/java/cl/lherrera/arriendopelis/dao/ClienteRepositoryTest.java src/test/java/cl/lherrera/arriendopelis/dao/PeliculaRepositoryTest.java /arriendopelis/pom.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.6.RELEASE</version> <relativePath/> <!-- lookup parent from repository --> </parent> <groupId>cl.lherrera.arriendopelis</groupId> <artifactId>arriendopelis</artifactId> <version>20.0.0</version> <packaging>war</packaging> <name>arriendopelis</name> <description>lectura 1 relaciones</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-jpa</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-thymeleaf</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> <scope>provided</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> <!-- SQLITE - SUPPORT --> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> </dependency> <!-- SQLITE - SUPPORT #--> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project> /arriendopelis/src/main/resources \u001d /database.properties driverClassName=org.sqlite.JDBC url=jdbc:sqlite:basedatos.db username=jpaspring password=sa /application.properties # Configuraci\u00f3n de jpa spring.jpa.generate-ddl=true spring.jpa.database-platform=cl.lherrera.arriendopelis.SQLiteDialect spring.jpa.hibernate.ddl-auto=create-drop spring.jpa.show-sql=true spring.jpa.properties.hibernate.format_sql=true cl.lherrera.arriendopelis /arriendopelis/src/main/java/cl/lherrera/arriendopelis/AppConfig.java package cl.lherrera.arriendopelis; import javax.sql.DataSource; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.PropertySource; import org.springframework.core.env.Environment; import org.springframework.jdbc.datasource.DriverManagerDataSource; @Configuration @ComponentScan(\"cl.lherrera.jpaspring\") @PropertySource(\"classpath:database.properties\") public class AppConfig { @Autowired Environment environment; @Bean DataSource dataSource() { DriverManagerDataSource driverManagerDataSource = new DriverManagerDataSource(); driverManagerDataSource.setUrl(environment.getProperty(\"url\")); driverManagerDataSource.setUsername(environment.getProperty(\"username\")); driverManagerDataSource.setPassword(environment.getProperty(\"dbpassword\")); driverManagerDataSource.setDriverClassName(environment.getProperty(\"driverClassName\")); return driverManagerDataSource; } } /arriendopelis/src/main/java/cl/lherrera/arriendopelis/SQLiteDialect.java package cl.lherrera.arriendopelis; import java.sql.Types; import org.hibernate.dialect.Dialect; import org.hibernate.dialect.function.StandardSQLFunction; import org.hibernate.dialect.function.SQLFunctionTemplate; import org.hibernate.dialect.function.VarArgsSQLFunction; import org.hibernate.type.StandardBasicTypes; public class SQLiteDialect extends Dialect { public SQLiteDialect() { super(); registerColumnType(Types.BIT, \"integer\"); registerColumnType(Types.TINYINT, \"tinyint\"); registerColumnType(Types.SMALLINT, \"smallint\"); registerColumnType(Types.INTEGER, \"integer\"); registerColumnType(Types.BIGINT, \"bigint\"); registerColumnType(Types.FLOAT, \"float\"); registerColumnType(Types.REAL, \"real\"); registerColumnType(Types.DOUBLE, \"double\"); registerColumnType(Types.NUMERIC, \"numeric\"); registerColumnType(Types.DECIMAL, \"decimal\"); registerColumnType(Types.CHAR, \"char\"); registerColumnType(Types.VARCHAR, \"varchar\"); registerColumnType(Types.LONGVARCHAR, \"longvarchar\"); registerColumnType(Types.DATE, \"date\"); registerColumnType(Types.TIME, \"time\"); registerColumnType(Types.TIMESTAMP, \"timestamp\"); registerColumnType(Types.BINARY, \"blob\"); registerColumnType(Types.VARBINARY, \"blob\"); registerColumnType(Types.LONGVARBINARY, \"blob\"); // registerColumnType(Types.NULL, \"null\"); registerColumnType(Types.BLOB, \"blob\"); registerColumnType(Types.CLOB, \"clob\"); registerColumnType(Types.BOOLEAN, \"integer\"); registerFunction(\"concat\", new VarArgsSQLFunction(StandardBasicTypes.STRING, \"\", \"||\", \"\")); registerFunction(\"mod\", new SQLFunctionTemplate(StandardBasicTypes.INTEGER, \"?1 % ?2\")); registerFunction(\"substr\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); registerFunction(\"substring\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); } public boolean supportsIdentityColumns() { return true; } public boolean hasDataTypeInIdentityColumn() { return false; // As specify in NHibernate dialect } public String getIdentityColumnString() { // return \"integer primary key autoincrement\"; return \"integer\"; } public String getIdentitySelectString() { return \"select last_insert_rowid()\"; } public boolean supportsLimit() { return true; } public String getLimitString(String query, boolean hasOffset) { return new StringBuffer(query.length() + 20).append(query).append( hasOffset ? \" limit ? offset ?\" : \" limit ?\").toString(); } public boolean bindLimitParametersInReverseOrder() { return true; } public boolean supportsTemporaryTables() { return true; } public String getCreateTemporaryTableString() { return \"create temporary table if not exists\"; } public boolean dropTemporaryTableAfterUse() { return false; } public boolean supportsCurrentTimestampSelection() { return true; } public boolean isCurrentTimestampSelectStringCallable() { return false; } public String getCurrentTimestampSelectString() { return \"select current_timestamp\"; } public boolean supportsUnionAll() { return true; } public boolean hasAlterTable() { return false; // As specify in NHibernate dialect } public boolean dropConstraints() { return false; } public String getAddColumnString() { return \"add column\"; } public String getForUpdateString() { return \"\"; } public boolean supportsOuterJoinForUpdate() { return false; } public String getDropForeignKeyString() { throw new UnsupportedOperationException( \"No drop foreign key syntax supported by SQLiteDialect\"); } public String getAddForeignKeyConstraintString(String constraintName, String[] foreignKey, String referencedTable, String[] primaryKey, boolean referencesPrimaryKey) { throw new UnsupportedOperationException( \"No add foreign key syntax supported by SQLiteDialect\"); } public String getAddPrimaryKeyConstraintString(String constraintName) { throw new UnsupportedOperationException( \"No add primary key syntax supported by SQLiteDialect\"); } public boolean supportsIfExistsBeforeTableName() { return true; } public boolean supportsCascadeDelete() { return false; } } /arriendopelis/src/main/webapp /index.html <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Arriendo - Pel\u00edculas</title> </head> <body> <h1>Ventana de inicio</h1> </body> </html> cl.lherrera.arriendopelis.modelo src/main/java/cl/lherrera/arriendopelis/modelo/Arriendo.java package cl.lherrera.arriendopelis.modelo; import javax.persistence.CascadeType; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.JoinColumn; import javax.persistence.ManyToOne; import javax.persistence.OneToOne; @Entity public class Arriendo { @Id @GeneratedValue(strategy = GenerationType.AUTO) private Integer id; private String inicio; private Integer duracion; @OneToOne(cascade = CascadeType.ALL) @JoinColumn(name = \"pelicula_id\", referencedColumnName = \"id\") private Pelicula pelicula; @ManyToOne @JoinColumn(name=\"cliente_id\", nullable=false) private Cliente cliente; public Arriendo() { // TODO Auto-generated constructor stub } public Cliente getCliente() { return cliente; } public void setCliente(Cliente cliente) { this.cliente = cliente; } public Arriendo(Integer id, String inicio, Integer duracion, Pelicula pelicula, Cliente cliente) { super(); this.id = id; this.inicio = inicio; this.duracion = duracion; this.pelicula = pelicula; this.cliente = cliente; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getInicio() { return inicio; } public void setInicio(String inicio) { this.inicio = inicio; } public Integer getDuracion() { return duracion; } public void setDuracion(Integer duracion) { this.duracion = duracion; } public Pelicula getPelicula() { return pelicula; } public void setPelicula(Pelicula pelicula) { this.pelicula = pelicula; } @Override public String toString() { return \"Arriendo [id=\" + id + \", inicio=\" + inicio + \", duracion=\" + duracion + \", pelicula=\" + pelicula + \"]\"; } } src/main/java/cl/lherrera/arriendopelis/modelo/Cliente.java package cl.lherrera.arriendopelis.modelo; import java.util.List; import javax.persistence.CascadeType; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.OneToMany; @Entity public class Cliente { @Id @GeneratedValue(strategy=GenerationType.AUTO) private Integer id; private String nombre; @OneToMany(cascade= CascadeType.ALL, mappedBy = \"cliente\") private List<Arriendo> arriendos; public Cliente() { // TODO Auto-generated constructor stub } public Cliente(Integer id, String nombre, List<Arriendo> arriendos) { super(); this.id = id; this.nombre = nombre; this.arriendos = arriendos; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } public List<Arriendo> getArriendos() { return arriendos; } public void setArriendos(List<Arriendo> arriendos) { this.arriendos = arriendos; } @Override public String toString() { return \"Cliente [id=\" + id + \", nombre=\" + nombre + \", arriendos=\" + arriendos + \"]\"; } } src/main/java/cl/lherrera/arriendopelis/modelo/Pelicula.java package cl.lherrera.arriendopelis.modelo; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; @Entity public class Pelicula { @Id @GeneratedValue(strategy=GenerationType.AUTO) // https://www.objectdb.com/java/jpa/entity/generated private Integer id; private String titulo; private String descripcion; private Integer duracion; public Pelicula() {} public Pelicula(Integer id, String titulo, String descripcion, Integer duracion) { super(); this.id = id; this.titulo = titulo; this.descripcion = descripcion; this.duracion = duracion; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getTitulo() { return titulo; } public void setTitulo(String titulo) { this.titulo = titulo; } public String getDescripcion() { return descripcion; } public void setDescripcion(String descripcion) { this.descripcion = descripcion; } public Integer getDuracion() { return duracion; } public void setDuracion(Integer duracion) { this.duracion = duracion; } @Override public String toString() { return \"Pelicula [id=\" + id + \", titulo=\" + titulo + \", descripcion=\" + descripcion + \", duracion=\" + duracion + \"]\"; } } cl.lherrera.arriendopelis.dao src/main/java/cl/lherrera/arriendopelis/dao/ArriendoRepository.java package cl.lherrera.arriendopelis.dao; import org.springframework.data.jpa.repository.JpaRepository; import cl.lherrera.arriendopelis.modelo.Arriendo; public interface ArriendoRepository extends JpaRepository<Arriendo, Integer> { } src/main/java/cl/lherrera/arriendopelis/dao/ClienteRepository.java package cl.lherrera.arriendopelis.dao; import org.springframework.data.jpa.repository.JpaRepository; import cl.lherrera.arriendopelis.modelo.Cliente; public interface ClienteRepository extends JpaRepository<Cliente, Integer> { } src/main/java/cl/lherrera/arriendopelis/dao/PeliculaRepository.java package cl.lherrera.arriendopelis.dao; import org.springframework.data.jpa.repository.JpaRepository; import cl.lherrera.arriendopelis.modelo.Pelicula; public interface PeliculaRepository extends JpaRepository<Pelicula, Integer> { } src/test/java/cl/lherrera/arriendopelis/dao/ClienteRepositoryTest.java package cl.lherrera.arriendopelis.dao; import static org.assertj.core.api.Assertions.assertThat; import java.util.ArrayList; import java.util.List; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.context.SpringBootTest; import cl.lherrera.arriendopelis.modelo.Arriendo; import cl.lherrera.arriendopelis.modelo.Cliente; import cl.lherrera.arriendopelis.modelo.Pelicula; @SpringBootTest public class ClienteRepositoryTest { @Autowired private ArriendoRepository arriendoRepository; @Autowired private ClienteRepository clienteRepository; @Test public void validandoDatos() { // Instanciamos las tres clases. Pelicula pelicula = new Pelicula(); Cliente cliente = new Cliente(); Arriendo arriendo = new Arriendo(); // Guardamos al cliente en base de datos para generar su ID. // cliente.setNombre(\"Juan\"); cliente = clienteRepository.save(cliente); // Asignamos un estado a la pelicula pelicula.setDescripcion(\"Buena pelicula\"); pelicula.setDuracion(160); pelicula.setTitulo(\"El cuadro\"); // Asignamos un estado al arriendo arriendo.setDuracion(10); arriendo.setInicio(\"11/12/2019\"); arriendo.setPelicula(pelicula); // Le asignamos al cliente previamente creado. arriendo.setCliente(cliente); // Guardamos la pelicula y el arriendo arriendo = arriendoRepository.save(arriendo); // Creamos una lista de arriendos y agregamos el que ya creamos a ella. List<Arriendo> arriendos = new ArrayList<>(); arriendos.add(arriendo); cliente.setArriendos(arriendos); // Guardamos al cliente en base de datos cliente = clienteRepository.save(cliente); // afirmaciones assertThat(arriendoRepository.findAll()).isNotNull(); assertThat(clienteRepository.findAll()).isNotNull(); } } src/test/java/cl/lherrera/arriendopelis/dao/PeliculaRepositoryTest.java package cl.lherrera.arriendopelis.dao; import static org.assertj.core.api.Assertions.assertThat; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.context.SpringBootTest; import cl.lherrera.arriendopelis.modelo.Arriendo; import cl.lherrera.arriendopelis.modelo.Pelicula; @SpringBootTest public class PeliculaRepositoryTest { @Autowired private ArriendoRepository arriendoRepository; @Autowired PeliculaRepository peliculaRepository; // este test fallar\u00e1 con la aplicaci\u00f3n de la \u00faltima relaci\u00f3n Se comenta para que // se ejecute sin problemas el siguiente. // esto se debe a que se agrega un campo a la relaci\u00f3n. // @Test // public void validaRepositoriosCreandoPeliculaYArriendo() { // // nueva pelicula // Pelicula spaceOdyssey = new Pelicula(null, \"2001: A Space Odyssey\", // \"After discovering a mysterious artifact buried \" + \"beneath the Lunar surface, mankind sets off on a \" // + \"quest to find its origins with help from intelligent \" + \"supercomputer H.A.L. 9000. \", // 149); // // // nuevo arriendo // Arriendo arriendo = new Arriendo(null, \"11/20/2019\", 7, spaceOdyssey); // // guardar arriendo // arriendoRepository.save(arriendo); // // buscar arriendo // Arriendo arriendoOd = arriendoRepository.findById(1).get(); // // valida que exista // assertThat(arriendoOd).isNotNull(); // // } } Fin lectura... El proyecto contin\u00faa en la siguiente lectura.","title":"Lectura001"},{"location":"modulos/mod_5/uni004/lectura001/#unidad-41-asociaciones","text":"Considerar mostrar materia y pasar a la lectura 2, ya que all\u00ed se crea un proyecto de principio a fin. Se realiza un proyecto con las siguientes cardinalidades. Uno a uno (1:1) Uno a muchos (1:N) Muchos a uno (N:1) En una primera etapa se prueba un test con la relaci\u00f3n uno a uno. Con las entidades listas ya se puede ver el resultado en DBVEAER \u001d. Cada commit \u001d del proyecto contiene una etapa. En la \u00faltima etapa falla el primer test por que la estructura de la entidad cambia. Por eso est\u00e1 comentado. Si se desea, esta es la versi\u00f3n final de la lectura, en la carpeta proyectos, se encuentra la historia comparativa con git, como en la lectura. As\u00ed no se parte desde el c\u00f3digo final de la lectura. El proyecto de la lectura dos, es la continuaci\u00f3n del actual, se puede partir con esa versi\u00f3n completa. Los puntos de la lectura est\u00e1n con GIT .","title":"Unidad 4.1 - Asociaciones"},{"location":"modulos/mod_5/uni004/lectura001/#411-implementacion-del-proyecto","text":"","title":"4.1.1 Implementaci\u00f3n del proyecto"},{"location":"modulos/mod_5/uni004/lectura001/#estructura","text":"./ \u251c\u2500\u2500 HELP.md \u251c\u2500\u2500 basedatos.db \u251c\u2500\u2500 mvnw \u251c\u2500\u2500 mvnw.cmd \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 arriendopelis \u2502 \u2502 \u2502 \u251c\u2500\u2500 AppConfig.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 ArriendopelisApplication.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 SQLiteDialect.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 ServletInitializer.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 dao \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ArriendoRepository.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ClienteRepository.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 PeliculaRepository.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 modelo \u2502 \u2502 \u2502 \u251c\u2500\u2500 Arriendo.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 Cliente.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 Pelicula.java \u2502 \u2502 \u251c\u2500\u2500 resources \u2502 \u2502 \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2502 \u2502 \u251c\u2500\u2500 database.properties \u2502 \u2502 \u2502 \u251c\u2500\u2500 static \u2502 \u2502 \u2502 \u2514\u2500\u2500 templates \u2502 \u2502 \u2514\u2500\u2500 webapp \u2502 \u2502 \u2514\u2500\u2500 index.html \u2502 \u2514\u2500\u2500 test \u2502 \u2514\u2500\u2500 java \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 arriendopelis \u2502 \u251c\u2500\u2500 ArriendopelisApplicationTests.java \u2502 \u2514\u2500\u2500 dao \u2502 \u251c\u2500\u2500 ClienteRepositoryTest.java \u2502 \u2514\u2500\u2500 PeliculaRepositoryTest.java \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2514\u2500\u2500 database.properties \u251c\u2500\u2500 m2e-wtp \u2502 \u2514\u2500\u2500 web-resources \u2502 \u2514\u2500\u2500 META-INF \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 maven \u2502 \u2514\u2500\u2500 cl.lherrera.arriendopelis \u2502 \u2514\u2500\u2500 arriendopelis \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2514\u2500\u2500 pom.xml \u2514\u2500\u2500 test-classes 27 directories, 26 files","title":"Estructura"},{"location":"modulos/mod_5/uni004/lectura001/#archivos-modificados","text":"/arriendopelis/pom.xml /arriendopelis/src/main/resources/database.properties /arriendopelis/src/main/resources/application.properties /arriendopelis/src/main/java/cl/lherrera/arriendopelis/AppConfig.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/SQLiteDialect.java /arriendopelis/src/main/webapp/index.html src/main/java/cl/lherrera/arriendopelis/modelo/Arriendo.java src/main/java/cl/lherrera/arriendopelis/modelo/Cliente.java src/main/java/cl/lherrera/arriendopelis/modelo/Pelicula.java basedatos.db # Se crea solo al indicarlo en las propiedades. src/main/java/cl/lherrera/arriendopelis/dao/ArriendoRepository.java src/main/java/cl/lherrera/arriendopelis/dao/ClienteRepository.java src/main/java/cl/lherrera/arriendopelis/dao/PeliculaRepository.java src/test/java/cl/lherrera/arriendopelis/dao/ClienteRepositoryTest.java src/test/java/cl/lherrera/arriendopelis/dao/PeliculaRepositoryTest.java","title":"Archivos modificados"},{"location":"modulos/mod_5/uni004/lectura001/#arriendopelispomxml","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.6.RELEASE</version> <relativePath/> <!-- lookup parent from repository --> </parent> <groupId>cl.lherrera.arriendopelis</groupId> <artifactId>arriendopelis</artifactId> <version>20.0.0</version> <packaging>war</packaging> <name>arriendopelis</name> <description>lectura 1 relaciones</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-jpa</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-thymeleaf</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> <scope>provided</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> <!-- SQLITE - SUPPORT --> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> </dependency> <!-- SQLITE - SUPPORT #--> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project>","title":"/arriendopelis/pom.xml"},{"location":"modulos/mod_5/uni004/lectura001/#arriendopelissrcmainresources","text":"","title":"/arriendopelis/src/main/resources"},{"location":"modulos/mod_5/uni004/lectura001/#databaseproperties","text":"driverClassName=org.sqlite.JDBC url=jdbc:sqlite:basedatos.db username=jpaspring password=sa","title":"/database.properties"},{"location":"modulos/mod_5/uni004/lectura001/#applicationproperties","text":"# Configuraci\u00f3n de jpa spring.jpa.generate-ddl=true spring.jpa.database-platform=cl.lherrera.arriendopelis.SQLiteDialect spring.jpa.hibernate.ddl-auto=create-drop spring.jpa.show-sql=true spring.jpa.properties.hibernate.format_sql=true","title":"/application.properties"},{"location":"modulos/mod_5/uni004/lectura001/#cllherreraarriendopelis","text":"","title":"cl.lherrera.arriendopelis"},{"location":"modulos/mod_5/uni004/lectura001/#arriendopelissrcmainjavacllherreraarriendopelisappconfigjava","text":"package cl.lherrera.arriendopelis; import javax.sql.DataSource; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.PropertySource; import org.springframework.core.env.Environment; import org.springframework.jdbc.datasource.DriverManagerDataSource; @Configuration @ComponentScan(\"cl.lherrera.jpaspring\") @PropertySource(\"classpath:database.properties\") public class AppConfig { @Autowired Environment environment; @Bean DataSource dataSource() { DriverManagerDataSource driverManagerDataSource = new DriverManagerDataSource(); driverManagerDataSource.setUrl(environment.getProperty(\"url\")); driverManagerDataSource.setUsername(environment.getProperty(\"username\")); driverManagerDataSource.setPassword(environment.getProperty(\"dbpassword\")); driverManagerDataSource.setDriverClassName(environment.getProperty(\"driverClassName\")); return driverManagerDataSource; } }","title":"/arriendopelis/src/main/java/cl/lherrera/arriendopelis/AppConfig.java"},{"location":"modulos/mod_5/uni004/lectura001/#arriendopelissrcmainjavacllherreraarriendopelissqlitedialectjava","text":"package cl.lherrera.arriendopelis; import java.sql.Types; import org.hibernate.dialect.Dialect; import org.hibernate.dialect.function.StandardSQLFunction; import org.hibernate.dialect.function.SQLFunctionTemplate; import org.hibernate.dialect.function.VarArgsSQLFunction; import org.hibernate.type.StandardBasicTypes; public class SQLiteDialect extends Dialect { public SQLiteDialect() { super(); registerColumnType(Types.BIT, \"integer\"); registerColumnType(Types.TINYINT, \"tinyint\"); registerColumnType(Types.SMALLINT, \"smallint\"); registerColumnType(Types.INTEGER, \"integer\"); registerColumnType(Types.BIGINT, \"bigint\"); registerColumnType(Types.FLOAT, \"float\"); registerColumnType(Types.REAL, \"real\"); registerColumnType(Types.DOUBLE, \"double\"); registerColumnType(Types.NUMERIC, \"numeric\"); registerColumnType(Types.DECIMAL, \"decimal\"); registerColumnType(Types.CHAR, \"char\"); registerColumnType(Types.VARCHAR, \"varchar\"); registerColumnType(Types.LONGVARCHAR, \"longvarchar\"); registerColumnType(Types.DATE, \"date\"); registerColumnType(Types.TIME, \"time\"); registerColumnType(Types.TIMESTAMP, \"timestamp\"); registerColumnType(Types.BINARY, \"blob\"); registerColumnType(Types.VARBINARY, \"blob\"); registerColumnType(Types.LONGVARBINARY, \"blob\"); // registerColumnType(Types.NULL, \"null\"); registerColumnType(Types.BLOB, \"blob\"); registerColumnType(Types.CLOB, \"clob\"); registerColumnType(Types.BOOLEAN, \"integer\"); registerFunction(\"concat\", new VarArgsSQLFunction(StandardBasicTypes.STRING, \"\", \"||\", \"\")); registerFunction(\"mod\", new SQLFunctionTemplate(StandardBasicTypes.INTEGER, \"?1 % ?2\")); registerFunction(\"substr\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); registerFunction(\"substring\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); } public boolean supportsIdentityColumns() { return true; } public boolean hasDataTypeInIdentityColumn() { return false; // As specify in NHibernate dialect } public String getIdentityColumnString() { // return \"integer primary key autoincrement\"; return \"integer\"; } public String getIdentitySelectString() { return \"select last_insert_rowid()\"; } public boolean supportsLimit() { return true; } public String getLimitString(String query, boolean hasOffset) { return new StringBuffer(query.length() + 20).append(query).append( hasOffset ? \" limit ? offset ?\" : \" limit ?\").toString(); } public boolean bindLimitParametersInReverseOrder() { return true; } public boolean supportsTemporaryTables() { return true; } public String getCreateTemporaryTableString() { return \"create temporary table if not exists\"; } public boolean dropTemporaryTableAfterUse() { return false; } public boolean supportsCurrentTimestampSelection() { return true; } public boolean isCurrentTimestampSelectStringCallable() { return false; } public String getCurrentTimestampSelectString() { return \"select current_timestamp\"; } public boolean supportsUnionAll() { return true; } public boolean hasAlterTable() { return false; // As specify in NHibernate dialect } public boolean dropConstraints() { return false; } public String getAddColumnString() { return \"add column\"; } public String getForUpdateString() { return \"\"; } public boolean supportsOuterJoinForUpdate() { return false; } public String getDropForeignKeyString() { throw new UnsupportedOperationException( \"No drop foreign key syntax supported by SQLiteDialect\"); } public String getAddForeignKeyConstraintString(String constraintName, String[] foreignKey, String referencedTable, String[] primaryKey, boolean referencesPrimaryKey) { throw new UnsupportedOperationException( \"No add foreign key syntax supported by SQLiteDialect\"); } public String getAddPrimaryKeyConstraintString(String constraintName) { throw new UnsupportedOperationException( \"No add primary key syntax supported by SQLiteDialect\"); } public boolean supportsIfExistsBeforeTableName() { return true; } public boolean supportsCascadeDelete() { return false; } }","title":"/arriendopelis/src/main/java/cl/lherrera/arriendopelis/SQLiteDialect.java"},{"location":"modulos/mod_5/uni004/lectura001/#arriendopelissrcmainwebapp","text":"","title":"/arriendopelis/src/main/webapp"},{"location":"modulos/mod_5/uni004/lectura001/#indexhtml","text":"<!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>Arriendo - Pel\u00edculas</title> </head> <body> <h1>Ventana de inicio</h1> </body> </html>","title":"/index.html"},{"location":"modulos/mod_5/uni004/lectura001/#cllherreraarriendopelismodelo","text":"","title":"cl.lherrera.arriendopelis.modelo"},{"location":"modulos/mod_5/uni004/lectura001/#srcmainjavacllherreraarriendopelismodeloarriendojava","text":"package cl.lherrera.arriendopelis.modelo; import javax.persistence.CascadeType; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.JoinColumn; import javax.persistence.ManyToOne; import javax.persistence.OneToOne; @Entity public class Arriendo { @Id @GeneratedValue(strategy = GenerationType.AUTO) private Integer id; private String inicio; private Integer duracion; @OneToOne(cascade = CascadeType.ALL) @JoinColumn(name = \"pelicula_id\", referencedColumnName = \"id\") private Pelicula pelicula; @ManyToOne @JoinColumn(name=\"cliente_id\", nullable=false) private Cliente cliente; public Arriendo() { // TODO Auto-generated constructor stub } public Cliente getCliente() { return cliente; } public void setCliente(Cliente cliente) { this.cliente = cliente; } public Arriendo(Integer id, String inicio, Integer duracion, Pelicula pelicula, Cliente cliente) { super(); this.id = id; this.inicio = inicio; this.duracion = duracion; this.pelicula = pelicula; this.cliente = cliente; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getInicio() { return inicio; } public void setInicio(String inicio) { this.inicio = inicio; } public Integer getDuracion() { return duracion; } public void setDuracion(Integer duracion) { this.duracion = duracion; } public Pelicula getPelicula() { return pelicula; } public void setPelicula(Pelicula pelicula) { this.pelicula = pelicula; } @Override public String toString() { return \"Arriendo [id=\" + id + \", inicio=\" + inicio + \", duracion=\" + duracion + \", pelicula=\" + pelicula + \"]\"; } }","title":"src/main/java/cl/lherrera/arriendopelis/modelo/Arriendo.java"},{"location":"modulos/mod_5/uni004/lectura001/#srcmainjavacllherreraarriendopelismodeloclientejava","text":"package cl.lherrera.arriendopelis.modelo; import java.util.List; import javax.persistence.CascadeType; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.OneToMany; @Entity public class Cliente { @Id @GeneratedValue(strategy=GenerationType.AUTO) private Integer id; private String nombre; @OneToMany(cascade= CascadeType.ALL, mappedBy = \"cliente\") private List<Arriendo> arriendos; public Cliente() { // TODO Auto-generated constructor stub } public Cliente(Integer id, String nombre, List<Arriendo> arriendos) { super(); this.id = id; this.nombre = nombre; this.arriendos = arriendos; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } public List<Arriendo> getArriendos() { return arriendos; } public void setArriendos(List<Arriendo> arriendos) { this.arriendos = arriendos; } @Override public String toString() { return \"Cliente [id=\" + id + \", nombre=\" + nombre + \", arriendos=\" + arriendos + \"]\"; } }","title":"src/main/java/cl/lherrera/arriendopelis/modelo/Cliente.java"},{"location":"modulos/mod_5/uni004/lectura001/#srcmainjavacllherreraarriendopelismodelopeliculajava","text":"package cl.lherrera.arriendopelis.modelo; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; @Entity public class Pelicula { @Id @GeneratedValue(strategy=GenerationType.AUTO) // https://www.objectdb.com/java/jpa/entity/generated private Integer id; private String titulo; private String descripcion; private Integer duracion; public Pelicula() {} public Pelicula(Integer id, String titulo, String descripcion, Integer duracion) { super(); this.id = id; this.titulo = titulo; this.descripcion = descripcion; this.duracion = duracion; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getTitulo() { return titulo; } public void setTitulo(String titulo) { this.titulo = titulo; } public String getDescripcion() { return descripcion; } public void setDescripcion(String descripcion) { this.descripcion = descripcion; } public Integer getDuracion() { return duracion; } public void setDuracion(Integer duracion) { this.duracion = duracion; } @Override public String toString() { return \"Pelicula [id=\" + id + \", titulo=\" + titulo + \", descripcion=\" + descripcion + \", duracion=\" + duracion + \"]\"; } }","title":"src/main/java/cl/lherrera/arriendopelis/modelo/Pelicula.java"},{"location":"modulos/mod_5/uni004/lectura001/#cllherreraarriendopelisdao","text":"","title":"cl.lherrera.arriendopelis.dao"},{"location":"modulos/mod_5/uni004/lectura001/#srcmainjavacllherreraarriendopelisdaoarriendorepositoryjava","text":"package cl.lherrera.arriendopelis.dao; import org.springframework.data.jpa.repository.JpaRepository; import cl.lherrera.arriendopelis.modelo.Arriendo; public interface ArriendoRepository extends JpaRepository<Arriendo, Integer> { }","title":"src/main/java/cl/lherrera/arriendopelis/dao/ArriendoRepository.java"},{"location":"modulos/mod_5/uni004/lectura001/#srcmainjavacllherreraarriendopelisdaoclienterepositoryjava","text":"package cl.lherrera.arriendopelis.dao; import org.springframework.data.jpa.repository.JpaRepository; import cl.lherrera.arriendopelis.modelo.Cliente; public interface ClienteRepository extends JpaRepository<Cliente, Integer> { }","title":"src/main/java/cl/lherrera/arriendopelis/dao/ClienteRepository.java"},{"location":"modulos/mod_5/uni004/lectura001/#srcmainjavacllherreraarriendopelisdaopelicularepositoryjava","text":"package cl.lherrera.arriendopelis.dao; import org.springframework.data.jpa.repository.JpaRepository; import cl.lherrera.arriendopelis.modelo.Pelicula; public interface PeliculaRepository extends JpaRepository<Pelicula, Integer> { }","title":"src/main/java/cl/lherrera/arriendopelis/dao/PeliculaRepository.java"},{"location":"modulos/mod_5/uni004/lectura001/#srctestjavacllherreraarriendopelisdaoclienterepositorytestjava","text":"package cl.lherrera.arriendopelis.dao; import static org.assertj.core.api.Assertions.assertThat; import java.util.ArrayList; import java.util.List; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.context.SpringBootTest; import cl.lherrera.arriendopelis.modelo.Arriendo; import cl.lherrera.arriendopelis.modelo.Cliente; import cl.lherrera.arriendopelis.modelo.Pelicula; @SpringBootTest public class ClienteRepositoryTest { @Autowired private ArriendoRepository arriendoRepository; @Autowired private ClienteRepository clienteRepository; @Test public void validandoDatos() { // Instanciamos las tres clases. Pelicula pelicula = new Pelicula(); Cliente cliente = new Cliente(); Arriendo arriendo = new Arriendo(); // Guardamos al cliente en base de datos para generar su ID. // cliente.setNombre(\"Juan\"); cliente = clienteRepository.save(cliente); // Asignamos un estado a la pelicula pelicula.setDescripcion(\"Buena pelicula\"); pelicula.setDuracion(160); pelicula.setTitulo(\"El cuadro\"); // Asignamos un estado al arriendo arriendo.setDuracion(10); arriendo.setInicio(\"11/12/2019\"); arriendo.setPelicula(pelicula); // Le asignamos al cliente previamente creado. arriendo.setCliente(cliente); // Guardamos la pelicula y el arriendo arriendo = arriendoRepository.save(arriendo); // Creamos una lista de arriendos y agregamos el que ya creamos a ella. List<Arriendo> arriendos = new ArrayList<>(); arriendos.add(arriendo); cliente.setArriendos(arriendos); // Guardamos al cliente en base de datos cliente = clienteRepository.save(cliente); // afirmaciones assertThat(arriendoRepository.findAll()).isNotNull(); assertThat(clienteRepository.findAll()).isNotNull(); } }","title":"src/test/java/cl/lherrera/arriendopelis/dao/ClienteRepositoryTest.java"},{"location":"modulos/mod_5/uni004/lectura001/#srctestjavacllherreraarriendopelisdaopelicularepositorytestjava","text":"package cl.lherrera.arriendopelis.dao; import static org.assertj.core.api.Assertions.assertThat; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.context.SpringBootTest; import cl.lherrera.arriendopelis.modelo.Arriendo; import cl.lherrera.arriendopelis.modelo.Pelicula; @SpringBootTest public class PeliculaRepositoryTest { @Autowired private ArriendoRepository arriendoRepository; @Autowired PeliculaRepository peliculaRepository; // este test fallar\u00e1 con la aplicaci\u00f3n de la \u00faltima relaci\u00f3n Se comenta para que // se ejecute sin problemas el siguiente. // esto se debe a que se agrega un campo a la relaci\u00f3n. // @Test // public void validaRepositoriosCreandoPeliculaYArriendo() { // // nueva pelicula // Pelicula spaceOdyssey = new Pelicula(null, \"2001: A Space Odyssey\", // \"After discovering a mysterious artifact buried \" + \"beneath the Lunar surface, mankind sets off on a \" // + \"quest to find its origins with help from intelligent \" + \"supercomputer H.A.L. 9000. \", // 149); // // // nuevo arriendo // Arriendo arriendo = new Arriendo(null, \"11/20/2019\", 7, spaceOdyssey); // // guardar arriendo // arriendoRepository.save(arriendo); // // buscar arriendo // Arriendo arriendoOd = arriendoRepository.findById(1).get(); // // valida que exista // assertThat(arriendoOd).isNotNull(); // // } }","title":"src/test/java/cl/lherrera/arriendopelis/dao/PeliculaRepositoryTest.java"},{"location":"modulos/mod_5/uni004/lectura001/#fin-lectura","text":"El proyecto contin\u00faa en la siguiente lectura.","title":"Fin lectura..."},{"location":"modulos/mod_5/uni004/lectura002/","text":"Unidad 4.2 - Asociaciones Esto trata de asociaciaciones. las que se ejemplifican en el proyecto siguiente, en lectura 1 mostramos la materia y ac\u00e1 se aplica. La diferencia es que ac\u00e1 ocupamos SQLITE \u001d. Podemos tomar este proyecto como el principal. (Ya que este contempla todo lo visto en la lectura 1) Se modifica el proyecto para mostrar el como utilizar thymeleaf para tener una plantilla principal. Es decir para usarlo como motor de plantillas. 4.2.1 Implementaci\u00f3n del proyecto Estructura ./ \u251c\u2500\u2500 HELP.md \u251c\u2500\u2500 basedatos.db \u251c\u2500\u2500 mvnw \u251c\u2500\u2500 mvnw.cmd \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 arriendopelis \u2502 \u2502 \u2502 \u251c\u2500\u2500 AppConfig.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 ArriendopelisApplication.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 SQLiteDialect.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 ServletInitializer.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 controlador \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ArriendoController.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ClienteController.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 HomeController.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 PeliculaController.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 dao \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ArriendoRepository.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ClienteRepository.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 PeliculaRepository.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 dto \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ArriendoDTO.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ClienteDTO.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 GenericDTO.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 PeliculaDTO.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 modelo \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 Arriendo.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 Cliente.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 Pelicula.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 servicio \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ArriendoService.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ClienteService.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 PeliculaService.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 servicioImpl \u2502 \u2502 \u2502 \u251c\u2500\u2500 ArriendoServiceImpl.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 ClienteServiceImpl.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 PeliculaServiceImpl.java \u2502 \u2502 \u251c\u2500\u2500 resources \u2502 \u2502 \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2502 \u2502 \u251c\u2500\u2500 database.properties \u2502 \u2502 \u2502 \u251c\u2500\u2500 static \u2502 \u2502 \u2502 \u2514\u2500\u2500 templates \u2502 \u2502 \u2502 \u251c\u2500\u2500 arriendos.html \u2502 \u2502 \u2502 \u251c\u2500\u2500 base.html \u2502 \u2502 \u2502 \u251c\u2500\u2500 clientes.html \u2502 \u2502 \u2502 \u251c\u2500\u2500 home.html \u2502 \u2502 \u2502 \u2514\u2500\u2500 peliculas.html \u2502 \u2502 \u2514\u2500\u2500 webapp \u2502 \u2502 \u2514\u2500\u2500 index.html \u2502 \u2514\u2500\u2500 test \u2502 \u2514\u2500\u2500 java \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 arriendopelis \u2502 \u251c\u2500\u2500 ArriendopelisApplicationTests.java \u2502 \u2514\u2500\u2500 dao \u2502 \u251c\u2500\u2500 ClienteRepositoryTest.java \u2502 \u2514\u2500\u2500 PeliculaRepositoryTest.java \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 application.properties \u2502 \u251c\u2500\u2500 cl \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2514\u2500\u2500 arriendopelis \u2502 \u2502 \u251c\u2500\u2500 AppConfig.class \u2502 \u2502 \u251c\u2500\u2500 ArriendopelisApplication.class \u2502 \u2502 \u251c\u2500\u2500 SQLiteDialect.class \u2502 \u2502 \u251c\u2500\u2500 SeEjecutaAntes.class \u2502 \u2502 \u251c\u2500\u2500 ServletInitializer.class \u2502 \u2502 \u251c\u2500\u2500 controlador \u2502 \u2502 \u2502 \u251c\u2500\u2500 ArriendoController.class \u2502 \u2502 \u2502 \u251c\u2500\u2500 ClienteController.class \u2502 \u2502 \u2502 \u251c\u2500\u2500 HomeController.class \u2502 \u2502 \u2502 \u2514\u2500\u2500 PeliculaController.class \u2502 \u2502 \u251c\u2500\u2500 dao \u2502 \u2502 \u2502 \u251c\u2500\u2500 ArriendoRepository.class \u2502 \u2502 \u2502 \u251c\u2500\u2500 ClienteRepository.class \u2502 \u2502 \u2502 \u2514\u2500\u2500 PeliculaRepository.class \u2502 \u2502 \u251c\u2500\u2500 dto \u2502 \u2502 \u2502 \u251c\u2500\u2500 ArriendoDTO.class \u2502 \u2502 \u2502 \u251c\u2500\u2500 ClienteDTO.class \u2502 \u2502 \u2502 \u251c\u2500\u2500 GenericDTO.class \u2502 \u2502 \u2502 \u2514\u2500\u2500 PeliculaDTO.class \u2502 \u2502 \u251c\u2500\u2500 modelo \u2502 \u2502 \u2502 \u251c\u2500\u2500 Arriendo.class \u2502 \u2502 \u2502 \u251c\u2500\u2500 Cliente.class \u2502 \u2502 \u2502 \u2514\u2500\u2500 Pelicula.class \u2502 \u2502 \u251c\u2500\u2500 servicio \u2502 \u2502 \u2502 \u251c\u2500\u2500 ArriendoService.class \u2502 \u2502 \u2502 \u251c\u2500\u2500 ClienteService.class \u2502 \u2502 \u2502 \u2514\u2500\u2500 PeliculaService.class \u2502 \u2502 \u2514\u2500\u2500 servicioImpl \u2502 \u2502 \u251c\u2500\u2500 ArriendoServiceImpl.class \u2502 \u2502 \u251c\u2500\u2500 ClienteServiceImpl.class \u2502 \u2502 \u2514\u2500\u2500 PeliculaServiceImpl.class \u2502 \u251c\u2500\u2500 database.properties \u2502 \u2514\u2500\u2500 templates \u2502 \u251c\u2500\u2500 arriendos.html \u2502 \u251c\u2500\u2500 base.html \u2502 \u251c\u2500\u2500 clientes.html \u2502 \u251c\u2500\u2500 home.html \u2502 \u2514\u2500\u2500 peliculas.html \u251c\u2500\u2500 m2e-wtp \u2502 \u2514\u2500\u2500 web-resources \u2502 \u2514\u2500\u2500 META-INF \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 maven \u2502 \u2514\u2500\u2500 cl.lherrera.arriendopelis \u2502 \u2514\u2500\u2500 arriendopelis \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2514\u2500\u2500 pom.xml \u2514\u2500\u2500 test-classes \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 arriendopelis \u251c\u2500\u2500 ArriendopelisApplicationTests.class \u2514\u2500\u2500 dao \u251c\u2500\u2500 ClienteRepositoryTest.class \u2514\u2500\u2500 PeliculaRepositoryTest.class 45 directories, 78 files Archivos modificados /arriendopelis/src/main/java/cl/lherrera/arriendopelis/AppConfig.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/ArriendopelisApplication.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/ServletInitializer.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/SQLiteDialect.java\u001c /arriendopelis/src/main/java/cl/lherrera/arriendopelis/controlador/ArriendoController.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/controlador/ClienteController.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/controlador/HomeController.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/controlador/PeliculaController.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/dao/ArriendoRepository.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/dao/ClienteRepository.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/dao/PeliculaRepository.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/dto/ArriendoDTO.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/dto/ClienteDTO.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/dto/GenericDTO.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/dto/PeliculaDTO.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/modelo/Arriendo.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/modelo/Cliente.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/modelo/Pelicula.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/servicio/ArriendoService.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/servicio/ClienteService.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/servicio/PeliculaService.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/servicioImpl/ArriendoServiceImpl.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/servicioImpl/ClienteServiceImpl.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/servicioImpl/PeliculaServiceImpl.java /arriendopelis/src/main/resources/templates/arriendos.html /arriendopelis/src/main/resources/templates/base.html /arriendopelis/src/main/resources/templates/clientes.html /arriendopelis/src/main/resources/templates/home.html /arriendopelis/src/main/resources/templates/peliculas.html /arriendopelis/src/main/resources/application.properties /arriendopelis/src/main/resources/database.properties /arriendopelis/pom.xml cl.lherrera.arriendopelis /arriendopelis/src/main/java/cl/lherrera/arriendopelis/AppConfig.java package cl.lherrera.arriendopelis; import javax.sql.DataSource; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.PropertySource; import org.springframework.core.env.Environment; import org.springframework.jdbc.datasource.DriverManagerDataSource; @Configuration @ComponentScan(\"cl.lherrera.jpaspring\") @PropertySource(\"classpath:database.properties\") public class AppConfig { @Autowired Environment environment; @Bean DataSource dataSource() { DriverManagerDataSource driverManagerDataSource = new DriverManagerDataSource(); driverManagerDataSource.setUrl(environment.getProperty(\"url\")); driverManagerDataSource.setUsername(environment.getProperty(\"username\")); driverManagerDataSource.setPassword(environment.getProperty(\"dbpassword\")); driverManagerDataSource.setDriverClassName(environment.getProperty(\"driverClassName\")); return driverManagerDataSource; } } /arriendopelis/src/main/java/cl/lherrera/arriendopelis/ArriendopelisApplication.java Se agrega una clase (puede ser de forma funcional tambi\u00e9n para ahorrar c\u00f3digo), que su \u00fanica misi\u00f3n es ingresar un usuario y una pel\u00edcula de prueba, para la demostraci\u00f3n de la aplicaci\u00f3n funcionando. package cl.lherrera.arriendopelis; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.CommandLineRunner; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.stereotype.Component; import cl.lherrera.arriendopelis.modelo.Cliente; import cl.lherrera.arriendopelis.modelo.Pelicula; import cl.lherrera.arriendopelis.servicio.ClienteService; import cl.lherrera.arriendopelis.servicio.PeliculaService; @SpringBootApplication public class ArriendopelisApplication { public static void main(String[] args) { SpringApplication.run(ArriendopelisApplication.class, args); } } /** * Esta clase, realiza acciones antes que la aplicaci\u00f3n est\u00e1 en ejecuci\u00f3n as\u00ed, * el usuario est\u00e1 ingresado antes de iniciar sesi\u00f3n. * */ @Component class SeEjecutaAntes implements CommandLineRunner { @Autowired ClienteService servicioCliente; @Autowired PeliculaService servicioPelicula; @Override public void run(String... args) throws Exception { Cliente cliente = new Cliente(); cliente.setNombre(\"Luis\"); // se puede ver que add no es un buen nombre para un // servicio. Parece una lista. servicioCliente.add(cliente); Pelicula pelicula = new Pelicula(); pelicula.setTitulo(\"El cubo\"); pelicula.setDescripcion(\"muy rara\"); pelicula.setDuracion(120); servicioPelicula.add(pelicula); } } /arriendopelis/src/main/java/cl/lherrera/arriendopelis/ServletInitializer.java Este archivo se genera solo, es para que se construya el proyecto en un war . package cl.lherrera.arriendopelis; import org.springframework.boot.builder.SpringApplicationBuilder; import org.springframework.boot.web.servlet.support.SpringBootServletInitializer; public class ServletInitializer extends SpringBootServletInitializer { @Override protected SpringApplicationBuilder configure(SpringApplicationBuilder application) { return application.sources(ArriendopelisApplication.class); } } /arriendopelis/src/main/java/cl/lherrera/arriendopelis/SQLiteDialect.java package cl.lherrera.arriendopelis; import java.sql.Types; import org.hibernate.dialect.Dialect; import org.hibernate.dialect.function.StandardSQLFunction; import org.hibernate.dialect.function.SQLFunctionTemplate; import org.hibernate.dialect.function.VarArgsSQLFunction; import org.hibernate.type.StandardBasicTypes; public class SQLiteDialect extends Dialect { public SQLiteDialect() { super(); registerColumnType(Types.BIT, \"integer\"); registerColumnType(Types.TINYINT, \"tinyint\"); registerColumnType(Types.SMALLINT, \"smallint\"); registerColumnType(Types.INTEGER, \"integer\"); registerColumnType(Types.BIGINT, \"bigint\"); registerColumnType(Types.FLOAT, \"float\"); registerColumnType(Types.REAL, \"real\"); registerColumnType(Types.DOUBLE, \"double\"); registerColumnType(Types.NUMERIC, \"numeric\"); registerColumnType(Types.DECIMAL, \"decimal\"); registerColumnType(Types.CHAR, \"char\"); registerColumnType(Types.VARCHAR, \"varchar\"); registerColumnType(Types.LONGVARCHAR, \"longvarchar\"); registerColumnType(Types.DATE, \"date\"); registerColumnType(Types.TIME, \"time\"); registerColumnType(Types.TIMESTAMP, \"timestamp\"); registerColumnType(Types.BINARY, \"blob\"); registerColumnType(Types.VARBINARY, \"blob\"); registerColumnType(Types.LONGVARBINARY, \"blob\"); // registerColumnType(Types.NULL, \"null\"); registerColumnType(Types.BLOB, \"blob\"); registerColumnType(Types.CLOB, \"clob\"); registerColumnType(Types.BOOLEAN, \"integer\"); registerFunction(\"concat\", new VarArgsSQLFunction(StandardBasicTypes.STRING, \"\", \"||\", \"\")); registerFunction(\"mod\", new SQLFunctionTemplate(StandardBasicTypes.INTEGER, \"?1 % ?2\")); registerFunction(\"substr\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); registerFunction(\"substring\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); } public boolean supportsIdentityColumns() { return true; } public boolean hasDataTypeInIdentityColumn() { return false; // As specify in NHibernate dialect } public String getIdentityColumnString() { // return \"integer primary key autoincrement\"; return \"integer\"; } public String getIdentitySelectString() { return \"select last_insert_rowid()\"; } public boolean supportsLimit() { return true; } public String getLimitString(String query, boolean hasOffset) { return new StringBuffer(query.length() + 20).append(query).append( hasOffset ? \" limit ? offset ?\" : \" limit ?\").toString(); } public boolean bindLimitParametersInReverseOrder() { return true; } public boolean supportsTemporaryTables() { return true; } public String getCreateTemporaryTableString() { return \"create temporary table if not exists\"; } public boolean dropTemporaryTableAfterUse() { return false; } public boolean supportsCurrentTimestampSelection() { return true; } public boolean isCurrentTimestampSelectStringCallable() { return false; } public String getCurrentTimestampSelectString() { return \"select current_timestamp\"; } public boolean supportsUnionAll() { return true; } public boolean hasAlterTable() { return false; // As specify in NHibernate dialect } public boolean dropConstraints() { return false; } public String getAddColumnString() { return \"add column\"; } public String getForUpdateString() { return \"\"; } public boolean supportsOuterJoinForUpdate() { return false; } public String getDropForeignKeyString() { throw new UnsupportedOperationException( \"No drop foreign key syntax supported by SQLiteDialect\"); } public String getAddForeignKeyConstraintString(String constraintName, String[] foreignKey, String referencedTable, String[] primaryKey, boolean referencesPrimaryKey) { throw new UnsupportedOperationException( \"No add foreign key syntax supported by SQLiteDialect\"); } public String getAddPrimaryKeyConstraintString(String constraintName) { throw new UnsupportedOperationException( \"No add primary key syntax supported by SQLiteDialect\"); } public boolean supportsIfExistsBeforeTableName() { return true; } public boolean supportsCascadeDelete() { return false; } } cl/lherrera/arriendopelis/controlador/ /arriendopelis/src/main/java/cl/lherrera/arriendopelis/controlador/ArriendoController.java package cl.lherrera.arriendopelis.controlador; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.servlet.ModelAndView; import org.springframework.web.servlet.view.RedirectView; import cl.lherrera.arriendopelis.dto.ArriendoDTO; import cl.lherrera.arriendopelis.modelo.Arriendo; import cl.lherrera.arriendopelis.servicio.ArriendoService; import cl.lherrera.arriendopelis.servicio.ClienteService; import cl.lherrera.arriendopelis.servicio.PeliculaService; @Controller @RequestMapping(path = \"/arriendos\") public class ArriendoController { @Autowired private ArriendoService arriendoService; @Autowired private PeliculaService peliculaService; @Autowired private ClienteService clienteService; @GetMapping(path = { \"\", \"/\" }) public ModelAndView arriendos(Model model) { // se crea el modelAnd View, esto no solo renderiza la vista, si no que // env\u00eda el modelo. ModelAndView modelAndView = new ModelAndView(\"arriendos\"); modelAndView.addObject(\"arriendo\", new Arriendo()); model.addAttribute(\"peliculas\", peliculaService.findAll().getPeliculas()); model.addAttribute(\"clientes\", clienteService.findAll().getClientes()); return modelAndView; } /** * @ModelAttribute es la anotaci\u00f3n que permite acceder al modelo declarado en la * vista que en este caso es arriendo. */ @PostMapping(\"/agregar\") public RedirectView agregar(@ModelAttribute Arriendo arriendo) { ArriendoDTO respuestaServicio = arriendoService.add(arriendo); if (respuestaServicio.getCodigo().equals(\"0\")) { return new RedirectView(\"/home\"); } else { return new RedirectView(\"/arriendos\"); } } } /arriendopelis/src/main/java/cl/lherrera/arriendopelis/controlador/ClienteController.java package cl.lherrera.arriendopelis.controlador; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.servlet.ModelAndView; import org.springframework.web.servlet.view.RedirectView; import cl.lherrera.arriendopelis.dto.ClienteDTO; import cl.lherrera.arriendopelis.modelo.Cliente; import cl.lherrera.arriendopelis.servicio.ClienteService; @Controller @RequestMapping(path = \"clientes\") public class ClienteController { @Autowired private ClienteService clienteService; @GetMapping public ModelAndView clientes() { ModelAndView modelAndView = new ModelAndView(\"clientes\"); modelAndView.addObject(\"cliente\", new Cliente()); return modelAndView; } @PostMapping(\"/agregar\") public RedirectView agregar(@ModelAttribute Cliente cliente) { ClienteDTO respuestaServicio = clienteService.add(cliente); if (respuestaServicio.getCodigo().equals(\"0\")) { return new RedirectView(\"/home\"); } else { return new RedirectView(\"/clientes\"); } } } /arriendopelis/src/main/java/cl/lherrera/arriendopelis/controlador/HomeController.java package cl.lherrera.arriendopelis.controlador; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.servlet.ModelAndView; import org.springframework.web.servlet.view.RedirectView; import cl.lherrera.arriendopelis.dto.ClienteDTO; import cl.lherrera.arriendopelis.modelo.Cliente; import cl.lherrera.arriendopelis.servicio.ClienteService; @Controller @RequestMapping(path = \"clientes\") public class ClienteController { @Autowired private ClienteService clienteService; @GetMapping public ModelAndView clientes() { ModelAndView modelAndView = new ModelAndView(\"clientes\"); modelAndView.addObject(\"cliente\", new Cliente()); return modelAndView; } @PostMapping(\"/agregar\") public RedirectView agregar(@ModelAttribute Cliente cliente) { ClienteDTO respuestaServicio = clienteService.add(cliente); if (respuestaServicio.getCodigo().equals(\"0\")) { return new RedirectView(\"/home\"); } else { return new RedirectView(\"/clientes\"); } } } /arriendopelis/src/main/java/cl/lherrera/arriendopelis/controlador/PeliculaController.java package cl.lherrera.arriendopelis.controlador; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.servlet.ModelAndView; import org.springframework.web.servlet.view.RedirectView; import cl.lherrera.arriendopelis.dto.PeliculaDTO; import cl.lherrera.arriendopelis.modelo.Pelicula; import cl.lherrera.arriendopelis.servicio.PeliculaService; @Controller @RequestMapping(path = \"/peliculas\") public class PeliculaController { @Autowired private PeliculaService peliculaService; @GetMapping(path = { \"\", \"/\" }) public ModelAndView peliculas() { ModelAndView modelAndView = new ModelAndView(\"peliculas\"); modelAndView.addObject(\"pelicula\", new Pelicula()); return modelAndView; } @PostMapping(path = \"/agregar\") public RedirectView agregar(@ModelAttribute Pelicula pelicula) { PeliculaDTO respuestaServicio = peliculaService.add(pelicula); if (respuestaServicio.getCodigo().equals(\"0\")) { return new RedirectView(\"/home\"); } else { return new RedirectView(\"/peliculas\"); } } } cl.lherrera.arriendopelis.dao \u001d /arriendopelis/src/main/java/cl/lherrera/arriendopelis/dao/ArriendoRepository.java package cl.lherrera.arriendopelis.controlador; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.servlet.ModelAndView; import org.springframework.web.servlet.view.RedirectView; import cl.lherrera.arriendopelis.dto.PeliculaDTO; import cl.lherrera.arriendopelis.modelo.Pelicula; import cl.lherrera.arriendopelis.servicio.PeliculaService; @Controller @RequestMapping(path = \"/peliculas\") public class PeliculaController { @Autowired private PeliculaService peliculaService; @GetMapping(path = { \"\", \"/\" }) public ModelAndView peliculas() { ModelAndView modelAndView = new ModelAndView(\"peliculas\"); modelAndView.addObject(\"pelicula\", new Pelicula()); return modelAndView; } @PostMapping(path = \"/agregar\") public RedirectView agregar(@ModelAttribute Pelicula pelicula) { PeliculaDTO respuestaServicio = peliculaService.add(pelicula); if (respuestaServicio.getCodigo().equals(\"0\")) { return new RedirectView(\"/home\"); } else { return new RedirectView(\"/peliculas\"); } } } /arriendopelis/src/main/java/cl/lherrera/arriendopelis/dao/ClienteRepository.java package cl.lherrera.arriendopelis.dao; import org.springframework.data.jpa.repository.JpaRepository; import cl.lherrera.arriendopelis.modelo.Cliente; public interface ClienteRepository extends JpaRepository<Cliente, Integer> { } /arriendopelis/src/main/java/cl/lherrera/arriendopelis/dao/PeliculaRepository.java package cl.lherrera.arriendopelis.dao; import org.springframework.data.jpa.repository.JpaRepository; import cl.lherrera.arriendopelis.modelo.Pelicula; public interface PeliculaRepository extends JpaRepository<Pelicula, Integer> { } cl/lherrera/arriendopelis/dto/ \u001c /arriendopelis/src/main/java/cl/lherrera/arriendopelis/dto/ArriendoDTO.java package cl.lherrera.arriendopelis.dto; import java.util.List; import cl.lherrera.arriendopelis.modelo.Arriendo; public class ArriendoDTO extends GenericDTO { private List<Arriendo> arriendos; public ArriendoDTO() { // TODO Auto-generated constructor stub } public ArriendoDTO(List<Arriendo> arriendos) { super(); this.arriendos = arriendos; } public ArriendoDTO(List<Arriendo> arriendos, String mensaje, String codigo) { super(mensaje, codigo); // TODO Auto-generated constructor stub this.arriendos = arriendos; } public List<Arriendo> getArriendos() { return arriendos; } public void setArriendos(List<Arriendo> arriendos) { this.arriendos = arriendos; } @Override public String toString() { return \"ArriendoDTO [arriendos=\" + arriendos + \"]\"; } } /arriendopelis/src/main/java/cl/lherrera/arriendopelis/dto/ClienteDTO.java package cl.lherrera.arriendopelis.dto; import java.util.List; import cl.lherrera.arriendopelis.modelo.Cliente; public class ClienteDTO extends GenericDTO { private List<Cliente> clientes; public ClienteDTO() { // TODO Auto-generated constructor stub } public ClienteDTO(List<Cliente> clientes, String mensaje, String codigo) { super(mensaje, codigo); // TODO Auto-generated constructor stub this.clientes = clientes; } public List<Cliente> getClientes() { return clientes; } public void setClientes(List<Cliente> clientes) { this.clientes = clientes; } @Override public String toString() { return \"ClienteDTO [clientes=\" + clientes + \"]\"; } } /arriendopelis/src/main/java/cl/lherrera/arriendopelis/dto/GenericDTO.java package cl.lherrera.arriendopelis.dto; public class GenericDTO { private String mensaje; private String codigo; public GenericDTO() { // TODO Auto-generated constructor stub } public GenericDTO(String mensaje, String codigo) { super(); this.mensaje = mensaje; this.codigo = codigo; } public String getMensaje() { return mensaje; } public void setMensaje(String mensaje) { this.mensaje = mensaje; } public String getCodigo() { return codigo; } public void setCodigo(String codigo) { this.codigo = codigo; } @Override public String toString() { return \"GenericDTO [mensaje=\" + mensaje + \", codigo=\" + codigo + \"]\"; } } /arriendopelis/src/main/java/cl/lherrera/arriendopelis/dto/PeliculaDTO.java package cl.lherrera.arriendopelis.dto; import java.util.List; import cl.lherrera.arriendopelis.modelo.Pelicula; public class PeliculaDTO extends GenericDTO { private List<Pelicula> peliculas; public PeliculaDTO() { // TODO Auto-generated constructor stub } public PeliculaDTO(String mensaje, String codigo) { super(mensaje, codigo); // TODO Auto-generated constructor stub } public PeliculaDTO(List<Pelicula> peliculas, String mensaje, String codigo) { super(mensaje, codigo); this.peliculas = peliculas; } public List<Pelicula> getPeliculas() { return peliculas; } public void setPeliculas(List<Pelicula> peliculas) { this.peliculas = peliculas; } @Override public String toString() { return \"PeliculaDTO [peliculas=\" + peliculas + \"]\"; } } cl.lherrera.arriendopelis.modelo \u001d /arriendopelis/src/main/java/cl/lherrera/arriendopelis/modelo/Arriendo.java package cl.lherrera.arriendopelis.modelo; import javax.persistence.CascadeType; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.JoinColumn; import javax.persistence.ManyToOne; import javax.persistence.OneToOne; @Entity public class Arriendo { @Id @GeneratedValue(strategy = GenerationType.AUTO) private Integer id; private String inicio; private Integer duracion; @OneToOne(cascade = CascadeType.ALL) @JoinColumn(name = \"pelicula_id\", referencedColumnName = \"id\") private Pelicula pelicula; @ManyToOne @JoinColumn(name = \"cliente_id\", nullable = false) private Cliente cliente; public Arriendo() { // TODO Auto-generated constructor stub } public Arriendo(Integer id, String inicio, Integer duracion, Pelicula pelicula, Cliente cliente) { super(); this.id = id; this.inicio = inicio; this.duracion = duracion; this.pelicula = pelicula; this.cliente = cliente; } public Cliente getCliente() { return cliente; } public void setCliente(Cliente cliente) { this.cliente = cliente; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getInicio() { return inicio; } public void setInicio(String inicio) { this.inicio = inicio; } public Integer getDuracion() { return duracion; } public void setDuracion(Integer duracion) { this.duracion = duracion; } public Pelicula getPelicula() { return pelicula; } public void setPelicula(Pelicula pelicula) { this.pelicula = pelicula; } @Override public String toString() { return \"Arriendo [id=\" + id + \", inicio=\" + inicio + \", duracion=\" + duracion + \", pelicula=\" + pelicula + \"]\"; } } /arriendopelis/src/main/java/cl/lherrera/arriendopelis/modelo/Cliente.java package cl.lherrera.arriendopelis.modelo; import java.util.List; import javax.persistence.CascadeType; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.OneToMany; @Entity public class Cliente { @Id @GeneratedValue(strategy = GenerationType.AUTO) private Integer id; private String nombre; @OneToMany(cascade = CascadeType.ALL, mappedBy = \"cliente\") private List<Arriendo> arriendos; public Cliente() { // TODO Auto-generated constructor stub } public Cliente(Integer id, String nombre, List<Arriendo> arriendos) { super(); this.id = id; this.nombre = nombre; this.arriendos = arriendos; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } public List<Arriendo> getArriendos() { return arriendos; } public void setArriendos(List<Arriendo> arriendos) { this.arriendos = arriendos; } @Override public String toString() { return \"Cliente [id=\" + id + \", nombre=\" + nombre + \", arriendos=\" + arriendos + \"]\"; } } /arriendopelis/src/main/java/cl/lherrera/arriendopelis/modelo/Pelicula.java package cl.lherrera.arriendopelis.modelo; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; @Entity public class Pelicula { @Id @GeneratedValue(strategy = GenerationType.AUTO) // https://www.objectdb.com/java/jpa/entity/generated private Integer id; private String titulo; private String descripcion; private Integer duracion; public Pelicula() { } public Pelicula(Integer id, String titulo, String descripcion, Integer duracion) { super(); this.id = id; this.titulo = titulo; this.descripcion = descripcion; this.duracion = duracion; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getTitulo() { return titulo; } public void setTitulo(String titulo) { this.titulo = titulo; } public String getDescripcion() { return descripcion; } public void setDescripcion(String descripcion) { this.descripcion = descripcion; } public Integer getDuracion() { return duracion; } public void setDuracion(Integer duracion) { this.duracion = duracion; } @Override public String toString() { return \"Pelicula [id=\" + id + \", titulo=\" + titulo + \", descripcion=\" + descripcion + \", duracion=\" + duracion + \"]\"; } } cl.lherrera.arriendopelis.servicio /arriendopelis/src/main/java/cl/lherrera/arriendopelis/servicio/ArriendoService.java package cl.lherrera.arriendopelis.servicio; import cl.lherrera.arriendopelis.dto.ArriendoDTO; import cl.lherrera.arriendopelis.modelo.Arriendo; public interface ArriendoService { // ac\u00e1 el servicio usualmente difiere de la petici\u00f3n del dao // pero para efectos del ejemplo se llamar\u00e1 igual. // es tamb\u00eden una confisi\u00f3n com\u00fan el no diferenciar entre // las responsablidades de los servicios y la de // los repositorios. Por eso es que los repositorios // se implementan autom\u00e1ticamente y los servicios // es la l\u00f3gica de negocio que nosotros desarrollamos // usando lo aut\u00f3m\u00e1tico del repositorio. donde sabemos // como funciona un findAll(). La \u00fanica justificaci\u00f3n // es que el findAll del servicio, llenar\u00e1 un DTO; pero // deber\u00eda ser otro nombre. ArriendoDTO findAll(); ArriendoDTO add(Arriendo arriendo); } /arriendopelis/src/main/java/cl/lherrera/arriendopelis/servicio/ClienteService.java package cl.lherrera.arriendopelis.servicio; import cl.lherrera.arriendopelis.dto.ClienteDTO; import cl.lherrera.arriendopelis.modelo.Cliente; public interface ClienteService { ClienteDTO findAll(); ClienteDTO add(Cliente cliente); } /arriendopelis/src/main/java/cl/lherrera/arriendopelis/servicio/PeliculaService.java package cl.lherrera.arriendopelis.servicio; import cl.lherrera.arriendopelis.dto.PeliculaDTO; import cl.lherrera.arriendopelis.modelo.Pelicula; public interface PeliculaService { PeliculaDTO findAll(); PeliculaDTO add(Pelicula pelicula); } cl.lherrera.arriendopelis.servicioImpl /arriendopelis/src/main/java/cl/lherrera/arriendopelis/servicioImpl/ArriendoServiceImpl.java package cl.lherrera.arriendopelis.servicioImpl; import java.util.ArrayList; import java.util.List; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional; import cl.lherrera.arriendopelis.dao.ArriendoRepository; import cl.lherrera.arriendopelis.dto.ArriendoDTO; import cl.lherrera.arriendopelis.modelo.Arriendo; import cl.lherrera.arriendopelis.servicio.ArriendoService; @Service public class ArriendoServiceImpl implements ArriendoService { private static final Logger log = LoggerFactory.getLogger(ArriendoServiceImpl.class); @Autowired private ArriendoRepository dao; private ArriendoDTO respuesta; @Override @Transactional(readOnly = true) public ArriendoDTO findAll() { respuesta = new ArriendoDTO(new ArrayList<Arriendo>(), \"Ha ocurrido un error\", \"102\"); try { respuesta.setArriendos((List<Arriendo>) dao.findAll()); respuesta.setMensaje(String.format(\"Se ha/n encontrado %d registro/s\", respuesta.getArriendos().size())); respuesta.setCodigo(\"0\"); } catch (Exception e) { log.trace(\"Arriendo Service: Error en findAll\", e); } return respuesta; } @Override @Transactional public ArriendoDTO add(Arriendo arriendo) { respuesta = new ArriendoDTO(new ArrayList<Arriendo>(), \"Ha ocurrido un error\", \"104\"); try { dao.save(arriendo); respuesta.setMensaje(String.format(\"Se ha guardado correctamente el arriendo de la pelicula %s\", arriendo.getPelicula().getTitulo())); respuesta.setCodigo(\"0\"); } catch (Exception e) { log.trace(\"Arriendo Service: Error en add\", e); } return respuesta; } } /arriendopelis/src/main/java/cl/lherrera/arriendopelis/servicioImpl/ClienteServiceImpl.java package cl.lherrera.arriendopelis.servicioImpl; import java.util.ArrayList; import java.util.List; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional; import cl.lherrera.arriendopelis.dao.ClienteRepository; import cl.lherrera.arriendopelis.dto.ClienteDTO; import cl.lherrera.arriendopelis.modelo.Cliente; import cl.lherrera.arriendopelis.servicio.ClienteService; @Service public class ClienteServiceImpl implements ClienteService { private static final Logger log = LoggerFactory.getLogger(ClienteServiceImpl.class); @Autowired private ClienteRepository dao; private ClienteDTO respuesta; @Override @Transactional(readOnly = true) public ClienteDTO findAll() { respuesta = new ClienteDTO(new ArrayList<Cliente>(), \"Ha ocurrido un error\", \"102\"); try { respuesta.setClientes((List<Cliente>) dao.findAll()); respuesta.setMensaje(String.format(\"Se ha/n encontrado %d registro/s\", respuesta.getClientes().size())); respuesta.setCodigo(\"0\"); } catch (Exception e) { log.trace(\"Cliente Service: Error en findAll\", e); } return respuesta; } @Override @Transactional public ClienteDTO add(Cliente cliente) { respuesta = new ClienteDTO(new ArrayList<Cliente>(), \"Ha ocurrido un error\", \"104\"); try { dao.save(cliente); respuesta.setMensaje(String.format(\"Se ha guardado correctamente el cliente %s\", cliente.getNombre())); respuesta.setCodigo(\"0\"); } catch (Exception e) { log.trace(\"Cliente Service: Error en add\", e); } return respuesta; } } /arriendopelis/src/main/java/cl/lherrera/arriendopelis/servicioImpl/PeliculaServiceImpl.java package cl.lherrera.arriendopelis.servicioImpl; import java.util.ArrayList; import java.util.List; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional; import cl.lherrera.arriendopelis.dao.PeliculaRepository; import cl.lherrera.arriendopelis.dto.PeliculaDTO; import cl.lherrera.arriendopelis.modelo.Pelicula; import cl.lherrera.arriendopelis.servicio.PeliculaService; @Service public class PeliculaServiceImpl implements PeliculaService { private static final Logger log = LoggerFactory.getLogger(PeliculaServiceImpl.class); @Autowired private PeliculaRepository dao; private PeliculaDTO respuesta; @Override @Transactional(readOnly = true) public PeliculaDTO findAll() { respuesta = new PeliculaDTO(new ArrayList<Pelicula>(), \"Ha ocurrido un error\", \"102\"); try { respuesta.setPeliculas((List<Pelicula>) dao.findAll()); respuesta.setMensaje(String.format(\"Se ha/n encontrado %d registro/s\", respuesta.getPeliculas().size())); respuesta.setCodigo(\"0\"); } catch (Exception e) { log.trace(\"Pelicula Service: Error en findAll\", e); } return respuesta; } @Override @Transactional public PeliculaDTO add(Pelicula pelicula) { respuesta = new PeliculaDTO(new ArrayList<Pelicula>(), \"Ha ocurrido un error\", \"104\"); try { dao.save(pelicula); respuesta.setMensaje(String.format(\"Se ha guardado correctamente la pelicula %s\", pelicula.getTitulo())); respuesta.setCodigo(\"0\"); } catch (Exception e) { log.trace(\"Pelicula Service: Error en add\", e); } return respuesta; } } /arriendopelis/src/main/resources /templates/arriendos.html <!DOCTYPE html> <html th:replace=\"~{base :: layout(~{::title}, ~{::#contenido}, 'arriendos')}\"> <head> <title>Arriendos</title> </head> <body> <div id=\"contenido\" class=\"container\"> <div class=\"col-sm-2\"></div> <div class=\"col-sm-8\"> <h3>Arriendos</h3> <!-- th:action: La acci\u00f3n a ejecutar, en este caso (/arriendos/agregar) th:object: El modelo que se captura en el controlador como @ModelAttribute. select th:field=\"*{pelicula}\": Es el nombre con que ir\u00e1 en el formulario. name th:each: Por cada pelicula en ${peliculas} donde pel\u00edcula viene del modelo del controlador. th:value=\"${cliente.id}: es el valor que se usa como identificador de cada elemento. th:text: ${pelicula.titulo} accedemos al id de cada pelicula en peliculas --> <form th:action=\"@{/arriendos/agregar}\" method=\"post\" th:object=\"${arriendo}\"> <div class=\"form-group row\"> <label for=\"inicio\" class=\"col-4\">Inicio</label> <div class=\"col-8\"> <input class=\"form-control\" type=\"date\" data-date format=\"mm-dd-yyyy\" id=\"inicio\" name=\"inicio\"> </div> </div> <div class=\"form-group row\"> <label for=\"duracion\" class=\"col-4\">Duraci\u00f3n</label> <div class=\"col-8\"> <input class=\"form-control\" type=\"number\" value=\"\" id=\"duracion\" name=\"duracion\"> </div> </div> <div class=\"form-group row\"> <label class=\"col-4\">Pelicula</label> <div class=\"col-8\"> <select th:field=\"*{pelicula}\"> <option th:each=\"pelicula : ${peliculas}\" th:value=\"${pelicula.id}\" th:text=\"${pelicula.titulo}\"></option> </select> </div> </div> <div class=\"form-group row\"> <label class=\"col-4\">Cliente</label> <div class=\"col-8\"> <select th:field=\"*{cliente}\"> <option th:each=\"cliente : ${clientes}\" th:value=\"${cliente.id}\" th:text=\"${cliente.nombre}\"></option> </select> </div> </div> <div class=\"form-group row\"> <div class=\"col-sm-12\"> <button type=\"submit\" class=\"btn btn-primary\">Agregar</button> </div> </div> </form> </div> <div class=\"col-sm-2\"> <p></p> </div> </div> </body> </html> /templates/base.html <!DOCTYPE html> <html th:fragment=\"layout (titulo, contenido, menu)\" xmlns:th=\"http://www.thymeleaf.org\"> <head> <title th:replace=\"${titulo}\">Layout Title</title> <!-- Bootstrap --> <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css\" integrity=\"sha384-rwoIResjU2yc3z8GV/NPeZWAv56rSmLldC3R/AZzGRnGxQQKnKkoFVhFQhNUwEyJ\" crossorigin=\"anonymous\"> <!-- Bootstrap --> </head> <body> <!-- MEN\u00da COM\u00daN SITIO --> <!-- La condici\u00f3n es la siguiente: si el men\u00fa pasado por par\u00e1metro en otra web se guarda en el tercer par\u00e1metro ${menu}. (|${menu}| == 'home')?, significa que |${menu}| es para poder hacer un reemplazo literal, el par\u00e1metro debe esta en ${}; pero si adem\u00e1s est\u00e1 entro ||, es para hacer un reemplazo literal, que se exige si est\u00e1 dentro de @{}. entonces : (|${menu}| == 'home')? quiere decir: si lo que est\u00e1 en el par\u00e1metro menu, es 'home'. entonces @{(|${menu}| == 'home')? '#' : '/home', quiere decir que si esa condici\u00f3n se cumple, entonces el link ser\u00e1 '#', es decir que no ir\u00e1 a ninguna parte si estamos en home, de otra forma se imprime el link que lleva a home. --> <ul class=\"nav justify-content-end\"> <li class=\"nav-item\"><a class=\"nav-link active\" th:href=\"@{(|${menu}| == 'home')? '#' : '/home'}\">Home</a></li> <li class=\"nav-item\"><a class=\"nav-link active\" th:href=\"@{(|${menu}| == 'arriendos')? '#' : '/arriendos'}\">Arriendos</a></li> <li class=\"nav-item\"><a class=\"nav-link active\" th:href=\"@{ (|${menu}| == 'clientes')? '#' : '/clientes'}\">Clientes</a></li> <li class=\"nav-item\"><a class=\"nav-link active\" th:href=\"@{ (|${menu}| == 'peliculas')? '#' : '/peliculas'}\">Peliculas</a></li> </ul> <!-- MEN\u00da COM\u00daN SITIO --> <div th:replace=\"${contenido}\"> <p>Este es el contenido por defecto</p> </div> <!-- Bootstrap JS --> <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/js/bootstrap.min.js\" integrity=\"sha384-vBWWzlZJ8ea9aCX4pEW3rVHjgjt7zpkNpZk+02D9phzyeVkE+jo0ieGizqPLForn\" crossorigin=\"anonymous\"></script> <!-- Bootstrap JS --> <footer> Pi\u00e9 de p\u00e1gina </footer> </body> </html> /templates/clientes.html <!DOCTYPE html> <html th:replace=\"~{base :: layout(~{::title}, ~{::#contenido}, 'clientes')}\"> <head> <title>Clientes</title> </head> <body> <div id=\"contenido\" class=\"container\"> <div class=\"col-sm-2\"></div> <div class=\"col-sm-8\"> <h3>Clientes</h3> <form th:action=\"@{/clientes/agregar}\" method=\"post\" th:object=\"${cliente}\"> <div class=\"form-group row\"> <label for=\"nombre\" class=\"col-sm-4\">Nombre</label> <div class=\"col-sm-8\"> <input class=\"form-control\" type=\"text\" id=\"nombre\" name=\"nombre\"> </div> </div> <div class=\"form-group row\"> <div class=\"col-sm-12\"> <button type=\"submit\" class=\"btn btn-primary\">Agregar</button> </div> </div> </form> </div> <div class=\"col-sm-2\"> <p></p> </div> </div> </body> </html> /templates/home.html <!DOCTYPE html> <html th:replace=\"~{base :: layout(~{::title}, ~{::#contenido}, 'home')}\"> <title>home</title> <div id=\"contenido\"> <div class=\"container\"> <div class=\"col-sm-2\"></div> <div class=\"col-sm-8\"> <h3>Detalle</h3> <table class=\"table\"> <thead class=\"thead-light\"> <tr> <th scope=\"col\">Identificador</th> <th scope=\"col\">Inicio</th> <th scope=\"col\">Duracion</th> <th scope=\"col\">Pelicula</th> <th scope=\"col\">Cliente</th> </tr> </thead> <tbody> <tr th:each=\"arriendo: ${arriendos}\"> <td th:text=\"${arriendo.id}\" /> <td th:text=\"${arriendo.inicio}\" /> <td th:text=\"${arriendo.duracion}\" /> <td th:text=\"${arriendo.pelicula.titulo}\" /> <td th:text=\"${arriendo.cliente.nombre}\" /> </tr> </tbody> </table> </div> <div class=\"col-sm-2\"> <p></p> </div> </div> </div> </html> /templates/peliculas.html <!DOCTYPE html> <html th:replace=\"~{base :: layout(~{::title}, ~{::#contenido}, 'peliculas')}\"> <head> <title>Peliculas</title> </head> <body> <div id=\"contenido\" class=\"container\"> <div class=\"col-sm-2\"></div> <div class=\"col-sm-8\"> <h3>Peliculas</h3> <form th:action=\"@{/peliculas/agregar}\" method=\"post\" th:object=\"${pelicula}\"> <div class=\"form-group row\"> <label for=\"titulo\" class=\"col-4\">Titulo</label> <div class=\"col-8\"> <input class=\"form-control\" type=\"text\" id=\"titulo\" name=\"titulo\"> </div> </div> <div class=\"form-group row\"> <label for=\"descripcion\" class=\"col-4\">Descripcion</label> <div class=\"col-8\"> <input class=\"form-control\" type=\"text\" id=\"descripcion\" name=\"descripcion\"> </div> </div> <div class=\"form-group row\"> <label for=\"duracion\" class=\"col-4\">Duracion</label> <div class=\"col-8\"> <input class=\"form-control\" type=\"number\" id=\"duracion\" name=\"duracion\"> </div> </div> <div class=\"form-group row\"> <div class=\"col-sm-12\"> <button type=\"submit\" class=\"btn btn-primary\">Agregar</button> </div> </div> </form> </div> <div class=\"col-sm-2\"> <p></p> </div> </div> </body> </html> /application.properties spring.thymeleaf.check-template-location=true spring.thymeleaf.prefix=classpath:/templates/ spring.thymeleaf.suffix=.html spring.thymeleaf.mode=LEGACYHTML5 spring.thymeleaf.encoding=UTF-8 spring.thymeleaf.servlet.content-type=text/html spring.thymeleaf.cache=false # Configuraci\u00f3n de jpa spring.jpa.generate-ddl=true spring.jpa.database-platform=cl.lherrera.arriendopelis.SQLiteDialect spring.jpa.hibernate.ddl-auto=create-drop spring.jpa.show-sql=true spring.jpa.properties.hibernate.format_sql=true /database.properties driverClassName=org.sqlite.JDBC url=jdbc:sqlite:basedatos.db username=jpaspring password=sa /pom.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.6.RELEASE</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>cl.lherrera.arriendopelis</groupId> <artifactId>arriendopelis</artifactId> <version>20.0.0</version> <packaging>war</packaging> <name>arriendopelis</name> <description>lectura 1 relaciones</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-jpa</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-thymeleaf</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> <scope>provided</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> <!-- SQLITE - SUPPORT --> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> </dependency> <!-- SQLITE - SUPPORT # --> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project> TODO Mejorar la vista de la aplicaci\u00f3n. Aumentar servicios. Crear un inicio de sesi\u00f3n. paginar los resultados.","title":"Lectura002"},{"location":"modulos/mod_5/uni004/lectura002/#unidad-42-asociaciones","text":"Esto trata de asociaciaciones. las que se ejemplifican en el proyecto siguiente, en lectura 1 mostramos la materia y ac\u00e1 se aplica. La diferencia es que ac\u00e1 ocupamos SQLITE \u001d. Podemos tomar este proyecto como el principal. (Ya que este contempla todo lo visto en la lectura 1) Se modifica el proyecto para mostrar el como utilizar thymeleaf para tener una plantilla principal. Es decir para usarlo como motor de plantillas.","title":"Unidad 4.2 - Asociaciones"},{"location":"modulos/mod_5/uni004/lectura002/#421-implementacion-del-proyecto","text":"","title":"4.2.1 Implementaci\u00f3n del proyecto"},{"location":"modulos/mod_5/uni004/lectura002/#estructura","text":"./ \u251c\u2500\u2500 HELP.md \u251c\u2500\u2500 basedatos.db \u251c\u2500\u2500 mvnw \u251c\u2500\u2500 mvnw.cmd \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 arriendopelis \u2502 \u2502 \u2502 \u251c\u2500\u2500 AppConfig.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 ArriendopelisApplication.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 SQLiteDialect.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 ServletInitializer.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 controlador \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ArriendoController.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ClienteController.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 HomeController.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 PeliculaController.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 dao \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ArriendoRepository.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ClienteRepository.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 PeliculaRepository.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 dto \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ArriendoDTO.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ClienteDTO.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 GenericDTO.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 PeliculaDTO.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 modelo \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 Arriendo.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 Cliente.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 Pelicula.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 servicio \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ArriendoService.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ClienteService.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 PeliculaService.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 servicioImpl \u2502 \u2502 \u2502 \u251c\u2500\u2500 ArriendoServiceImpl.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 ClienteServiceImpl.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 PeliculaServiceImpl.java \u2502 \u2502 \u251c\u2500\u2500 resources \u2502 \u2502 \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2502 \u2502 \u251c\u2500\u2500 database.properties \u2502 \u2502 \u2502 \u251c\u2500\u2500 static \u2502 \u2502 \u2502 \u2514\u2500\u2500 templates \u2502 \u2502 \u2502 \u251c\u2500\u2500 arriendos.html \u2502 \u2502 \u2502 \u251c\u2500\u2500 base.html \u2502 \u2502 \u2502 \u251c\u2500\u2500 clientes.html \u2502 \u2502 \u2502 \u251c\u2500\u2500 home.html \u2502 \u2502 \u2502 \u2514\u2500\u2500 peliculas.html \u2502 \u2502 \u2514\u2500\u2500 webapp \u2502 \u2502 \u2514\u2500\u2500 index.html \u2502 \u2514\u2500\u2500 test \u2502 \u2514\u2500\u2500 java \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 arriendopelis \u2502 \u251c\u2500\u2500 ArriendopelisApplicationTests.java \u2502 \u2514\u2500\u2500 dao \u2502 \u251c\u2500\u2500 ClienteRepositoryTest.java \u2502 \u2514\u2500\u2500 PeliculaRepositoryTest.java \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 application.properties \u2502 \u251c\u2500\u2500 cl \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2514\u2500\u2500 arriendopelis \u2502 \u2502 \u251c\u2500\u2500 AppConfig.class \u2502 \u2502 \u251c\u2500\u2500 ArriendopelisApplication.class \u2502 \u2502 \u251c\u2500\u2500 SQLiteDialect.class \u2502 \u2502 \u251c\u2500\u2500 SeEjecutaAntes.class \u2502 \u2502 \u251c\u2500\u2500 ServletInitializer.class \u2502 \u2502 \u251c\u2500\u2500 controlador \u2502 \u2502 \u2502 \u251c\u2500\u2500 ArriendoController.class \u2502 \u2502 \u2502 \u251c\u2500\u2500 ClienteController.class \u2502 \u2502 \u2502 \u251c\u2500\u2500 HomeController.class \u2502 \u2502 \u2502 \u2514\u2500\u2500 PeliculaController.class \u2502 \u2502 \u251c\u2500\u2500 dao \u2502 \u2502 \u2502 \u251c\u2500\u2500 ArriendoRepository.class \u2502 \u2502 \u2502 \u251c\u2500\u2500 ClienteRepository.class \u2502 \u2502 \u2502 \u2514\u2500\u2500 PeliculaRepository.class \u2502 \u2502 \u251c\u2500\u2500 dto \u2502 \u2502 \u2502 \u251c\u2500\u2500 ArriendoDTO.class \u2502 \u2502 \u2502 \u251c\u2500\u2500 ClienteDTO.class \u2502 \u2502 \u2502 \u251c\u2500\u2500 GenericDTO.class \u2502 \u2502 \u2502 \u2514\u2500\u2500 PeliculaDTO.class \u2502 \u2502 \u251c\u2500\u2500 modelo \u2502 \u2502 \u2502 \u251c\u2500\u2500 Arriendo.class \u2502 \u2502 \u2502 \u251c\u2500\u2500 Cliente.class \u2502 \u2502 \u2502 \u2514\u2500\u2500 Pelicula.class \u2502 \u2502 \u251c\u2500\u2500 servicio \u2502 \u2502 \u2502 \u251c\u2500\u2500 ArriendoService.class \u2502 \u2502 \u2502 \u251c\u2500\u2500 ClienteService.class \u2502 \u2502 \u2502 \u2514\u2500\u2500 PeliculaService.class \u2502 \u2502 \u2514\u2500\u2500 servicioImpl \u2502 \u2502 \u251c\u2500\u2500 ArriendoServiceImpl.class \u2502 \u2502 \u251c\u2500\u2500 ClienteServiceImpl.class \u2502 \u2502 \u2514\u2500\u2500 PeliculaServiceImpl.class \u2502 \u251c\u2500\u2500 database.properties \u2502 \u2514\u2500\u2500 templates \u2502 \u251c\u2500\u2500 arriendos.html \u2502 \u251c\u2500\u2500 base.html \u2502 \u251c\u2500\u2500 clientes.html \u2502 \u251c\u2500\u2500 home.html \u2502 \u2514\u2500\u2500 peliculas.html \u251c\u2500\u2500 m2e-wtp \u2502 \u2514\u2500\u2500 web-resources \u2502 \u2514\u2500\u2500 META-INF \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 maven \u2502 \u2514\u2500\u2500 cl.lherrera.arriendopelis \u2502 \u2514\u2500\u2500 arriendopelis \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2514\u2500\u2500 pom.xml \u2514\u2500\u2500 test-classes \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 arriendopelis \u251c\u2500\u2500 ArriendopelisApplicationTests.class \u2514\u2500\u2500 dao \u251c\u2500\u2500 ClienteRepositoryTest.class \u2514\u2500\u2500 PeliculaRepositoryTest.class 45 directories, 78 files","title":"Estructura"},{"location":"modulos/mod_5/uni004/lectura002/#archivos-modificados","text":"/arriendopelis/src/main/java/cl/lherrera/arriendopelis/AppConfig.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/ArriendopelisApplication.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/ServletInitializer.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/SQLiteDialect.java\u001c /arriendopelis/src/main/java/cl/lherrera/arriendopelis/controlador/ArriendoController.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/controlador/ClienteController.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/controlador/HomeController.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/controlador/PeliculaController.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/dao/ArriendoRepository.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/dao/ClienteRepository.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/dao/PeliculaRepository.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/dto/ArriendoDTO.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/dto/ClienteDTO.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/dto/GenericDTO.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/dto/PeliculaDTO.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/modelo/Arriendo.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/modelo/Cliente.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/modelo/Pelicula.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/servicio/ArriendoService.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/servicio/ClienteService.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/servicio/PeliculaService.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/servicioImpl/ArriendoServiceImpl.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/servicioImpl/ClienteServiceImpl.java /arriendopelis/src/main/java/cl/lherrera/arriendopelis/servicioImpl/PeliculaServiceImpl.java /arriendopelis/src/main/resources/templates/arriendos.html /arriendopelis/src/main/resources/templates/base.html /arriendopelis/src/main/resources/templates/clientes.html /arriendopelis/src/main/resources/templates/home.html /arriendopelis/src/main/resources/templates/peliculas.html /arriendopelis/src/main/resources/application.properties /arriendopelis/src/main/resources/database.properties /arriendopelis/pom.xml","title":"Archivos modificados"},{"location":"modulos/mod_5/uni004/lectura002/#cllherreraarriendopelis","text":"","title":"cl.lherrera.arriendopelis"},{"location":"modulos/mod_5/uni004/lectura002/#arriendopelissrcmainjavacllherreraarriendopelisappconfigjava","text":"package cl.lherrera.arriendopelis; import javax.sql.DataSource; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.PropertySource; import org.springframework.core.env.Environment; import org.springframework.jdbc.datasource.DriverManagerDataSource; @Configuration @ComponentScan(\"cl.lherrera.jpaspring\") @PropertySource(\"classpath:database.properties\") public class AppConfig { @Autowired Environment environment; @Bean DataSource dataSource() { DriverManagerDataSource driverManagerDataSource = new DriverManagerDataSource(); driverManagerDataSource.setUrl(environment.getProperty(\"url\")); driverManagerDataSource.setUsername(environment.getProperty(\"username\")); driverManagerDataSource.setPassword(environment.getProperty(\"dbpassword\")); driverManagerDataSource.setDriverClassName(environment.getProperty(\"driverClassName\")); return driverManagerDataSource; } }","title":"/arriendopelis/src/main/java/cl/lherrera/arriendopelis/AppConfig.java"},{"location":"modulos/mod_5/uni004/lectura002/#arriendopelissrcmainjavacllherreraarriendopelisarriendopelisapplicationjava","text":"Se agrega una clase (puede ser de forma funcional tambi\u00e9n para ahorrar c\u00f3digo), que su \u00fanica misi\u00f3n es ingresar un usuario y una pel\u00edcula de prueba, para la demostraci\u00f3n de la aplicaci\u00f3n funcionando. package cl.lherrera.arriendopelis; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.CommandLineRunner; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.stereotype.Component; import cl.lherrera.arriendopelis.modelo.Cliente; import cl.lherrera.arriendopelis.modelo.Pelicula; import cl.lherrera.arriendopelis.servicio.ClienteService; import cl.lherrera.arriendopelis.servicio.PeliculaService; @SpringBootApplication public class ArriendopelisApplication { public static void main(String[] args) { SpringApplication.run(ArriendopelisApplication.class, args); } } /** * Esta clase, realiza acciones antes que la aplicaci\u00f3n est\u00e1 en ejecuci\u00f3n as\u00ed, * el usuario est\u00e1 ingresado antes de iniciar sesi\u00f3n. * */ @Component class SeEjecutaAntes implements CommandLineRunner { @Autowired ClienteService servicioCliente; @Autowired PeliculaService servicioPelicula; @Override public void run(String... args) throws Exception { Cliente cliente = new Cliente(); cliente.setNombre(\"Luis\"); // se puede ver que add no es un buen nombre para un // servicio. Parece una lista. servicioCliente.add(cliente); Pelicula pelicula = new Pelicula(); pelicula.setTitulo(\"El cubo\"); pelicula.setDescripcion(\"muy rara\"); pelicula.setDuracion(120); servicioPelicula.add(pelicula); } }","title":"/arriendopelis/src/main/java/cl/lherrera/arriendopelis/ArriendopelisApplication.java"},{"location":"modulos/mod_5/uni004/lectura002/#arriendopelissrcmainjavacllherreraarriendopelisservletinitializerjava","text":"Este archivo se genera solo, es para que se construya el proyecto en un war . package cl.lherrera.arriendopelis; import org.springframework.boot.builder.SpringApplicationBuilder; import org.springframework.boot.web.servlet.support.SpringBootServletInitializer; public class ServletInitializer extends SpringBootServletInitializer { @Override protected SpringApplicationBuilder configure(SpringApplicationBuilder application) { return application.sources(ArriendopelisApplication.class); } }","title":"/arriendopelis/src/main/java/cl/lherrera/arriendopelis/ServletInitializer.java"},{"location":"modulos/mod_5/uni004/lectura002/#arriendopelissrcmainjavacllherreraarriendopelissqlitedialectjava","text":"package cl.lherrera.arriendopelis; import java.sql.Types; import org.hibernate.dialect.Dialect; import org.hibernate.dialect.function.StandardSQLFunction; import org.hibernate.dialect.function.SQLFunctionTemplate; import org.hibernate.dialect.function.VarArgsSQLFunction; import org.hibernate.type.StandardBasicTypes; public class SQLiteDialect extends Dialect { public SQLiteDialect() { super(); registerColumnType(Types.BIT, \"integer\"); registerColumnType(Types.TINYINT, \"tinyint\"); registerColumnType(Types.SMALLINT, \"smallint\"); registerColumnType(Types.INTEGER, \"integer\"); registerColumnType(Types.BIGINT, \"bigint\"); registerColumnType(Types.FLOAT, \"float\"); registerColumnType(Types.REAL, \"real\"); registerColumnType(Types.DOUBLE, \"double\"); registerColumnType(Types.NUMERIC, \"numeric\"); registerColumnType(Types.DECIMAL, \"decimal\"); registerColumnType(Types.CHAR, \"char\"); registerColumnType(Types.VARCHAR, \"varchar\"); registerColumnType(Types.LONGVARCHAR, \"longvarchar\"); registerColumnType(Types.DATE, \"date\"); registerColumnType(Types.TIME, \"time\"); registerColumnType(Types.TIMESTAMP, \"timestamp\"); registerColumnType(Types.BINARY, \"blob\"); registerColumnType(Types.VARBINARY, \"blob\"); registerColumnType(Types.LONGVARBINARY, \"blob\"); // registerColumnType(Types.NULL, \"null\"); registerColumnType(Types.BLOB, \"blob\"); registerColumnType(Types.CLOB, \"clob\"); registerColumnType(Types.BOOLEAN, \"integer\"); registerFunction(\"concat\", new VarArgsSQLFunction(StandardBasicTypes.STRING, \"\", \"||\", \"\")); registerFunction(\"mod\", new SQLFunctionTemplate(StandardBasicTypes.INTEGER, \"?1 % ?2\")); registerFunction(\"substr\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); registerFunction(\"substring\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); } public boolean supportsIdentityColumns() { return true; } public boolean hasDataTypeInIdentityColumn() { return false; // As specify in NHibernate dialect } public String getIdentityColumnString() { // return \"integer primary key autoincrement\"; return \"integer\"; } public String getIdentitySelectString() { return \"select last_insert_rowid()\"; } public boolean supportsLimit() { return true; } public String getLimitString(String query, boolean hasOffset) { return new StringBuffer(query.length() + 20).append(query).append( hasOffset ? \" limit ? offset ?\" : \" limit ?\").toString(); } public boolean bindLimitParametersInReverseOrder() { return true; } public boolean supportsTemporaryTables() { return true; } public String getCreateTemporaryTableString() { return \"create temporary table if not exists\"; } public boolean dropTemporaryTableAfterUse() { return false; } public boolean supportsCurrentTimestampSelection() { return true; } public boolean isCurrentTimestampSelectStringCallable() { return false; } public String getCurrentTimestampSelectString() { return \"select current_timestamp\"; } public boolean supportsUnionAll() { return true; } public boolean hasAlterTable() { return false; // As specify in NHibernate dialect } public boolean dropConstraints() { return false; } public String getAddColumnString() { return \"add column\"; } public String getForUpdateString() { return \"\"; } public boolean supportsOuterJoinForUpdate() { return false; } public String getDropForeignKeyString() { throw new UnsupportedOperationException( \"No drop foreign key syntax supported by SQLiteDialect\"); } public String getAddForeignKeyConstraintString(String constraintName, String[] foreignKey, String referencedTable, String[] primaryKey, boolean referencesPrimaryKey) { throw new UnsupportedOperationException( \"No add foreign key syntax supported by SQLiteDialect\"); } public String getAddPrimaryKeyConstraintString(String constraintName) { throw new UnsupportedOperationException( \"No add primary key syntax supported by SQLiteDialect\"); } public boolean supportsIfExistsBeforeTableName() { return true; } public boolean supportsCascadeDelete() { return false; } }","title":"/arriendopelis/src/main/java/cl/lherrera/arriendopelis/SQLiteDialect.java"},{"location":"modulos/mod_5/uni004/lectura002/#cllherreraarriendopeliscontrolador","text":"","title":"cl/lherrera/arriendopelis/controlador/"},{"location":"modulos/mod_5/uni004/lectura002/#arriendopelissrcmainjavacllherreraarriendopeliscontroladorarriendocontrollerjava","text":"package cl.lherrera.arriendopelis.controlador; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.servlet.ModelAndView; import org.springframework.web.servlet.view.RedirectView; import cl.lherrera.arriendopelis.dto.ArriendoDTO; import cl.lherrera.arriendopelis.modelo.Arriendo; import cl.lherrera.arriendopelis.servicio.ArriendoService; import cl.lherrera.arriendopelis.servicio.ClienteService; import cl.lherrera.arriendopelis.servicio.PeliculaService; @Controller @RequestMapping(path = \"/arriendos\") public class ArriendoController { @Autowired private ArriendoService arriendoService; @Autowired private PeliculaService peliculaService; @Autowired private ClienteService clienteService; @GetMapping(path = { \"\", \"/\" }) public ModelAndView arriendos(Model model) { // se crea el modelAnd View, esto no solo renderiza la vista, si no que // env\u00eda el modelo. ModelAndView modelAndView = new ModelAndView(\"arriendos\"); modelAndView.addObject(\"arriendo\", new Arriendo()); model.addAttribute(\"peliculas\", peliculaService.findAll().getPeliculas()); model.addAttribute(\"clientes\", clienteService.findAll().getClientes()); return modelAndView; } /** * @ModelAttribute es la anotaci\u00f3n que permite acceder al modelo declarado en la * vista que en este caso es arriendo. */ @PostMapping(\"/agregar\") public RedirectView agregar(@ModelAttribute Arriendo arriendo) { ArriendoDTO respuestaServicio = arriendoService.add(arriendo); if (respuestaServicio.getCodigo().equals(\"0\")) { return new RedirectView(\"/home\"); } else { return new RedirectView(\"/arriendos\"); } } }","title":"/arriendopelis/src/main/java/cl/lherrera/arriendopelis/controlador/ArriendoController.java"},{"location":"modulos/mod_5/uni004/lectura002/#arriendopelissrcmainjavacllherreraarriendopeliscontroladorclientecontrollerjava","text":"package cl.lherrera.arriendopelis.controlador; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.servlet.ModelAndView; import org.springframework.web.servlet.view.RedirectView; import cl.lherrera.arriendopelis.dto.ClienteDTO; import cl.lherrera.arriendopelis.modelo.Cliente; import cl.lherrera.arriendopelis.servicio.ClienteService; @Controller @RequestMapping(path = \"clientes\") public class ClienteController { @Autowired private ClienteService clienteService; @GetMapping public ModelAndView clientes() { ModelAndView modelAndView = new ModelAndView(\"clientes\"); modelAndView.addObject(\"cliente\", new Cliente()); return modelAndView; } @PostMapping(\"/agregar\") public RedirectView agregar(@ModelAttribute Cliente cliente) { ClienteDTO respuestaServicio = clienteService.add(cliente); if (respuestaServicio.getCodigo().equals(\"0\")) { return new RedirectView(\"/home\"); } else { return new RedirectView(\"/clientes\"); } } }","title":"/arriendopelis/src/main/java/cl/lherrera/arriendopelis/controlador/ClienteController.java"},{"location":"modulos/mod_5/uni004/lectura002/#arriendopelissrcmainjavacllherreraarriendopeliscontroladorhomecontrollerjava","text":"package cl.lherrera.arriendopelis.controlador; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.servlet.ModelAndView; import org.springframework.web.servlet.view.RedirectView; import cl.lherrera.arriendopelis.dto.ClienteDTO; import cl.lherrera.arriendopelis.modelo.Cliente; import cl.lherrera.arriendopelis.servicio.ClienteService; @Controller @RequestMapping(path = \"clientes\") public class ClienteController { @Autowired private ClienteService clienteService; @GetMapping public ModelAndView clientes() { ModelAndView modelAndView = new ModelAndView(\"clientes\"); modelAndView.addObject(\"cliente\", new Cliente()); return modelAndView; } @PostMapping(\"/agregar\") public RedirectView agregar(@ModelAttribute Cliente cliente) { ClienteDTO respuestaServicio = clienteService.add(cliente); if (respuestaServicio.getCodigo().equals(\"0\")) { return new RedirectView(\"/home\"); } else { return new RedirectView(\"/clientes\"); } } }","title":"/arriendopelis/src/main/java/cl/lherrera/arriendopelis/controlador/HomeController.java"},{"location":"modulos/mod_5/uni004/lectura002/#arriendopelissrcmainjavacllherreraarriendopeliscontroladorpeliculacontrollerjava","text":"package cl.lherrera.arriendopelis.controlador; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.servlet.ModelAndView; import org.springframework.web.servlet.view.RedirectView; import cl.lherrera.arriendopelis.dto.PeliculaDTO; import cl.lherrera.arriendopelis.modelo.Pelicula; import cl.lherrera.arriendopelis.servicio.PeliculaService; @Controller @RequestMapping(path = \"/peliculas\") public class PeliculaController { @Autowired private PeliculaService peliculaService; @GetMapping(path = { \"\", \"/\" }) public ModelAndView peliculas() { ModelAndView modelAndView = new ModelAndView(\"peliculas\"); modelAndView.addObject(\"pelicula\", new Pelicula()); return modelAndView; } @PostMapping(path = \"/agregar\") public RedirectView agregar(@ModelAttribute Pelicula pelicula) { PeliculaDTO respuestaServicio = peliculaService.add(pelicula); if (respuestaServicio.getCodigo().equals(\"0\")) { return new RedirectView(\"/home\"); } else { return new RedirectView(\"/peliculas\"); } } }","title":"/arriendopelis/src/main/java/cl/lherrera/arriendopelis/controlador/PeliculaController.java"},{"location":"modulos/mod_5/uni004/lectura002/#cllherreraarriendopelisdao","text":"","title":"cl.lherrera.arriendopelis.dao"},{"location":"modulos/mod_5/uni004/lectura002/#arriendopelissrcmainjavacllherreraarriendopelisdaoarriendorepositoryjava","text":"package cl.lherrera.arriendopelis.controlador; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.servlet.ModelAndView; import org.springframework.web.servlet.view.RedirectView; import cl.lherrera.arriendopelis.dto.PeliculaDTO; import cl.lherrera.arriendopelis.modelo.Pelicula; import cl.lherrera.arriendopelis.servicio.PeliculaService; @Controller @RequestMapping(path = \"/peliculas\") public class PeliculaController { @Autowired private PeliculaService peliculaService; @GetMapping(path = { \"\", \"/\" }) public ModelAndView peliculas() { ModelAndView modelAndView = new ModelAndView(\"peliculas\"); modelAndView.addObject(\"pelicula\", new Pelicula()); return modelAndView; } @PostMapping(path = \"/agregar\") public RedirectView agregar(@ModelAttribute Pelicula pelicula) { PeliculaDTO respuestaServicio = peliculaService.add(pelicula); if (respuestaServicio.getCodigo().equals(\"0\")) { return new RedirectView(\"/home\"); } else { return new RedirectView(\"/peliculas\"); } } }","title":"/arriendopelis/src/main/java/cl/lherrera/arriendopelis/dao/ArriendoRepository.java"},{"location":"modulos/mod_5/uni004/lectura002/#arriendopelissrcmainjavacllherreraarriendopelisdaoclienterepositoryjava","text":"package cl.lherrera.arriendopelis.dao; import org.springframework.data.jpa.repository.JpaRepository; import cl.lherrera.arriendopelis.modelo.Cliente; public interface ClienteRepository extends JpaRepository<Cliente, Integer> { }","title":"/arriendopelis/src/main/java/cl/lherrera/arriendopelis/dao/ClienteRepository.java"},{"location":"modulos/mod_5/uni004/lectura002/#arriendopelissrcmainjavacllherreraarriendopelisdaopelicularepositoryjava","text":"package cl.lherrera.arriendopelis.dao; import org.springframework.data.jpa.repository.JpaRepository; import cl.lherrera.arriendopelis.modelo.Pelicula; public interface PeliculaRepository extends JpaRepository<Pelicula, Integer> { }","title":"/arriendopelis/src/main/java/cl/lherrera/arriendopelis/dao/PeliculaRepository.java"},{"location":"modulos/mod_5/uni004/lectura002/#cllherreraarriendopelisdto","text":"","title":"cl/lherrera/arriendopelis/dto/"},{"location":"modulos/mod_5/uni004/lectura002/#arriendopelissrcmainjavacllherreraarriendopelisdtoarriendodtojava","text":"package cl.lherrera.arriendopelis.dto; import java.util.List; import cl.lherrera.arriendopelis.modelo.Arriendo; public class ArriendoDTO extends GenericDTO { private List<Arriendo> arriendos; public ArriendoDTO() { // TODO Auto-generated constructor stub } public ArriendoDTO(List<Arriendo> arriendos) { super(); this.arriendos = arriendos; } public ArriendoDTO(List<Arriendo> arriendos, String mensaje, String codigo) { super(mensaje, codigo); // TODO Auto-generated constructor stub this.arriendos = arriendos; } public List<Arriendo> getArriendos() { return arriendos; } public void setArriendos(List<Arriendo> arriendos) { this.arriendos = arriendos; } @Override public String toString() { return \"ArriendoDTO [arriendos=\" + arriendos + \"]\"; } }","title":"/arriendopelis/src/main/java/cl/lherrera/arriendopelis/dto/ArriendoDTO.java"},{"location":"modulos/mod_5/uni004/lectura002/#arriendopelissrcmainjavacllherreraarriendopelisdtoclientedtojava","text":"package cl.lherrera.arriendopelis.dto; import java.util.List; import cl.lherrera.arriendopelis.modelo.Cliente; public class ClienteDTO extends GenericDTO { private List<Cliente> clientes; public ClienteDTO() { // TODO Auto-generated constructor stub } public ClienteDTO(List<Cliente> clientes, String mensaje, String codigo) { super(mensaje, codigo); // TODO Auto-generated constructor stub this.clientes = clientes; } public List<Cliente> getClientes() { return clientes; } public void setClientes(List<Cliente> clientes) { this.clientes = clientes; } @Override public String toString() { return \"ClienteDTO [clientes=\" + clientes + \"]\"; } }","title":"/arriendopelis/src/main/java/cl/lherrera/arriendopelis/dto/ClienteDTO.java"},{"location":"modulos/mod_5/uni004/lectura002/#arriendopelissrcmainjavacllherreraarriendopelisdtogenericdtojava","text":"package cl.lherrera.arriendopelis.dto; public class GenericDTO { private String mensaje; private String codigo; public GenericDTO() { // TODO Auto-generated constructor stub } public GenericDTO(String mensaje, String codigo) { super(); this.mensaje = mensaje; this.codigo = codigo; } public String getMensaje() { return mensaje; } public void setMensaje(String mensaje) { this.mensaje = mensaje; } public String getCodigo() { return codigo; } public void setCodigo(String codigo) { this.codigo = codigo; } @Override public String toString() { return \"GenericDTO [mensaje=\" + mensaje + \", codigo=\" + codigo + \"]\"; } }","title":"/arriendopelis/src/main/java/cl/lherrera/arriendopelis/dto/GenericDTO.java"},{"location":"modulos/mod_5/uni004/lectura002/#arriendopelissrcmainjavacllherreraarriendopelisdtopeliculadtojava","text":"package cl.lherrera.arriendopelis.dto; import java.util.List; import cl.lherrera.arriendopelis.modelo.Pelicula; public class PeliculaDTO extends GenericDTO { private List<Pelicula> peliculas; public PeliculaDTO() { // TODO Auto-generated constructor stub } public PeliculaDTO(String mensaje, String codigo) { super(mensaje, codigo); // TODO Auto-generated constructor stub } public PeliculaDTO(List<Pelicula> peliculas, String mensaje, String codigo) { super(mensaje, codigo); this.peliculas = peliculas; } public List<Pelicula> getPeliculas() { return peliculas; } public void setPeliculas(List<Pelicula> peliculas) { this.peliculas = peliculas; } @Override public String toString() { return \"PeliculaDTO [peliculas=\" + peliculas + \"]\"; } }","title":"/arriendopelis/src/main/java/cl/lherrera/arriendopelis/dto/PeliculaDTO.java"},{"location":"modulos/mod_5/uni004/lectura002/#cllherreraarriendopelismodelo","text":"","title":"cl.lherrera.arriendopelis.modelo"},{"location":"modulos/mod_5/uni004/lectura002/#arriendopelissrcmainjavacllherreraarriendopelismodeloarriendojava","text":"package cl.lherrera.arriendopelis.modelo; import javax.persistence.CascadeType; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.JoinColumn; import javax.persistence.ManyToOne; import javax.persistence.OneToOne; @Entity public class Arriendo { @Id @GeneratedValue(strategy = GenerationType.AUTO) private Integer id; private String inicio; private Integer duracion; @OneToOne(cascade = CascadeType.ALL) @JoinColumn(name = \"pelicula_id\", referencedColumnName = \"id\") private Pelicula pelicula; @ManyToOne @JoinColumn(name = \"cliente_id\", nullable = false) private Cliente cliente; public Arriendo() { // TODO Auto-generated constructor stub } public Arriendo(Integer id, String inicio, Integer duracion, Pelicula pelicula, Cliente cliente) { super(); this.id = id; this.inicio = inicio; this.duracion = duracion; this.pelicula = pelicula; this.cliente = cliente; } public Cliente getCliente() { return cliente; } public void setCliente(Cliente cliente) { this.cliente = cliente; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getInicio() { return inicio; } public void setInicio(String inicio) { this.inicio = inicio; } public Integer getDuracion() { return duracion; } public void setDuracion(Integer duracion) { this.duracion = duracion; } public Pelicula getPelicula() { return pelicula; } public void setPelicula(Pelicula pelicula) { this.pelicula = pelicula; } @Override public String toString() { return \"Arriendo [id=\" + id + \", inicio=\" + inicio + \", duracion=\" + duracion + \", pelicula=\" + pelicula + \"]\"; } }","title":"/arriendopelis/src/main/java/cl/lherrera/arriendopelis/modelo/Arriendo.java"},{"location":"modulos/mod_5/uni004/lectura002/#arriendopelissrcmainjavacllherreraarriendopelismodeloclientejava","text":"package cl.lherrera.arriendopelis.modelo; import java.util.List; import javax.persistence.CascadeType; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.OneToMany; @Entity public class Cliente { @Id @GeneratedValue(strategy = GenerationType.AUTO) private Integer id; private String nombre; @OneToMany(cascade = CascadeType.ALL, mappedBy = \"cliente\") private List<Arriendo> arriendos; public Cliente() { // TODO Auto-generated constructor stub } public Cliente(Integer id, String nombre, List<Arriendo> arriendos) { super(); this.id = id; this.nombre = nombre; this.arriendos = arriendos; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } public List<Arriendo> getArriendos() { return arriendos; } public void setArriendos(List<Arriendo> arriendos) { this.arriendos = arriendos; } @Override public String toString() { return \"Cliente [id=\" + id + \", nombre=\" + nombre + \", arriendos=\" + arriendos + \"]\"; } }","title":"/arriendopelis/src/main/java/cl/lherrera/arriendopelis/modelo/Cliente.java"},{"location":"modulos/mod_5/uni004/lectura002/#arriendopelissrcmainjavacllherreraarriendopelismodelopeliculajava","text":"package cl.lherrera.arriendopelis.modelo; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; @Entity public class Pelicula { @Id @GeneratedValue(strategy = GenerationType.AUTO) // https://www.objectdb.com/java/jpa/entity/generated private Integer id; private String titulo; private String descripcion; private Integer duracion; public Pelicula() { } public Pelicula(Integer id, String titulo, String descripcion, Integer duracion) { super(); this.id = id; this.titulo = titulo; this.descripcion = descripcion; this.duracion = duracion; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getTitulo() { return titulo; } public void setTitulo(String titulo) { this.titulo = titulo; } public String getDescripcion() { return descripcion; } public void setDescripcion(String descripcion) { this.descripcion = descripcion; } public Integer getDuracion() { return duracion; } public void setDuracion(Integer duracion) { this.duracion = duracion; } @Override public String toString() { return \"Pelicula [id=\" + id + \", titulo=\" + titulo + \", descripcion=\" + descripcion + \", duracion=\" + duracion + \"]\"; } }","title":"/arriendopelis/src/main/java/cl/lherrera/arriendopelis/modelo/Pelicula.java"},{"location":"modulos/mod_5/uni004/lectura002/#cllherreraarriendopelisservicio","text":"","title":"cl.lherrera.arriendopelis.servicio"},{"location":"modulos/mod_5/uni004/lectura002/#arriendopelissrcmainjavacllherreraarriendopelisservicioarriendoservicejava","text":"package cl.lherrera.arriendopelis.servicio; import cl.lherrera.arriendopelis.dto.ArriendoDTO; import cl.lherrera.arriendopelis.modelo.Arriendo; public interface ArriendoService { // ac\u00e1 el servicio usualmente difiere de la petici\u00f3n del dao // pero para efectos del ejemplo se llamar\u00e1 igual. // es tamb\u00eden una confisi\u00f3n com\u00fan el no diferenciar entre // las responsablidades de los servicios y la de // los repositorios. Por eso es que los repositorios // se implementan autom\u00e1ticamente y los servicios // es la l\u00f3gica de negocio que nosotros desarrollamos // usando lo aut\u00f3m\u00e1tico del repositorio. donde sabemos // como funciona un findAll(). La \u00fanica justificaci\u00f3n // es que el findAll del servicio, llenar\u00e1 un DTO; pero // deber\u00eda ser otro nombre. ArriendoDTO findAll(); ArriendoDTO add(Arriendo arriendo); }","title":"/arriendopelis/src/main/java/cl/lherrera/arriendopelis/servicio/ArriendoService.java"},{"location":"modulos/mod_5/uni004/lectura002/#arriendopelissrcmainjavacllherreraarriendopelisservicioclienteservicejava","text":"package cl.lherrera.arriendopelis.servicio; import cl.lherrera.arriendopelis.dto.ClienteDTO; import cl.lherrera.arriendopelis.modelo.Cliente; public interface ClienteService { ClienteDTO findAll(); ClienteDTO add(Cliente cliente); }","title":"/arriendopelis/src/main/java/cl/lherrera/arriendopelis/servicio/ClienteService.java"},{"location":"modulos/mod_5/uni004/lectura002/#arriendopelissrcmainjavacllherreraarriendopelisserviciopeliculaservicejava","text":"package cl.lherrera.arriendopelis.servicio; import cl.lherrera.arriendopelis.dto.PeliculaDTO; import cl.lherrera.arriendopelis.modelo.Pelicula; public interface PeliculaService { PeliculaDTO findAll(); PeliculaDTO add(Pelicula pelicula); }","title":"/arriendopelis/src/main/java/cl/lherrera/arriendopelis/servicio/PeliculaService.java"},{"location":"modulos/mod_5/uni004/lectura002/#cllherreraarriendopelisservicioimpl","text":"","title":"cl.lherrera.arriendopelis.servicioImpl"},{"location":"modulos/mod_5/uni004/lectura002/#arriendopelissrcmainjavacllherreraarriendopelisservicioimplarriendoserviceimpljava","text":"package cl.lherrera.arriendopelis.servicioImpl; import java.util.ArrayList; import java.util.List; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional; import cl.lherrera.arriendopelis.dao.ArriendoRepository; import cl.lherrera.arriendopelis.dto.ArriendoDTO; import cl.lherrera.arriendopelis.modelo.Arriendo; import cl.lherrera.arriendopelis.servicio.ArriendoService; @Service public class ArriendoServiceImpl implements ArriendoService { private static final Logger log = LoggerFactory.getLogger(ArriendoServiceImpl.class); @Autowired private ArriendoRepository dao; private ArriendoDTO respuesta; @Override @Transactional(readOnly = true) public ArriendoDTO findAll() { respuesta = new ArriendoDTO(new ArrayList<Arriendo>(), \"Ha ocurrido un error\", \"102\"); try { respuesta.setArriendos((List<Arriendo>) dao.findAll()); respuesta.setMensaje(String.format(\"Se ha/n encontrado %d registro/s\", respuesta.getArriendos().size())); respuesta.setCodigo(\"0\"); } catch (Exception e) { log.trace(\"Arriendo Service: Error en findAll\", e); } return respuesta; } @Override @Transactional public ArriendoDTO add(Arriendo arriendo) { respuesta = new ArriendoDTO(new ArrayList<Arriendo>(), \"Ha ocurrido un error\", \"104\"); try { dao.save(arriendo); respuesta.setMensaje(String.format(\"Se ha guardado correctamente el arriendo de la pelicula %s\", arriendo.getPelicula().getTitulo())); respuesta.setCodigo(\"0\"); } catch (Exception e) { log.trace(\"Arriendo Service: Error en add\", e); } return respuesta; } }","title":"/arriendopelis/src/main/java/cl/lherrera/arriendopelis/servicioImpl/ArriendoServiceImpl.java"},{"location":"modulos/mod_5/uni004/lectura002/#arriendopelissrcmainjavacllherreraarriendopelisservicioimplclienteserviceimpljava","text":"package cl.lherrera.arriendopelis.servicioImpl; import java.util.ArrayList; import java.util.List; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional; import cl.lherrera.arriendopelis.dao.ClienteRepository; import cl.lherrera.arriendopelis.dto.ClienteDTO; import cl.lherrera.arriendopelis.modelo.Cliente; import cl.lherrera.arriendopelis.servicio.ClienteService; @Service public class ClienteServiceImpl implements ClienteService { private static final Logger log = LoggerFactory.getLogger(ClienteServiceImpl.class); @Autowired private ClienteRepository dao; private ClienteDTO respuesta; @Override @Transactional(readOnly = true) public ClienteDTO findAll() { respuesta = new ClienteDTO(new ArrayList<Cliente>(), \"Ha ocurrido un error\", \"102\"); try { respuesta.setClientes((List<Cliente>) dao.findAll()); respuesta.setMensaje(String.format(\"Se ha/n encontrado %d registro/s\", respuesta.getClientes().size())); respuesta.setCodigo(\"0\"); } catch (Exception e) { log.trace(\"Cliente Service: Error en findAll\", e); } return respuesta; } @Override @Transactional public ClienteDTO add(Cliente cliente) { respuesta = new ClienteDTO(new ArrayList<Cliente>(), \"Ha ocurrido un error\", \"104\"); try { dao.save(cliente); respuesta.setMensaje(String.format(\"Se ha guardado correctamente el cliente %s\", cliente.getNombre())); respuesta.setCodigo(\"0\"); } catch (Exception e) { log.trace(\"Cliente Service: Error en add\", e); } return respuesta; } }","title":"/arriendopelis/src/main/java/cl/lherrera/arriendopelis/servicioImpl/ClienteServiceImpl.java"},{"location":"modulos/mod_5/uni004/lectura002/#arriendopelissrcmainjavacllherreraarriendopelisservicioimplpeliculaserviceimpljava","text":"package cl.lherrera.arriendopelis.servicioImpl; import java.util.ArrayList; import java.util.List; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional; import cl.lherrera.arriendopelis.dao.PeliculaRepository; import cl.lherrera.arriendopelis.dto.PeliculaDTO; import cl.lherrera.arriendopelis.modelo.Pelicula; import cl.lherrera.arriendopelis.servicio.PeliculaService; @Service public class PeliculaServiceImpl implements PeliculaService { private static final Logger log = LoggerFactory.getLogger(PeliculaServiceImpl.class); @Autowired private PeliculaRepository dao; private PeliculaDTO respuesta; @Override @Transactional(readOnly = true) public PeliculaDTO findAll() { respuesta = new PeliculaDTO(new ArrayList<Pelicula>(), \"Ha ocurrido un error\", \"102\"); try { respuesta.setPeliculas((List<Pelicula>) dao.findAll()); respuesta.setMensaje(String.format(\"Se ha/n encontrado %d registro/s\", respuesta.getPeliculas().size())); respuesta.setCodigo(\"0\"); } catch (Exception e) { log.trace(\"Pelicula Service: Error en findAll\", e); } return respuesta; } @Override @Transactional public PeliculaDTO add(Pelicula pelicula) { respuesta = new PeliculaDTO(new ArrayList<Pelicula>(), \"Ha ocurrido un error\", \"104\"); try { dao.save(pelicula); respuesta.setMensaje(String.format(\"Se ha guardado correctamente la pelicula %s\", pelicula.getTitulo())); respuesta.setCodigo(\"0\"); } catch (Exception e) { log.trace(\"Pelicula Service: Error en add\", e); } return respuesta; } }","title":"/arriendopelis/src/main/java/cl/lherrera/arriendopelis/servicioImpl/PeliculaServiceImpl.java"},{"location":"modulos/mod_5/uni004/lectura002/#arriendopelissrcmainresources","text":"","title":"/arriendopelis/src/main/resources"},{"location":"modulos/mod_5/uni004/lectura002/#templatesarriendoshtml","text":"<!DOCTYPE html> <html th:replace=\"~{base :: layout(~{::title}, ~{::#contenido}, 'arriendos')}\"> <head> <title>Arriendos</title> </head> <body> <div id=\"contenido\" class=\"container\"> <div class=\"col-sm-2\"></div> <div class=\"col-sm-8\"> <h3>Arriendos</h3> <!-- th:action: La acci\u00f3n a ejecutar, en este caso (/arriendos/agregar) th:object: El modelo que se captura en el controlador como @ModelAttribute. select th:field=\"*{pelicula}\": Es el nombre con que ir\u00e1 en el formulario. name th:each: Por cada pelicula en ${peliculas} donde pel\u00edcula viene del modelo del controlador. th:value=\"${cliente.id}: es el valor que se usa como identificador de cada elemento. th:text: ${pelicula.titulo} accedemos al id de cada pelicula en peliculas --> <form th:action=\"@{/arriendos/agregar}\" method=\"post\" th:object=\"${arriendo}\"> <div class=\"form-group row\"> <label for=\"inicio\" class=\"col-4\">Inicio</label> <div class=\"col-8\"> <input class=\"form-control\" type=\"date\" data-date format=\"mm-dd-yyyy\" id=\"inicio\" name=\"inicio\"> </div> </div> <div class=\"form-group row\"> <label for=\"duracion\" class=\"col-4\">Duraci\u00f3n</label> <div class=\"col-8\"> <input class=\"form-control\" type=\"number\" value=\"\" id=\"duracion\" name=\"duracion\"> </div> </div> <div class=\"form-group row\"> <label class=\"col-4\">Pelicula</label> <div class=\"col-8\"> <select th:field=\"*{pelicula}\"> <option th:each=\"pelicula : ${peliculas}\" th:value=\"${pelicula.id}\" th:text=\"${pelicula.titulo}\"></option> </select> </div> </div> <div class=\"form-group row\"> <label class=\"col-4\">Cliente</label> <div class=\"col-8\"> <select th:field=\"*{cliente}\"> <option th:each=\"cliente : ${clientes}\" th:value=\"${cliente.id}\" th:text=\"${cliente.nombre}\"></option> </select> </div> </div> <div class=\"form-group row\"> <div class=\"col-sm-12\"> <button type=\"submit\" class=\"btn btn-primary\">Agregar</button> </div> </div> </form> </div> <div class=\"col-sm-2\"> <p></p> </div> </div> </body> </html>","title":"/templates/arriendos.html"},{"location":"modulos/mod_5/uni004/lectura002/#templatesbasehtml","text":"<!DOCTYPE html> <html th:fragment=\"layout (titulo, contenido, menu)\" xmlns:th=\"http://www.thymeleaf.org\"> <head> <title th:replace=\"${titulo}\">Layout Title</title> <!-- Bootstrap --> <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css\" integrity=\"sha384-rwoIResjU2yc3z8GV/NPeZWAv56rSmLldC3R/AZzGRnGxQQKnKkoFVhFQhNUwEyJ\" crossorigin=\"anonymous\"> <!-- Bootstrap --> </head> <body> <!-- MEN\u00da COM\u00daN SITIO --> <!-- La condici\u00f3n es la siguiente: si el men\u00fa pasado por par\u00e1metro en otra web se guarda en el tercer par\u00e1metro ${menu}. (|${menu}| == 'home')?, significa que |${menu}| es para poder hacer un reemplazo literal, el par\u00e1metro debe esta en ${}; pero si adem\u00e1s est\u00e1 entro ||, es para hacer un reemplazo literal, que se exige si est\u00e1 dentro de @{}. entonces : (|${menu}| == 'home')? quiere decir: si lo que est\u00e1 en el par\u00e1metro menu, es 'home'. entonces @{(|${menu}| == 'home')? '#' : '/home', quiere decir que si esa condici\u00f3n se cumple, entonces el link ser\u00e1 '#', es decir que no ir\u00e1 a ninguna parte si estamos en home, de otra forma se imprime el link que lleva a home. --> <ul class=\"nav justify-content-end\"> <li class=\"nav-item\"><a class=\"nav-link active\" th:href=\"@{(|${menu}| == 'home')? '#' : '/home'}\">Home</a></li> <li class=\"nav-item\"><a class=\"nav-link active\" th:href=\"@{(|${menu}| == 'arriendos')? '#' : '/arriendos'}\">Arriendos</a></li> <li class=\"nav-item\"><a class=\"nav-link active\" th:href=\"@{ (|${menu}| == 'clientes')? '#' : '/clientes'}\">Clientes</a></li> <li class=\"nav-item\"><a class=\"nav-link active\" th:href=\"@{ (|${menu}| == 'peliculas')? '#' : '/peliculas'}\">Peliculas</a></li> </ul> <!-- MEN\u00da COM\u00daN SITIO --> <div th:replace=\"${contenido}\"> <p>Este es el contenido por defecto</p> </div> <!-- Bootstrap JS --> <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/js/bootstrap.min.js\" integrity=\"sha384-vBWWzlZJ8ea9aCX4pEW3rVHjgjt7zpkNpZk+02D9phzyeVkE+jo0ieGizqPLForn\" crossorigin=\"anonymous\"></script> <!-- Bootstrap JS --> <footer> Pi\u00e9 de p\u00e1gina </footer> </body> </html>","title":"/templates/base.html"},{"location":"modulos/mod_5/uni004/lectura002/#templatesclienteshtml","text":"<!DOCTYPE html> <html th:replace=\"~{base :: layout(~{::title}, ~{::#contenido}, 'clientes')}\"> <head> <title>Clientes</title> </head> <body> <div id=\"contenido\" class=\"container\"> <div class=\"col-sm-2\"></div> <div class=\"col-sm-8\"> <h3>Clientes</h3> <form th:action=\"@{/clientes/agregar}\" method=\"post\" th:object=\"${cliente}\"> <div class=\"form-group row\"> <label for=\"nombre\" class=\"col-sm-4\">Nombre</label> <div class=\"col-sm-8\"> <input class=\"form-control\" type=\"text\" id=\"nombre\" name=\"nombre\"> </div> </div> <div class=\"form-group row\"> <div class=\"col-sm-12\"> <button type=\"submit\" class=\"btn btn-primary\">Agregar</button> </div> </div> </form> </div> <div class=\"col-sm-2\"> <p></p> </div> </div> </body> </html>","title":"/templates/clientes.html"},{"location":"modulos/mod_5/uni004/lectura002/#templateshomehtml","text":"<!DOCTYPE html> <html th:replace=\"~{base :: layout(~{::title}, ~{::#contenido}, 'home')}\"> <title>home</title> <div id=\"contenido\"> <div class=\"container\"> <div class=\"col-sm-2\"></div> <div class=\"col-sm-8\"> <h3>Detalle</h3> <table class=\"table\"> <thead class=\"thead-light\"> <tr> <th scope=\"col\">Identificador</th> <th scope=\"col\">Inicio</th> <th scope=\"col\">Duracion</th> <th scope=\"col\">Pelicula</th> <th scope=\"col\">Cliente</th> </tr> </thead> <tbody> <tr th:each=\"arriendo: ${arriendos}\"> <td th:text=\"${arriendo.id}\" /> <td th:text=\"${arriendo.inicio}\" /> <td th:text=\"${arriendo.duracion}\" /> <td th:text=\"${arriendo.pelicula.titulo}\" /> <td th:text=\"${arriendo.cliente.nombre}\" /> </tr> </tbody> </table> </div> <div class=\"col-sm-2\"> <p></p> </div> </div> </div> </html>","title":"/templates/home.html"},{"location":"modulos/mod_5/uni004/lectura002/#templatespeliculashtml","text":"<!DOCTYPE html> <html th:replace=\"~{base :: layout(~{::title}, ~{::#contenido}, 'peliculas')}\"> <head> <title>Peliculas</title> </head> <body> <div id=\"contenido\" class=\"container\"> <div class=\"col-sm-2\"></div> <div class=\"col-sm-8\"> <h3>Peliculas</h3> <form th:action=\"@{/peliculas/agregar}\" method=\"post\" th:object=\"${pelicula}\"> <div class=\"form-group row\"> <label for=\"titulo\" class=\"col-4\">Titulo</label> <div class=\"col-8\"> <input class=\"form-control\" type=\"text\" id=\"titulo\" name=\"titulo\"> </div> </div> <div class=\"form-group row\"> <label for=\"descripcion\" class=\"col-4\">Descripcion</label> <div class=\"col-8\"> <input class=\"form-control\" type=\"text\" id=\"descripcion\" name=\"descripcion\"> </div> </div> <div class=\"form-group row\"> <label for=\"duracion\" class=\"col-4\">Duracion</label> <div class=\"col-8\"> <input class=\"form-control\" type=\"number\" id=\"duracion\" name=\"duracion\"> </div> </div> <div class=\"form-group row\"> <div class=\"col-sm-12\"> <button type=\"submit\" class=\"btn btn-primary\">Agregar</button> </div> </div> </form> </div> <div class=\"col-sm-2\"> <p></p> </div> </div> </body> </html>","title":"/templates/peliculas.html"},{"location":"modulos/mod_5/uni004/lectura002/#applicationproperties","text":"spring.thymeleaf.check-template-location=true spring.thymeleaf.prefix=classpath:/templates/ spring.thymeleaf.suffix=.html spring.thymeleaf.mode=LEGACYHTML5 spring.thymeleaf.encoding=UTF-8 spring.thymeleaf.servlet.content-type=text/html spring.thymeleaf.cache=false # Configuraci\u00f3n de jpa spring.jpa.generate-ddl=true spring.jpa.database-platform=cl.lherrera.arriendopelis.SQLiteDialect spring.jpa.hibernate.ddl-auto=create-drop spring.jpa.show-sql=true spring.jpa.properties.hibernate.format_sql=true","title":"/application.properties"},{"location":"modulos/mod_5/uni004/lectura002/#databaseproperties","text":"driverClassName=org.sqlite.JDBC url=jdbc:sqlite:basedatos.db username=jpaspring password=sa","title":"/database.properties"},{"location":"modulos/mod_5/uni004/lectura002/#pomxml","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.6.RELEASE</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>cl.lherrera.arriendopelis</groupId> <artifactId>arriendopelis</artifactId> <version>20.0.0</version> <packaging>war</packaging> <name>arriendopelis</name> <description>lectura 1 relaciones</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-jpa</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-thymeleaf</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> <scope>provided</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> <!-- SQLITE - SUPPORT --> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> </dependency> <!-- SQLITE - SUPPORT # --> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project>","title":"/pom.xml"},{"location":"modulos/mod_5/uni004/lectura002/#todo","text":"Mejorar la vista de la aplicaci\u00f3n. Aumentar servicios. Crear un inicio de sesi\u00f3n. paginar los resultados.","title":"TODO"},{"location":"modulos/mod_5/uni005/lectura001/","text":"Unidad 5.1 - Seguridad. Muestra el funcionamiento de Spring Security dividido en etapas, partiendo desde la configuraci\u00f3n m\u00ednima y se completa mediante proyectos ejemplificadores. 5.1.1 Comienzo r\u00e1pido Ejemplo de aplicaci\u00f3n b\u00e1sica, con las configuraciones de seguridad por defecto. Crear un proyecto Spring con los siguientes m\u00f3dulos: + Spring web + Spring security Al momento de crear un proyecto, sin realizar absolutamente nada m\u00e1s que correr la aplicaci\u00f3n, tendremos la seguridad ya puesta, puesto que al acceder a http://localhost:8080/ , inmediatamente somos derivados a: http://localhost:8080/login . Estructura de un proyecto. sin modificaciones ./ \u251c\u2500\u2500 HELP.md \u251c\u2500\u2500 mvnw \u251c\u2500\u2500 mvnw.cmd \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 gsss \u2502 \u2502 \u2502 \u251c\u2500\u2500 GsSpringSecurityApplication.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 ServletInitializer.java \u2502 \u2502 \u251c\u2500\u2500 resources \u2502 \u2502 \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2502 \u2502 \u251c\u2500\u2500 static \u2502 \u2502 \u2502 \u2514\u2500\u2500 templates \u2502 \u2502 \u2514\u2500\u2500 webapp \u2502 \u2514\u2500\u2500 test \u2502 \u2514\u2500\u2500 java \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 gsss \u2502 \u2514\u2500\u2500 GsSpringSecurityApplicationTests.java \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 gsss \u2502 \u251c\u2500\u2500 GsSpringSecurityApplication.class \u2502 \u2514\u2500\u2500 ServletInitializer.class \u251c\u2500\u2500 generated-sources \u2502 \u2514\u2500\u2500 annotations \u251c\u2500\u2500 generated-test-sources \u2502 \u2514\u2500\u2500 test-annotations \u251c\u2500\u2500 m2e-wtp \u2502 \u2514\u2500\u2500 web-resources \u2502 \u2514\u2500\u2500 META-INF \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 maven \u2502 \u2514\u2500\u2500 cl.lherrera.thymeleaftTest \u2502 \u2514\u2500\u2500 gs-spring-security \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2514\u2500\u2500 pom.xml \u2514\u2500\u2500 test-classes \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 gsss \u2514\u2500\u2500 GsSpringSecurityApplicationTests.class 34 directories, 15 files No posee las vistas ni los controladores que est\u00e9n dirigiendo nuestra petici\u00f3n, esto es por que Spring lo construye y luego es inyectado autom\u00e1ticamente. Lo que podemos realizar es una personalizaci\u00f3n de este comportamiento. Al lanzar la aplicaci\u00f3n veremos lo siguiente: . ____ _ __ _ _ /\\\\ / ___'_ __ _ _(_)_ __ __ _ \\ \\ \\ \\ ( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\ \\\\/ ___)| |_)| | | | | || (_| | ) ) ) ) ' |____| .__|_| |_|_| |_\\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v2.2.6.RELEASE) 2020-05-04 13:30:28.476 INFO 93511 --- [ main] c.l.gsss.GsSpringSecurityApplication : Starting GsSpringSecurityApplication on MacBook-Pro-de-Luis.local with PID 93511 (/Users/luisherrera/ ... ... 2020-05-04 13:30:29.900 INFO 93511 --- [ main] .s.s.UserDetailsServiceAutoConfiguration : Using generated security password: ddc7804f-784d-48fb-8c00-ee60dac02a5e Lo importante es que Spring genera un usuario y contrase\u00f1a temporal. El usuario principal el : user La contrase\u00f1a se ve en consola y en este caso es: ddc7804f-784d-48fb-8c00-ee60dac02a5e , tal como se muestra en: Using generated security password: ddc7804f-784d-48fb-8c00-ee60dac02a5e , de los mensajes en la consola de la aplicaci\u00f3n. Al ingresar los mensajes en los campos de usuario y contrase\u00f1a de la aplicaci\u00f3n, si estas est\u00e1n incorrectas veremos un mensaje de error, en caso contrario nos lleva a path = \"/\" , que en estos momentos no existe, lanzando un error type=Not Found, status=404 .\u001c Podemos decir que al realizar un proyecto con Spring security , lo que pasa es que: Se restringe el acceso al sitio mediante una ventana de ingreso al sistema. La ventana y toda su funcionalidad no la programamos, esta acci\u00f3n es autom\u00e1tica, y es capaz de comprobar si las credenciales son v\u00e1lidas. Las credenciales son generadas al momento de ejecutar la aplicaci\u00f3n, las podremos ver en la consola. El usuario por defecto es user . \u001c 5.1.2 Aplicaci\u00f3n con protecci\u00f3n Dependencias Spring web Spring security thymeleaf Spring devs tools La siguiente aplicaci\u00f3n: Posee solamente una p\u00e1gina home que no se puede acceder si no se ha iniciado sesi\u00f3n. No existe registro ni finalizaci\u00f3n de la sesi\u00f3n. Las credenciales ya est\u00e1n configuradas, solamente podemos utilizarlas. Estructura ./ \u251c\u2500\u2500 HELP.md \u251c\u2500\u2500 mvnw \u251c\u2500\u2500 mvnw.cmd \u251c\u2500\u2500 pom.xml \u2514\u2500\u2500 src \u251c\u2500\u2500 main \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2514\u2500\u2500 gsss \u2502 \u2502 \u251c\u2500\u2500 GsSpringSecurityApplication.java \u2502 \u2502 \u251c\u2500\u2500 ServletInitializer.java \u2502 \u2502 \u2514\u2500\u2500 controller \u2502 \u2502 \u2514\u2500\u2500 HomeController.java \u2502 \u251c\u2500\u2500 resources \u2502 \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2502 \u251c\u2500\u2500 static \u2502 \u2502 \u2514\u2500\u2500 templates \u2502 \u2502 \u2514\u2500\u2500 home.html \u2502 \u2514\u2500\u2500 webapp \u2514\u2500\u2500 test \u2514\u2500\u2500 java \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 gsss \u2514\u2500\u2500 GsSpringSecurityApplicationTests.java 16 directories, 10 files Archivos modificados pom.xml src/main/java/cl/lherrera/gsss/controller/HomeController.java src/main/resources/templates/home.html pom.xml Solamente a modo de ejemplo, ya que las dependencias son agregadas desde el principio si se lo indicamos al inicializador. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.6.RELEASE</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>cl.lherrera.thymeleaftTest</groupId> <artifactId>gs-spring-security</artifactId> <version>20.0.0</version> <packaging>war</packaging> <name>gs-spring-security</name> <description>Pruebas de thymeleaf</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-security</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> <scope>provided</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> <dependency> <groupId>org.springframework.security</groupId> <artifactId>spring-security-test</artifactId> <scope>test</scope> </dependency> <!-- thymeleaf --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-thymeleaf</artifactId> </dependency> <!-- thymeleaf ## --> <!-- DevsTools --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <optional>true</optional> </dependency> <!-- DevsTools # --> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project> src/main/java/cl/lherrera/gsss/controller/HomeController.java package cl.lherrera.gsss.controller; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; @Controller public class HomeController { @GetMapping(path = { \"\", \"/\" }) public String home() { return \"home\"; } } src/main/resources/templates/home.html <!DOCTYPE HTML> <html xmlns:th=\"http://www.thymeleaf.org\"> <head> <meta charset=\"UTF-8\"> <title>Home</title> </head> <body> <h2>Home page</h2> <p>Sitio protegido</p> </body> </html> 5.1.3 Proyecto lectura finalizado En este proyecto mostramos la funcionalidad del control de acceso, sin utilizar una base de datos , el control de la informaci\u00f3n del usuario autenticado se realiza en memoria y dura lo que dura la instancia, el problema es que on tenemos una forma usable de registro de nuevos usuarios. Muestra la configuraci\u00f3n de WebSecurityConfig , implementaci\u00f3n con adaptador de SecurityConfig<O,B> . Para poder probar esta aplicaci\u00f3n hay que ejecutarla como aplicaci\u00f3n Spring . Y tratar de acceder a los servicios. Las credenciales se encuentran en el m\u00e9todo sobre escrito configure que recibe como par\u00e1metro AuthenticationManagerBuilder . Es en este sector que cargamos al usuario. Hay que tener en cuenta que aunque tengamos la informaci\u00f3n de un usuario en la base de datos, Spring Security , posee su propia manera de almacenar la informaci\u00f3n de un usuario registrado y para construir ese objeto, la informaci\u00f3n que necesite del usuario ser\u00e1 solicitada usando los propios servicios desarrollados por nosotros. Las divisiones del proyecto se encuentran en GIT Estructura ./ \u251c\u2500\u2500 HELP.md \u251c\u2500\u2500 mvnw \u251c\u2500\u2500 mvnw.cmd \u251c\u2500\u2500 pom.xml \u2514\u2500\u2500 src \u251c\u2500\u2500 main \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2514\u2500\u2500 gsss \u2502 \u2502 \u251c\u2500\u2500 GsSpringSecurityApplication.java \u2502 \u2502 \u251c\u2500\u2500 ServletInitializer.java \u2502 \u2502 \u251c\u2500\u2500 config \u2502 \u2502 \u2502 \u2514\u2500\u2500 WebSecurityConfig.java \u2502 \u2502 \u251c\u2500\u2500 controller \u2502 \u2502 \u2502 \u251c\u2500\u2500 ErrorController.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 HomeController.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 LoginController.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 admin \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 AdminController.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 user \u2502 \u2502 \u2502 \u2514\u2500\u2500 UserController.java \u2502 \u2502 \u2514\u2500\u2500 dto \u2502 \u2502 \u2514\u2500\u2500 DetalleDTO.java \u2502 \u251c\u2500\u2500 resources \u2502 \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2502 \u251c\u2500\u2500 static \u2502 \u2502 \u2514\u2500\u2500 templates \u2502 \u2502 \u251c\u2500\u2500 admin \u2502 \u2502 \u2502 \u2514\u2500\u2500 homeAdmin.html \u2502 \u2502 \u251c\u2500\u2500 error \u2502 \u2502 \u2502 \u2514\u2500\u2500 403.html \u2502 \u2502 \u251c\u2500\u2500 home.html \u2502 \u2502 \u251c\u2500\u2500 login.html \u2502 \u2502 \u2514\u2500\u2500 user \u2502 \u2502 \u2514\u2500\u2500 homeUser.html \u2502 \u2514\u2500\u2500 webapp \u2514\u2500\u2500 test \u2514\u2500\u2500 java \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 gsss \u2514\u2500\u2500 GsSpringSecurityApplicationTests.java 23 directories, 20 files Archivos modificados /gs-spring-security/src/main/java/cl/lherrera/gsss/GsSpringSecurityApplication.java /gs-spring-security/src/main/java/cl/lherrera/gsss/ServletInitializer.java /gs-spring-security/src/main/java/cl/lherrera/gsss/config/WebSecurityConfig.java /gs-spring-security/src/main/java/cl/lherrera/gsss/controller/ErrorController.java /gs-spring-security/src/main/java/cl/lherrera/gsss/controller/HomeController.java /gs-spring-security/src/main/java/cl/lherrera/gsss/controller/LoginController.java /gs-spring-security/src/main/java/cl/lherrera/gsss/controller/admin/AdminController.java /gs-spring-security/src/main/java/cl/lherrera/gsss/controller/user/UserController.java /gs-spring-security/src/main/java/cl/lherrera/gsss/dto/DetalleDTO.java /gs-spring-security/src/main/resources/templates/admin/homeAdmin.html /gs-spring-security/src/main/resources/templates/error/403.html /gs-spring-security/src/main/resources/templates/user/homeUser.html /gs-spring-security/src/main/resources/templates/home.html /gs-spring-security/src/main/resources/templates/login.html /gs-spring-security/pom.xml cl.lherrera.gsss /gs-spring-security/src/main/java/cl/lherrera/gsss/GsSpringSecurityApplication.java package cl.lherrera.gsss; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class GsSpringSecurityApplication { public static void main(String[] args) { SpringApplication.run(GsSpringSecurityApplication.class, args); } } /gs-spring-security/src/main/java/cl/lherrera/gsss/ServletInitializer.java cl.lherrera.gsss.config /gs-spring-security/src/main/java/cl/lherrera/gsss/config/WebSecurityConfig.java Si tenemos la experiencia de configurar el control de acceso a los usuarios mediante configuraciones en el servidor. Podemos ver que esta es la forma que ofrece Spring security para realizar un inicio de sesi\u00f3n usando formulario. Para este caso con el uso de usuarios en memoria, como ser\u00eda configurarlos en el servidor en el archivo config.xml , pero en esta ocasi\u00f3n Spring utiliza una clase donde podemos aplicar estas configuraciones sin tocar la propia configuraci\u00f3n del servidor. package cl.lherrera.gsss.config; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity; import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter; import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder; @EnableWebSecurity @Configuration public class WebSecurityConfig extends WebSecurityConfigurerAdapter { /** * Sobreescribir este m\u00e9todo, permite habilitar * la autenticaci\u00f3n en memoria, adem\u00e1s de poder definir credenciales. */ @Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { String usuario = \"mail@fake.dev\"; String contrasenia = passwordEncoder().encode(\"1234\"); String rol = \"ADMIN\"; String usuario2 = \"mail2@fake.dev\"; String contrasenia2 = passwordEncoder().encode(\"1234\"); String rol2 = \"USER\"; auth.inMemoryAuthentication() .withUser(usuario) .password(contrasenia) .roles(rol) .and() .withUser(usuario2) .password(contrasenia2) .roles(rol2); } /** * csrf : Adds CSRF support. This is activated by default when using. * * disable: Desabilita la orden anterior. * * authorizeRequests : Allows restricting access based upon the HttpServletRequest. * * antMatchers : The mapping matches URLs using the following rules: * ? matches one character * * matches zero or more characters * ** matches zero or more directories in a path * {spring:[a-z]+} matches the regexp [a-z]+ as a path variable named \"spring\" * * permitAll : Specify that URLs are allowed by anyone. * * anyRequest : Maps any request. * * authenticated : Specify that URLs are allowed by any authenticated user. * * and : This is useful for method chaining. * * formLogin : Specifies to support form based authentication. (no desde el config.xml) * * loginPage : Specifies the URL to send users to if login is required. * * failureUrl : The URL to send users if authentication fails. The default is \"/login?error\". * * usernameParameter : The HTTP parameter to look for the username when performing authentication. Default is \"username\". * * passwordParameter : The HTTP parameter to look for the password when performing authentication. Default is \"password\". * * defaultSuccessUrl : Specifies where users will be redirected after authenticating successfully if they have not visited a secured page prior to authenticating. * */ // @Override // public void configure(HttpSecurity http) throws Exception { // // se desabilita el sistema de seguridad csrf (muy vulnerable) // http.csrf().disable() // // se configura la ruta login para ser accedida sin autenticacion // .authorizeRequests().antMatchers(\"/login\").permitAll() // // para todos los Request se habilita para usuarios autentificados. // .anyRequest().authenticated() // // indicaci\u00f3n que se unsar\u00e1 el manejo por formulario // .and().formLogin() // // se especifica la p\u00e1gina para el login personalizado. // .loginPage(\"/login\") // // se especifica la url para cuando la verificaci\u00f3n de credenciales falle. // .failureUrl(\"/login?error=true\") // // se especifica el nombre del atributo name para el usuario y la contrase\u00f1a. // .usernameParameter(\"email\").passwordParameter(\"password\") // // redireccionamiento en caso de \u00e9xito. // .defaultSuccessUrl(\"/user\"); // // } /* * Dejamos la aplicaci\u00f3n distribu\u00eddos en direcctorios para poder * restringir por medio de estos direcctorios y le damos * acceso seg\u00fan su rol. */ @Override public void configure(HttpSecurity http) throws Exception { http.csrf().disable() .authorizeRequests() // para todo lo que est\u00e9 dentro de admin (antMatch) .antMatchers(\"/admin/**\").hasRole(\"ADMIN\") // para todo lo que est\u00e9 dentro de user (antMatch) .antMatchers(\"/user/**\").hasRole(\"USER\") // para esta URI se permite total acceso .antMatchers(\"/login\").permitAll() // el usuario autentificado se le permite toda petici\u00f3n. .anyRequest().authenticated() // configuraci\u00f3n de los formularios .and().formLogin().loginPage(\"/login\").failureUrl(\"/login?error=true\") // seteo de nombres representativos en los formularios. .usernameParameter(\"email\").passwordParameter(\"password\") // p\u00e1gina por defecto en caso de \u00e9xito en el inicio de sesi\u00f3n. .defaultSuccessUrl(\"/\") .and() .exceptionHandling().accessDeniedPage(\"/recurso-prohibido\"); } /** * As\u00ed inicializamos el encoder. */ @Bean public BCryptPasswordEncoder passwordEncoder() { return new BCryptPasswordEncoder(); } } cl.lherrera.gsss.controller /gs-spring-security/src/main/java/cl/lherrera/gsss/controller/ErrorController.java package cl.lherrera.gsss.controller; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; @Controller public class ErrorController { @GetMapping(\"/recurso-prohibido\") public String recurso03() { return \"error/403\"; } } /gs-spring-security/src/main/java/cl/lherrera/gsss/controller/HomeController.java package cl.lherrera.gsss.controller; import javax.servlet.http.HttpSession; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; @Controller public class HomeController { @GetMapping(path = { \"\", \"/\" }) public String home(HttpSession session) { return \"home\"; } } /gs-spring-security/src/main/java/cl/lherrera/gsss/controller/LoginController.java package cl.lherrera.gsss.controller; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; @Controller public class LoginController { @GetMapping(\"/login\") public String login() { return \"login\"; } } cl.lherrera.gsss.controller.admin /gs-spring-security/src/main/java/cl/lherrera/gsss/controller/admin/AdminController.java package cl.lherrera.gsss.controller.admin; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; @Controller public class AdminController { @GetMapping(\"/admin\") public String home() { return \"admin/homeAdmin\"; } } cl.lherrera.gsss.controller.user /gs-spring-security/src/main/java/cl/lherrera/gsss/controller/user/UserController.java package cl.lherrera.gsss.controller.user; import java.util.ArrayList; import java.util.List; import javax.servlet.http.HttpSession; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.servlet.ModelAndView; import org.springframework.web.servlet.view.RedirectView; import cl.lherrera.gsss.dto.DetalleDTO; @Controller public class UserController { @GetMapping(\"/user\") public ModelAndView home(HttpSession session) { ModelAndView modelAndView = new ModelAndView(\"user/homeUser\"); modelAndView.addObject(\"detalle\", new DetalleDTO()); modelAndView.addObject(\"valores\", session.getAttribute(\"valores\")); return modelAndView; } @PostMapping(\"/users\") public RedirectView home(HttpSession session, @ModelAttribute DetalleDTO detalles) { List<DetalleDTO> valores = new ArrayList<>(); // si los valores no vienen vacios se a\u00f1aden a los valores. if (session.getAttribute(\"valores\") != null) { List<DetalleDTO> valoresDeSesion = (List<DetalleDTO>) session.getAttribute(\"valores\"); // agrega todos los valores a la lista existente. valores.addAll(valoresDeSesion); } valores.add(detalles); // se reemplaza el valor de valores en la sesi\u00f3n, // se cambia por el nuevo valor de // valores. session.setAttribute(\"valores\", valores); return new RedirectView(\"/user\"); } } cl.lherrera.gsss.controller.dto /gs-spring-security/src/main/java/cl/lherrera/gsss/dto/DetalleDTO.java package cl.lherrera.gsss.dto; public class DetalleDTO { private String clave; private String valor; public DetalleDTO() { // TODO Auto-generated constructor stub } public DetalleDTO(String clave, String valor) { super(); this.clave = clave; this.valor = valor; } public String getClave() { return clave; } public void setClave(String clave) { this.clave = clave; } public String getValor() { return valor; } public void setValor(String valor) { this.valor = valor; } @Override public String toString() { return \"DetalleDTO [clave=\" + clave + \", valor=\" + valor + \"]\"; } } resources/templates/admin /gs-spring-security/src/main/resources/templates/admin/homeAdmin.html <!DOCTYPE html> <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\"> <head> <title>Inicio Administrador</title> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css \" integrity=\"sha384- ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"> </head> <body> <ul class=\"nav justify-content-end\"> <li class=\"nav-item\"><a class=\"nav-link active\" href=\"#\">Administrador</a> </li> <li class=\"nav-item\"><a class=\"nav-link\" th:href=\"@{/logout}\">Cerrar sesion</a></li> </ul> <p>Bienvenido!</p> </body> </html> resources/templates/error /gs-spring-security/src/main/resources/templates/error/403.html <!DOCTYPE html> <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\"> <head> <title>Recurso protegido</title> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css \" integrity=\"sha384- ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"> </head> <body> <ul class=\"nav justify-content-end\"> <li class=\"nav-item\"> <a class=\"nav-link\" th:href=\"@{/logout}\">Cerrar sesion</a> </li> </ul> <h3>Recurso no accesible</h3> </body> </html> resources/templates/user /gs-spring-security/src/main/resources/templates/user/homeUser.html Ac\u00e1 es donde ir\u00e1 el formulario que llena los datos en la sesi\u00f3n. <!DOCTYPE html> <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\"> <head> <title>Inicio Usuario</title> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css \" integrity=\"sha384- ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"> </head> <body> <ul class=\"nav justify-content-end\"> <li class=\"nav-item\"> <a class=\"nav-link active\" href=\"#\">Usuario</a> </li> <li class=\"nav-item\"> <a class=\"nav-link\" th:href=\"@{/logout}\">Cerrar sesi\u00f3n</a> </li> </ul> <div class=\"container\"> <div class=\"col-sm-4\"> </div> <div class=\"col-sm-4\"> <form th:action=\"@{/users}\" method=\"post\" th:object=\"${detalle}\"> <div class=\"form-group\"> <input type=\"text\" th:field=\"*{clave}\" class=\"form-control\" id=\"clave\" aria-describedby=\"claveHelp\" placeholder=\"Ingresa nombre de la clave\"> <small id=\"inClave\" class=\"form-text text-muted\">Nombre de la clave que se almacenar\u00e1 en sesi\u00f3n.</small> </div> <div class=\"form-group\"> <input type=\"text\" th:field=\"*{valor}\" class=\"form-control\" id=\"valor\" aria-describedby=\"valorHelp\" placeholder=\"Ingresa el contenido\"> <small id=\"inValor\" class=\"form-text text-muted\">Contenido de la clave que se almacenar\u00e1 en sesi\u00f3n.</small> </div> <button type=\"submit\" class=\"btn btn-primary\">Agregar</button> </form> </div> <div class=\"col-sm-4\"> </div> <div class=\"col-sm-12\"> <table class=\"table\"> <thead> <tr> <th scope=\"col\">clave</th> <th scope=\"col\">valor</th> </tr> </thead> <tbody> <tr th:each=\"detalle: ${valores}\"> <td th:text=\"${detalle.clave}\" /> <td th:text=\"${detalle.valor}\" /> </tr> </tbody> </table> </div> </div> </body> </html> resources/templates/ /gs-spring-security/src/main/resources/templates/home.html <!DOCTYPE html> <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\"> <head> <title>Iniciar Sesi\u00f3n</title> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css \" integrity=\"sha384- ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"> </head> <body> <ul class=\"nav justify-content-end\"> <li class=\"nav-item\"> <a class=\"nav-link active\" href=\"/user\">Usuario</a> </li> <li class=\"nav-item\"> <a class=\"nav-link active\" href=\"/admin\">Administrador</a> </li> <li class=\"nav-item\"> <a class=\"nav-link\" th:href=\"@{/logout}\">Cerrar sesi\u00f3n</a> </li> </ul> <div class=\"container\"> <div class=\"row\"> <div class=\"col-sm-4\"> </div> <div class=\"col-sm-4\"> <h1>P\u00e1gina principal</h1> </div> <div class=\"col-sm-4\"> </div> </div> </div> </body> </html> /gs-spring-security/src/main/resources/templates/login.html <!DOCTYPE html> <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\"> <head> <title>Iniciar Sesi\u00f3n</title> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css \" integrity=\"sha384- ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"> </head> <body> <div class=\"container\"> <div class=\"row\"> <div class=\"col-sm-4\"> </div> <div class=\"col-sm-4\"> <form th:action=\"@{/login}\" method=\"post\" class=\"form-signin\"> <h3 class=\"form-signin-heading\" th:text=\"Credenciales\"></h3> <br /> <!-- el name debe ser: email --> <input type=\"text\" id=\"email\" name=\"email\" th:placeholder=\"Email\" class=\"form-control\" /> <br /> <!-- el name debe ser: password --> <input type=\"password\" th:placeholder=\"Password\" id=\"password\" name=\"password\" class=\"form-control\" /> <br /> <!-- param.error, se refiere a que no hubo \u00e9xito en el inicio de sesi\u00f3n --> <!-- en este caso param.error si falla viene con el valor de true --> <div align=\"center\" th:if=\"${param.error}\"> <p style=\"font-size: 20; color: #FF1C19;\">Verifica las credenciales.</p> </div> <button class=\"btn btn-lg btn-primary btn-block\" name=\"Submit\" value=\"Login\" type=\"Submit\" th:text=\"Login\"> </button> </form> </div> <div class=\"col-sm-4\"> </div> </div> </div> </body> </html> POM /gs-spring-security/pom.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.6.RELEASE</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>cl.lherrera.thymeleaftTest</groupId> <artifactId>gs-spring-security</artifactId> <version>20.0.0</version> <packaging>war</packaging> <name>gs-spring-security</name> <description>Pruebas de thymeleaf</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-security</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> <scope>provided</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> <dependency> <groupId>org.springframework.security</groupId> <artifactId>spring-security-test</artifactId> <scope>test</scope> </dependency> <!-- thymeleaf --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-thymeleaf</artifactId> </dependency> <!-- thymeleaf ## --> <!-- DevsTools --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <optional>true</optional> </dependency> <!-- DevsTools # --> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project>","title":"Lectura001"},{"location":"modulos/mod_5/uni005/lectura001/#unidad-51-seguridad","text":"Muestra el funcionamiento de Spring Security dividido en etapas, partiendo desde la configuraci\u00f3n m\u00ednima y se completa mediante proyectos ejemplificadores.","title":"Unidad 5.1 - Seguridad."},{"location":"modulos/mod_5/uni005/lectura001/#511-comienzo-rapido","text":"Ejemplo de aplicaci\u00f3n b\u00e1sica, con las configuraciones de seguridad por defecto. Crear un proyecto Spring con los siguientes m\u00f3dulos: + Spring web + Spring security Al momento de crear un proyecto, sin realizar absolutamente nada m\u00e1s que correr la aplicaci\u00f3n, tendremos la seguridad ya puesta, puesto que al acceder a http://localhost:8080/ , inmediatamente somos derivados a: http://localhost:8080/login .","title":"5.1.1 Comienzo r\u00e1pido"},{"location":"modulos/mod_5/uni005/lectura001/#estructura-de-un-proyecto","text":"sin modificaciones ./ \u251c\u2500\u2500 HELP.md \u251c\u2500\u2500 mvnw \u251c\u2500\u2500 mvnw.cmd \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 gsss \u2502 \u2502 \u2502 \u251c\u2500\u2500 GsSpringSecurityApplication.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 ServletInitializer.java \u2502 \u2502 \u251c\u2500\u2500 resources \u2502 \u2502 \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2502 \u2502 \u251c\u2500\u2500 static \u2502 \u2502 \u2502 \u2514\u2500\u2500 templates \u2502 \u2502 \u2514\u2500\u2500 webapp \u2502 \u2514\u2500\u2500 test \u2502 \u2514\u2500\u2500 java \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 gsss \u2502 \u2514\u2500\u2500 GsSpringSecurityApplicationTests.java \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 gsss \u2502 \u251c\u2500\u2500 GsSpringSecurityApplication.class \u2502 \u2514\u2500\u2500 ServletInitializer.class \u251c\u2500\u2500 generated-sources \u2502 \u2514\u2500\u2500 annotations \u251c\u2500\u2500 generated-test-sources \u2502 \u2514\u2500\u2500 test-annotations \u251c\u2500\u2500 m2e-wtp \u2502 \u2514\u2500\u2500 web-resources \u2502 \u2514\u2500\u2500 META-INF \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 maven \u2502 \u2514\u2500\u2500 cl.lherrera.thymeleaftTest \u2502 \u2514\u2500\u2500 gs-spring-security \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2514\u2500\u2500 pom.xml \u2514\u2500\u2500 test-classes \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 gsss \u2514\u2500\u2500 GsSpringSecurityApplicationTests.class 34 directories, 15 files No posee las vistas ni los controladores que est\u00e9n dirigiendo nuestra petici\u00f3n, esto es por que Spring lo construye y luego es inyectado autom\u00e1ticamente. Lo que podemos realizar es una personalizaci\u00f3n de este comportamiento. Al lanzar la aplicaci\u00f3n veremos lo siguiente: . ____ _ __ _ _ /\\\\ / ___'_ __ _ _(_)_ __ __ _ \\ \\ \\ \\ ( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\ \\\\/ ___)| |_)| | | | | || (_| | ) ) ) ) ' |____| .__|_| |_|_| |_\\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v2.2.6.RELEASE) 2020-05-04 13:30:28.476 INFO 93511 --- [ main] c.l.gsss.GsSpringSecurityApplication : Starting GsSpringSecurityApplication on MacBook-Pro-de-Luis.local with PID 93511 (/Users/luisherrera/ ... ... 2020-05-04 13:30:29.900 INFO 93511 --- [ main] .s.s.UserDetailsServiceAutoConfiguration : Using generated security password: ddc7804f-784d-48fb-8c00-ee60dac02a5e Lo importante es que Spring genera un usuario y contrase\u00f1a temporal. El usuario principal el : user La contrase\u00f1a se ve en consola y en este caso es: ddc7804f-784d-48fb-8c00-ee60dac02a5e , tal como se muestra en: Using generated security password: ddc7804f-784d-48fb-8c00-ee60dac02a5e , de los mensajes en la consola de la aplicaci\u00f3n. Al ingresar los mensajes en los campos de usuario y contrase\u00f1a de la aplicaci\u00f3n, si estas est\u00e1n incorrectas veremos un mensaje de error, en caso contrario nos lleva a path = \"/\" , que en estos momentos no existe, lanzando un error type=Not Found, status=404 .\u001c Podemos decir que al realizar un proyecto con Spring security , lo que pasa es que: Se restringe el acceso al sitio mediante una ventana de ingreso al sistema. La ventana y toda su funcionalidad no la programamos, esta acci\u00f3n es autom\u00e1tica, y es capaz de comprobar si las credenciales son v\u00e1lidas. Las credenciales son generadas al momento de ejecutar la aplicaci\u00f3n, las podremos ver en la consola. El usuario por defecto es user .","title":"Estructura de un proyecto."},{"location":"modulos/mod_5/uni005/lectura001/#512-aplicacion-con-proteccion","text":"","title":"5.1.2 Aplicaci\u00f3n con protecci\u00f3n"},{"location":"modulos/mod_5/uni005/lectura001/#dependencias","text":"Spring web Spring security thymeleaf Spring devs tools La siguiente aplicaci\u00f3n: Posee solamente una p\u00e1gina home que no se puede acceder si no se ha iniciado sesi\u00f3n. No existe registro ni finalizaci\u00f3n de la sesi\u00f3n. Las credenciales ya est\u00e1n configuradas, solamente podemos utilizarlas.","title":"Dependencias"},{"location":"modulos/mod_5/uni005/lectura001/#estructura","text":"./ \u251c\u2500\u2500 HELP.md \u251c\u2500\u2500 mvnw \u251c\u2500\u2500 mvnw.cmd \u251c\u2500\u2500 pom.xml \u2514\u2500\u2500 src \u251c\u2500\u2500 main \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2514\u2500\u2500 gsss \u2502 \u2502 \u251c\u2500\u2500 GsSpringSecurityApplication.java \u2502 \u2502 \u251c\u2500\u2500 ServletInitializer.java \u2502 \u2502 \u2514\u2500\u2500 controller \u2502 \u2502 \u2514\u2500\u2500 HomeController.java \u2502 \u251c\u2500\u2500 resources \u2502 \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2502 \u251c\u2500\u2500 static \u2502 \u2502 \u2514\u2500\u2500 templates \u2502 \u2502 \u2514\u2500\u2500 home.html \u2502 \u2514\u2500\u2500 webapp \u2514\u2500\u2500 test \u2514\u2500\u2500 java \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 gsss \u2514\u2500\u2500 GsSpringSecurityApplicationTests.java 16 directories, 10 files","title":"Estructura"},{"location":"modulos/mod_5/uni005/lectura001/#archivos-modificados","text":"pom.xml src/main/java/cl/lherrera/gsss/controller/HomeController.java src/main/resources/templates/home.html","title":"Archivos modificados"},{"location":"modulos/mod_5/uni005/lectura001/#pomxml","text":"Solamente a modo de ejemplo, ya que las dependencias son agregadas desde el principio si se lo indicamos al inicializador. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.6.RELEASE</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>cl.lherrera.thymeleaftTest</groupId> <artifactId>gs-spring-security</artifactId> <version>20.0.0</version> <packaging>war</packaging> <name>gs-spring-security</name> <description>Pruebas de thymeleaf</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-security</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> <scope>provided</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> <dependency> <groupId>org.springframework.security</groupId> <artifactId>spring-security-test</artifactId> <scope>test</scope> </dependency> <!-- thymeleaf --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-thymeleaf</artifactId> </dependency> <!-- thymeleaf ## --> <!-- DevsTools --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <optional>true</optional> </dependency> <!-- DevsTools # --> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project>","title":"pom.xml"},{"location":"modulos/mod_5/uni005/lectura001/#srcmainjavacllherreragssscontrollerhomecontrollerjava","text":"package cl.lherrera.gsss.controller; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; @Controller public class HomeController { @GetMapping(path = { \"\", \"/\" }) public String home() { return \"home\"; } }","title":"src/main/java/cl/lherrera/gsss/controller/HomeController.java"},{"location":"modulos/mod_5/uni005/lectura001/#srcmainresourcestemplateshomehtml","text":"<!DOCTYPE HTML> <html xmlns:th=\"http://www.thymeleaf.org\"> <head> <meta charset=\"UTF-8\"> <title>Home</title> </head> <body> <h2>Home page</h2> <p>Sitio protegido</p> </body> </html>","title":"src/main/resources/templates/home.html"},{"location":"modulos/mod_5/uni005/lectura001/#513-proyecto-lectura-finalizado","text":"En este proyecto mostramos la funcionalidad del control de acceso, sin utilizar una base de datos , el control de la informaci\u00f3n del usuario autenticado se realiza en memoria y dura lo que dura la instancia, el problema es que on tenemos una forma usable de registro de nuevos usuarios. Muestra la configuraci\u00f3n de WebSecurityConfig , implementaci\u00f3n con adaptador de SecurityConfig<O,B> . Para poder probar esta aplicaci\u00f3n hay que ejecutarla como aplicaci\u00f3n Spring . Y tratar de acceder a los servicios. Las credenciales se encuentran en el m\u00e9todo sobre escrito configure que recibe como par\u00e1metro AuthenticationManagerBuilder . Es en este sector que cargamos al usuario. Hay que tener en cuenta que aunque tengamos la informaci\u00f3n de un usuario en la base de datos, Spring Security , posee su propia manera de almacenar la informaci\u00f3n de un usuario registrado y para construir ese objeto, la informaci\u00f3n que necesite del usuario ser\u00e1 solicitada usando los propios servicios desarrollados por nosotros. Las divisiones del proyecto se encuentran en GIT","title":"5.1.3 Proyecto lectura finalizado"},{"location":"modulos/mod_5/uni005/lectura001/#estructura_1","text":"./ \u251c\u2500\u2500 HELP.md \u251c\u2500\u2500 mvnw \u251c\u2500\u2500 mvnw.cmd \u251c\u2500\u2500 pom.xml \u2514\u2500\u2500 src \u251c\u2500\u2500 main \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2514\u2500\u2500 gsss \u2502 \u2502 \u251c\u2500\u2500 GsSpringSecurityApplication.java \u2502 \u2502 \u251c\u2500\u2500 ServletInitializer.java \u2502 \u2502 \u251c\u2500\u2500 config \u2502 \u2502 \u2502 \u2514\u2500\u2500 WebSecurityConfig.java \u2502 \u2502 \u251c\u2500\u2500 controller \u2502 \u2502 \u2502 \u251c\u2500\u2500 ErrorController.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 HomeController.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 LoginController.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 admin \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 AdminController.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 user \u2502 \u2502 \u2502 \u2514\u2500\u2500 UserController.java \u2502 \u2502 \u2514\u2500\u2500 dto \u2502 \u2502 \u2514\u2500\u2500 DetalleDTO.java \u2502 \u251c\u2500\u2500 resources \u2502 \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2502 \u251c\u2500\u2500 static \u2502 \u2502 \u2514\u2500\u2500 templates \u2502 \u2502 \u251c\u2500\u2500 admin \u2502 \u2502 \u2502 \u2514\u2500\u2500 homeAdmin.html \u2502 \u2502 \u251c\u2500\u2500 error \u2502 \u2502 \u2502 \u2514\u2500\u2500 403.html \u2502 \u2502 \u251c\u2500\u2500 home.html \u2502 \u2502 \u251c\u2500\u2500 login.html \u2502 \u2502 \u2514\u2500\u2500 user \u2502 \u2502 \u2514\u2500\u2500 homeUser.html \u2502 \u2514\u2500\u2500 webapp \u2514\u2500\u2500 test \u2514\u2500\u2500 java \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 gsss \u2514\u2500\u2500 GsSpringSecurityApplicationTests.java 23 directories, 20 files","title":"Estructura"},{"location":"modulos/mod_5/uni005/lectura001/#archivos-modificados_1","text":"/gs-spring-security/src/main/java/cl/lherrera/gsss/GsSpringSecurityApplication.java /gs-spring-security/src/main/java/cl/lherrera/gsss/ServletInitializer.java /gs-spring-security/src/main/java/cl/lherrera/gsss/config/WebSecurityConfig.java /gs-spring-security/src/main/java/cl/lherrera/gsss/controller/ErrorController.java /gs-spring-security/src/main/java/cl/lherrera/gsss/controller/HomeController.java /gs-spring-security/src/main/java/cl/lherrera/gsss/controller/LoginController.java /gs-spring-security/src/main/java/cl/lherrera/gsss/controller/admin/AdminController.java /gs-spring-security/src/main/java/cl/lherrera/gsss/controller/user/UserController.java /gs-spring-security/src/main/java/cl/lherrera/gsss/dto/DetalleDTO.java /gs-spring-security/src/main/resources/templates/admin/homeAdmin.html /gs-spring-security/src/main/resources/templates/error/403.html /gs-spring-security/src/main/resources/templates/user/homeUser.html /gs-spring-security/src/main/resources/templates/home.html /gs-spring-security/src/main/resources/templates/login.html /gs-spring-security/pom.xml","title":"Archivos modificados"},{"location":"modulos/mod_5/uni005/lectura001/#cllherreragsss","text":"/gs-spring-security/src/main/java/cl/lherrera/gsss/GsSpringSecurityApplication.java package cl.lherrera.gsss; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class GsSpringSecurityApplication { public static void main(String[] args) { SpringApplication.run(GsSpringSecurityApplication.class, args); } } /gs-spring-security/src/main/java/cl/lherrera/gsss/ServletInitializer.java","title":"cl.lherrera.gsss"},{"location":"modulos/mod_5/uni005/lectura001/#cllherreragsssconfig","text":"/gs-spring-security/src/main/java/cl/lherrera/gsss/config/WebSecurityConfig.java Si tenemos la experiencia de configurar el control de acceso a los usuarios mediante configuraciones en el servidor. Podemos ver que esta es la forma que ofrece Spring security para realizar un inicio de sesi\u00f3n usando formulario. Para este caso con el uso de usuarios en memoria, como ser\u00eda configurarlos en el servidor en el archivo config.xml , pero en esta ocasi\u00f3n Spring utiliza una clase donde podemos aplicar estas configuraciones sin tocar la propia configuraci\u00f3n del servidor. package cl.lherrera.gsss.config; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity; import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter; import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder; @EnableWebSecurity @Configuration public class WebSecurityConfig extends WebSecurityConfigurerAdapter { /** * Sobreescribir este m\u00e9todo, permite habilitar * la autenticaci\u00f3n en memoria, adem\u00e1s de poder definir credenciales. */ @Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { String usuario = \"mail@fake.dev\"; String contrasenia = passwordEncoder().encode(\"1234\"); String rol = \"ADMIN\"; String usuario2 = \"mail2@fake.dev\"; String contrasenia2 = passwordEncoder().encode(\"1234\"); String rol2 = \"USER\"; auth.inMemoryAuthentication() .withUser(usuario) .password(contrasenia) .roles(rol) .and() .withUser(usuario2) .password(contrasenia2) .roles(rol2); } /** * csrf : Adds CSRF support. This is activated by default when using. * * disable: Desabilita la orden anterior. * * authorizeRequests : Allows restricting access based upon the HttpServletRequest. * * antMatchers : The mapping matches URLs using the following rules: * ? matches one character * * matches zero or more characters * ** matches zero or more directories in a path * {spring:[a-z]+} matches the regexp [a-z]+ as a path variable named \"spring\" * * permitAll : Specify that URLs are allowed by anyone. * * anyRequest : Maps any request. * * authenticated : Specify that URLs are allowed by any authenticated user. * * and : This is useful for method chaining. * * formLogin : Specifies to support form based authentication. (no desde el config.xml) * * loginPage : Specifies the URL to send users to if login is required. * * failureUrl : The URL to send users if authentication fails. The default is \"/login?error\". * * usernameParameter : The HTTP parameter to look for the username when performing authentication. Default is \"username\". * * passwordParameter : The HTTP parameter to look for the password when performing authentication. Default is \"password\". * * defaultSuccessUrl : Specifies where users will be redirected after authenticating successfully if they have not visited a secured page prior to authenticating. * */ // @Override // public void configure(HttpSecurity http) throws Exception { // // se desabilita el sistema de seguridad csrf (muy vulnerable) // http.csrf().disable() // // se configura la ruta login para ser accedida sin autenticacion // .authorizeRequests().antMatchers(\"/login\").permitAll() // // para todos los Request se habilita para usuarios autentificados. // .anyRequest().authenticated() // // indicaci\u00f3n que se unsar\u00e1 el manejo por formulario // .and().formLogin() // // se especifica la p\u00e1gina para el login personalizado. // .loginPage(\"/login\") // // se especifica la url para cuando la verificaci\u00f3n de credenciales falle. // .failureUrl(\"/login?error=true\") // // se especifica el nombre del atributo name para el usuario y la contrase\u00f1a. // .usernameParameter(\"email\").passwordParameter(\"password\") // // redireccionamiento en caso de \u00e9xito. // .defaultSuccessUrl(\"/user\"); // // } /* * Dejamos la aplicaci\u00f3n distribu\u00eddos en direcctorios para poder * restringir por medio de estos direcctorios y le damos * acceso seg\u00fan su rol. */ @Override public void configure(HttpSecurity http) throws Exception { http.csrf().disable() .authorizeRequests() // para todo lo que est\u00e9 dentro de admin (antMatch) .antMatchers(\"/admin/**\").hasRole(\"ADMIN\") // para todo lo que est\u00e9 dentro de user (antMatch) .antMatchers(\"/user/**\").hasRole(\"USER\") // para esta URI se permite total acceso .antMatchers(\"/login\").permitAll() // el usuario autentificado se le permite toda petici\u00f3n. .anyRequest().authenticated() // configuraci\u00f3n de los formularios .and().formLogin().loginPage(\"/login\").failureUrl(\"/login?error=true\") // seteo de nombres representativos en los formularios. .usernameParameter(\"email\").passwordParameter(\"password\") // p\u00e1gina por defecto en caso de \u00e9xito en el inicio de sesi\u00f3n. .defaultSuccessUrl(\"/\") .and() .exceptionHandling().accessDeniedPage(\"/recurso-prohibido\"); } /** * As\u00ed inicializamos el encoder. */ @Bean public BCryptPasswordEncoder passwordEncoder() { return new BCryptPasswordEncoder(); } }","title":"cl.lherrera.gsss.config"},{"location":"modulos/mod_5/uni005/lectura001/#cllherreragssscontroller","text":"/gs-spring-security/src/main/java/cl/lherrera/gsss/controller/ErrorController.java package cl.lherrera.gsss.controller; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; @Controller public class ErrorController { @GetMapping(\"/recurso-prohibido\") public String recurso03() { return \"error/403\"; } } /gs-spring-security/src/main/java/cl/lherrera/gsss/controller/HomeController.java package cl.lherrera.gsss.controller; import javax.servlet.http.HttpSession; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; @Controller public class HomeController { @GetMapping(path = { \"\", \"/\" }) public String home(HttpSession session) { return \"home\"; } } /gs-spring-security/src/main/java/cl/lherrera/gsss/controller/LoginController.java package cl.lherrera.gsss.controller; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; @Controller public class LoginController { @GetMapping(\"/login\") public String login() { return \"login\"; } }","title":"cl.lherrera.gsss.controller"},{"location":"modulos/mod_5/uni005/lectura001/#cllherreragssscontrolleradmin","text":"/gs-spring-security/src/main/java/cl/lherrera/gsss/controller/admin/AdminController.java package cl.lherrera.gsss.controller.admin; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; @Controller public class AdminController { @GetMapping(\"/admin\") public String home() { return \"admin/homeAdmin\"; } }","title":"cl.lherrera.gsss.controller.admin"},{"location":"modulos/mod_5/uni005/lectura001/#cllherreragssscontrolleruser","text":"/gs-spring-security/src/main/java/cl/lherrera/gsss/controller/user/UserController.java package cl.lherrera.gsss.controller.user; import java.util.ArrayList; import java.util.List; import javax.servlet.http.HttpSession; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.servlet.ModelAndView; import org.springframework.web.servlet.view.RedirectView; import cl.lherrera.gsss.dto.DetalleDTO; @Controller public class UserController { @GetMapping(\"/user\") public ModelAndView home(HttpSession session) { ModelAndView modelAndView = new ModelAndView(\"user/homeUser\"); modelAndView.addObject(\"detalle\", new DetalleDTO()); modelAndView.addObject(\"valores\", session.getAttribute(\"valores\")); return modelAndView; } @PostMapping(\"/users\") public RedirectView home(HttpSession session, @ModelAttribute DetalleDTO detalles) { List<DetalleDTO> valores = new ArrayList<>(); // si los valores no vienen vacios se a\u00f1aden a los valores. if (session.getAttribute(\"valores\") != null) { List<DetalleDTO> valoresDeSesion = (List<DetalleDTO>) session.getAttribute(\"valores\"); // agrega todos los valores a la lista existente. valores.addAll(valoresDeSesion); } valores.add(detalles); // se reemplaza el valor de valores en la sesi\u00f3n, // se cambia por el nuevo valor de // valores. session.setAttribute(\"valores\", valores); return new RedirectView(\"/user\"); } }","title":"cl.lherrera.gsss.controller.user"},{"location":"modulos/mod_5/uni005/lectura001/#cllherreragssscontrollerdto","text":"/gs-spring-security/src/main/java/cl/lherrera/gsss/dto/DetalleDTO.java package cl.lherrera.gsss.dto; public class DetalleDTO { private String clave; private String valor; public DetalleDTO() { // TODO Auto-generated constructor stub } public DetalleDTO(String clave, String valor) { super(); this.clave = clave; this.valor = valor; } public String getClave() { return clave; } public void setClave(String clave) { this.clave = clave; } public String getValor() { return valor; } public void setValor(String valor) { this.valor = valor; } @Override public String toString() { return \"DetalleDTO [clave=\" + clave + \", valor=\" + valor + \"]\"; } }","title":"cl.lherrera.gsss.controller.dto"},{"location":"modulos/mod_5/uni005/lectura001/#resourcestemplatesadmin","text":"/gs-spring-security/src/main/resources/templates/admin/homeAdmin.html <!DOCTYPE html> <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\"> <head> <title>Inicio Administrador</title> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css \" integrity=\"sha384- ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"> </head> <body> <ul class=\"nav justify-content-end\"> <li class=\"nav-item\"><a class=\"nav-link active\" href=\"#\">Administrador</a> </li> <li class=\"nav-item\"><a class=\"nav-link\" th:href=\"@{/logout}\">Cerrar sesion</a></li> </ul> <p>Bienvenido!</p> </body> </html>","title":"resources/templates/admin"},{"location":"modulos/mod_5/uni005/lectura001/#resourcestemplateserror","text":"/gs-spring-security/src/main/resources/templates/error/403.html <!DOCTYPE html> <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\"> <head> <title>Recurso protegido</title> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css \" integrity=\"sha384- ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"> </head> <body> <ul class=\"nav justify-content-end\"> <li class=\"nav-item\"> <a class=\"nav-link\" th:href=\"@{/logout}\">Cerrar sesion</a> </li> </ul> <h3>Recurso no accesible</h3> </body> </html>","title":"resources/templates/error"},{"location":"modulos/mod_5/uni005/lectura001/#resourcestemplatesuser","text":"/gs-spring-security/src/main/resources/templates/user/homeUser.html Ac\u00e1 es donde ir\u00e1 el formulario que llena los datos en la sesi\u00f3n. <!DOCTYPE html> <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\"> <head> <title>Inicio Usuario</title> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css \" integrity=\"sha384- ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"> </head> <body> <ul class=\"nav justify-content-end\"> <li class=\"nav-item\"> <a class=\"nav-link active\" href=\"#\">Usuario</a> </li> <li class=\"nav-item\"> <a class=\"nav-link\" th:href=\"@{/logout}\">Cerrar sesi\u00f3n</a> </li> </ul> <div class=\"container\"> <div class=\"col-sm-4\"> </div> <div class=\"col-sm-4\"> <form th:action=\"@{/users}\" method=\"post\" th:object=\"${detalle}\"> <div class=\"form-group\"> <input type=\"text\" th:field=\"*{clave}\" class=\"form-control\" id=\"clave\" aria-describedby=\"claveHelp\" placeholder=\"Ingresa nombre de la clave\"> <small id=\"inClave\" class=\"form-text text-muted\">Nombre de la clave que se almacenar\u00e1 en sesi\u00f3n.</small> </div> <div class=\"form-group\"> <input type=\"text\" th:field=\"*{valor}\" class=\"form-control\" id=\"valor\" aria-describedby=\"valorHelp\" placeholder=\"Ingresa el contenido\"> <small id=\"inValor\" class=\"form-text text-muted\">Contenido de la clave que se almacenar\u00e1 en sesi\u00f3n.</small> </div> <button type=\"submit\" class=\"btn btn-primary\">Agregar</button> </form> </div> <div class=\"col-sm-4\"> </div> <div class=\"col-sm-12\"> <table class=\"table\"> <thead> <tr> <th scope=\"col\">clave</th> <th scope=\"col\">valor</th> </tr> </thead> <tbody> <tr th:each=\"detalle: ${valores}\"> <td th:text=\"${detalle.clave}\" /> <td th:text=\"${detalle.valor}\" /> </tr> </tbody> </table> </div> </div> </body> </html>","title":"resources/templates/user"},{"location":"modulos/mod_5/uni005/lectura001/#resourcestemplates","text":"/gs-spring-security/src/main/resources/templates/home.html <!DOCTYPE html> <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\"> <head> <title>Iniciar Sesi\u00f3n</title> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css \" integrity=\"sha384- ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"> </head> <body> <ul class=\"nav justify-content-end\"> <li class=\"nav-item\"> <a class=\"nav-link active\" href=\"/user\">Usuario</a> </li> <li class=\"nav-item\"> <a class=\"nav-link active\" href=\"/admin\">Administrador</a> </li> <li class=\"nav-item\"> <a class=\"nav-link\" th:href=\"@{/logout}\">Cerrar sesi\u00f3n</a> </li> </ul> <div class=\"container\"> <div class=\"row\"> <div class=\"col-sm-4\"> </div> <div class=\"col-sm-4\"> <h1>P\u00e1gina principal</h1> </div> <div class=\"col-sm-4\"> </div> </div> </div> </body> </html> /gs-spring-security/src/main/resources/templates/login.html <!DOCTYPE html> <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\"> <head> <title>Iniciar Sesi\u00f3n</title> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css \" integrity=\"sha384- ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"> </head> <body> <div class=\"container\"> <div class=\"row\"> <div class=\"col-sm-4\"> </div> <div class=\"col-sm-4\"> <form th:action=\"@{/login}\" method=\"post\" class=\"form-signin\"> <h3 class=\"form-signin-heading\" th:text=\"Credenciales\"></h3> <br /> <!-- el name debe ser: email --> <input type=\"text\" id=\"email\" name=\"email\" th:placeholder=\"Email\" class=\"form-control\" /> <br /> <!-- el name debe ser: password --> <input type=\"password\" th:placeholder=\"Password\" id=\"password\" name=\"password\" class=\"form-control\" /> <br /> <!-- param.error, se refiere a que no hubo \u00e9xito en el inicio de sesi\u00f3n --> <!-- en este caso param.error si falla viene con el valor de true --> <div align=\"center\" th:if=\"${param.error}\"> <p style=\"font-size: 20; color: #FF1C19;\">Verifica las credenciales.</p> </div> <button class=\"btn btn-lg btn-primary btn-block\" name=\"Submit\" value=\"Login\" type=\"Submit\" th:text=\"Login\"> </button> </form> </div> <div class=\"col-sm-4\"> </div> </div> </div> </body> </html>","title":"resources/templates/"},{"location":"modulos/mod_5/uni005/lectura001/#pom","text":"/gs-spring-security/pom.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.6.RELEASE</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>cl.lherrera.thymeleaftTest</groupId> <artifactId>gs-spring-security</artifactId> <version>20.0.0</version> <packaging>war</packaging> <name>gs-spring-security</name> <description>Pruebas de thymeleaf</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-security</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> <scope>provided</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> <dependency> <groupId>org.springframework.security</groupId> <artifactId>spring-security-test</artifactId> <scope>test</scope> </dependency> <!-- thymeleaf --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-thymeleaf</artifactId> </dependency> <!-- thymeleaf ## --> <!-- DevsTools --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <optional>true</optional> </dependency> <!-- DevsTools # --> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project>","title":"POM"},{"location":"modulos/mod_5/uni005/lectura002/","text":"Unidad 5.2 - Seguridad. Aplica a lo aprendido en la lectura anterior, el uso de un motor de base de datos, para obtener la informaci\u00f3n de los usuarios y sus roles a validar. 5.2.1 Aplicaci\u00f3n lectura - gs-spring-security Ojo con los nombres de los archivos .sql , o cualquiera que se llame en las propiedades, ya que se puede escapar un espacio y el error no es muy claro al mostrarnos el detalle, por lo tanto todos los archivos nombrados en las propiedades, deben estar muy clara y cuidadosamente escritos. El classpath , en las propiedades apunta a la carpeta resources , desde all\u00ed partimos. Al momento de usar H2 , hay que cambiar USER \u001d por ROLE_USER para que sea reconocido por el configurador \u001d y por el manejador de acceso correcto , el que redireciona \u001d. cl.lherrera.gsss Este paquete contiene las clases que se generan solas en Spring , este c\u00f3digo no posee intervenciones personalizadas para la aplicaci\u00f3n. /gs-spring-security/src/main/java/cl/lherrera/gsss/GsSpringSecurityApplication.java Clase sin cambios es la que viene por defecto en una generaci\u00f3n de aplicaci\u00f3n con Spring . package cl.lherrera.gsss; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class GsSpringSecurityApplication { public static void main(String[] args) { SpringApplication.run(GsSpringSecurityApplication.class, args); } } /gs-spring-security/src/main/java/cl/lherrera/gsss/ServletInitializer.java Apartado que se genera en el caso que queramos que nuestra aplicaci\u00f3n empaquete su despliegue en un war . package cl.lherrera.gsss; import org.springframework.boot.builder.SpringApplicationBuilder; import org.springframework.boot.web.servlet.support.SpringBootServletInitializer; public class ServletInitializer extends SpringBootServletInitializer { @Override protected SpringApplicationBuilder configure(SpringApplicationBuilder application) { return application.sources(GsSpringSecurityApplication.class); } } cl.lherrera.gsss.config /gs-spring-security/src/main/java/cl/lherrera/gsss/config/CustomAuthenticationSuccessHandler.java En el momento de realizar un inicio de sesi\u00f3n, es decir cuando el formulario es aceptado, podemos personalizar el comportamiento que se tendr\u00e1, por ejemplo que usuarios seg\u00fan su rol sean re-dirigidos a sus respectivas rutas. para evitar un trabajo extra de acceso a sus funcionalidades por perfil. Estos segundos de ahorro de tiempo es una suma por todos los usuarios y por todo el tiempo que dure la aplicaci\u00f3n, aumentando la productividad que, es una de las principales justificaciones de las tecnolog\u00edas de la informaci\u00f3n. Hay que tener en consideraci\u00f3n que una aplicaci\u00f3n mvc no se comporta con un bffe , en esta arquitectura, no necesitamos enviar a un usuario a una ventana informativa en caso de error, solamente nos limitamos a responder un json indicando el c\u00f3digo de error y la re direcci\u00f3n corre por parte de los desarrolladores del frontEnd . En la arquitectura MVC debemos nosotros controlar estas situaciones configurando clases como las que se muestra a continuaci\u00f3n. package cl.lherrera.gsss.config; import java.io.IOException; import java.util.Set; import javax.servlet.ServletException; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.context.annotation.Configuration; import org.springframework.security.core.Authentication; import org.springframework.security.core.authority.AuthorityUtils; import org.springframework.security.web.authentication.AuthenticationSuccessHandler; @Configuration public class CustomAuthenticationSuccessHandler implements AuthenticationSuccessHandler { private static Logger logger = LoggerFactory.getLogger(CustomAuthenticationSuccessHandler.class); @Override public void onAuthenticationSuccess(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication) throws IOException, ServletException { Set<String> roles = AuthorityUtils.authorityListToSet(authentication.getAuthorities()); logger.info(\"manejador redirecci\u00f3n personal roles: \" + roles.toString()); if (roles.contains(\"ROLE_ADMIN\")) { httpServletResponse.sendRedirect(\"/admin\"); } else { httpServletResponse.sendRedirect(\"/user\"); } } } /gs-spring-security/src/main/java/cl/lherrera/gsss/config/WebSecurityConfig.java Java, y en realidad el servidor, en nuestro caso Apache Tomcat , posee formas de administrar el ingreso al sistema de una forma muy segura, con implementaciones que se rigen a fuertes protocolos de seguridad en cuanto al cifrado y transporte de la informaci\u00f3n de las credenciales y cuidado de las dem\u00e1s peticiones que se realicen al sitio en el que estamos trabajando. Estos m\u00e9todos de inicio de sesi\u00f3n van m\u00e1s all\u00e1 de crear un formulario que busque si el usuario existe puede entrar como lo que har\u00edamos r\u00e1pidamente si queremos un control de acceso. Para facilitar esta tarea, existen ya estrategias de seguridad que poseen sus propias implementaciones integradas a los servidores, ya que son ellos quienes trabajan las peticiones y respuestas usando nuestras implementaciones, pero usando sus propias formas de control. Estas formas son: Declarative Security Programmatic Security En la primera se declaran usuarios, contrase\u00f1as y roles en alg\u00fan lugar (a priori en la configuraci\u00f3n del servidor), puede ser alguna plataforma que posea contrase\u00f1as como el inicio de sesi\u00f3n en el propio computador o un grupo de usuarios en un active directory por ejemplo donde nosotros sabemos y controlamos las credenciales para luego utilizarlas. La segunda opci\u00f3n es poder hacer que nuestro propio sistema administre esta tarea. Ya que el control de los accesos y las ventanas de inicio o registro de usuarios sea administrada por nosotros. Cada una de estas opciones requiere mucha configuraci\u00f3n ya sea en el propio servidor (al que usualmente no tenemos acceso), es por este motivo que Spring nos brinda herramientas como Spring security , ya que permite estas configuraciones de forma mucho m\u00e1s sencilla que si la hici\u00e9ramos de forma manual, y con un estilo funcional exquisito, que nos permite ahorrarnos muchas horas de configuraciones. Utilizando FORM-BASED AUTHENTICATION tenemos una herramienta que no solamente permite administrar el ingreso al sistema bajo credenciales, si no que adem\u00e1s podemos personalizar su comportamiento seg\u00fan sean nuestras necesidades, como por ejemplo una ventana de inicio de sesi\u00f3n personalizada, lo mismo que para en caso de una respuesta m\u00e1s usable, adem\u00e1s de personalizar accesos seg\u00fan roles entre otras funcionalidades. Sin el manejador , podemos ver que ingresamos en memoria sin usar la base de datos. Al momento de ingresar roles(\"ADMIN\"); , este a diferencia de cuando lo hacemos en la base de datos lo guarda como ROLE_ADMIN . Hay que tener ojo con esto, pero el proyecto tiene la historia en git .\u001c /** * Sobreescribir este m\u00e9todo, permite habilitar * la autenticaci\u00f3n en memoria, adem\u00e1s de poder definir credenciales. */ @Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { String usuario = \"foo\"; String contrasenia = passwordEncoder().encode(\"bar\"); auth.inMemoryAuthentication() .withUser(usuario) .password(contrasenia) .roles(\"ADMIN\"); } package cl.lherrera.gsss.config; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity; import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter; import org.springframework.security.core.userdetails.UserDetailsService; import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder; import org.springframework.security.web.authentication.AuthenticationSuccessHandler; @Configuration @EnableWebSecurity public class WebSecurityConfig extends WebSecurityConfigurerAdapter { @Autowired private UserDetailsService userDetailsService; private AuthenticationSuccessHandler authenticationSuccessHandler; @Autowired public WebSecurityConfig(AuthenticationSuccessHandler authenticationSuccessHandler) { this.authenticationSuccessHandler = authenticationSuccessHandler; } @Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder() ); } /* * Dejamos la aplicaci\u00f3n distribu\u00eddos en direcctorios para poder restringir por * medio de estos direcctorios y le damos acceso seg\u00fan su rol. */ @Override public void configure(HttpSecurity http) throws Exception { http.csrf().disable() .authorizeRequests() .antMatchers(\"/admin/**\").hasAuthority(\"ROLE_ADMIN\") .antMatchers(\"/user/**\").hasAuthority(\"ROLE_USER\") .antMatchers(\"/login\").permitAll() // incluyendo el main .anyRequest().authenticated() .and() .formLogin() .loginPage(\"/login\") .successHandler(authenticationSuccessHandler)// esto es lo nuevo .failureUrl(\"/login?error=true\").usernameParameter(\"email\").passwordParameter(\"password\") // p\u00e1gina por defecto en caso de \u00e9xito en el inicio de sesi\u00f3n. // se comenta para que no interfirera con la redirecci\u00f3n // .defaultSuccessUrl(\"/user\") .and() .exceptionHandling().accessDeniedPage(\"/recurso-prohibido\"); } /** * As\u00ed inicializamos el encoder. */ @Bean public BCryptPasswordEncoder passwordEncoder() { return new BCryptPasswordEncoder(); } } cl.lherrera.gsss.controller Estas clases manejan las rutas que ejecutan los servicios de la aplicaci\u00f3n, Esta es la interfaz de comunicaci\u00f3n. /gs-spring-security/src/main/java/cl/lherrera/gsss/controller/ErrorController.java Maneja la petici\u00f3n de la vista cuando no tenemos acceso al recurso, en este caso cuando no sea el rol correcto que quiera cargar un recurso restringido se arroja un error 403, lo que har\u00e1 ser\u00e1 redireccionar a una vista personalizada para atenci\u00f3n del usuario, permitiendo agregar l\u00f3gica en caso que se requiera almacenar estos intentos por ejemplo lo podr\u00edamos hacer. package cl.lherrera.gsss.controller; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; @Controller public class ErrorController { @GetMapping(\"/recurso-prohibido\") public String recurso03() { return \"error/403\"; } } /gs-spring-security/src/main/java/cl/lherrera/gsss/controller/HomeController.java Solamente sirve para cargar la p\u00e1gina principal. package cl.lherrera.gsss.controller; import javax.servlet.http.HttpSession; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; @Controller public class HomeController { @GetMapping(path = { \"\", \"/\" }) public String home(HttpSession session) { return \"home\"; } } /gs-spring-security/src/main/java/cl/lherrera/gsss/controller/LoginController.java Se encarga de dirigir a la vista de login . package cl.lherrera.gsss.controller; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; @Controller public class LoginController { @GetMapping(\"/login\") public String login() { return \"login\"; } } cl.lherrera.gsss.controller.admin Contiene el control de las peticiones que deber\u00edan se controladas solamente por un administrador. /gs-spring-security/src/main/java/cl/lherrera/gsss/controller/admin/AdminController.java Controlador encargado de dirigir las vistas del administrador. package cl.lherrera.gsss.controller.admin; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; @Controller public class AdminController { @GetMapping(\"/admin\") public String home() { return \"admin/homeAdmin\"; } } cl.lherrera.gsss.controller.user Contiene los controles a los servicios que solamente deber\u00eda poder realizar un usuario. /gs-spring-security/src/main/java/cl/lherrera/gsss/controller/user/UserController.java Controlador encargado de manejar la interacci\u00f3n con los servicios que le competen a los usuarios. En nuestro caso es el m\u00e1s implementado. package cl.lherrera.gsss.controller.user; import java.util.ArrayList; import java.util.List; import javax.servlet.http.HttpSession; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.servlet.ModelAndView; import org.springframework.web.servlet.view.RedirectView; import cl.lherrera.gsss.dto.DetalleDTO; @Controller public class UserController { @GetMapping(\"/user\") public ModelAndView home(HttpSession session) { ModelAndView modelAndView = new ModelAndView(\"user/homeUser\"); modelAndView.addObject(\"detalle\", new DetalleDTO()); modelAndView.addObject(\"valores\", session.getAttribute(\"valores\")); return modelAndView; } @PostMapping(\"/users\") public RedirectView home(HttpSession session, @ModelAttribute DetalleDTO detalles) { List<DetalleDTO> valores = new ArrayList<>(); // si los valores no vienen vacios se a\u00f1aden a los valores. if (session.getAttribute(\"valores\") != null) { List<DetalleDTO> valoresDeSesion = (List<DetalleDTO>) session.getAttribute(\"valores\"); // agrega todos los valores a la lista existente. valores.addAll(valoresDeSesion); } valores.add(detalles); // se reemplaza el valor de valores en la sesi\u00f3n, // se cambia por el nuevo valor de // valores. session.setAttribute(\"valores\", valores); return new RedirectView(\"/user\"); } } cl.lherrera.gsss.dto El transportador de datos a la vista. /gs-spring-security/src/main/java/cl/lherrera/gsss/dto/DetalleDTO.java package cl.lherrera.gsss.dto; public class DetalleDTO { private String clave; private String valor; public DetalleDTO() { // TODO Auto-generated constructor stub } public DetalleDTO(String clave, String valor) { super(); this.clave = clave; this.valor = valor; } public String getClave() { return clave; } public void setClave(String clave) { this.clave = clave; } public String getValor() { return valor; } public void setValor(String valor) { this.valor = valor; } @Override public String toString() { return \"DetalleDTO [clave=\" + clave + \", valor=\" + valor + \"]\"; } } cl.lherrera.gsss.mapper No estamos usando JPA , si no que mybatis ,\u001c por eso debemos hacer un Mapper , que haga la funci\u00f3n de DAO , implementando las consultas expl\u00edcitas como implementaci\u00f3n de cada servicio que podr\u00eda facilitar un DAO . Esto se realiza para mostrar el funcionamiento de otra herramienta diiferente a JPA .\u001c /gs-spring-security/src/main/java/cl/lherrera/gsss/mapper/UserMapper.java Al no utilizar jpa , debemos mapear el acceso a los datos, para no tener que implementar las interfaces, es que nos apoyamos en una librer\u00eda ibatis , que se encarga de la implementaci\u00f3n de estas interfaces utilizando el texto de sus anotaciones especiales para la consulta de datos. package cl.lherrera.gsss.mapper; import org.apache.ibatis.annotations.Mapper; import org.apache.ibatis.annotations.Param; import org.apache.ibatis.annotations.Select; import cl.lherrera.gsss.model.Users; @Mapper public interface UserMapper { @Select(\"select * from users where email = #{email}\") Users findByEmail(@Param(\"email\") String email); } cl.lherrera.gsss.model /gs-spring-security/src/main/java/cl/lherrera/gsss/model/Role.java Al no tener una tabla en la base de datos, usamos esta clase para poder administrar la cantidad de roles posibles desde esta clase enumerada. Es como si tuvi\u00e9ramos estos datos en una tabla, pero con la cantidad de registros, donde cada registro es un rol, entonces no deber\u00eda ser m\u00e1s que esta clase la que administre los roles, aunque esto depende del alcance de la escalabilidad \u001d esperada. package cl.lherrera.gsss.model; public enum Role { ROLE_ADMIN, ROLE_USER } /gs-spring-security/src/main/java/cl/lherrera/gsss/model/Users.java EL no usar JPA tambi\u00e9n provoca que los modelos cambien sus anotaciones. Entidad, en este caso no llamado as\u00ed por que no usamos JPA , este POJO es la forma de utilizarlo con mybatis , aunque en realidad es muy parecida a una entidad de jpa solo que, a simple vista, difiere en sus anotaciones . Su nombre en plural es intencional, ya que la forma en que Spring llama a su usuario registrado es User , entonces esto es para ahorrar los posibles conflictos que esto pueda provocar. Aunque basta con usar espa\u00f1ol u un est\u00e1ndar de nombres de la aplicaci\u00f3n como MYAPP_USER \u001d package cl.lherrera.gsss.model; import java.io.Serializable; public class Users implements Serializable { private static final long serialVersionUID = 539393250097912194L; private String email; private String password; private Role role; public Users() { // TODO Auto-generated constructor stub } public Users(String email, String password, Role role) { super(); this.email = email; this.password = password; this.role = role; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public Role getRole() { return role; } public void setRole(Role role) { this.role = role; } @Override public String toString() { return \"Users [email=\" + email + \", password=\" + password + \", role=\" + role + \"]\"; } } cl.lherrera.gsss.service /gs-spring-security/src/main/java/cl/lherrera/gsss/service/AuthServiceImpl.java Este servicio nos permite usar la b\u00fasqueda de usuarios en la base de datos, este servicio es inyectado en WebSecurityConfig , as\u00ed personalizamos la b\u00fasqueda de las credenciales del usuario. Como todo servicio la l\u00f3gica de negocio ser\u00e1 la que se requiera para el negocio. package cl.lherrera.gsss.service; import java.util.ArrayList; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.security.core.GrantedAuthority; import org.springframework.security.core.authority.SimpleGrantedAuthority; import org.springframework.security.core.userdetails.UserDetails; import org.springframework.security.core.userdetails.User; import org.springframework.security.core.userdetails.UserDetailsService; import org.springframework.security.core.userdetails.UsernameNotFoundException; import org.springframework.stereotype.Service; import cl.lherrera.gsss.mapper.UserMapper; import cl.lherrera.gsss.model.Users; @Service public class AuthServiceImpl implements UserDetailsService { @Autowired private UserMapper userMapper; @Override public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException { Users users = userMapper.findByEmail(email); if (users == null) throw new UsernameNotFoundException(email); List<GrantedAuthority> authorities = new ArrayList<>(); String role = users.getRole().toString(); authorities.add(new SimpleGrantedAuthority(role) ); User usuarioSistema = new User( users.getEmail(), users.getPassword(), authorities ); return usuarioSistema; } } /gs-spring-security/src/main/resources/db/migrations Si queremos, podemos hacer partir una aplicaci\u00f3n con un DDL personalizado y lo podemos ir personalizando mientras dure la vida de la aplicaci\u00f3n, de esta forma. podemos ir actualizando este archivo y un nuevo desarrollador, siempre tendr\u00e1 la estructura actualizada, aunque con JPA esta se arma sola con lo que le digamos en las entidades. schema.sql Como estamos importando una base de datos, el esquema lo indicamos en este archivo. Se crea una tabla la que es eliminada en cada inicio de la aplicaci\u00f3n y creada vac\u00eda nuevamente. DROP TABLE if exists users; create table users(email varchar, password varchar, role varchar); /gs-spring-security/src/main/resources/db/seeds Adem\u00e1s de la estructura, podemos cargar datos iniciales, como para por ejemplo para hacer pruebas con datos iniciales falsos. Ejecutamos el seed . En este caso para cargar las credenciales con las que haremos pruebas. data.sql Como la tabla est\u00e1 vac\u00eda, ingresaremos los datos desde el siguiente archivo, el cual siempre ingresar\u00e1 datos en una tabla users vac\u00eda. La contrase\u00f1a es 1234 para ambos casos, se realiza la encriptaci\u00f3n usando https://bcrypt-generator.com/ , ya que as\u00ed lo exige la implementaci\u00f3n de Spring security . insert into users(email, password, role) values ('mail@fake.dev','$2y$12$x2/D0RmnpJFC0ZNbbDr6j.cPYFl9d/8hbNGFf8tQisA8AN47KGfqK','ROLE_USER'); insert into users(email, password, role) values ('mail2@fake.dev', '$2y$12$x2/D0RmnpJFC0ZNbbDr6j.cPYFl9d/8hbNGFf8tQisA8AN47KGfqK', 'ROLE_ADMIN'); /gs-spring-security/src/main/resources/templates/admin homeAdmin.html Vista para presentar el men\u00fa de los administradores. <!DOCTYPE html> <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\"> <head> <title>Inicio Administrador</title> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css \" integrity=\"sha384- ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"> </head> <body> <ul class=\"nav justify-content-end\"> <li class=\"nav-item\"><a class=\"nav-link active\" href=\"#\">Administrador</a> </li> <li class=\"nav-item\"><a class=\"nav-link\" th:href=\"@{/logout}\">Cerrar sesion</a></li> </ul> <p>Bienvenido!</p> </body> </html> /gs-spring-security/src/main/resources/templates/error 403.html Vista para mostrar error 403 <!DOCTYPE html> <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\"> <head> <title>Inicio Administrador</title> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css \" integrity=\"sha384- ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"> </head> <body> <ul class=\"nav justify-content-end\"> <li class=\"nav-item\"><a class=\"nav-link active\" href=\"#\">Administrador</a> </li> <li class=\"nav-item\"><a class=\"nav-link\" th:href=\"@{/logout}\">Cerrar sesion</a></li> </ul> <p>Bienvenido!</p> </body> </html> /gs-spring-security/src/main/resources/templates/user homeUser.html Es en esta vista donde tenemos la mayor de las implementaciones de la vista, esto es por que el usuario puede guardar claves y valores para el ejemplo de la sesi\u00f3n, y la interacci\u00f3n est\u00e1 ac\u00e1. Las otras vistas son solamente de muestras para ejemplificar los accesos, no poseen mayor interacci\u00f3n. <!DOCTYPE html> <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\"> <head> <title>Inicio Usuario</title> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css \" integrity=\"sha384- ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"> </head> <body> <ul class=\"nav justify-content-end\"> <li class=\"nav-item\"> <a class=\"nav-link active\" href=\"#\">Usuario</a> </li> <li class=\"nav-item\"> <a class=\"nav-link\" th:href=\"@{/logout}\">Cerrar sesi\u00f3n</a> </li> </ul> <div class=\"container\"> <div class=\"col-sm-4\"> </div> <div class=\"col-sm-4\"> <form th:action=\"@{/users}\" method=\"post\" th:object=\"${detalle}\"> <div class=\"form-group\"> <input type=\"text\" th:field=\"*{clave}\" class=\"form-control\" id=\"clave\" aria-describedby=\"claveHelp\" placeholder=\"Ingresa nombre de la clave\"> <small id=\"inClave\" class=\"form-text text-muted\">Nombre de la clave que se almacenar\u00e1 en sesi\u00f3n.</small> </div> <div class=\"form-group\"> <input type=\"text\" th:field=\"*{valor}\" class=\"form-control\" id=\"valor\" aria-describedby=\"valorHelp\" placeholder=\"Ingresa el contenido\"> <small id=\"inValor\" class=\"form-text text-muted\">Contenido de la clave que se almacenar\u00e1 en sesi\u00f3n.</small> </div> <button type=\"submit\" class=\"btn btn-primary\">Agregar</button> </form> </div> <div class=\"col-sm-4\"> </div> <div class=\"col-sm-12\"> <table class=\"table\"> <thead> <tr> <th scope=\"col\">clave</th> <th scope=\"col\">valor</th> </tr> </thead> <tbody> <tr th:each=\"detalle: ${valores}\"> <td th:text=\"${detalle.clave}\" /> <td th:text=\"${detalle.valor}\" /> </tr> </tbody> </table> </div> </div> </body> </html> /gs-spring-security/src/main/resources/templates home.html <!DOCTYPE html> <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\"> <head> <title>Iniciar Sesi\u00f3n</title> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css \" integrity=\"sha384- ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"> </head> <body> <ul class=\"nav justify-content-end\"> <li class=\"nav-item\"> <a class=\"nav-link active\" href=\"/user\">Usuario</a> </li> <li class=\"nav-item\"> <a class=\"nav-link active\" href=\"/admin\">Administrador</a> </li> <li class=\"nav-item\"> <a class=\"nav-link\" th:href=\"@{/logout}\">Cerrar sesi\u00f3n</a> </li> </ul> <div class=\"container\"> <div class=\"row\"> <div class=\"col-sm-4\"> </div> <div class=\"col-sm-4\"> <h1>P\u00e1gina principal</h1> </div> <div class=\"col-sm-4\"> </div> </div> </div> </body> </html> login.html <!DOCTYPE html> <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\"> <head> <title>Iniciar Sesi\u00f3n</title> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css \" integrity=\"sha384- ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"> </head> <body> <div class=\"container\"> <div class=\"row\"> <div class=\"col-sm-4\"> </div> <div class=\"col-sm-4\"> <form th:action=\"@{/login}\" method=\"post\" class=\"form-signin\"> <h3 class=\"form-signin-heading\" th:text=\"Credenciales\"></h3> <br /> <!-- el name debe ser: email --> <input type=\"text\" id=\"email\" name=\"email\" th:placeholder=\"Email\" class=\"form-control\" /> <br /> <!-- el name debe ser: password --> <input type=\"password\" th:placeholder=\"Password\" id=\"password\" name=\"password\" class=\"form-control\" /> <br /> <!-- param.error, se refiere a que no hubo \u00e9xito en el inicio de sesi\u00f3n --> <!-- en este caso param.error si falla viene con el valor de true --> <div align=\"center\" th:if=\"${param.error}\"> <p style=\"font-size: 20; color: #FF1C19;\">Verifica las credenciales.</p> </div> <button class=\"btn btn-lg btn-primary btn-block\" name=\"Submit\" value=\"Login\" type=\"Submit\" th:text=\"Login\"> </button> </form> </div> <div class=\"col-sm-4\"> </div> </div> </div> </body> </html> application.properties Archivo con las propiedades del proyecto. adem\u00e1s maneja la configuraci\u00f3n de la persistencia. El archivo especificado en la base de datos, se crea al arranque. spring.cache.type=NONE spring.datasource.initialization-mode=always spring.datasource.platform=h2 # Configuraci\u00f3n H2. # En caso que no queramos un archivo # spring.datasource.url=jdbc:h2:mem:testdb spring.datasource.url=jdbc:h2:file:/Users/luisherrera/Desktop/TALENTO-PROS/MOD005/gs-spring-security/h2database spring.datasource.driverClassName=org.h2.Driver spring.datasource.username=sa spring.datasource.password= spring.jpa.database-platform=org.hibernate.dialect.H2Dialect # si queremos importar un sql spring.datasource.schema=classpath:db/migrations/schema.sql spring.datasource.data=classpath:db/seeds/data.sql /gs-spring-security/pom.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.6.RELEASE</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>cl.lherrera.thymeleaftTest</groupId> <artifactId>gs-spring-security</artifactId> <version>20.0.0</version> <packaging>war</packaging> <name>gs-spring-security</name> <description>Pruebas de thymeleaf</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-security</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> <scope>provided</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> <dependency> <groupId>org.springframework.security</groupId> <artifactId>spring-security-test</artifactId> <scope>test</scope> </dependency> <!-- thymeleaf --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-thymeleaf</artifactId> </dependency> <!-- thymeleaf ## --> <!-- DevsTools --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <optional>true</optional> </dependency> <!-- DevsTools # --> <dependency> <groupId>com.h2database</groupId> <artifactId>h2</artifactId> <scope>runtime</scope> </dependency> <dependency> <groupId>org.mybatis.spring.boot</groupId> <artifactId>mybatis-spring-boot-starter</artifactId> <version>2.1.1</version> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project> 5.2.2 TODO - 0010 Implementar la soluci\u00f3n con templates , es decir un index base y jpa-sqlite . https://www.javatpoint.com/spring-security-remember-me","title":"Lectura002"},{"location":"modulos/mod_5/uni005/lectura002/#unidad-52-seguridad","text":"Aplica a lo aprendido en la lectura anterior, el uso de un motor de base de datos, para obtener la informaci\u00f3n de los usuarios y sus roles a validar.","title":"Unidad 5.2 - Seguridad."},{"location":"modulos/mod_5/uni005/lectura002/#521-aplicacion-lectura-gs-spring-security","text":"Ojo con los nombres de los archivos .sql , o cualquiera que se llame en las propiedades, ya que se puede escapar un espacio y el error no es muy claro al mostrarnos el detalle, por lo tanto todos los archivos nombrados en las propiedades, deben estar muy clara y cuidadosamente escritos. El classpath , en las propiedades apunta a la carpeta resources , desde all\u00ed partimos. Al momento de usar H2 , hay que cambiar USER \u001d por ROLE_USER para que sea reconocido por el configurador \u001d y por el manejador de acceso correcto , el que redireciona \u001d.","title":"5.2.1 Aplicaci\u00f3n lectura - gs-spring-security"},{"location":"modulos/mod_5/uni005/lectura002/#cllherreragsss","text":"Este paquete contiene las clases que se generan solas en Spring , este c\u00f3digo no posee intervenciones personalizadas para la aplicaci\u00f3n. /gs-spring-security/src/main/java/cl/lherrera/gsss/GsSpringSecurityApplication.java Clase sin cambios es la que viene por defecto en una generaci\u00f3n de aplicaci\u00f3n con Spring . package cl.lherrera.gsss; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class GsSpringSecurityApplication { public static void main(String[] args) { SpringApplication.run(GsSpringSecurityApplication.class, args); } } /gs-spring-security/src/main/java/cl/lherrera/gsss/ServletInitializer.java Apartado que se genera en el caso que queramos que nuestra aplicaci\u00f3n empaquete su despliegue en un war . package cl.lherrera.gsss; import org.springframework.boot.builder.SpringApplicationBuilder; import org.springframework.boot.web.servlet.support.SpringBootServletInitializer; public class ServletInitializer extends SpringBootServletInitializer { @Override protected SpringApplicationBuilder configure(SpringApplicationBuilder application) { return application.sources(GsSpringSecurityApplication.class); } }","title":"cl.lherrera.gsss"},{"location":"modulos/mod_5/uni005/lectura002/#cllherreragsssconfig","text":"/gs-spring-security/src/main/java/cl/lherrera/gsss/config/CustomAuthenticationSuccessHandler.java En el momento de realizar un inicio de sesi\u00f3n, es decir cuando el formulario es aceptado, podemos personalizar el comportamiento que se tendr\u00e1, por ejemplo que usuarios seg\u00fan su rol sean re-dirigidos a sus respectivas rutas. para evitar un trabajo extra de acceso a sus funcionalidades por perfil. Estos segundos de ahorro de tiempo es una suma por todos los usuarios y por todo el tiempo que dure la aplicaci\u00f3n, aumentando la productividad que, es una de las principales justificaciones de las tecnolog\u00edas de la informaci\u00f3n. Hay que tener en consideraci\u00f3n que una aplicaci\u00f3n mvc no se comporta con un bffe , en esta arquitectura, no necesitamos enviar a un usuario a una ventana informativa en caso de error, solamente nos limitamos a responder un json indicando el c\u00f3digo de error y la re direcci\u00f3n corre por parte de los desarrolladores del frontEnd . En la arquitectura MVC debemos nosotros controlar estas situaciones configurando clases como las que se muestra a continuaci\u00f3n. package cl.lherrera.gsss.config; import java.io.IOException; import java.util.Set; import javax.servlet.ServletException; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.context.annotation.Configuration; import org.springframework.security.core.Authentication; import org.springframework.security.core.authority.AuthorityUtils; import org.springframework.security.web.authentication.AuthenticationSuccessHandler; @Configuration public class CustomAuthenticationSuccessHandler implements AuthenticationSuccessHandler { private static Logger logger = LoggerFactory.getLogger(CustomAuthenticationSuccessHandler.class); @Override public void onAuthenticationSuccess(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication) throws IOException, ServletException { Set<String> roles = AuthorityUtils.authorityListToSet(authentication.getAuthorities()); logger.info(\"manejador redirecci\u00f3n personal roles: \" + roles.toString()); if (roles.contains(\"ROLE_ADMIN\")) { httpServletResponse.sendRedirect(\"/admin\"); } else { httpServletResponse.sendRedirect(\"/user\"); } } } /gs-spring-security/src/main/java/cl/lherrera/gsss/config/WebSecurityConfig.java Java, y en realidad el servidor, en nuestro caso Apache Tomcat , posee formas de administrar el ingreso al sistema de una forma muy segura, con implementaciones que se rigen a fuertes protocolos de seguridad en cuanto al cifrado y transporte de la informaci\u00f3n de las credenciales y cuidado de las dem\u00e1s peticiones que se realicen al sitio en el que estamos trabajando. Estos m\u00e9todos de inicio de sesi\u00f3n van m\u00e1s all\u00e1 de crear un formulario que busque si el usuario existe puede entrar como lo que har\u00edamos r\u00e1pidamente si queremos un control de acceso. Para facilitar esta tarea, existen ya estrategias de seguridad que poseen sus propias implementaciones integradas a los servidores, ya que son ellos quienes trabajan las peticiones y respuestas usando nuestras implementaciones, pero usando sus propias formas de control. Estas formas son: Declarative Security Programmatic Security En la primera se declaran usuarios, contrase\u00f1as y roles en alg\u00fan lugar (a priori en la configuraci\u00f3n del servidor), puede ser alguna plataforma que posea contrase\u00f1as como el inicio de sesi\u00f3n en el propio computador o un grupo de usuarios en un active directory por ejemplo donde nosotros sabemos y controlamos las credenciales para luego utilizarlas. La segunda opci\u00f3n es poder hacer que nuestro propio sistema administre esta tarea. Ya que el control de los accesos y las ventanas de inicio o registro de usuarios sea administrada por nosotros. Cada una de estas opciones requiere mucha configuraci\u00f3n ya sea en el propio servidor (al que usualmente no tenemos acceso), es por este motivo que Spring nos brinda herramientas como Spring security , ya que permite estas configuraciones de forma mucho m\u00e1s sencilla que si la hici\u00e9ramos de forma manual, y con un estilo funcional exquisito, que nos permite ahorrarnos muchas horas de configuraciones. Utilizando FORM-BASED AUTHENTICATION tenemos una herramienta que no solamente permite administrar el ingreso al sistema bajo credenciales, si no que adem\u00e1s podemos personalizar su comportamiento seg\u00fan sean nuestras necesidades, como por ejemplo una ventana de inicio de sesi\u00f3n personalizada, lo mismo que para en caso de una respuesta m\u00e1s usable, adem\u00e1s de personalizar accesos seg\u00fan roles entre otras funcionalidades. Sin el manejador , podemos ver que ingresamos en memoria sin usar la base de datos. Al momento de ingresar roles(\"ADMIN\"); , este a diferencia de cuando lo hacemos en la base de datos lo guarda como ROLE_ADMIN . Hay que tener ojo con esto, pero el proyecto tiene la historia en git .\u001c /** * Sobreescribir este m\u00e9todo, permite habilitar * la autenticaci\u00f3n en memoria, adem\u00e1s de poder definir credenciales. */ @Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { String usuario = \"foo\"; String contrasenia = passwordEncoder().encode(\"bar\"); auth.inMemoryAuthentication() .withUser(usuario) .password(contrasenia) .roles(\"ADMIN\"); } package cl.lherrera.gsss.config; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity; import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter; import org.springframework.security.core.userdetails.UserDetailsService; import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder; import org.springframework.security.web.authentication.AuthenticationSuccessHandler; @Configuration @EnableWebSecurity public class WebSecurityConfig extends WebSecurityConfigurerAdapter { @Autowired private UserDetailsService userDetailsService; private AuthenticationSuccessHandler authenticationSuccessHandler; @Autowired public WebSecurityConfig(AuthenticationSuccessHandler authenticationSuccessHandler) { this.authenticationSuccessHandler = authenticationSuccessHandler; } @Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder() ); } /* * Dejamos la aplicaci\u00f3n distribu\u00eddos en direcctorios para poder restringir por * medio de estos direcctorios y le damos acceso seg\u00fan su rol. */ @Override public void configure(HttpSecurity http) throws Exception { http.csrf().disable() .authorizeRequests() .antMatchers(\"/admin/**\").hasAuthority(\"ROLE_ADMIN\") .antMatchers(\"/user/**\").hasAuthority(\"ROLE_USER\") .antMatchers(\"/login\").permitAll() // incluyendo el main .anyRequest().authenticated() .and() .formLogin() .loginPage(\"/login\") .successHandler(authenticationSuccessHandler)// esto es lo nuevo .failureUrl(\"/login?error=true\").usernameParameter(\"email\").passwordParameter(\"password\") // p\u00e1gina por defecto en caso de \u00e9xito en el inicio de sesi\u00f3n. // se comenta para que no interfirera con la redirecci\u00f3n // .defaultSuccessUrl(\"/user\") .and() .exceptionHandling().accessDeniedPage(\"/recurso-prohibido\"); } /** * As\u00ed inicializamos el encoder. */ @Bean public BCryptPasswordEncoder passwordEncoder() { return new BCryptPasswordEncoder(); } }","title":"cl.lherrera.gsss.config"},{"location":"modulos/mod_5/uni005/lectura002/#cllherreragssscontroller","text":"Estas clases manejan las rutas que ejecutan los servicios de la aplicaci\u00f3n, Esta es la interfaz de comunicaci\u00f3n. /gs-spring-security/src/main/java/cl/lherrera/gsss/controller/ErrorController.java Maneja la petici\u00f3n de la vista cuando no tenemos acceso al recurso, en este caso cuando no sea el rol correcto que quiera cargar un recurso restringido se arroja un error 403, lo que har\u00e1 ser\u00e1 redireccionar a una vista personalizada para atenci\u00f3n del usuario, permitiendo agregar l\u00f3gica en caso que se requiera almacenar estos intentos por ejemplo lo podr\u00edamos hacer. package cl.lherrera.gsss.controller; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; @Controller public class ErrorController { @GetMapping(\"/recurso-prohibido\") public String recurso03() { return \"error/403\"; } } /gs-spring-security/src/main/java/cl/lherrera/gsss/controller/HomeController.java Solamente sirve para cargar la p\u00e1gina principal. package cl.lherrera.gsss.controller; import javax.servlet.http.HttpSession; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; @Controller public class HomeController { @GetMapping(path = { \"\", \"/\" }) public String home(HttpSession session) { return \"home\"; } } /gs-spring-security/src/main/java/cl/lherrera/gsss/controller/LoginController.java Se encarga de dirigir a la vista de login . package cl.lherrera.gsss.controller; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; @Controller public class LoginController { @GetMapping(\"/login\") public String login() { return \"login\"; } }","title":"cl.lherrera.gsss.controller"},{"location":"modulos/mod_5/uni005/lectura002/#cllherreragssscontrolleradmin","text":"Contiene el control de las peticiones que deber\u00edan se controladas solamente por un administrador. /gs-spring-security/src/main/java/cl/lherrera/gsss/controller/admin/AdminController.java Controlador encargado de dirigir las vistas del administrador. package cl.lherrera.gsss.controller.admin; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; @Controller public class AdminController { @GetMapping(\"/admin\") public String home() { return \"admin/homeAdmin\"; } }","title":"cl.lherrera.gsss.controller.admin"},{"location":"modulos/mod_5/uni005/lectura002/#cllherreragssscontrolleruser","text":"Contiene los controles a los servicios que solamente deber\u00eda poder realizar un usuario. /gs-spring-security/src/main/java/cl/lherrera/gsss/controller/user/UserController.java Controlador encargado de manejar la interacci\u00f3n con los servicios que le competen a los usuarios. En nuestro caso es el m\u00e1s implementado. package cl.lherrera.gsss.controller.user; import java.util.ArrayList; import java.util.List; import javax.servlet.http.HttpSession; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.servlet.ModelAndView; import org.springframework.web.servlet.view.RedirectView; import cl.lherrera.gsss.dto.DetalleDTO; @Controller public class UserController { @GetMapping(\"/user\") public ModelAndView home(HttpSession session) { ModelAndView modelAndView = new ModelAndView(\"user/homeUser\"); modelAndView.addObject(\"detalle\", new DetalleDTO()); modelAndView.addObject(\"valores\", session.getAttribute(\"valores\")); return modelAndView; } @PostMapping(\"/users\") public RedirectView home(HttpSession session, @ModelAttribute DetalleDTO detalles) { List<DetalleDTO> valores = new ArrayList<>(); // si los valores no vienen vacios se a\u00f1aden a los valores. if (session.getAttribute(\"valores\") != null) { List<DetalleDTO> valoresDeSesion = (List<DetalleDTO>) session.getAttribute(\"valores\"); // agrega todos los valores a la lista existente. valores.addAll(valoresDeSesion); } valores.add(detalles); // se reemplaza el valor de valores en la sesi\u00f3n, // se cambia por el nuevo valor de // valores. session.setAttribute(\"valores\", valores); return new RedirectView(\"/user\"); } }","title":"cl.lherrera.gsss.controller.user"},{"location":"modulos/mod_5/uni005/lectura002/#cllherreragsssdto","text":"El transportador de datos a la vista. /gs-spring-security/src/main/java/cl/lherrera/gsss/dto/DetalleDTO.java package cl.lherrera.gsss.dto; public class DetalleDTO { private String clave; private String valor; public DetalleDTO() { // TODO Auto-generated constructor stub } public DetalleDTO(String clave, String valor) { super(); this.clave = clave; this.valor = valor; } public String getClave() { return clave; } public void setClave(String clave) { this.clave = clave; } public String getValor() { return valor; } public void setValor(String valor) { this.valor = valor; } @Override public String toString() { return \"DetalleDTO [clave=\" + clave + \", valor=\" + valor + \"]\"; } }","title":"cl.lherrera.gsss.dto"},{"location":"modulos/mod_5/uni005/lectura002/#cllherreragsssmapper","text":"No estamos usando JPA , si no que mybatis ,\u001c por eso debemos hacer un Mapper , que haga la funci\u00f3n de DAO , implementando las consultas expl\u00edcitas como implementaci\u00f3n de cada servicio que podr\u00eda facilitar un DAO . Esto se realiza para mostrar el funcionamiento de otra herramienta diiferente a JPA .\u001c /gs-spring-security/src/main/java/cl/lherrera/gsss/mapper/UserMapper.java Al no utilizar jpa , debemos mapear el acceso a los datos, para no tener que implementar las interfaces, es que nos apoyamos en una librer\u00eda ibatis , que se encarga de la implementaci\u00f3n de estas interfaces utilizando el texto de sus anotaciones especiales para la consulta de datos. package cl.lherrera.gsss.mapper; import org.apache.ibatis.annotations.Mapper; import org.apache.ibatis.annotations.Param; import org.apache.ibatis.annotations.Select; import cl.lherrera.gsss.model.Users; @Mapper public interface UserMapper { @Select(\"select * from users where email = #{email}\") Users findByEmail(@Param(\"email\") String email); }","title":"cl.lherrera.gsss.mapper"},{"location":"modulos/mod_5/uni005/lectura002/#cllherreragsssmodel","text":"/gs-spring-security/src/main/java/cl/lherrera/gsss/model/Role.java Al no tener una tabla en la base de datos, usamos esta clase para poder administrar la cantidad de roles posibles desde esta clase enumerada. Es como si tuvi\u00e9ramos estos datos en una tabla, pero con la cantidad de registros, donde cada registro es un rol, entonces no deber\u00eda ser m\u00e1s que esta clase la que administre los roles, aunque esto depende del alcance de la escalabilidad \u001d esperada. package cl.lherrera.gsss.model; public enum Role { ROLE_ADMIN, ROLE_USER } /gs-spring-security/src/main/java/cl/lherrera/gsss/model/Users.java EL no usar JPA tambi\u00e9n provoca que los modelos cambien sus anotaciones. Entidad, en este caso no llamado as\u00ed por que no usamos JPA , este POJO es la forma de utilizarlo con mybatis , aunque en realidad es muy parecida a una entidad de jpa solo que, a simple vista, difiere en sus anotaciones . Su nombre en plural es intencional, ya que la forma en que Spring llama a su usuario registrado es User , entonces esto es para ahorrar los posibles conflictos que esto pueda provocar. Aunque basta con usar espa\u00f1ol u un est\u00e1ndar de nombres de la aplicaci\u00f3n como MYAPP_USER \u001d package cl.lherrera.gsss.model; import java.io.Serializable; public class Users implements Serializable { private static final long serialVersionUID = 539393250097912194L; private String email; private String password; private Role role; public Users() { // TODO Auto-generated constructor stub } public Users(String email, String password, Role role) { super(); this.email = email; this.password = password; this.role = role; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public Role getRole() { return role; } public void setRole(Role role) { this.role = role; } @Override public String toString() { return \"Users [email=\" + email + \", password=\" + password + \", role=\" + role + \"]\"; } }","title":"cl.lherrera.gsss.model"},{"location":"modulos/mod_5/uni005/lectura002/#cllherreragsssservice","text":"/gs-spring-security/src/main/java/cl/lherrera/gsss/service/AuthServiceImpl.java Este servicio nos permite usar la b\u00fasqueda de usuarios en la base de datos, este servicio es inyectado en WebSecurityConfig , as\u00ed personalizamos la b\u00fasqueda de las credenciales del usuario. Como todo servicio la l\u00f3gica de negocio ser\u00e1 la que se requiera para el negocio. package cl.lherrera.gsss.service; import java.util.ArrayList; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.security.core.GrantedAuthority; import org.springframework.security.core.authority.SimpleGrantedAuthority; import org.springframework.security.core.userdetails.UserDetails; import org.springframework.security.core.userdetails.User; import org.springframework.security.core.userdetails.UserDetailsService; import org.springframework.security.core.userdetails.UsernameNotFoundException; import org.springframework.stereotype.Service; import cl.lherrera.gsss.mapper.UserMapper; import cl.lherrera.gsss.model.Users; @Service public class AuthServiceImpl implements UserDetailsService { @Autowired private UserMapper userMapper; @Override public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException { Users users = userMapper.findByEmail(email); if (users == null) throw new UsernameNotFoundException(email); List<GrantedAuthority> authorities = new ArrayList<>(); String role = users.getRole().toString(); authorities.add(new SimpleGrantedAuthority(role) ); User usuarioSistema = new User( users.getEmail(), users.getPassword(), authorities ); return usuarioSistema; } }","title":"cl.lherrera.gsss.service"},{"location":"modulos/mod_5/uni005/lectura002/#gs-spring-securitysrcmainresourcesdbmigrations","text":"Si queremos, podemos hacer partir una aplicaci\u00f3n con un DDL personalizado y lo podemos ir personalizando mientras dure la vida de la aplicaci\u00f3n, de esta forma. podemos ir actualizando este archivo y un nuevo desarrollador, siempre tendr\u00e1 la estructura actualizada, aunque con JPA esta se arma sola con lo que le digamos en las entidades. schema.sql Como estamos importando una base de datos, el esquema lo indicamos en este archivo. Se crea una tabla la que es eliminada en cada inicio de la aplicaci\u00f3n y creada vac\u00eda nuevamente. DROP TABLE if exists users; create table users(email varchar, password varchar, role varchar);","title":"/gs-spring-security/src/main/resources/db/migrations"},{"location":"modulos/mod_5/uni005/lectura002/#gs-spring-securitysrcmainresourcesdbseeds","text":"Adem\u00e1s de la estructura, podemos cargar datos iniciales, como para por ejemplo para hacer pruebas con datos iniciales falsos. Ejecutamos el seed . En este caso para cargar las credenciales con las que haremos pruebas. data.sql Como la tabla est\u00e1 vac\u00eda, ingresaremos los datos desde el siguiente archivo, el cual siempre ingresar\u00e1 datos en una tabla users vac\u00eda. La contrase\u00f1a es 1234 para ambos casos, se realiza la encriptaci\u00f3n usando https://bcrypt-generator.com/ , ya que as\u00ed lo exige la implementaci\u00f3n de Spring security . insert into users(email, password, role) values ('mail@fake.dev','$2y$12$x2/D0RmnpJFC0ZNbbDr6j.cPYFl9d/8hbNGFf8tQisA8AN47KGfqK','ROLE_USER'); insert into users(email, password, role) values ('mail2@fake.dev', '$2y$12$x2/D0RmnpJFC0ZNbbDr6j.cPYFl9d/8hbNGFf8tQisA8AN47KGfqK', 'ROLE_ADMIN');","title":"/gs-spring-security/src/main/resources/db/seeds"},{"location":"modulos/mod_5/uni005/lectura002/#gs-spring-securitysrcmainresourcestemplatesadmin","text":"homeAdmin.html Vista para presentar el men\u00fa de los administradores. <!DOCTYPE html> <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\"> <head> <title>Inicio Administrador</title> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css \" integrity=\"sha384- ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"> </head> <body> <ul class=\"nav justify-content-end\"> <li class=\"nav-item\"><a class=\"nav-link active\" href=\"#\">Administrador</a> </li> <li class=\"nav-item\"><a class=\"nav-link\" th:href=\"@{/logout}\">Cerrar sesion</a></li> </ul> <p>Bienvenido!</p> </body> </html>","title":"/gs-spring-security/src/main/resources/templates/admin"},{"location":"modulos/mod_5/uni005/lectura002/#gs-spring-securitysrcmainresourcestemplateserror","text":"403.html Vista para mostrar error 403 <!DOCTYPE html> <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\"> <head> <title>Inicio Administrador</title> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css \" integrity=\"sha384- ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"> </head> <body> <ul class=\"nav justify-content-end\"> <li class=\"nav-item\"><a class=\"nav-link active\" href=\"#\">Administrador</a> </li> <li class=\"nav-item\"><a class=\"nav-link\" th:href=\"@{/logout}\">Cerrar sesion</a></li> </ul> <p>Bienvenido!</p> </body> </html>","title":"/gs-spring-security/src/main/resources/templates/error"},{"location":"modulos/mod_5/uni005/lectura002/#gs-spring-securitysrcmainresourcestemplatesuser","text":"homeUser.html Es en esta vista donde tenemos la mayor de las implementaciones de la vista, esto es por que el usuario puede guardar claves y valores para el ejemplo de la sesi\u00f3n, y la interacci\u00f3n est\u00e1 ac\u00e1. Las otras vistas son solamente de muestras para ejemplificar los accesos, no poseen mayor interacci\u00f3n. <!DOCTYPE html> <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\"> <head> <title>Inicio Usuario</title> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css \" integrity=\"sha384- ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"> </head> <body> <ul class=\"nav justify-content-end\"> <li class=\"nav-item\"> <a class=\"nav-link active\" href=\"#\">Usuario</a> </li> <li class=\"nav-item\"> <a class=\"nav-link\" th:href=\"@{/logout}\">Cerrar sesi\u00f3n</a> </li> </ul> <div class=\"container\"> <div class=\"col-sm-4\"> </div> <div class=\"col-sm-4\"> <form th:action=\"@{/users}\" method=\"post\" th:object=\"${detalle}\"> <div class=\"form-group\"> <input type=\"text\" th:field=\"*{clave}\" class=\"form-control\" id=\"clave\" aria-describedby=\"claveHelp\" placeholder=\"Ingresa nombre de la clave\"> <small id=\"inClave\" class=\"form-text text-muted\">Nombre de la clave que se almacenar\u00e1 en sesi\u00f3n.</small> </div> <div class=\"form-group\"> <input type=\"text\" th:field=\"*{valor}\" class=\"form-control\" id=\"valor\" aria-describedby=\"valorHelp\" placeholder=\"Ingresa el contenido\"> <small id=\"inValor\" class=\"form-text text-muted\">Contenido de la clave que se almacenar\u00e1 en sesi\u00f3n.</small> </div> <button type=\"submit\" class=\"btn btn-primary\">Agregar</button> </form> </div> <div class=\"col-sm-4\"> </div> <div class=\"col-sm-12\"> <table class=\"table\"> <thead> <tr> <th scope=\"col\">clave</th> <th scope=\"col\">valor</th> </tr> </thead> <tbody> <tr th:each=\"detalle: ${valores}\"> <td th:text=\"${detalle.clave}\" /> <td th:text=\"${detalle.valor}\" /> </tr> </tbody> </table> </div> </div> </body> </html>","title":"/gs-spring-security/src/main/resources/templates/user"},{"location":"modulos/mod_5/uni005/lectura002/#gs-spring-securitysrcmainresourcestemplates","text":"home.html <!DOCTYPE html> <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\"> <head> <title>Iniciar Sesi\u00f3n</title> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css \" integrity=\"sha384- ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"> </head> <body> <ul class=\"nav justify-content-end\"> <li class=\"nav-item\"> <a class=\"nav-link active\" href=\"/user\">Usuario</a> </li> <li class=\"nav-item\"> <a class=\"nav-link active\" href=\"/admin\">Administrador</a> </li> <li class=\"nav-item\"> <a class=\"nav-link\" th:href=\"@{/logout}\">Cerrar sesi\u00f3n</a> </li> </ul> <div class=\"container\"> <div class=\"row\"> <div class=\"col-sm-4\"> </div> <div class=\"col-sm-4\"> <h1>P\u00e1gina principal</h1> </div> <div class=\"col-sm-4\"> </div> </div> </div> </body> </html> login.html <!DOCTYPE html> <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\"> <head> <title>Iniciar Sesi\u00f3n</title> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css \" integrity=\"sha384- ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"> </head> <body> <div class=\"container\"> <div class=\"row\"> <div class=\"col-sm-4\"> </div> <div class=\"col-sm-4\"> <form th:action=\"@{/login}\" method=\"post\" class=\"form-signin\"> <h3 class=\"form-signin-heading\" th:text=\"Credenciales\"></h3> <br /> <!-- el name debe ser: email --> <input type=\"text\" id=\"email\" name=\"email\" th:placeholder=\"Email\" class=\"form-control\" /> <br /> <!-- el name debe ser: password --> <input type=\"password\" th:placeholder=\"Password\" id=\"password\" name=\"password\" class=\"form-control\" /> <br /> <!-- param.error, se refiere a que no hubo \u00e9xito en el inicio de sesi\u00f3n --> <!-- en este caso param.error si falla viene con el valor de true --> <div align=\"center\" th:if=\"${param.error}\"> <p style=\"font-size: 20; color: #FF1C19;\">Verifica las credenciales.</p> </div> <button class=\"btn btn-lg btn-primary btn-block\" name=\"Submit\" value=\"Login\" type=\"Submit\" th:text=\"Login\"> </button> </form> </div> <div class=\"col-sm-4\"> </div> </div> </div> </body> </html> application.properties Archivo con las propiedades del proyecto. adem\u00e1s maneja la configuraci\u00f3n de la persistencia. El archivo especificado en la base de datos, se crea al arranque. spring.cache.type=NONE spring.datasource.initialization-mode=always spring.datasource.platform=h2 # Configuraci\u00f3n H2. # En caso que no queramos un archivo # spring.datasource.url=jdbc:h2:mem:testdb spring.datasource.url=jdbc:h2:file:/Users/luisherrera/Desktop/TALENTO-PROS/MOD005/gs-spring-security/h2database spring.datasource.driverClassName=org.h2.Driver spring.datasource.username=sa spring.datasource.password= spring.jpa.database-platform=org.hibernate.dialect.H2Dialect # si queremos importar un sql spring.datasource.schema=classpath:db/migrations/schema.sql spring.datasource.data=classpath:db/seeds/data.sql","title":"/gs-spring-security/src/main/resources/templates"},{"location":"modulos/mod_5/uni005/lectura002/#gs-spring-securitypomxml","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.6.RELEASE</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>cl.lherrera.thymeleaftTest</groupId> <artifactId>gs-spring-security</artifactId> <version>20.0.0</version> <packaging>war</packaging> <name>gs-spring-security</name> <description>Pruebas de thymeleaf</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-security</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> <scope>provided</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> <dependency> <groupId>org.springframework.security</groupId> <artifactId>spring-security-test</artifactId> <scope>test</scope> </dependency> <!-- thymeleaf --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-thymeleaf</artifactId> </dependency> <!-- thymeleaf ## --> <!-- DevsTools --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <optional>true</optional> </dependency> <!-- DevsTools # --> <dependency> <groupId>com.h2database</groupId> <artifactId>h2</artifactId> <scope>runtime</scope> </dependency> <dependency> <groupId>org.mybatis.spring.boot</groupId> <artifactId>mybatis-spring-boot-starter</artifactId> <version>2.1.1</version> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project>","title":"/gs-spring-security/pom.xml"},{"location":"modulos/mod_5/uni005/lectura002/#522-todo-0010","text":"Implementar la soluci\u00f3n con templates , es decir un index base y jpa-sqlite . https://www.javatpoint.com/spring-security-remember-me","title":"5.2.2 TODO - 0010"},{"location":"modulos/mod_5/uni006/lectura001/","text":"Rest Unidad 6.1 - Rest Lectura 1: Se implementa el mismo ejemplo de la lectura, en el cual se muestra como consumir un servicio web con java, para luego mostrar estos datos por consola. 6.1.1 Material complementario https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm . Se habla sobre arquitectura de software. 6.1.2 Servicio para consumir Para ayudar a los desarrolladores a realizar pruebas, sin tener que construir un backend , tenemos servicios que nos permiten consumir servicios de pruebas. Uno de estos servicios es: https://gturnquist-quoters.cfapps.io/api , que nos ofrece un servicio de \"citas\", inspiradoras. Entonces podemos consumir libremente estos servicios para poder probar el funcionamiento del consumo de servicios y de esta manera brindar experiencia en las personas que se est\u00e1n familiarizando con el desarrollo de servicios. Servicio 1: {\"\", \"/\"} URL: https://gturnquist-quoters.cfapps.io/api Nos entrega una lista de citas. Contiene la siguiente estructura: Respuesta esperada: [ { \"type\": \"success\", \"value\": { \"id\": 1, \"quote\": \"Working with Spring Boot is like pair-programming with the Spring developers.\" } }, { \"type\": \"success\", \"value\": { \"id\": 2, \"quote\": \"With Boot you deploy everywhere you can find a JVM basically.\" } } ] Servicio 2: \"/ramdom\" URL: https://gturnquist-quoters.cfapps.io/api/random Entrega una cita aleatoria de la lista que expone el servicio anterior. Respuesta esperada { \"type\": \"success\", \"value\": { \"id\": 3, \"quote\": \"Spring has come quite a ways in addressing developer enjoyment and ease of use since the last time I built an application using it.\" } } El proyecto consumir\u00e1 del servicio 2. 6.1.3 Ejemplo Lectura Es la implementaci\u00f3n usando Spring para consumir el servicio 2 de los expuestos en 6.1.2 .\u001c Estructura. ./ \u251c\u2500\u2500 HELP.md \u251c\u2500\u2500 mvnw \u251c\u2500\u2500 mvnw.cmd \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 cr \u2502 \u2502 \u2502 \u251c\u2500\u2500 ConsumeRestApplication.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 ServletInitializer.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 modelo \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 Quote.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 Value.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 servicio \u2502 \u2502 \u2502 \u251c\u2500\u2500 FetchDataService.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 FetchDataServiceImp.java \u2502 \u2502 \u251c\u2500\u2500 resources \u2502 \u2502 \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2502 \u2502 \u251c\u2500\u2500 static \u2502 \u2502 \u2502 \u2514\u2500\u2500 templates \u2502 \u2502 \u2514\u2500\u2500 webapp \u2502 \u2514\u2500\u2500 test \u2502 \u2514\u2500\u2500 java \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 cr \u2502 \u2514\u2500\u2500 ConsumeRestApplicationTests.java \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 cr \u2502 \u251c\u2500\u2500 ConsumeRestApplication.class \u2502 \u251c\u2500\u2500 ServletInitializer.class \u2502 \u251c\u2500\u2500 modelo \u2502 \u2502 \u251c\u2500\u2500 Quote.class \u2502 \u2502 \u2514\u2500\u2500 Value.class \u2502 \u2514\u2500\u2500 servicio \u2502 \u251c\u2500\u2500 FetchDataService.class \u2502 \u2514\u2500\u2500 FetchDataServiceImp.class \u251c\u2500\u2500 m2e-wtp \u2502 \u2514\u2500\u2500 web-resources \u2502 \u2514\u2500\u2500 META-INF \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 maven \u2502 \u2514\u2500\u2500 cl.lherrera \u2502 \u2514\u2500\u2500 consume-rest \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2514\u2500\u2500 pom.xml \u2514\u2500\u2500 test-classes \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 cr \u2514\u2500\u2500 ConsumeRestApplicationTests.class 34 directories, 23 files cl.lherrera.cr /consume-rest/src/main/java/cl/lherrera/cr/ConsumeRestApplication.java Se modifica para realizar una prueba. package cl.lherrera.cr; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.CommandLineRunner; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.context.annotation.Bean; import org.springframework.web.client.RestTemplate; import com.fasterxml.jackson.databind.ObjectMapper; import cl.lherrera.cr.modelo.Quote; import cl.lherrera.cr.servicio.FetchDataService; @SpringBootApplication public class ConsumeRestApplication { public static void main(String[] args) { SpringApplication.run(ConsumeRestApplication.class, args); } // para probar la aplicaci\u00f3n. private static final Logger logger = LoggerFactory.getLogger(ConsumeRestApplication.class); private ObjectMapper mapper = new ObjectMapper(); @Autowired private FetchDataService fetchDataService; @Bean public RestTemplate restTemplate() { return new RestTemplate(); } /** * esta es la forma funcional para no tener que crear una * clase aparte de lo que henos hecho. */ @Bean public CommandLineRunner run() throws Exception { return args -> { Quote quote = fetchDataService.fetchQuote(); logger.info(mapper.writeValueAsString(quote)); }; } } /consume-rest/src/main/java/cl/lherrera/cr/ServletInitializer.java Sin modificaciones. package cl.lherrera.cr; import org.springframework.boot.builder.SpringApplicationBuilder; import org.springframework.boot.web.servlet.support.SpringBootServletInitializer; public class ServletInitializer extends SpringBootServletInitializer { @Override protected SpringApplicationBuilder configure(SpringApplicationBuilder application) { return application.sources(ConsumeRestApplication.class); } } cl.lherrera.cr.modelo Los modelos por regla general, deben ser nombrados como su representante en el json . Esto quiere decir que /consume-rest/src/main/java/cl/lherrera/cr/modelo/Quote.java El modelo busca representar la siguiente estructura: { \"type\": \"success\", \"value\": { \"id\": 1, \"quote\": \"Working with Spring Boot is like pair-programming with the Spring developers.\" } } package cl.lherrera.cr.modelo; public class Quote { private String type; private Value value; public Quote() { // TODO Auto-generated constructor stub } public Quote(String type, Value value) { super(); this.type = type; this.value = value; } public String getType() { return type; } public void setType(String type) { this.type = type; } public Value getValue() { return value; } public void setValue(Value value) { this.value = value; } @Override public String toString() { return \"Quote [type=\" + type + \"]\"; } } /consume-rest/src/main/java/cl/lherrera/cr/modelo/Value.java EL objeto Quote , est\u00e1 compuesto por por otro objeto llamado Value , este se debe representar de la siguiente forma: En la gu\u00eda tienen estos nombres que podr\u00edan confundir el String quote con Quote , se sugiere replantear el nombre del modelo Quote ya que este mismo objeto, posee un atributo con ese mismo nombre que puede causar confusi\u00f3n. package cl.lherrera.cr.modelo; public class Value { private Integer id; private String quote; public Value() { // TODO Auto-generated constructor stub } public Value(Integer id, String quote) { super(); this.id = id; this.quote = quote; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getQuote() { return quote; } public void setQuote(String quote) { this.quote = quote; } @Override public String toString() { return \"Value [id=\" + id + \", quote=\" + quote + \"]\"; } } cl.lherrera.cr.servicio La palabra Fetch es como ir a buscar , es por eso que se menciona de esta forma. /consume-rest/src/main/java/cl/lherrera/cr/servicio/FetchDataService.java package cl.lherrera.cr.servicio; import cl.lherrera.cr.modelo.Quote; public interface FetchDataService { Quote fetchQuote(); } /consume-rest/src/main/java/cl/lherrera/cr/servicio/FetchDataServiceImp.java package cl.lherrera.cr.servicio; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.stereotype.Service; import org.springframework.web.client.RestTemplate; import cl.lherrera.cr.modelo.Quote; @Service public class FetchDataServiceImp implements FetchDataService { @Value(\"${endpoints.quote}\") private String quoteEndpoint; private RestTemplate restTemplate; /** * https://stackoverflow.com/questions/40620000/spring-autowire-on-properties-vs-constructor */ @Autowired public FetchDataServiceImp(RestTemplate restTemplate) { this.restTemplate = restTemplate; } @Override public Quote fetchQuote() { // env\u00edo de la petici\u00f3n GET. Transforma el Json de la respuesta en // un objeto Quote. return restTemplate.getForObject(quoteEndpoint, Quote.class); } } /consume-rest/src/main/resources application.properties Solamente incluiremos el endpoint para no tener que hacerlo en el c\u00f3digo. # servicio de prueba # Se inyecta a trav\u00e9s de la anotaci\u00f3n @Value, recibiendo el nombre de la propiedad a inyectar. endpoints.quote = https://gturnquist-quoters.cfapps.io/api/random TODO 0011.","title":"Lectura001"},{"location":"modulos/mod_5/uni006/lectura001/#rest-unidad-61-rest","text":"Lectura 1: Se implementa el mismo ejemplo de la lectura, en el cual se muestra como consumir un servicio web con java, para luego mostrar estos datos por consola.","title":"Rest Unidad 6.1 - Rest"},{"location":"modulos/mod_5/uni006/lectura001/#611-material-complementario","text":"https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm . Se habla sobre arquitectura de software.","title":"6.1.1 Material complementario"},{"location":"modulos/mod_5/uni006/lectura001/#612-servicio-para-consumir","text":"Para ayudar a los desarrolladores a realizar pruebas, sin tener que construir un backend , tenemos servicios que nos permiten consumir servicios de pruebas. Uno de estos servicios es: https://gturnquist-quoters.cfapps.io/api , que nos ofrece un servicio de \"citas\", inspiradoras. Entonces podemos consumir libremente estos servicios para poder probar el funcionamiento del consumo de servicios y de esta manera brindar experiencia en las personas que se est\u00e1n familiarizando con el desarrollo de servicios.","title":"6.1.2 Servicio para consumir"},{"location":"modulos/mod_5/uni006/lectura001/#servicio-1","text":"URL: https://gturnquist-quoters.cfapps.io/api Nos entrega una lista de citas. Contiene la siguiente estructura: Respuesta esperada: [ { \"type\": \"success\", \"value\": { \"id\": 1, \"quote\": \"Working with Spring Boot is like pair-programming with the Spring developers.\" } }, { \"type\": \"success\", \"value\": { \"id\": 2, \"quote\": \"With Boot you deploy everywhere you can find a JVM basically.\" } } ]","title":"Servicio 1: {\"\", \"/\"}"},{"location":"modulos/mod_5/uni006/lectura001/#servicio-2-ramdom","text":"URL: https://gturnquist-quoters.cfapps.io/api/random Entrega una cita aleatoria de la lista que expone el servicio anterior. Respuesta esperada { \"type\": \"success\", \"value\": { \"id\": 3, \"quote\": \"Spring has come quite a ways in addressing developer enjoyment and ease of use since the last time I built an application using it.\" } } El proyecto consumir\u00e1 del servicio 2.","title":"Servicio 2: \"/ramdom\""},{"location":"modulos/mod_5/uni006/lectura001/#613-ejemplo-lectura","text":"Es la implementaci\u00f3n usando Spring para consumir el servicio 2 de los expuestos en 6.1.2 .","title":"6.1.3 Ejemplo Lectura"},{"location":"modulos/mod_5/uni006/lectura001/#estructura","text":"./ \u251c\u2500\u2500 HELP.md \u251c\u2500\u2500 mvnw \u251c\u2500\u2500 mvnw.cmd \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 cr \u2502 \u2502 \u2502 \u251c\u2500\u2500 ConsumeRestApplication.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 ServletInitializer.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 modelo \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 Quote.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 Value.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 servicio \u2502 \u2502 \u2502 \u251c\u2500\u2500 FetchDataService.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 FetchDataServiceImp.java \u2502 \u2502 \u251c\u2500\u2500 resources \u2502 \u2502 \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2502 \u2502 \u251c\u2500\u2500 static \u2502 \u2502 \u2502 \u2514\u2500\u2500 templates \u2502 \u2502 \u2514\u2500\u2500 webapp \u2502 \u2514\u2500\u2500 test \u2502 \u2514\u2500\u2500 java \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 cr \u2502 \u2514\u2500\u2500 ConsumeRestApplicationTests.java \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 cr \u2502 \u251c\u2500\u2500 ConsumeRestApplication.class \u2502 \u251c\u2500\u2500 ServletInitializer.class \u2502 \u251c\u2500\u2500 modelo \u2502 \u2502 \u251c\u2500\u2500 Quote.class \u2502 \u2502 \u2514\u2500\u2500 Value.class \u2502 \u2514\u2500\u2500 servicio \u2502 \u251c\u2500\u2500 FetchDataService.class \u2502 \u2514\u2500\u2500 FetchDataServiceImp.class \u251c\u2500\u2500 m2e-wtp \u2502 \u2514\u2500\u2500 web-resources \u2502 \u2514\u2500\u2500 META-INF \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 maven \u2502 \u2514\u2500\u2500 cl.lherrera \u2502 \u2514\u2500\u2500 consume-rest \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2514\u2500\u2500 pom.xml \u2514\u2500\u2500 test-classes \u2514\u2500\u2500 cl \u2514\u2500\u2500 lherrera \u2514\u2500\u2500 cr \u2514\u2500\u2500 ConsumeRestApplicationTests.class 34 directories, 23 files","title":"Estructura."},{"location":"modulos/mod_5/uni006/lectura001/#cllherreracr","text":"/consume-rest/src/main/java/cl/lherrera/cr/ConsumeRestApplication.java Se modifica para realizar una prueba. package cl.lherrera.cr; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.CommandLineRunner; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.context.annotation.Bean; import org.springframework.web.client.RestTemplate; import com.fasterxml.jackson.databind.ObjectMapper; import cl.lherrera.cr.modelo.Quote; import cl.lherrera.cr.servicio.FetchDataService; @SpringBootApplication public class ConsumeRestApplication { public static void main(String[] args) { SpringApplication.run(ConsumeRestApplication.class, args); } // para probar la aplicaci\u00f3n. private static final Logger logger = LoggerFactory.getLogger(ConsumeRestApplication.class); private ObjectMapper mapper = new ObjectMapper(); @Autowired private FetchDataService fetchDataService; @Bean public RestTemplate restTemplate() { return new RestTemplate(); } /** * esta es la forma funcional para no tener que crear una * clase aparte de lo que henos hecho. */ @Bean public CommandLineRunner run() throws Exception { return args -> { Quote quote = fetchDataService.fetchQuote(); logger.info(mapper.writeValueAsString(quote)); }; } } /consume-rest/src/main/java/cl/lherrera/cr/ServletInitializer.java Sin modificaciones. package cl.lherrera.cr; import org.springframework.boot.builder.SpringApplicationBuilder; import org.springframework.boot.web.servlet.support.SpringBootServletInitializer; public class ServletInitializer extends SpringBootServletInitializer { @Override protected SpringApplicationBuilder configure(SpringApplicationBuilder application) { return application.sources(ConsumeRestApplication.class); } }","title":"cl.lherrera.cr"},{"location":"modulos/mod_5/uni006/lectura001/#cllherreracrmodelo","text":"Los modelos por regla general, deben ser nombrados como su representante en el json . Esto quiere decir que /consume-rest/src/main/java/cl/lherrera/cr/modelo/Quote.java El modelo busca representar la siguiente estructura: { \"type\": \"success\", \"value\": { \"id\": 1, \"quote\": \"Working with Spring Boot is like pair-programming with the Spring developers.\" } } package cl.lherrera.cr.modelo; public class Quote { private String type; private Value value; public Quote() { // TODO Auto-generated constructor stub } public Quote(String type, Value value) { super(); this.type = type; this.value = value; } public String getType() { return type; } public void setType(String type) { this.type = type; } public Value getValue() { return value; } public void setValue(Value value) { this.value = value; } @Override public String toString() { return \"Quote [type=\" + type + \"]\"; } } /consume-rest/src/main/java/cl/lherrera/cr/modelo/Value.java EL objeto Quote , est\u00e1 compuesto por por otro objeto llamado Value , este se debe representar de la siguiente forma: En la gu\u00eda tienen estos nombres que podr\u00edan confundir el String quote con Quote , se sugiere replantear el nombre del modelo Quote ya que este mismo objeto, posee un atributo con ese mismo nombre que puede causar confusi\u00f3n. package cl.lherrera.cr.modelo; public class Value { private Integer id; private String quote; public Value() { // TODO Auto-generated constructor stub } public Value(Integer id, String quote) { super(); this.id = id; this.quote = quote; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getQuote() { return quote; } public void setQuote(String quote) { this.quote = quote; } @Override public String toString() { return \"Value [id=\" + id + \", quote=\" + quote + \"]\"; } }","title":"cl.lherrera.cr.modelo"},{"location":"modulos/mod_5/uni006/lectura001/#cllherreracrservicio","text":"La palabra Fetch es como ir a buscar , es por eso que se menciona de esta forma. /consume-rest/src/main/java/cl/lherrera/cr/servicio/FetchDataService.java package cl.lherrera.cr.servicio; import cl.lherrera.cr.modelo.Quote; public interface FetchDataService { Quote fetchQuote(); } /consume-rest/src/main/java/cl/lherrera/cr/servicio/FetchDataServiceImp.java package cl.lherrera.cr.servicio; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.stereotype.Service; import org.springframework.web.client.RestTemplate; import cl.lherrera.cr.modelo.Quote; @Service public class FetchDataServiceImp implements FetchDataService { @Value(\"${endpoints.quote}\") private String quoteEndpoint; private RestTemplate restTemplate; /** * https://stackoverflow.com/questions/40620000/spring-autowire-on-properties-vs-constructor */ @Autowired public FetchDataServiceImp(RestTemplate restTemplate) { this.restTemplate = restTemplate; } @Override public Quote fetchQuote() { // env\u00edo de la petici\u00f3n GET. Transforma el Json de la respuesta en // un objeto Quote. return restTemplate.getForObject(quoteEndpoint, Quote.class); } }","title":"cl.lherrera.cr.servicio"},{"location":"modulos/mod_5/uni006/lectura001/#consume-restsrcmainresources","text":"application.properties Solamente incluiremos el endpoint para no tener que hacerlo en el c\u00f3digo. # servicio de prueba # Se inyecta a trav\u00e9s de la anotaci\u00f3n @Value, recibiendo el nombre de la propiedad a inyectar. endpoints.quote = https://gturnquist-quoters.cfapps.io/api/random","title":"/consume-rest/src/main/resources"},{"location":"modulos/mod_5/uni006/lectura001/#todo","text":"0011.","title":"TODO"},{"location":"modulos/mod_5/uni006/lectura002_001/","text":"Unidad 6.2.1 - Rest Creaci\u00f3n de un servicio probado con PostMan, el mismo de la lectura. 6.2.1.1 - Principios de dise\u00f1o de una API REST No usar verbos en las URIs . Los propios verbos como post, put, delete, get , se encargan de realizar las tareas para lo que est\u00e1n dise\u00f1adas, desde una sola URI , no quitar el protagonismo a estos verbos, \u001cpor ejemplo: /obtenerPersonas \u001c /personas (get) /crearPersona /personas (post) /actualizarPersona/2 /personas/2 (put) /eliminarPersona/2 \u001d /personas/2 (delete) Usar sustantivos plurales para todas sus peticiones: /autos /personas /polizas Utilizar los m\u00e9todos correctos para cumplir con el Nivel 2 al menos. GET : Se utiliza para obtener un recurso o una colecci\u00f3n de recursos. POST : Se utiliza para crear un recurso o una colecci\u00f3n de recursos. PUT : Se utiliza para actualizar un recurso o una colecci\u00f3n de recursos. (Es como un post con un identificador por URL, perfecto para el update.) DELETE : Se utiliza para actualizar un recurso o una colecci\u00f3n de recursos. Utilizaci\u00f3n de versionamiento en la API , ya que esta puede ser actualizada y hay clientes que consumen sin cambios la versi\u00f3n que exist\u00eda, es por eso que lo mejor es indicar la versi\u00f3n en la propia URI . /api/v1/autos /api/autos/?version=1 API-VERSION = 1 \"En el header \" Todas estas opciones deben ser controladas en la API . Los c\u00f3digos HTTP - Status Codes deben ser correctamente indicados para cumplir con el Nivel 2 . Algunos de estos c\u00f3digos son: 200 \u2013 OK : Todo ocurri\u00f3 bien, respuesta exitosa. 201 \u2013 OK : Nuevo recurso ha sido creado. 204 \u2013 OK : Recurso eliminado. 400 \u2013 Bad Request : Solicitud inv\u00e1lida. 401 \u2013 Unauthorized : Requiere autorizaci\u00f3n. 403 \u2013 Forbidden : Acceso prohibido. 404 \u2013 Not found : No se ha encontrado el recurso. 422 \u2013 Unprocessable Entity : No puede procesar una entidad. Por ejemplo cuando se env\u00eda un cuerpo err\u00f3neo en la petici\u00f3n. 6.2.1.2 - Ejemplo API - sin seguridad Servicios Servicios a probar: URL: http://localhost:8080 . Ingresar Usuario Ingresa usuarios al sistema, no tendremos resultados, si no hemos ejecutado antes esta petici\u00f3n, no tendremos resultados en la consulta de los usuarios. URI: /api/v1/users URL: http://localhost:8080/api/v1/users BODY : { \"name\":\"Luis\", \"alias\":\"lherrera\" } Obtener Usuarios Obtiene la lista de usuarios en el sistema. URI: /api/v1/users URL: http://localhost:8080/api/v1/users TIPO: GET HEADERS Recordar que en Postman , si se elige el body raw, y json el header se llena solo. { \"Content-Type\": \"application/json\" } Luego para actualizar: > PUT /api/v1/users HTTP/1.1 > Host: localhost:8080 > User-Agent: insomnia/6.5.4 > Content-Type: application/json > Accept: */* > Content-Length: 50 { \"id\": 1, \"name\":\"Luis\", \"alias\":\"lh1234\" } Luego eliminar > DELETE /api/v1/users HTTP/1.1 > Host: localhost:8080 > User-Agent: insomnia/6.5.4 > Content-Type: application/json > Accept: */* > Content-Length: 11 { \"id\": 1 } Estructura ./ \u251c\u2500\u2500 HELP.md \u251c\u2500\u2500 mvnw \u251c\u2500\u2500 mvnw.cmd \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 produce-rest.db \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 pr \u2502 \u2502 \u2502 \u251c\u2500\u2500 AppConfig.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 ProduceRestApplication.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 SQLiteDialect.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 ServletInitializer.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 controller \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 UserController.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 dto \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 UserDTO.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 modelo \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 entity \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 User.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 repository \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 UserRepository.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 servicio \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 UserService.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 UserServiceImp.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 utils \u2502 \u2502 \u2502 \u2514\u2500\u2500 DTOMapper.java \u2502 \u2502 \u251c\u2500\u2500 resources \u2502 \u2502 \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2502 \u2502 \u251c\u2500\u2500 database.properties \u2502 \u2502 \u2502 \u251c\u2500\u2500 static \u2502 \u2502 \u2502 \u2514\u2500\u2500 templates \u2502 \u2502 \u2514\u2500\u2500 webapp \u2502 \u2514\u2500\u2500 test \u2502 \u2514\u2500\u2500 java \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 pr \u2502 \u2514\u2500\u2500 ProduceRestApplicationTests.java \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 application.properties \u2502 \u251c\u2500\u2500 cl \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2514\u2500\u2500 pr \u2502 \u2502 \u2514\u2500\u2500 SQLiteDialect.class \u2502 \u2514\u2500\u2500 database.properties \u251c\u2500\u2500 m2e-wtp \u2502 \u2514\u2500\u2500 web-resources \u2502 \u2514\u2500\u2500 META-INF \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 maven \u2502 \u2514\u2500\u2500 cl.lherrera \u2502 \u2514\u2500\u2500 produce-rest \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2514\u2500\u2500 pom.xml \u2514\u2500\u2500 test-classes 34 directories, 25 files cl.lherrera.pr Paquete principal. Contiene las clases de inicio de aplicaci\u00f3n, adem\u00e1s de configuraci\u00f3n de la conexi\u00f3n a la base de datos y clases de configuraci\u00f3n. Estas clases, sobre todo las de configuraci\u00f3n de la base de datos, se pueden replicar a otros proyectos, ya que no tienen grandes cambios. Ver el detalle en cada una /produce-rest/src/main/java/cl/lherrera/pr/AppConfig.java Configuraci\u00f3n de conexi\u00f3n a la base de datos, utiliza su propio archivo de configuraci\u00f3n. package cl.lherrera.pr; import javax.sql.DataSource; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.PropertySource; import org.springframework.core.env.Environment; import org.springframework.jdbc.datasource.DriverManagerDataSource; @Configuration @ComponentScan(\"cl.lherrera.pr\") @PropertySource(\"classpath:database.properties\") public class AppConfig { @Autowired Environment environment; @Bean DataSource dataSource() { DriverManagerDataSource driverManagerDataSource = new DriverManagerDataSource(); driverManagerDataSource.setUrl(environment.getProperty(\"url\")); driverManagerDataSource.setUsername(environment.getProperty(\"username\")); driverManagerDataSource.setPassword(environment.getProperty(\"dbpassword\")); driverManagerDataSource.setDriverClassName(environment.getProperty(\"driverClassName\")); return driverManagerDataSource; } } /produce-rest/src/main/java/cl/lherrera/pr/ProduceRestApplication.java Sin cambios. package cl.lherrera.pr; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class ProduceRestApplication { public static void main(String[] args) { SpringApplication.run(ProduceRestApplication.class, args); } } /produce-rest/src/main/java/cl/lherrera/pr/ServletInitializer.java Sin cambios. package cl.lherrera.pr; import org.springframework.boot.builder.SpringApplicationBuilder; import org.springframework.boot.web.servlet.support.SpringBootServletInitializer; public class ServletInitializer extends SpringBootServletInitializer { @Override protected SpringApplicationBuilder configure(SpringApplicationBuilder application) { return application.sources(ProduceRestApplication.class); } } /produce-rest/src/main/java/cl/lherrera/pr/SQLiteDialect.java Archivo necesario para poder utilizar SQLITE . Lo \u00fanico que hay que adaptar en este archivo, es si es utilizado en otro proyecto, entonces se actualiza el nombre del paquete. package cl.lherrera.pr; import java.sql.Types; import org.hibernate.dialect.Dialect; import org.hibernate.dialect.function.StandardSQLFunction; import org.hibernate.dialect.function.SQLFunctionTemplate; import org.hibernate.dialect.function.VarArgsSQLFunction; import org.hibernate.type.StandardBasicTypes; public class SQLiteDialect extends Dialect { public SQLiteDialect() { super(); registerColumnType(Types.BIT, \"integer\"); registerColumnType(Types.TINYINT, \"tinyint\"); registerColumnType(Types.SMALLINT, \"smallint\"); registerColumnType(Types.INTEGER, \"integer\"); registerColumnType(Types.BIGINT, \"bigint\"); registerColumnType(Types.FLOAT, \"float\"); registerColumnType(Types.REAL, \"real\"); registerColumnType(Types.DOUBLE, \"double\"); registerColumnType(Types.NUMERIC, \"numeric\"); registerColumnType(Types.DECIMAL, \"decimal\"); registerColumnType(Types.CHAR, \"char\"); registerColumnType(Types.VARCHAR, \"varchar\"); registerColumnType(Types.LONGVARCHAR, \"longvarchar\"); registerColumnType(Types.DATE, \"date\"); registerColumnType(Types.TIME, \"time\"); registerColumnType(Types.TIMESTAMP, \"timestamp\"); registerColumnType(Types.BINARY, \"blob\"); registerColumnType(Types.VARBINARY, \"blob\"); registerColumnType(Types.LONGVARBINARY, \"blob\"); // registerColumnType(Types.NULL, \"null\"); registerColumnType(Types.BLOB, \"blob\"); registerColumnType(Types.CLOB, \"clob\"); registerColumnType(Types.BOOLEAN, \"integer\"); registerFunction(\"concat\", new VarArgsSQLFunction(StandardBasicTypes.STRING, \"\", \"||\", \"\")); registerFunction(\"mod\", new SQLFunctionTemplate(StandardBasicTypes.INTEGER, \"?1 % ?2\")); registerFunction(\"substr\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); registerFunction(\"substring\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); } public boolean supportsIdentityColumns() { return true; } public boolean hasDataTypeInIdentityColumn() { return false; // As specify in NHibernate dialect } public String getIdentityColumnString() { // return \"integer primary key autoincrement\"; return \"integer\"; } public String getIdentitySelectString() { return \"select last_insert_rowid()\"; } public boolean supportsLimit() { return true; } public String getLimitString(String query, boolean hasOffset) { return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? \" limit ? offset ?\" : \" limit ?\") .toString(); } public boolean bindLimitParametersInReverseOrder() { return true; } public boolean supportsTemporaryTables() { return true; } public String getCreateTemporaryTableString() { return \"create temporary table if not exists\"; } public boolean dropTemporaryTableAfterUse() { return false; } public boolean supportsCurrentTimestampSelection() { return true; } public boolean isCurrentTimestampSelectStringCallable() { return false; } public String getCurrentTimestampSelectString() { return \"select current_timestamp\"; } public boolean supportsUnionAll() { return true; } public boolean hasAlterTable() { return false; // As specify in NHibernate dialect } public boolean dropConstraints() { return false; } public String getAddColumnString() { return \"add column\"; } public String getForUpdateString() { return \"\"; } public boolean supportsOuterJoinForUpdate() { return false; } public String getDropForeignKeyString() { throw new UnsupportedOperationException(\"No drop foreign key syntax supported by SQLiteDialect\"); } public String getAddForeignKeyConstraintString(String constraintName, String[] foreignKey, String referencedTable, String[] primaryKey, boolean referencesPrimaryKey) { throw new UnsupportedOperationException(\"No add foreign key syntax supported by SQLiteDialect\"); } public String getAddPrimaryKeyConstraintString(String constraintName) { throw new UnsupportedOperationException(\"No add primary key syntax supported by SQLiteDialect\"); } public boolean supportsIfExistsBeforeTableName() { return true; } public boolean supportsCascadeDelete() { return false; } } cl.lherrera.pr.controller Contiene el controlador del usuario o UserController , que maneja el proceso de los verbos de la siguiente URI: /api/v1/users . /produce-rest/src/main/java/cl/lherrera/pr/controller/UserController.java package cl.lherrera.pr.controller; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpStatus; import org.springframework.web.bind.annotation.DeleteMapping; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.PutMapping; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.ResponseStatus; import org.springframework.web.bind.annotation.RestController; import cl.lherrera.pr.dto.UserDTO; import cl.lherrera.pr.servicio.UserService; @RestController @RequestMapping(\"/api/v1/users\") public class UserController { @Autowired private UserService userService; @GetMapping(path = { \"\", \"/\" }) @ResponseStatus(code = HttpStatus.OK) public List<UserDTO> findAll() { return userService.encontrarTodos(); } @GetMapping(path = \"/{id}\") @ResponseStatus(code = HttpStatus.OK) public UserDTO findOne(@PathVariable Long id) { return userService.encontrarPorId(id); } @PostMapping(path = { \"\", \"/\" }) @ResponseStatus(HttpStatus.CREATED) public void create(@RequestBody UserDTO user) { userService.ingresar(user); } @PutMapping(path = { \"\", \"/\" }) @ResponseStatus(HttpStatus.OK) void update(@RequestBody UserDTO userDTO) { userService.actualizar(userDTO); } @DeleteMapping @ResponseStatus(HttpStatus.OK) void delete(@RequestBody UserDTO userDTO) { userService.eliminar(userDTO); } } cl.lherrera.pr.dto Representaci\u00f3n del objeto de negocio, es la presentaci\u00f3n que posee el JSON de transporte, que, no siempre representa a una entidad en una tabla de la base de datos. En este caso, solamente contiene un DTO. /produce-rest/src/main/java/cl/lherrera/pr/dto/UserDTO.java package cl.lherrera.pr.dto; public class UserDTO { private Long id; private String name; private String alias; public UserDTO() { // TODO Auto-generated constructor stub } public UserDTO(Long id, String name, String alias) { super(); this.id = id; this.name = name; this.alias = alias; } public Long getId() { return id; } public void setId(Long id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getAlias() { return alias; } public void setAlias(String alias) { this.alias = alias; } @Override public String toString() { return \"UserDTO [id=\" + id + \", name=\" + name + \", alias=\" + alias + \"]\"; } } cl.lherrera.pr.modelo.entity /produce-rest/src/main/java/cl/lherrera/pr/modelo/entity/User.java Contiene la representaci\u00f3n en un objeto Java, tipo User , de la tabla user que deber\u00eda estar en la base de datos. package cl.lherrera.pr.modelo.entity; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; @Entity public class User { @Id @GeneratedValue(strategy = GenerationType.AUTO) private Long id; private String name; private String alias; public User() { // TODO Auto-generated constructor stub } public User(Long id, String name, String alias) { super(); this.id = id; this.name = name; this.alias = alias; } public Long getId() { return id; } public void setId(Long id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getAlias() { return alias; } public void setAlias(String alias) { this.alias = alias; } @Override public String toString() { return \"User [id=\" + id + \", name=\" + name + \", alias=\" + alias + \"]\"; } } cl.lherrera.pr.modelo.repository Clase encargada de crear el DAO, es preparada e inyectada por Spring . En este caso como haremos las operaciones b\u00e1sicas CRUD , no es necesario indicar ning\u00fan m\u00e9todo nuevo. /produce-rest/src/main/java/cl/lherrera/pr/modelo/repository/UserRepository.java package cl.lherrera.pr.modelo.repository; import org.springframework.data.jpa.repository.JpaRepository; import cl.lherrera.pr.modelo.entity.User; public interface UserRepository extends JpaRepository<User, Long> {} cl.lherrera.pr.servicio Contiene la l\u00f3gica de negocio de la aplicaci\u00f3n, esta la decidimos nosotros como desarrolladores, pensando en una hipot\u00e9tica situaci\u00f3n a resolver. Si por ejemplo en esta clase, son implementados los m\u00e9todos declarados en la interfaz, de todas las funcionalidades que deber\u00eda tener el sistema cuando se solicit\u00f3 su implementaci\u00f3n. /produce-rest/src/main/java/cl/lherrera/pr/servicio/UserService.java package cl.lherrera.pr.servicio; import java.util.List; import cl.lherrera.pr.dto.UserDTO; public interface UserService { void ingresar(UserDTO user); void actualizar(UserDTO user); List<UserDTO> encontrarTodos(); UserDTO encontrarPorId(Long id); void eliminar(UserDTO user); } /produce-rest/src/main/java/cl/lherrera/pr/servicio/UserServiceImp.java package cl.lherrera.pr.servicio; import java.util.List; import java.util.stream.Collectors; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import cl.lherrera.pr.dto.UserDTO; import cl.lherrera.pr.modelo.entity.User; import cl.lherrera.pr.modelo.repository.UserRepository; import cl.lherrera.pr.utils.DTOMapper; @Service public class UserServiceImp implements UserService { @Autowired UserRepository repoUsuario; @Override public void ingresar(UserDTO user) { repoUsuario.save(DTOMapper.toEntity(user)); } @Override public void actualizar(UserDTO user) { repoUsuario.save(DTOMapper.toEntity(user)); } @Override public List<UserDTO> encontrarTodos() { // cada elemento de la lista deber\u00e1 ser // convertido en su dto. return repoUsuario.findAll().stream() .map(usuario -> DTOMapper.toDTO(usuario)) .collect(Collectors.toList()); } @Override public UserDTO encontrarPorId(Long id) { User usuario = repoUsuario.findById(id).orElse(null); // TODO Auto-generated method stub return DTOMapper.toDTO(usuario); } @Override public void eliminar(UserDTO user) { User usuario = DTOMapper.toEntity(user); repoUsuario.delete(usuario); } } cl.lherrera.pr.utils Contiene la clase que facilita la tarea de adaptar la informaci\u00f3n que est\u00e1 en las tablas con la que se debe presentar al usuario. La forma de la tabla es muy similar si no igual a la que est\u00e1 en la base de datos, o bien dicho a la que es representada por la entidad; pero esto no siempre es as\u00ed, es por eso que el DTO es necesario. /produce-rest/src/main/java/cl/lherrera/pr/utils/DTOMapper.java package cl.lherrera.pr.utils; import cl.lherrera.pr.dto.UserDTO; import cl.lherrera.pr.modelo.entity.User; public class DTOMapper { private DTOMapper() { } private static void toEntity(UserDTO userDTO, User user) { user.setId(userDTO.getId()); user.setName(userDTO.getName()); user.setAlias(userDTO.getAlias()); } public static User toEntity(UserDTO userDTO) { User user = new User(); toEntity(userDTO, user); return user; } public static UserDTO toDTO(User user) { UserDTO userDTO = new UserDTO(); userDTO.setId(user.getId()); userDTO.setName(user.getName()); userDTO.setAlias(user.getAlias()); return userDTO; } } /produce-rest/src/main/resources Propiedades del proyecto. /application.properties spring.jpa.generate-ddl=true spring.jpa.database-platform=cl.lherrera.pr.SQLiteDialect spring.jpa.hibernate.ddl-auto=create-drop spring.jpa.show-sql=true spring.jpa.properties.hibernate.format_sql=true /database.properties driverClassName=org.sqlite.JDBC url=jdbc:sqlite:produce-rest.db username=jpaspring password=sa /produce-rest/pom.xml Dependencias del proyecto <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.7.RELEASE</version> <relativePath/> <!-- lookup parent from repository --> </parent> <groupId>cl.lherrera</groupId> <artifactId>produce-rest</artifactId> <version>20.0.0</version> <packaging>war</packaging> <name>produce-rest</name> <description>api mod5 uni5 lectura 2</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-jpa</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> <scope>provided</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> <!-- SQLITE - SUPPORT --> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> </dependency> <!-- SQLITE - SUPPORT #--> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project>","title":"Lectura002 001"},{"location":"modulos/mod_5/uni006/lectura002_001/#unidad-621-rest","text":"Creaci\u00f3n de un servicio probado con PostMan, el mismo de la lectura.","title":"Unidad 6.2.1 - Rest"},{"location":"modulos/mod_5/uni006/lectura002_001/#6211-principios-de-diseno-de-una-api-rest","text":"No usar verbos en las URIs . Los propios verbos como post, put, delete, get , se encargan de realizar las tareas para lo que est\u00e1n dise\u00f1adas, desde una sola URI , no quitar el protagonismo a estos verbos, \u001cpor ejemplo: /obtenerPersonas \u001c /personas (get) /crearPersona /personas (post) /actualizarPersona/2 /personas/2 (put) /eliminarPersona/2 \u001d /personas/2 (delete) Usar sustantivos plurales para todas sus peticiones: /autos /personas /polizas Utilizar los m\u00e9todos correctos para cumplir con el Nivel 2 al menos. GET : Se utiliza para obtener un recurso o una colecci\u00f3n de recursos. POST : Se utiliza para crear un recurso o una colecci\u00f3n de recursos. PUT : Se utiliza para actualizar un recurso o una colecci\u00f3n de recursos. (Es como un post con un identificador por URL, perfecto para el update.) DELETE : Se utiliza para actualizar un recurso o una colecci\u00f3n de recursos. Utilizaci\u00f3n de versionamiento en la API , ya que esta puede ser actualizada y hay clientes que consumen sin cambios la versi\u00f3n que exist\u00eda, es por eso que lo mejor es indicar la versi\u00f3n en la propia URI . /api/v1/autos /api/autos/?version=1 API-VERSION = 1 \"En el header \" Todas estas opciones deben ser controladas en la API . Los c\u00f3digos HTTP - Status Codes deben ser correctamente indicados para cumplir con el Nivel 2 . Algunos de estos c\u00f3digos son: 200 \u2013 OK : Todo ocurri\u00f3 bien, respuesta exitosa. 201 \u2013 OK : Nuevo recurso ha sido creado. 204 \u2013 OK : Recurso eliminado. 400 \u2013 Bad Request : Solicitud inv\u00e1lida. 401 \u2013 Unauthorized : Requiere autorizaci\u00f3n. 403 \u2013 Forbidden : Acceso prohibido. 404 \u2013 Not found : No se ha encontrado el recurso. 422 \u2013 Unprocessable Entity : No puede procesar una entidad. Por ejemplo cuando se env\u00eda un cuerpo err\u00f3neo en la petici\u00f3n.","title":"6.2.1.1 - Principios de dise\u00f1o de una API REST"},{"location":"modulos/mod_5/uni006/lectura002_001/#6212-ejemplo-api-sin-seguridad","text":"","title":"6.2.1.2 - Ejemplo API - sin seguridad"},{"location":"modulos/mod_5/uni006/lectura002_001/#servicios","text":"Servicios a probar: URL: http://localhost:8080 . Ingresar Usuario Ingresa usuarios al sistema, no tendremos resultados, si no hemos ejecutado antes esta petici\u00f3n, no tendremos resultados en la consulta de los usuarios. URI: /api/v1/users URL: http://localhost:8080/api/v1/users BODY : { \"name\":\"Luis\", \"alias\":\"lherrera\" } Obtener Usuarios Obtiene la lista de usuarios en el sistema. URI: /api/v1/users URL: http://localhost:8080/api/v1/users TIPO: GET HEADERS Recordar que en Postman , si se elige el body raw, y json el header se llena solo. { \"Content-Type\": \"application/json\" } Luego para actualizar: > PUT /api/v1/users HTTP/1.1 > Host: localhost:8080 > User-Agent: insomnia/6.5.4 > Content-Type: application/json > Accept: */* > Content-Length: 50 { \"id\": 1, \"name\":\"Luis\", \"alias\":\"lh1234\" } Luego eliminar > DELETE /api/v1/users HTTP/1.1 > Host: localhost:8080 > User-Agent: insomnia/6.5.4 > Content-Type: application/json > Accept: */* > Content-Length: 11 { \"id\": 1 }","title":"Servicios"},{"location":"modulos/mod_5/uni006/lectura002_001/#estructura","text":"./ \u251c\u2500\u2500 HELP.md \u251c\u2500\u2500 mvnw \u251c\u2500\u2500 mvnw.cmd \u251c\u2500\u2500 pom.xml \u251c\u2500\u2500 produce-rest.db \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main \u2502 \u2502 \u251c\u2500\u2500 java \u2502 \u2502 \u2502 \u2514\u2500\u2500 cl \u2502 \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2502 \u2514\u2500\u2500 pr \u2502 \u2502 \u2502 \u251c\u2500\u2500 AppConfig.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 ProduceRestApplication.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 SQLiteDialect.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 ServletInitializer.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 controller \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 UserController.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 dto \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 UserDTO.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 modelo \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 entity \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 User.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 repository \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 UserRepository.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 servicio \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 UserService.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 UserServiceImp.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 utils \u2502 \u2502 \u2502 \u2514\u2500\u2500 DTOMapper.java \u2502 \u2502 \u251c\u2500\u2500 resources \u2502 \u2502 \u2502 \u251c\u2500\u2500 application.properties \u2502 \u2502 \u2502 \u251c\u2500\u2500 database.properties \u2502 \u2502 \u2502 \u251c\u2500\u2500 static \u2502 \u2502 \u2502 \u2514\u2500\u2500 templates \u2502 \u2502 \u2514\u2500\u2500 webapp \u2502 \u2514\u2500\u2500 test \u2502 \u2514\u2500\u2500 java \u2502 \u2514\u2500\u2500 cl \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2514\u2500\u2500 pr \u2502 \u2514\u2500\u2500 ProduceRestApplicationTests.java \u2514\u2500\u2500 target \u251c\u2500\u2500 classes \u2502 \u251c\u2500\u2500 application.properties \u2502 \u251c\u2500\u2500 cl \u2502 \u2502 \u2514\u2500\u2500 lherrera \u2502 \u2502 \u2514\u2500\u2500 pr \u2502 \u2502 \u2514\u2500\u2500 SQLiteDialect.class \u2502 \u2514\u2500\u2500 database.properties \u251c\u2500\u2500 m2e-wtp \u2502 \u2514\u2500\u2500 web-resources \u2502 \u2514\u2500\u2500 META-INF \u2502 \u251c\u2500\u2500 MANIFEST.MF \u2502 \u2514\u2500\u2500 maven \u2502 \u2514\u2500\u2500 cl.lherrera \u2502 \u2514\u2500\u2500 produce-rest \u2502 \u251c\u2500\u2500 pom.properties \u2502 \u2514\u2500\u2500 pom.xml \u2514\u2500\u2500 test-classes 34 directories, 25 files","title":"Estructura"},{"location":"modulos/mod_5/uni006/lectura002_001/#cllherrerapr","text":"Paquete principal. Contiene las clases de inicio de aplicaci\u00f3n, adem\u00e1s de configuraci\u00f3n de la conexi\u00f3n a la base de datos y clases de configuraci\u00f3n. Estas clases, sobre todo las de configuraci\u00f3n de la base de datos, se pueden replicar a otros proyectos, ya que no tienen grandes cambios. Ver el detalle en cada una /produce-rest/src/main/java/cl/lherrera/pr/AppConfig.java Configuraci\u00f3n de conexi\u00f3n a la base de datos, utiliza su propio archivo de configuraci\u00f3n. package cl.lherrera.pr; import javax.sql.DataSource; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.PropertySource; import org.springframework.core.env.Environment; import org.springframework.jdbc.datasource.DriverManagerDataSource; @Configuration @ComponentScan(\"cl.lherrera.pr\") @PropertySource(\"classpath:database.properties\") public class AppConfig { @Autowired Environment environment; @Bean DataSource dataSource() { DriverManagerDataSource driverManagerDataSource = new DriverManagerDataSource(); driverManagerDataSource.setUrl(environment.getProperty(\"url\")); driverManagerDataSource.setUsername(environment.getProperty(\"username\")); driverManagerDataSource.setPassword(environment.getProperty(\"dbpassword\")); driverManagerDataSource.setDriverClassName(environment.getProperty(\"driverClassName\")); return driverManagerDataSource; } } /produce-rest/src/main/java/cl/lherrera/pr/ProduceRestApplication.java Sin cambios. package cl.lherrera.pr; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class ProduceRestApplication { public static void main(String[] args) { SpringApplication.run(ProduceRestApplication.class, args); } } /produce-rest/src/main/java/cl/lherrera/pr/ServletInitializer.java Sin cambios. package cl.lherrera.pr; import org.springframework.boot.builder.SpringApplicationBuilder; import org.springframework.boot.web.servlet.support.SpringBootServletInitializer; public class ServletInitializer extends SpringBootServletInitializer { @Override protected SpringApplicationBuilder configure(SpringApplicationBuilder application) { return application.sources(ProduceRestApplication.class); } } /produce-rest/src/main/java/cl/lherrera/pr/SQLiteDialect.java Archivo necesario para poder utilizar SQLITE . Lo \u00fanico que hay que adaptar en este archivo, es si es utilizado en otro proyecto, entonces se actualiza el nombre del paquete. package cl.lherrera.pr; import java.sql.Types; import org.hibernate.dialect.Dialect; import org.hibernate.dialect.function.StandardSQLFunction; import org.hibernate.dialect.function.SQLFunctionTemplate; import org.hibernate.dialect.function.VarArgsSQLFunction; import org.hibernate.type.StandardBasicTypes; public class SQLiteDialect extends Dialect { public SQLiteDialect() { super(); registerColumnType(Types.BIT, \"integer\"); registerColumnType(Types.TINYINT, \"tinyint\"); registerColumnType(Types.SMALLINT, \"smallint\"); registerColumnType(Types.INTEGER, \"integer\"); registerColumnType(Types.BIGINT, \"bigint\"); registerColumnType(Types.FLOAT, \"float\"); registerColumnType(Types.REAL, \"real\"); registerColumnType(Types.DOUBLE, \"double\"); registerColumnType(Types.NUMERIC, \"numeric\"); registerColumnType(Types.DECIMAL, \"decimal\"); registerColumnType(Types.CHAR, \"char\"); registerColumnType(Types.VARCHAR, \"varchar\"); registerColumnType(Types.LONGVARCHAR, \"longvarchar\"); registerColumnType(Types.DATE, \"date\"); registerColumnType(Types.TIME, \"time\"); registerColumnType(Types.TIMESTAMP, \"timestamp\"); registerColumnType(Types.BINARY, \"blob\"); registerColumnType(Types.VARBINARY, \"blob\"); registerColumnType(Types.LONGVARBINARY, \"blob\"); // registerColumnType(Types.NULL, \"null\"); registerColumnType(Types.BLOB, \"blob\"); registerColumnType(Types.CLOB, \"clob\"); registerColumnType(Types.BOOLEAN, \"integer\"); registerFunction(\"concat\", new VarArgsSQLFunction(StandardBasicTypes.STRING, \"\", \"||\", \"\")); registerFunction(\"mod\", new SQLFunctionTemplate(StandardBasicTypes.INTEGER, \"?1 % ?2\")); registerFunction(\"substr\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); registerFunction(\"substring\", new StandardSQLFunction(\"substr\", StandardBasicTypes.STRING)); } public boolean supportsIdentityColumns() { return true; } public boolean hasDataTypeInIdentityColumn() { return false; // As specify in NHibernate dialect } public String getIdentityColumnString() { // return \"integer primary key autoincrement\"; return \"integer\"; } public String getIdentitySelectString() { return \"select last_insert_rowid()\"; } public boolean supportsLimit() { return true; } public String getLimitString(String query, boolean hasOffset) { return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? \" limit ? offset ?\" : \" limit ?\") .toString(); } public boolean bindLimitParametersInReverseOrder() { return true; } public boolean supportsTemporaryTables() { return true; } public String getCreateTemporaryTableString() { return \"create temporary table if not exists\"; } public boolean dropTemporaryTableAfterUse() { return false; } public boolean supportsCurrentTimestampSelection() { return true; } public boolean isCurrentTimestampSelectStringCallable() { return false; } public String getCurrentTimestampSelectString() { return \"select current_timestamp\"; } public boolean supportsUnionAll() { return true; } public boolean hasAlterTable() { return false; // As specify in NHibernate dialect } public boolean dropConstraints() { return false; } public String getAddColumnString() { return \"add column\"; } public String getForUpdateString() { return \"\"; } public boolean supportsOuterJoinForUpdate() { return false; } public String getDropForeignKeyString() { throw new UnsupportedOperationException(\"No drop foreign key syntax supported by SQLiteDialect\"); } public String getAddForeignKeyConstraintString(String constraintName, String[] foreignKey, String referencedTable, String[] primaryKey, boolean referencesPrimaryKey) { throw new UnsupportedOperationException(\"No add foreign key syntax supported by SQLiteDialect\"); } public String getAddPrimaryKeyConstraintString(String constraintName) { throw new UnsupportedOperationException(\"No add primary key syntax supported by SQLiteDialect\"); } public boolean supportsIfExistsBeforeTableName() { return true; } public boolean supportsCascadeDelete() { return false; } }","title":"cl.lherrera.pr"},{"location":"modulos/mod_5/uni006/lectura002_001/#cllherreraprcontroller","text":"Contiene el controlador del usuario o UserController , que maneja el proceso de los verbos de la siguiente URI: /api/v1/users . /produce-rest/src/main/java/cl/lherrera/pr/controller/UserController.java package cl.lherrera.pr.controller; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpStatus; import org.springframework.web.bind.annotation.DeleteMapping; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.PutMapping; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.ResponseStatus; import org.springframework.web.bind.annotation.RestController; import cl.lherrera.pr.dto.UserDTO; import cl.lherrera.pr.servicio.UserService; @RestController @RequestMapping(\"/api/v1/users\") public class UserController { @Autowired private UserService userService; @GetMapping(path = { \"\", \"/\" }) @ResponseStatus(code = HttpStatus.OK) public List<UserDTO> findAll() { return userService.encontrarTodos(); } @GetMapping(path = \"/{id}\") @ResponseStatus(code = HttpStatus.OK) public UserDTO findOne(@PathVariable Long id) { return userService.encontrarPorId(id); } @PostMapping(path = { \"\", \"/\" }) @ResponseStatus(HttpStatus.CREATED) public void create(@RequestBody UserDTO user) { userService.ingresar(user); } @PutMapping(path = { \"\", \"/\" }) @ResponseStatus(HttpStatus.OK) void update(@RequestBody UserDTO userDTO) { userService.actualizar(userDTO); } @DeleteMapping @ResponseStatus(HttpStatus.OK) void delete(@RequestBody UserDTO userDTO) { userService.eliminar(userDTO); } }","title":"cl.lherrera.pr.controller"},{"location":"modulos/mod_5/uni006/lectura002_001/#cllherreraprdto","text":"Representaci\u00f3n del objeto de negocio, es la presentaci\u00f3n que posee el JSON de transporte, que, no siempre representa a una entidad en una tabla de la base de datos. En este caso, solamente contiene un DTO. /produce-rest/src/main/java/cl/lherrera/pr/dto/UserDTO.java package cl.lherrera.pr.dto; public class UserDTO { private Long id; private String name; private String alias; public UserDTO() { // TODO Auto-generated constructor stub } public UserDTO(Long id, String name, String alias) { super(); this.id = id; this.name = name; this.alias = alias; } public Long getId() { return id; } public void setId(Long id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getAlias() { return alias; } public void setAlias(String alias) { this.alias = alias; } @Override public String toString() { return \"UserDTO [id=\" + id + \", name=\" + name + \", alias=\" + alias + \"]\"; } }","title":"cl.lherrera.pr.dto"},{"location":"modulos/mod_5/uni006/lectura002_001/#cllherreraprmodeloentity","text":"/produce-rest/src/main/java/cl/lherrera/pr/modelo/entity/User.java Contiene la representaci\u00f3n en un objeto Java, tipo User , de la tabla user que deber\u00eda estar en la base de datos. package cl.lherrera.pr.modelo.entity; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; @Entity public class User { @Id @GeneratedValue(strategy = GenerationType.AUTO) private Long id; private String name; private String alias; public User() { // TODO Auto-generated constructor stub } public User(Long id, String name, String alias) { super(); this.id = id; this.name = name; this.alias = alias; } public Long getId() { return id; } public void setId(Long id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getAlias() { return alias; } public void setAlias(String alias) { this.alias = alias; } @Override public String toString() { return \"User [id=\" + id + \", name=\" + name + \", alias=\" + alias + \"]\"; } }","title":"cl.lherrera.pr.modelo.entity"},{"location":"modulos/mod_5/uni006/lectura002_001/#cllherreraprmodelorepository","text":"Clase encargada de crear el DAO, es preparada e inyectada por Spring . En este caso como haremos las operaciones b\u00e1sicas CRUD , no es necesario indicar ning\u00fan m\u00e9todo nuevo. /produce-rest/src/main/java/cl/lherrera/pr/modelo/repository/UserRepository.java package cl.lherrera.pr.modelo.repository; import org.springframework.data.jpa.repository.JpaRepository; import cl.lherrera.pr.modelo.entity.User; public interface UserRepository extends JpaRepository<User, Long> {}","title":"cl.lherrera.pr.modelo.repository"},{"location":"modulos/mod_5/uni006/lectura002_001/#cllherreraprservicio","text":"Contiene la l\u00f3gica de negocio de la aplicaci\u00f3n, esta la decidimos nosotros como desarrolladores, pensando en una hipot\u00e9tica situaci\u00f3n a resolver. Si por ejemplo en esta clase, son implementados los m\u00e9todos declarados en la interfaz, de todas las funcionalidades que deber\u00eda tener el sistema cuando se solicit\u00f3 su implementaci\u00f3n. /produce-rest/src/main/java/cl/lherrera/pr/servicio/UserService.java package cl.lherrera.pr.servicio; import java.util.List; import cl.lherrera.pr.dto.UserDTO; public interface UserService { void ingresar(UserDTO user); void actualizar(UserDTO user); List<UserDTO> encontrarTodos(); UserDTO encontrarPorId(Long id); void eliminar(UserDTO user); } /produce-rest/src/main/java/cl/lherrera/pr/servicio/UserServiceImp.java package cl.lherrera.pr.servicio; import java.util.List; import java.util.stream.Collectors; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import cl.lherrera.pr.dto.UserDTO; import cl.lherrera.pr.modelo.entity.User; import cl.lherrera.pr.modelo.repository.UserRepository; import cl.lherrera.pr.utils.DTOMapper; @Service public class UserServiceImp implements UserService { @Autowired UserRepository repoUsuario; @Override public void ingresar(UserDTO user) { repoUsuario.save(DTOMapper.toEntity(user)); } @Override public void actualizar(UserDTO user) { repoUsuario.save(DTOMapper.toEntity(user)); } @Override public List<UserDTO> encontrarTodos() { // cada elemento de la lista deber\u00e1 ser // convertido en su dto. return repoUsuario.findAll().stream() .map(usuario -> DTOMapper.toDTO(usuario)) .collect(Collectors.toList()); } @Override public UserDTO encontrarPorId(Long id) { User usuario = repoUsuario.findById(id).orElse(null); // TODO Auto-generated method stub return DTOMapper.toDTO(usuario); } @Override public void eliminar(UserDTO user) { User usuario = DTOMapper.toEntity(user); repoUsuario.delete(usuario); } }","title":"cl.lherrera.pr.servicio"},{"location":"modulos/mod_5/uni006/lectura002_001/#cllherreraprutils","text":"Contiene la clase que facilita la tarea de adaptar la informaci\u00f3n que est\u00e1 en las tablas con la que se debe presentar al usuario. La forma de la tabla es muy similar si no igual a la que est\u00e1 en la base de datos, o bien dicho a la que es representada por la entidad; pero esto no siempre es as\u00ed, es por eso que el DTO es necesario. /produce-rest/src/main/java/cl/lherrera/pr/utils/DTOMapper.java package cl.lherrera.pr.utils; import cl.lherrera.pr.dto.UserDTO; import cl.lherrera.pr.modelo.entity.User; public class DTOMapper { private DTOMapper() { } private static void toEntity(UserDTO userDTO, User user) { user.setId(userDTO.getId()); user.setName(userDTO.getName()); user.setAlias(userDTO.getAlias()); } public static User toEntity(UserDTO userDTO) { User user = new User(); toEntity(userDTO, user); return user; } public static UserDTO toDTO(User user) { UserDTO userDTO = new UserDTO(); userDTO.setId(user.getId()); userDTO.setName(user.getName()); userDTO.setAlias(user.getAlias()); return userDTO; } }","title":"cl.lherrera.pr.utils"},{"location":"modulos/mod_5/uni006/lectura002_001/#produce-restsrcmainresources","text":"Propiedades del proyecto. /application.properties spring.jpa.generate-ddl=true spring.jpa.database-platform=cl.lherrera.pr.SQLiteDialect spring.jpa.hibernate.ddl-auto=create-drop spring.jpa.show-sql=true spring.jpa.properties.hibernate.format_sql=true /database.properties driverClassName=org.sqlite.JDBC url=jdbc:sqlite:produce-rest.db username=jpaspring password=sa","title":"/produce-rest/src/main/resources"},{"location":"modulos/mod_5/uni006/lectura002_001/#produce-restpomxml","text":"Dependencias del proyecto <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.7.RELEASE</version> <relativePath/> <!-- lookup parent from repository --> </parent> <groupId>cl.lherrera</groupId> <artifactId>produce-rest</artifactId> <version>20.0.0</version> <packaging>war</packaging> <name>produce-rest</name> <description>api mod5 uni5 lectura 2</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-jpa</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> <scope>provided</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> <!-- SQLITE - SUPPORT --> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> </dependency> <!-- SQLITE - SUPPORT #--> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project>","title":"/produce-rest/pom.xml"},{"location":"modulos/mod_5/uni006/lectura002_002/","text":"Unidad 6.2.2 - Rest Aplicaci\u00f3n de seguridad basado en Java Web Token (JWT) al ejemplo anterior. La seguridad mediante JWT se realiza mediante la aplicaci\u00f3n de dos patrones, Adapter y Proxy , Cada medida de seguridad, se adapta para poder ser incluida en todas aquellas clases que implementan SecurityConfigurer<A, B> . El filtro se realiza con el patr\u00f3n PROXY que, mediante una serie de reglas, habilita o deshabilita los accesos a ciertas solicitudes o requests . 6.2.2.1 Servicios Servicio: Registrar usuarios registra un usuario dado un cuerpo, se obtiene como respuesta exitosa, un token , recordar que no se env\u00eda sin el \"Bearer \" ya que el \u001c resolveToken lo pide as\u00ed, esto es una especie de otra palabra secreta o dato \u00fanico que manejan pocas personas, para aumentar la seguridad.\u001c URL: http://localhost:8080/api/v1/users/signup TYPE: POST BODY { \"name\": \"Luis Herrera\", \"username\": \"lherrera\", \"email\": \"l.herrera.garnica@gmail.com\", \"password\": \"1234\", \"roles\": [\"ROLE_ADMIN\", \"ROLE_CLIENT\"] } Respuesta del momento, esta cambia en cada solicitud: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJsaGVycmVyYSIsImF1dGgiOlt7ImF1dGhvcml0eSI6IlJPTEVfQURNSU4ifSx7ImF1dGhvcml0eSI6IlJPTEVfQ0xJRU5UIn1dLCJpYXQiOjE1ODk1MDg2ODQsImV4cCI6MTU4OTUxMjI4NH0.m9mLeRsytrq3d2Ax7_XpNFyOMxO0l4lv3s9PmUkEWM8 Servicio: Consultar la lista de usuarios Lista a los usuarios si es que estamos registrados. URL: http://localhost:8080/api/v1/users/ TYPE: GET HEADER Se adiciona un campo Authorization que contiene el token entregado por el sistema, antecedido por \"bearer \" .\u001c { Authorization : Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJsaGVycmVyYSIsImF1dGgiOlt7ImF1dGhvcml0eSI6IlJPTEVfQURNSU4ifSx7ImF1dGhvcml0eSI6IlJPTEVfQ0xJRU5UIn1dLCJpYXQiOjE1ODk1MDg2ODQsImV4cCI6MTU4OTUxMjI4NH0.m9mLeRsytrq3d2Ax7_XpNFyOMxO0l4lv3s9PmUkEWM8 } Si ejecutamos la solicitud sin el campo Autorization Nombre que le damos en la configuraci\u00f3n de seguridad para analizar el token, es decir, si hacemos una solicitud, sin estar registrados en el sistema nos arroja el siguiente error: { \"timestamp\": \"2020-05-15T02:17:59.199+0000\", \"status\": 403, \"error\": \"Forbidden\", \"message\": \"Access Denied\", \"path\": \"/api/v1/users/\" } En caso contrario: Vemos que la contrase\u00f1a no es indicada, esto lo hacemos en la utilidad que convierte Usuarios a Usuarios DTO, en este cambio aplicamos la regla de negocio por seguridad, y seteamos \u001d el objeto parseado \u001d a objeto DTO a null . public static UserDTO toDTO(User user) { [ { \"id\": 1, \"name\": \"Luis Herrera\", \"username\": \"lherrera\", \"email\": \"l.herrera.garnica@gmail.com\", \"password\": null, \"roles\": [ \"ROLE_ADMIN\", \"ROLE_CLIENT\" ] } ] Servicio Iniciar sesi\u00f3n URL: http://localhost:8080/api/v1/users/signin?username=lherrera&password=1234 TYPE: POST, aunque tenga par\u00e1metros en la url , este concepto no se limita a esta descripci\u00f3n. De esta forma, nos aseguramos aunque las credenciales van en la url , no se ver\u00e1 por que la encapsula el POST . Si las credenciales est\u00e1n correctas, obtendremos el token. En caso contrario: { \"timestamp\": \"2020-05-15T02:34:05.917+0000\", \"status\": 500, \"error\": \"Internal Server Error\", \"message\": \"username o password invalido\", \"path\": \"/api/v1/users/signin\" } 6.2.2.2 Archivos modificados /produce-rest/src/main/resources /application.properties En las propiedades, ir\u00e1n los valores que utilizar\u00e1 la clase proveedora del token. 3.600.000 mili segundos, equivalen a una hora, es decir que el proveedor del token, debe considerar v\u00e1lido un token que haya generado hace m\u00e1ximo, una hora. spring.jpa.generate-ddl=true spring.jpa.database-platform=cl.lherrera.pr.SQLiteDialect spring.jpa.show-sql=true spring.jpa.hibernate.ddl-auto=create-drop spring.jpa.properties.hibernate.format_sql=true # Configuraci\u00f3n para el token. security.jwt.token.secret-key=DLatam-SecretKey security.jwt.token.expire-length=3600000 cl.lherrera.pr.modelo.entity Actualizamos las entidades del modelo, para poder cumplir con caracter\u00edsticas de configuraci\u00f3n de seguridad de Spring Security . Los modelos necesarios para trabajar con las credenciales. De GrantedAuthority implementamos el m\u00e9todo getAuthority que retorna el nombre del rol que indicamos en esta clase con los roles. Hacer esto es necesario para usar JWT . /produce-rest/src/main/java/cl/lherrera/pr/modelo/entity/Role.java El modelo debe implementar GrantedAuthority , cuando se usa una clase Enum , listamos los nombres iniciando ROLE_ , seguido por el nombre del rol. En el ejemplo son ROLE_ADMIN y ROLE_CLIENT . Posee un m\u00e9todo getAuthority() , el que debe ser implementado. Esto se realiza para que la implementaci\u00f3n de la seguridad identifique el rol. Es decir, Spring security , cuando necesite saber el rol o los roles que posee un usuario, utilizar\u00e1 la informaci\u00f3n entregada por gerAuthority() . de una clase que implemente o posea la forma de GrantedAuthority . La siguiente es una de las formas en que se puede representar el rol en una aplicaci\u00f3n. Esto es utilizando un Enum Class , suficiente cuando nuestros roles no sean muchos, sin m\u00e1s base, que la de poder aceptar mirarlos como atributos en una clase y que no sangren los ojos. Otra t\u00e9cnica es la utilizaci\u00f3n de una tabla en la base de datos que contenga la informaci\u00f3n de los roles. Esto es \u00fatil para cuando la cantidad de roles que posee la aplicaci\u00f3n, demande una mayor cantidad de roles, como lo ser\u00eda por ejemplo en una entidad educacional, donde hay profesores, estudiantes, directores, sub directores, etc. Si tenemos una gran aplicaci\u00f3n central, requerir\u00eda aplicar una tabla de roles; pero este no es el caso. Es por esto que se aplica la t\u00e9cnica de la clase Enum , y lo simplificamos adem\u00e1s de ahorrarnos la implementaci\u00f3n de un many to many , que no tiene mucho que ver con el negocio m\u00e1s all\u00e1 del contenido de las credenciales, donde solamente sea legible un nombre de usuario y una encriptada contrase\u00f1a. La informaci\u00f3n que posee la capa de seguridad, no cumplen otra funci\u00f3n m\u00e1s que la de utilizar t\u00e9cnicas complejas, para mantener identificado el origen que est\u00e1 solicitando informaci\u00f3n para luego entregarla al mismo punto. No garantiza que el transporte no sea interceptado por terceros, es por eso que la contrase\u00f1a es enviada encriptada. De esta forma si esta informaci\u00f3n llega a ser interceptada no puede ser utilizada directamente sin pasar por los algoritmos que est\u00e1n en nuestra aplicaci\u00f3n. Si la informaci\u00f3n es interceptada y utilizada, el algoritmo interno antes de corroborar con lo que se ingresa lo codifica, no lo compara directamente, por lo que la informaci\u00f3n que se intercept\u00f3, incluso la que est\u00e1 en la base de datos, no se puede utilizar directamente. Estas implementaciones no deben poder ser decodificadas \u001d, solamente codificadas \u001d o no ser\u00edan seguras, el valor siempre debe ser comparado con su valor ya codificado. Para que la informaci\u00f3n viaje con una capa adicional de seguridad con todos los datos codificados, esta se debe usar ssl , pero eso forma parte de configuraciones del servidor. package cl.lherrera.pr.modelo.entity; import org.springframework.security.core.GrantedAuthority; public enum Role implements GrantedAuthority { ROLE_ADMIN, ROLE_CLIENT; @Override public String getAuthority() { return name(); } } /produce-rest/src/main/java/cl/lherrera/pr/modelo/entity/User.java ElementCollection permite un acceso a getAuthority() de forma funcional. usuarioIntentandoIngresar.roles... por cada uno... verificar rol . Si usamos una tabla en la base de datos, esto debe tratarse con un manyToMany ; pero dado el caso de la Enum Class , es suficiente con anotar la lista de roles con @ElementCollection . fetch = FetchType.EAGER . Hay dos formas de traer( Fetch ) datos, una es la forma ansiosa ( EAGER ), y la forma perezosa ( LAZY ). En la forma ansiosa, se trae toda la informaci\u00f3n de los roles que posee el usuario, que en este caso tenemos dos roles, por lo que las peticiones en partes peque\u00f1as bajo demanda (como tener un mill\u00f3n de registros, no podemos tener todo eso en una sola consulta, el estilo LAZY lo soluciona, implementando t\u00e9cnicas que esperan el momento justo en que se necesita el dato para traerlo, requiere para eso, indudablemente mayor capacidad de procesamiento para estas tareas. Es por esta raz\u00f3n que el uso de LAZY debe estar justificado). package cl.lherrera.pr.modelo.entity; import java.util.List; import javax.persistence.ElementCollection; import javax.persistence.Entity; import javax.persistence.FetchType; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; @Entity public class User { @ElementCollection(fetch = FetchType.EAGER) private List<Role> roles; @Id @GeneratedValue(strategy = GenerationType.AUTO) private Long id; private String name; private String username; // este es el nombre por defecto private String email; private String password; public User(Long id, String name, String username, String email, String password) { super(); this.id = id; this.name = name; this.username = username; this.email = email; this.password = password; } public User() { } public List<Role> getRoles() { return roles; } public void setRoles(List<Role> roles) { this.roles = roles; } public Long getId() { return id; } public void setId(Long id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } } cl.lherrera.pr.modelo.repository Se adicionan m\u00e9todos necesarios para la implementaci\u00f3n de seguridad. /produce-rest/src/main/java/cl/lherrera/pr/modelo/repository/UserRepository.java package cl.lherrera.pr.modelo.repository; import org.springframework.data.jpa.repository.JpaRepository; import cl.lherrera.pr.modelo.entity.User; public interface UserRepository extends JpaRepository<User, Long> { // necesario para la autenticaci\u00f3n boolean existsByUsername(String username); User findByUsername(String username); } cl.lherrera.pr.security Las clases que deben ser implementadas para la gesti\u00f3n de las credenciales, son dos clases principales: JwtTokenFilterConfigurer : Para la gesti\u00f3n del token. WebSecurityConfig : Para la gesti\u00f3n de los accesos a los servicios que expone la aplicaci\u00f3n v\u00eda web, que en nuestro caso, la aplicaci\u00f3n es un servicio web. La t\u00e9cnica consiste en que JwtTokenFilterConfigurer , con el apoyo de sus clases, introduzca un filtro, que cree al usuario justo antes que se accione la validaci\u00f3n de usuario autenticado. Es decir, crea al usuario autenticado, antes que se valide, as\u00ed, existir\u00e1 ser\u00e1 validado y reconocido. Luego esta configuraci\u00f3n ser\u00e1 aplicada en WebSecurityConfig . De esta manera, la seguridad web , dispondr\u00e1 de la t\u00e9cnica de autenticaci\u00f3n mediante el uso de token, sin tener que depender del registro normal de acceso al sistema, la denominada autenticaci\u00f3n basada en formularios, aunque en el sistema front, exista un formulario la validaci\u00f3n ser\u00e1 realizada por el uso de un token. /produce-rest/src/main/java/cl/lherrera/pr/security/JwtTokenProvider.java Su misi\u00f3n es: No posee constructor, se ejecuta el m\u00e9todo init() , justo despu\u00e9s de ser inyectado. Consume en esos momentos, los valores de llave y duraci\u00f3n que est\u00e1n en las propiedades del proyecto. Crear un token, con una durabilidad suficiente para una sesi\u00f3n. Obtener la informaci\u00f3n del objeto Authentication que se ha creado con un token ya creado. Esto para tener los datos del usuario registrado, as\u00ed poder ocupar estos datos seg\u00fan lo necesitemos. Validar si un token dado, es v\u00e1lido o si es inv\u00e1lido(por ejemplo, que expir\u00f3). Nuestro proveedor de token , no implementa ninguna interfaz y est\u00e1 marcada como un @Component , por que Spring lo inyectar\u00e1 en WebSecurityConfig . Para poder aplicar el inicio de sesi\u00f3n mediante el uso de un token , en WebSecurityConfig , se inyecta JwtTokenProvider , cuando comienza la creaci\u00f3n de la configuraci\u00f3n para la web, y cuando se se finaliza la disposici\u00f3n de, qu\u00e9 peticiones est\u00e1n habilitadas y para quieres. Se aplica la autenticaci\u00f3n por token Los valores se inicializan en el ini() , y este se ejecuta con la anotaci\u00f3n @PostConstruct . package cl.lherrera.pr.security; import java.util.Base64; import java.util.Date; import java.util.List; import java.util.Objects; import java.util.stream.Collectors; import javax.annotation.PostConstruct; import javax.servlet.http.HttpServletRequest; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.http.HttpStatus; import org.springframework.security.authentication.UsernamePasswordAuthenticationToken; import org.springframework.security.core.Authentication; import org.springframework.security.core.authority.SimpleGrantedAuthority; import org.springframework.security.core.userdetails.UserDetails; import org.springframework.stereotype.Component; import cl.lherrera.pr.exception.RestServiceException; import cl.lherrera.pr.modelo.entity.Role; import cl.lherrera.pr.servicio.UserService; import io.jsonwebtoken.Claims; import io.jsonwebtoken.JwtException; import io.jsonwebtoken.Jwts; import io.jsonwebtoken.SignatureAlgorithm; @Component public class JwtTokenProvider { private Logger logger = LoggerFactory.getLogger(JwtTokenProvider.class); // propiedad @Value(\"${security.jwt.token.secret-key}\") private String secretKey; // propiedad @Value(\"${security.jwt.token.expire-length}\") private long validityInMilliseconds; // servicio Implementado @Autowired private UserService userService; /** * Spring calls methods annotated with @PostConstruct * only once, just after the initialization * of bean properties. * https://www.baeldung.com/spring-postconstruct-predestroy * * Asigna el valor de la clave secreta */ @PostConstruct protected void init() { secretKey = Base64.getEncoder().encodeToString(secretKey.getBytes()); logger.debug(\"LLave inicializada: \" + secretKey); } public String createToken(String username, List<Role> roles) { Claims claims = Jwts.claims().setSubject(username); List<SimpleGrantedAuthority> grats = roles.stream() .map(rol -> new SimpleGrantedAuthority(rol.getAuthority()) ) .filter(Objects::nonNull) .collect(Collectors.toList()); claims.put(\"auth\", grats); // expiraci\u00f3n del token Date now = new Date(); Date validity = new Date(now.getTime() + validityInMilliseconds); // creaci\u00f3n del token String token = Jwts.builder() .setClaims(claims) .setIssuedAt(now) .setExpiration(validity) .signWith(SignatureAlgorithm.HS256, secretKey) .compact(); return token; } /** * A partir del token se obtiene el nombre de usuario y luego, * se obtiene un `UserDetails`, que ya sabemos que es la * entidad que maneja como ususuario de sesi\u00f3n. */ public Authentication getAuthentication(String token) { UserDetails userDetails = userService.loadUserByUsername(getUsername(token)); UsernamePasswordAuthenticationToken autenticacion; autenticacion = new UsernamePasswordAuthenticationToken( userDetails, \"\", userDetails.getAuthorities() ); return autenticacion; } private String getUsername(String token) { String userName = Jwts.parser() .setSigningKey(secretKey) .parseClaimsJws(token) .getBody() .getSubject(); return userName; } /** * Quitamos \"Bearer \" del principio del token * esto es un acuerdo entre ambas partes con un encabezado * especial si es que as\u00ed se acuerda, esa referencia * ser\u00e1 tratada en este m\u00e9todo. */ public String resolveToken(HttpServletRequest req) { String bearerToken = req.getHeader(\"Authorization\"); if (bearerToken != null && bearerToken.startsWith(\"Bearer \")) { return bearerToken.substring(7); } return null; } /** * Si el token logra ser parseado, entonces se asume que es un * Token v\u00e1lido. `parseClaimsJws` analiza la llave (no un * token que exista hipoteticamente, la comparaci\u00f3n se * realiza entre el token que est\u00e1 en el request * y la clave cifrada de esta clase. cifrada * justo despu\u00e9s de construirse este * objeto `INIT`). */ public boolean validateToken(String token) { try { Jwts.parser().setSigningKey(secretKey).parseClaimsJws(token); return true; } catch (JwtException | IllegalArgumentException e) { throw new RestServiceException( \"Expired or invalid JWT token\", HttpStatus.INTERNAL_SERVER_ERROR ); } } } /produce-rest/src/main/java/cl/lherrera/pr/security/JwtTokenFilter.java Implementa OncePerRequestFilter , esto significa que sobre escribiendo el m\u00e9todo doFilterInternal , por cada una de las peticiones, el request ser\u00e1 analizado, y se confirmar\u00e1 su validez o no. package cl.lherrera.pr.security; import java.io.IOException; import javax.servlet.FilterChain; import javax.servlet.ServletException; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import org.springframework.security.core.Authentication; import org.springframework.security.core.context.SecurityContextHolder; import org.springframework.web.filter.OncePerRequestFilter; import cl.lherrera.pr.exception.RestServiceException; public class JwtTokenFilter extends OncePerRequestFilter { private JwtTokenProvider jwtTokenProvider; public JwtTokenFilter(JwtTokenProvider jwtTokenProvider) { this.jwtTokenProvider = jwtTokenProvider; } @Override protected void doFilterInternal( HttpServletRequest request, HttpServletResponse respose, FilterChain filterChain) throws ServletException, IOException { // extraemos el token del request, este debe ir en el header // con el nombre Authentication y en el valor String token = jwtTokenProvider.resolveToken(request); try { // si el token no es nulo y si es v\u00e1lido... if (token != null && jwtTokenProvider.validateToken(token)) { // creamos un objeto (new UsernamePasswordAuthenticationToken) // ya las credenciales no est\u00e1n disponibles, solamente `userDetails`` Authentication auth = jwtTokenProvider.getAuthentication(token); SecurityContextHolder.getContext().setAuthentication(auth); } } catch (RestServiceException ex) { SecurityContextHolder.clearContext(); respose.sendError(ex.getHttpStatus().value(), ex.getMessage()); return; } filterChain.doFilter(request, respose); } } /produce-rest/src/main/java/cl/lherrera/pr/security/JwtTokenFilterConfigurer.java Configuraci\u00f3n de filtro antes que se ejecute UsernamePasswordAuthenticationFilter , es una de las implementaciones con adaptador de la interfaz SecurityConfigurer<O, B> , esta configuraci\u00f3n, es aplicada luego en WebSecurityConfig , que tambi\u00e9n es una implementaci\u00f3n con con adaptador de SecurityConfigurer<O, B> . package cl.lherrera.pr.security; import org.springframework.security.config.annotation.SecurityConfigurerAdapter; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.web.DefaultSecurityFilterChain; import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter; public class JwtTokenFilterConfigurer extends SecurityConfigurerAdapter<DefaultSecurityFilterChain, HttpSecurity> { private JwtTokenProvider jwtTokenProvider; public JwtTokenFilterConfigurer(JwtTokenProvider jwtTokenProvider) { this.jwtTokenProvider = jwtTokenProvider; } @Override public void configure(HttpSecurity http) throws Exception { JwtTokenFilter customFilter = new JwtTokenFilter(jwtTokenProvider); http.addFilterBefore(customFilter, UsernamePasswordAuthenticationFilter.class); } } /produce-rest/src/main/java/cl/lherrera/pr/security/WebSecurityConfig.java La verdadera configuraci\u00f3n de seguridad est\u00e1 ac\u00e1. El filtro, es decir, la implementaci\u00f3n que hace la verificaci\u00f3n si se crea una sesi\u00f3n o no, es JwtTokenFilterConfigurer , que se apoya en clases que crean el token, que lo validan, as\u00ed JwtTokenFilterConfigurer seg\u00fan estime que se cumple o no, crea la sesi\u00f3n o no. Para que esta configuraci\u00f3n sea aplicada, debe ser inyectada ac\u00e1. package cl.lherrera.pr.security; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.security.authentication.AuthenticationManager; import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity; import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter; import org.springframework.security.config.http.SessionCreationPolicy; import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder; import org.springframework.security.crypto.password.PasswordEncoder; @Configuration @EnableWebSecurity @EnableGlobalMethodSecurity(prePostEnabled = true) public class WebSecurityConfig extends WebSecurityConfigurerAdapter { @Autowired private JwtTokenProvider jwtTokenProvider; @Override protected void configure(HttpSecurity http) throws Exception { // sin verificaci\u00f3n csrf, inseguro. (Laravel) http.csrf().disable(); // sesi\u00f3n sin estado. http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS); // Autorizaci\u00f3n de peticiones http.authorizeRequests() // para los paths -> autorizar todo .antMatchers(\"/api/v1/users/signin\").permitAll() // para los paths -> autorizar todo .antMatchers(\"/api/v1/users/signup\").permitAll() // para todo lo dem\u00e1s, acceso solamente con // autentificaci\u00f3n. .anyRequest().authenticated(); // en caso que ocurra una excepci\u00f3n de p\u00e1giina // denegada por error de credenciales // personalizamos el servicio a ejecutar. // que en este caso nos lleva a la // web de login. http.exceptionHandling().accessDeniedPage(\"/login\"); // Applies a {@link SecurityConfigurer} to this {@link SecurityBuilder} overriding any // {@link SecurityConfigurer} of the exact same class. Note that object hierarchies // are not considered. // // // El filtro personaliizado que creamos en JwtTokenFilterConfigurer, donde // validamos el token, y si es v\u00e1lido crea el Authenticate, se aplica ac\u00e1 // es un filtro que se concatena a los que ya hemos puesto en este mismo // m\u00e9todo, se aplica antes que a todos por que JwtTokenFilterConfigurer // HttpSecurity.addFilterBefore(customFilter, UsernamePasswordAuthenticationFilter.class); // le decimos que el filtro lo realice antes que se ejecute la autenticaci\u00f3n con // user y password. http.apply(new JwtTokenFilterConfigurer(jwtTokenProvider) ); } @Bean @Override public AuthenticationManager authenticationManagerBean() throws Exception { return super.authenticationManagerBean(); } @Bean public PasswordEncoder passwordEncoder() { // fuerza = 12 (entre 4 y 31) return new BCryptPasswordEncoder(12); } } cl.lherrera.pr.utils Esta clase es solamente adaptada para poder recibir los cambios de la entidad. Es decir que se cambia el alias, por un userName \u001d. /produce-rest/src/main/java/cl/lherrera/pr/utils/DTOMapper.java package cl.lherrera.pr.utils; import cl.lherrera.pr.dto.UserDTO; import cl.lherrera.pr.modelo.entity.User; public class DTOMapper { private DTOMapper() { } private static void toEntity(UserDTO userDTO, User user) { user.setId(userDTO.getId()); user.setName(userDTO.getName()); user.setUsername(userDTO.getUsername()); user.setEmail(userDTO.getEmail()); user.setPassword(userDTO.getPassword()); user.setRoles(userDTO.getRoles()); } public static User toEntity(UserDTO userDTO) { User user = new User(); toEntity(userDTO, user); return user; } public static UserDTO toDTO(User user) { UserDTO userDTO = new UserDTO(); userDTO.setId(user.getId()); userDTO.setName(user.getName()); userDTO.setUsername(user.getUsername()); userDTO.setEmail(user.getEmail()); userDTO.setPassword(null); userDTO.setRoles(user.getRoles()); return userDTO; } } cl.lherrera.pr.servicio Los servicios cuentan con m\u00e1s intervenciones /produce-rest/src/main/java/cl/lherrera/pr/servicio/UserService.java \u001c Se adicionan m\u00e9todos que ser\u00e1n implementados, dado que actualizamos la entidad para que tenga las exigencias de un nombre de usuario y una contrase\u00f1a, configurados en WebSecurityConfig . Podemos personalizar el nombre de los campos a verificar, pero en este caso se utilizan los que vienen por defecto, como lo son username , password . package cl.lherrera.pr.servicio; import java.util.List; import org.springframework.security.core.userdetails.UserDetails; import cl.lherrera.pr.dto.UserDTO; public interface UserService { void actualizar(UserDTO user); List<UserDTO> encontrarTodos(); UserDTO encontrarPorId(Long id); void eliminar(UserDTO user); // usados para las credenciales. String signin(String username, String password); // nuestro nuevo ingresar String signup(UserDTO user); UserDetails loadUserByUsername(String username); } /produce-rest/src/main/java/cl/lherrera/pr/servicio/UserServiceImp.java La implementaci\u00f3n del servicio de registro e ingreso al sistema, son las que destacan de todas las modificaciones realizadas, ya que estas producen el token. package cl.lherrera.pr.servicio; import java.util.List; import java.util.stream.Collectors; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpStatus; import org.springframework.security.authentication.AuthenticationManager; import org.springframework.security.authentication.UsernamePasswordAuthenticationToken; import org.springframework.security.core.Authentication; import org.springframework.security.core.AuthenticationException; import org.springframework.security.core.userdetails.UserDetails; import org.springframework.security.core.userdetails.UserDetailsService; import org.springframework.security.core.userdetails.UsernameNotFoundException; import org.springframework.security.crypto.password.PasswordEncoder; import org.springframework.stereotype.Service; import cl.lherrera.pr.dto.UserDTO; import cl.lherrera.pr.modelo.entity.User; import cl.lherrera.pr.modelo.repository.UserRepository; import cl.lherrera.pr.security.JwtTokenProvider; import cl.lherrera.pr.utils.DTOMapper; import cl.lherrera.pr.exception.RestServiceException; @Service public class UserServiceImp implements UserService, UserDetailsService { @Autowired UserRepository repoUsuario; // secci\u00f3n de seguridad @Autowired private PasswordEncoder passwordEncoder; @Autowired private JwtTokenProvider jwtTokenProvider; @Autowired private AuthenticationManager authenticationManager; // secci\u00f3n de seguridad # @Override public void actualizar(UserDTO user) { repoUsuario.save(DTOMapper.toEntity(user)); } @Override public List<UserDTO> encontrarTodos() { // cada elemento de la lista deber\u00e1 ser // convertido en su dto. return repoUsuario.findAll().stream().map(usuario -> DTOMapper.toDTO(usuario)).collect(Collectors.toList()); } @Override public UserDTO encontrarPorId(Long id) { User usuario = repoUsuario.findById(id).orElse(null); // TODO Auto-generated method stub return DTOMapper.toDTO(usuario); } @Override public void eliminar(UserDTO user) { User usuario = DTOMapper.toEntity(user); repoUsuario.delete(usuario); } /** * Inicia la sesi\u00f3n, retornando un token en caso que sea exitoso o * retornando una exeption en caso de no ser exitoso. * * La t\u00e9cnica es fabricar un objeto que implemente Authentication, en este caso * UsernamePasswordAuthenticationToken, una de sus implementaciones y la que * usaremos ac\u00e1. Esta implementaci\u00f3n requiere dos par\u00e1metros, un principal * que para nuestro caso es el username, y un credentials que es la * contrase\u00f1a. Posee un tercer par\u00e1metro que no vemos y este es * setAutenticated(false). Es decir que se crea un objeto tipo * Authentication, con tres par\u00e1metros: * - principal: username * - credentials: password * - setAuthenticated(false) * * Este objeto es pasado a authenticationManager.authenticate(), y pueden pasar 2 cosas. * La primera es que se logre hacer el inicio de sesi\u00f3n y siga la ejecuci\u00f3n y la otra * es que no se pueda realizar la autenticaci\u00f3n y se arroje un AuthenticationException * lo que har\u00e1 que no se genere el token por que no se sigue ejecutando la aplicaci\u00f3n * en ese contexto. * * La generaci\u00f3n del token es independiente a si se pudo o no iniciar sesi\u00f3n. Esta * generaci\u00f3n se puede realizar con un usuario que no est\u00e9 autenticado. Pero en el * ejemplo, como se arroja una excepci\u00f3n no se contin\u00faa con la ejecuci\u00f3n y es por * este motivo que no llega a generarse el token. * * El intento de inicio de sesi\u00f3n es interno, se deduce de los par\u00e1metros que * tenga asignados en la configuraci\u00f3n de los par\u00e1metros que se mapean en la * base de datos, en este caso, tenemos que en la tabla user, hay un campo * username y un campo password, que este `authenticate` comparar\u00e1 con los campos * principal y credentials que en este caso son los `raw_username y raw_password` * aunque solamente en la base de datos est\u00e9 la contrase\u00f1a encriptada, el m\u00e9todo * `authenticate` sabe como realizar una operaci\u00f3n que indique que el `raw_password` * sea matem\u00e1ticamente equivalente con nuestra contrase\u00f1a en la base de datos. * */ @Override public String signin(String username, String password) { String token = \"\"; try { // llenamos el objeto de autenticaci\u00f3n. en este caso se crea por defecto // con setAutenticated en falso. Setear esto en verdadero, es tarea de // authenticationManager, que al no poder realizar el match, arroja // un AuthenticationException. si no se retorna el token. Authentication objetoAutentificacion = new UsernamePasswordAuthenticationToken(username, password); // le decimos al administrador de authenticacion, que intente autenticar con el usuario dado. // si esto no es posible, en este punto se arroja una excepci\u00f3n. y nada m\u00e1s se ejecuta. authenticationManager.authenticate(objetoAutentificacion); User usuarioAutenticado = repoUsuario.findByUsername(username); // solamente si el usuario pasa la existencia correcta de sus credenciiales // llegaremos hasta este punto, es decir que el token no juega // ning\u00fan papel en la validaci\u00f3n de usuario, todo lo que puede // validar es un token. token = generaToken(usuarioAutenticado); } catch (AuthenticationException e) { throw new RestServiceException(\"username o password invalido\", HttpStatus.UNPROCESSABLE_ENTITY); } return token; } /** * Registro de usuario en el sistema, ingresa un nuevo usuario en la base * de datos. Retorna el token para poder comenzar con las peticioines. * Quiz\u00e1s no sea una buena manera, quiz\u00e1s el token, solamente deber\u00eda * ser entregado al momento de hacer un inicio de sesi\u00f3n; perso * as\u00ed est\u00e1 implementado en el ejemplo. */ @Override public String signup(UserDTO user) { String jwtToken = \"\"; boolean existeUsuario = repoUsuario.existsByUsername(user.getUsername()); if (!existeUsuario) { User usuario = registraUsuario(user); jwtToken = generaToken(usuario); } else { String message = \"Username ya est\u00e1 en uso\"; HttpStatus httpStatus = HttpStatus.UNPROCESSABLE_ENTITY; throw new RestServiceException(message, httpStatus); } return jwtToken; } /** * Construye un `UserDetails` est\u00e1tico, con la informaci\u00f3n que se le proporcione. * En este caso, el nombre de usuario que ven\u00eda como argumento y * la contrase\u00f1a que est\u00e1 en la base de datos. Este proceso * es implementado ya que este \u00fanico m\u00e9todo, posee * acceso a la contrase\u00f1a del usuario. * * La t\u00e9cnica usada es que cada m\u00e9todo retorna un `UserBuilder`, hasta * llegar a `build()`, es cuando finalmente es convertido en * un `UserDetail`.\u001c *\u001c **/ @Override public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException { final User user = repoUsuario.findByUsername(username); if (user == null) { throw new UsernameNotFoundException(\"Usuario '\" + username + \"' no encontrado\"); } return org.springframework.security.core.userdetails.User// .withUsername(username).password(user.getPassword()).authorities(user.getRoles()).accountExpired(false) .accountLocked(false).credentialsExpired(false).disabled(false).build(); } /** * Executa el ingreso de un usuario al sistema. */ private User registraUsuario(UserDTO userDto) { String rawPassword = userDto.getPassword(); // uso de la referencia al objeto passwordEncoder // posee un m\u00e9todo encode que implementa Spring // que toma el rawPassword y lo encripta. String contraseniaEncriptada = passwordEncoder.encode(rawPassword); userDto.setPassword(contraseniaEncriptada); User usuario = DTOMapper.toEntity(userDto); repoUsuario.save(usuario); return usuario; } /** * Genera el token, usando el nombre de usuario y los * roles. (Usamos el usuario aunque se puede con * un usuarioDTO). */ private String generaToken(User usuario) { String token = jwtTokenProvider.createToken( usuario.getUsername(), usuario.getRoles() ); return token; } } cl.lherrera.pr.exception Exception , especialmente dise\u00f1ada para mostrar un error en la solicitud, que incluir\u00e1 un atributo nuevo, con la misi\u00f3n de almacenar el c\u00f3digo de error, adem\u00e1s del mensaje. La llamamos muchas veces en la implementaci\u00f3n de la seguridad del token. /produce-rest/src/main/java/cl/lherrera/pr/exception/RestServiceException.java package cl.lherrera.pr.exception; import org.springframework.http.HttpStatus; public class RestServiceException extends RuntimeException { private static final long serialVersionUID = 5037553749745142029L; private final String message; private final HttpStatus httpStatus; public RestServiceException(String message, HttpStatus httpStatus) { super(); this.message = message; this.httpStatus = httpStatus; } @Override public String getMessage() { return message; } public HttpStatus getHttpStatus() { return httpStatus; } } cl.lherrera.pr.dto Solo cambios para adaptar la actualizaci\u00f3n en la entidad. /produce-rest/src/main/java/cl/lherrera/pr/dto/UserDTO.java package cl.lherrera.pr.dto; import java.util.List; import cl.lherrera.pr.modelo.entity.Role; public class UserDTO { private Long id; private String name; private String username; private String email; private String password; private List<Role> roles; public UserDTO(Long id, String name, String username, String email, String password, List<Role> roles) { super(); this.id = id; this.name = name; this.username = username; this.email = email; this.password = password; this.roles = roles; } public UserDTO() {} public Long getId() { return id; } public void setId(Long id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public List<Role> getRoles() { return roles; } public void setRoles(List<Role> roles) { this.roles = roles; } } cl.lherrera.pr.controller /produce-rest/src/main/java/cl/lherrera/pr/controller/UserController.java Podemos ver que no hay muchos cambios, pero no est\u00e1 dem\u00e1s la versi\u00f3n final funcionando, aunque parezca que los cambios son solamente en documentaci\u00f3n. package cl.lherrera.pr.controller; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpStatus; import org.springframework.web.bind.annotation.DeleteMapping; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.PutMapping; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.ResponseStatus; import org.springframework.web.bind.annotation.RestController; import cl.lherrera.pr.dto.UserDTO; import cl.lherrera.pr.servicio.UserService; @RestController @RequestMapping(\"/api/v1/users\") public class UserController { @Autowired private UserService userService; /** * M\u00e9todo encargado de hacer el login, ocupa el servicio signin. */ @PostMapping(\"/signin\") public String login(@RequestParam String username, @RequestParam String password) { return userService.signin(username, password); } /** * Registra un usuario, Realiza la tarea de ingreso. */ @PostMapping(\"/signup\") @ResponseStatus(HttpStatus.CREATED) public String signup(@RequestBody UserDTO userDTO) { return userService.signup(userDTO); } /** * Por defecto, la petici\u00f3n entrega una lista de los usuarios. */ @GetMapping(path = { \"\", \"/\" }) @ResponseStatus(code = HttpStatus.OK) public List<UserDTO> findAll() { return userService.encontrarTodos(); } /** * Encuentra un usuario por ID, es un servicio para cuando se necesite un * usuario en particular. */ @GetMapping(path = \"/{id}\") @ResponseStatus(code = HttpStatus.OK) public UserDTO findOne(@PathVariable Long id) { return userService.encontrarPorId(id); } /** * Servicio destinado a actualizar los datos de un usuario. */ @PutMapping(path = { \"\", \"/\" }) @ResponseStatus(HttpStatus.OK) void update(@RequestBody UserDTO userDTO) { userService.actualizar(userDTO); } /** * Servicio destinado a eliminar a un usuario. */ @DeleteMapping @ResponseStatus(HttpStatus.OK) void delete(@RequestBody UserDTO userDTO) { userService.eliminar(userDTO); } } /produce-rest/pom.xml Adicionamos el soporte para JWT \u001d, herramientas que nos prestan toda clase de servicios implementados para la administraci\u00f3n de tokens, como por ejemplo el crearlos, validarlos correctamente, entre otras. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.7.RELEASE</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>cl.lherrera</groupId> <artifactId>produce-rest</artifactId> <version>20.0.0</version> <packaging>war</packaging> <name>produce-rest</name> <description>api mod5 uni5 lectura 2</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-jpa</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> <scope>provided</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> <!-- SQLITE - SUPPORT --> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> </dependency> <!-- SQLITE - SUPPORT # --> <!-- JWT - SUPPORT --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-security</artifactId> </dependency> <dependency> <groupId>io.jsonwebtoken</groupId> <artifactId>jjwt</artifactId> <version>0.9.1</version> </dependency> <!-- JWT - SUPPORT # --> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project> TODO Implementar otra aplicaci\u00f3n con un formulario, que contenga un back y un front . Que solamente realice la validaci\u00f3n y registro de usuarios.","title":"Lectura002 002"},{"location":"modulos/mod_5/uni006/lectura002_002/#unidad-622-rest","text":"Aplicaci\u00f3n de seguridad basado en Java Web Token (JWT) al ejemplo anterior. La seguridad mediante JWT se realiza mediante la aplicaci\u00f3n de dos patrones, Adapter y Proxy , Cada medida de seguridad, se adapta para poder ser incluida en todas aquellas clases que implementan SecurityConfigurer<A, B> . El filtro se realiza con el patr\u00f3n PROXY que, mediante una serie de reglas, habilita o deshabilita los accesos a ciertas solicitudes o requests .","title":"Unidad 6.2.2 - Rest"},{"location":"modulos/mod_5/uni006/lectura002_002/#6221-servicios","text":"","title":"6.2.2.1 Servicios"},{"location":"modulos/mod_5/uni006/lectura002_002/#servicio-registrar-usuarios","text":"registra un usuario dado un cuerpo, se obtiene como respuesta exitosa, un token , recordar que no se env\u00eda sin el \"Bearer \" ya que el \u001c resolveToken lo pide as\u00ed, esto es una especie de otra palabra secreta o dato \u00fanico que manejan pocas personas, para aumentar la seguridad.\u001c URL: http://localhost:8080/api/v1/users/signup TYPE: POST BODY { \"name\": \"Luis Herrera\", \"username\": \"lherrera\", \"email\": \"l.herrera.garnica@gmail.com\", \"password\": \"1234\", \"roles\": [\"ROLE_ADMIN\", \"ROLE_CLIENT\"] } Respuesta del momento, esta cambia en cada solicitud: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJsaGVycmVyYSIsImF1dGgiOlt7ImF1dGhvcml0eSI6IlJPTEVfQURNSU4ifSx7ImF1dGhvcml0eSI6IlJPTEVfQ0xJRU5UIn1dLCJpYXQiOjE1ODk1MDg2ODQsImV4cCI6MTU4OTUxMjI4NH0.m9mLeRsytrq3d2Ax7_XpNFyOMxO0l4lv3s9PmUkEWM8","title":"Servicio: Registrar usuarios"},{"location":"modulos/mod_5/uni006/lectura002_002/#servicio-consultar-la-lista-de-usuarios","text":"Lista a los usuarios si es que estamos registrados. URL: http://localhost:8080/api/v1/users/ TYPE: GET HEADER Se adiciona un campo Authorization que contiene el token entregado por el sistema, antecedido por \"bearer \" .\u001c { Authorization : Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJsaGVycmVyYSIsImF1dGgiOlt7ImF1dGhvcml0eSI6IlJPTEVfQURNSU4ifSx7ImF1dGhvcml0eSI6IlJPTEVfQ0xJRU5UIn1dLCJpYXQiOjE1ODk1MDg2ODQsImV4cCI6MTU4OTUxMjI4NH0.m9mLeRsytrq3d2Ax7_XpNFyOMxO0l4lv3s9PmUkEWM8 } Si ejecutamos la solicitud sin el campo Autorization Nombre que le damos en la configuraci\u00f3n de seguridad para analizar el token, es decir, si hacemos una solicitud, sin estar registrados en el sistema nos arroja el siguiente error: { \"timestamp\": \"2020-05-15T02:17:59.199+0000\", \"status\": 403, \"error\": \"Forbidden\", \"message\": \"Access Denied\", \"path\": \"/api/v1/users/\" } En caso contrario: Vemos que la contrase\u00f1a no es indicada, esto lo hacemos en la utilidad que convierte Usuarios a Usuarios DTO, en este cambio aplicamos la regla de negocio por seguridad, y seteamos \u001d el objeto parseado \u001d a objeto DTO a null . public static UserDTO toDTO(User user) { [ { \"id\": 1, \"name\": \"Luis Herrera\", \"username\": \"lherrera\", \"email\": \"l.herrera.garnica@gmail.com\", \"password\": null, \"roles\": [ \"ROLE_ADMIN\", \"ROLE_CLIENT\" ] } ]","title":"Servicio: Consultar la lista de usuarios"},{"location":"modulos/mod_5/uni006/lectura002_002/#servicio-iniciar-sesion","text":"URL: http://localhost:8080/api/v1/users/signin?username=lherrera&password=1234 TYPE: POST, aunque tenga par\u00e1metros en la url , este concepto no se limita a esta descripci\u00f3n. De esta forma, nos aseguramos aunque las credenciales van en la url , no se ver\u00e1 por que la encapsula el POST . Si las credenciales est\u00e1n correctas, obtendremos el token. En caso contrario: { \"timestamp\": \"2020-05-15T02:34:05.917+0000\", \"status\": 500, \"error\": \"Internal Server Error\", \"message\": \"username o password invalido\", \"path\": \"/api/v1/users/signin\" }","title":"Servicio Iniciar sesi\u00f3n"},{"location":"modulos/mod_5/uni006/lectura002_002/#6222-archivos-modificados","text":"","title":"6.2.2.2 Archivos modificados"},{"location":"modulos/mod_5/uni006/lectura002_002/#produce-restsrcmainresources","text":"/application.properties En las propiedades, ir\u00e1n los valores que utilizar\u00e1 la clase proveedora del token. 3.600.000 mili segundos, equivalen a una hora, es decir que el proveedor del token, debe considerar v\u00e1lido un token que haya generado hace m\u00e1ximo, una hora. spring.jpa.generate-ddl=true spring.jpa.database-platform=cl.lherrera.pr.SQLiteDialect spring.jpa.show-sql=true spring.jpa.hibernate.ddl-auto=create-drop spring.jpa.properties.hibernate.format_sql=true # Configuraci\u00f3n para el token. security.jwt.token.secret-key=DLatam-SecretKey security.jwt.token.expire-length=3600000","title":"/produce-rest/src/main/resources"},{"location":"modulos/mod_5/uni006/lectura002_002/#cllherreraprmodeloentity","text":"Actualizamos las entidades del modelo, para poder cumplir con caracter\u00edsticas de configuraci\u00f3n de seguridad de Spring Security . Los modelos necesarios para trabajar con las credenciales. De GrantedAuthority implementamos el m\u00e9todo getAuthority que retorna el nombre del rol que indicamos en esta clase con los roles. Hacer esto es necesario para usar JWT . /produce-rest/src/main/java/cl/lherrera/pr/modelo/entity/Role.java El modelo debe implementar GrantedAuthority , cuando se usa una clase Enum , listamos los nombres iniciando ROLE_ , seguido por el nombre del rol. En el ejemplo son ROLE_ADMIN y ROLE_CLIENT . Posee un m\u00e9todo getAuthority() , el que debe ser implementado. Esto se realiza para que la implementaci\u00f3n de la seguridad identifique el rol. Es decir, Spring security , cuando necesite saber el rol o los roles que posee un usuario, utilizar\u00e1 la informaci\u00f3n entregada por gerAuthority() . de una clase que implemente o posea la forma de GrantedAuthority . La siguiente es una de las formas en que se puede representar el rol en una aplicaci\u00f3n. Esto es utilizando un Enum Class , suficiente cuando nuestros roles no sean muchos, sin m\u00e1s base, que la de poder aceptar mirarlos como atributos en una clase y que no sangren los ojos. Otra t\u00e9cnica es la utilizaci\u00f3n de una tabla en la base de datos que contenga la informaci\u00f3n de los roles. Esto es \u00fatil para cuando la cantidad de roles que posee la aplicaci\u00f3n, demande una mayor cantidad de roles, como lo ser\u00eda por ejemplo en una entidad educacional, donde hay profesores, estudiantes, directores, sub directores, etc. Si tenemos una gran aplicaci\u00f3n central, requerir\u00eda aplicar una tabla de roles; pero este no es el caso. Es por esto que se aplica la t\u00e9cnica de la clase Enum , y lo simplificamos adem\u00e1s de ahorrarnos la implementaci\u00f3n de un many to many , que no tiene mucho que ver con el negocio m\u00e1s all\u00e1 del contenido de las credenciales, donde solamente sea legible un nombre de usuario y una encriptada contrase\u00f1a. La informaci\u00f3n que posee la capa de seguridad, no cumplen otra funci\u00f3n m\u00e1s que la de utilizar t\u00e9cnicas complejas, para mantener identificado el origen que est\u00e1 solicitando informaci\u00f3n para luego entregarla al mismo punto. No garantiza que el transporte no sea interceptado por terceros, es por eso que la contrase\u00f1a es enviada encriptada. De esta forma si esta informaci\u00f3n llega a ser interceptada no puede ser utilizada directamente sin pasar por los algoritmos que est\u00e1n en nuestra aplicaci\u00f3n. Si la informaci\u00f3n es interceptada y utilizada, el algoritmo interno antes de corroborar con lo que se ingresa lo codifica, no lo compara directamente, por lo que la informaci\u00f3n que se intercept\u00f3, incluso la que est\u00e1 en la base de datos, no se puede utilizar directamente. Estas implementaciones no deben poder ser decodificadas \u001d, solamente codificadas \u001d o no ser\u00edan seguras, el valor siempre debe ser comparado con su valor ya codificado. Para que la informaci\u00f3n viaje con una capa adicional de seguridad con todos los datos codificados, esta se debe usar ssl , pero eso forma parte de configuraciones del servidor. package cl.lherrera.pr.modelo.entity; import org.springframework.security.core.GrantedAuthority; public enum Role implements GrantedAuthority { ROLE_ADMIN, ROLE_CLIENT; @Override public String getAuthority() { return name(); } } /produce-rest/src/main/java/cl/lherrera/pr/modelo/entity/User.java ElementCollection permite un acceso a getAuthority() de forma funcional. usuarioIntentandoIngresar.roles... por cada uno... verificar rol . Si usamos una tabla en la base de datos, esto debe tratarse con un manyToMany ; pero dado el caso de la Enum Class , es suficiente con anotar la lista de roles con @ElementCollection . fetch = FetchType.EAGER . Hay dos formas de traer( Fetch ) datos, una es la forma ansiosa ( EAGER ), y la forma perezosa ( LAZY ). En la forma ansiosa, se trae toda la informaci\u00f3n de los roles que posee el usuario, que en este caso tenemos dos roles, por lo que las peticiones en partes peque\u00f1as bajo demanda (como tener un mill\u00f3n de registros, no podemos tener todo eso en una sola consulta, el estilo LAZY lo soluciona, implementando t\u00e9cnicas que esperan el momento justo en que se necesita el dato para traerlo, requiere para eso, indudablemente mayor capacidad de procesamiento para estas tareas. Es por esta raz\u00f3n que el uso de LAZY debe estar justificado). package cl.lherrera.pr.modelo.entity; import java.util.List; import javax.persistence.ElementCollection; import javax.persistence.Entity; import javax.persistence.FetchType; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; @Entity public class User { @ElementCollection(fetch = FetchType.EAGER) private List<Role> roles; @Id @GeneratedValue(strategy = GenerationType.AUTO) private Long id; private String name; private String username; // este es el nombre por defecto private String email; private String password; public User(Long id, String name, String username, String email, String password) { super(); this.id = id; this.name = name; this.username = username; this.email = email; this.password = password; } public User() { } public List<Role> getRoles() { return roles; } public void setRoles(List<Role> roles) { this.roles = roles; } public Long getId() { return id; } public void setId(Long id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } }","title":"cl.lherrera.pr.modelo.entity"},{"location":"modulos/mod_5/uni006/lectura002_002/#cllherreraprmodelorepository","text":"Se adicionan m\u00e9todos necesarios para la implementaci\u00f3n de seguridad. /produce-rest/src/main/java/cl/lherrera/pr/modelo/repository/UserRepository.java package cl.lherrera.pr.modelo.repository; import org.springframework.data.jpa.repository.JpaRepository; import cl.lherrera.pr.modelo.entity.User; public interface UserRepository extends JpaRepository<User, Long> { // necesario para la autenticaci\u00f3n boolean existsByUsername(String username); User findByUsername(String username); }","title":"cl.lherrera.pr.modelo.repository"},{"location":"modulos/mod_5/uni006/lectura002_002/#cllherreraprsecurity","text":"Las clases que deben ser implementadas para la gesti\u00f3n de las credenciales, son dos clases principales: JwtTokenFilterConfigurer : Para la gesti\u00f3n del token. WebSecurityConfig : Para la gesti\u00f3n de los accesos a los servicios que expone la aplicaci\u00f3n v\u00eda web, que en nuestro caso, la aplicaci\u00f3n es un servicio web. La t\u00e9cnica consiste en que JwtTokenFilterConfigurer , con el apoyo de sus clases, introduzca un filtro, que cree al usuario justo antes que se accione la validaci\u00f3n de usuario autenticado. Es decir, crea al usuario autenticado, antes que se valide, as\u00ed, existir\u00e1 ser\u00e1 validado y reconocido. Luego esta configuraci\u00f3n ser\u00e1 aplicada en WebSecurityConfig . De esta manera, la seguridad web , dispondr\u00e1 de la t\u00e9cnica de autenticaci\u00f3n mediante el uso de token, sin tener que depender del registro normal de acceso al sistema, la denominada autenticaci\u00f3n basada en formularios, aunque en el sistema front, exista un formulario la validaci\u00f3n ser\u00e1 realizada por el uso de un token. /produce-rest/src/main/java/cl/lherrera/pr/security/JwtTokenProvider.java Su misi\u00f3n es: No posee constructor, se ejecuta el m\u00e9todo init() , justo despu\u00e9s de ser inyectado. Consume en esos momentos, los valores de llave y duraci\u00f3n que est\u00e1n en las propiedades del proyecto. Crear un token, con una durabilidad suficiente para una sesi\u00f3n. Obtener la informaci\u00f3n del objeto Authentication que se ha creado con un token ya creado. Esto para tener los datos del usuario registrado, as\u00ed poder ocupar estos datos seg\u00fan lo necesitemos. Validar si un token dado, es v\u00e1lido o si es inv\u00e1lido(por ejemplo, que expir\u00f3). Nuestro proveedor de token , no implementa ninguna interfaz y est\u00e1 marcada como un @Component , por que Spring lo inyectar\u00e1 en WebSecurityConfig . Para poder aplicar el inicio de sesi\u00f3n mediante el uso de un token , en WebSecurityConfig , se inyecta JwtTokenProvider , cuando comienza la creaci\u00f3n de la configuraci\u00f3n para la web, y cuando se se finaliza la disposici\u00f3n de, qu\u00e9 peticiones est\u00e1n habilitadas y para quieres. Se aplica la autenticaci\u00f3n por token Los valores se inicializan en el ini() , y este se ejecuta con la anotaci\u00f3n @PostConstruct . package cl.lherrera.pr.security; import java.util.Base64; import java.util.Date; import java.util.List; import java.util.Objects; import java.util.stream.Collectors; import javax.annotation.PostConstruct; import javax.servlet.http.HttpServletRequest; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.http.HttpStatus; import org.springframework.security.authentication.UsernamePasswordAuthenticationToken; import org.springframework.security.core.Authentication; import org.springframework.security.core.authority.SimpleGrantedAuthority; import org.springframework.security.core.userdetails.UserDetails; import org.springframework.stereotype.Component; import cl.lherrera.pr.exception.RestServiceException; import cl.lherrera.pr.modelo.entity.Role; import cl.lherrera.pr.servicio.UserService; import io.jsonwebtoken.Claims; import io.jsonwebtoken.JwtException; import io.jsonwebtoken.Jwts; import io.jsonwebtoken.SignatureAlgorithm; @Component public class JwtTokenProvider { private Logger logger = LoggerFactory.getLogger(JwtTokenProvider.class); // propiedad @Value(\"${security.jwt.token.secret-key}\") private String secretKey; // propiedad @Value(\"${security.jwt.token.expire-length}\") private long validityInMilliseconds; // servicio Implementado @Autowired private UserService userService; /** * Spring calls methods annotated with @PostConstruct * only once, just after the initialization * of bean properties. * https://www.baeldung.com/spring-postconstruct-predestroy * * Asigna el valor de la clave secreta */ @PostConstruct protected void init() { secretKey = Base64.getEncoder().encodeToString(secretKey.getBytes()); logger.debug(\"LLave inicializada: \" + secretKey); } public String createToken(String username, List<Role> roles) { Claims claims = Jwts.claims().setSubject(username); List<SimpleGrantedAuthority> grats = roles.stream() .map(rol -> new SimpleGrantedAuthority(rol.getAuthority()) ) .filter(Objects::nonNull) .collect(Collectors.toList()); claims.put(\"auth\", grats); // expiraci\u00f3n del token Date now = new Date(); Date validity = new Date(now.getTime() + validityInMilliseconds); // creaci\u00f3n del token String token = Jwts.builder() .setClaims(claims) .setIssuedAt(now) .setExpiration(validity) .signWith(SignatureAlgorithm.HS256, secretKey) .compact(); return token; } /** * A partir del token se obtiene el nombre de usuario y luego, * se obtiene un `UserDetails`, que ya sabemos que es la * entidad que maneja como ususuario de sesi\u00f3n. */ public Authentication getAuthentication(String token) { UserDetails userDetails = userService.loadUserByUsername(getUsername(token)); UsernamePasswordAuthenticationToken autenticacion; autenticacion = new UsernamePasswordAuthenticationToken( userDetails, \"\", userDetails.getAuthorities() ); return autenticacion; } private String getUsername(String token) { String userName = Jwts.parser() .setSigningKey(secretKey) .parseClaimsJws(token) .getBody() .getSubject(); return userName; } /** * Quitamos \"Bearer \" del principio del token * esto es un acuerdo entre ambas partes con un encabezado * especial si es que as\u00ed se acuerda, esa referencia * ser\u00e1 tratada en este m\u00e9todo. */ public String resolveToken(HttpServletRequest req) { String bearerToken = req.getHeader(\"Authorization\"); if (bearerToken != null && bearerToken.startsWith(\"Bearer \")) { return bearerToken.substring(7); } return null; } /** * Si el token logra ser parseado, entonces se asume que es un * Token v\u00e1lido. `parseClaimsJws` analiza la llave (no un * token que exista hipoteticamente, la comparaci\u00f3n se * realiza entre el token que est\u00e1 en el request * y la clave cifrada de esta clase. cifrada * justo despu\u00e9s de construirse este * objeto `INIT`). */ public boolean validateToken(String token) { try { Jwts.parser().setSigningKey(secretKey).parseClaimsJws(token); return true; } catch (JwtException | IllegalArgumentException e) { throw new RestServiceException( \"Expired or invalid JWT token\", HttpStatus.INTERNAL_SERVER_ERROR ); } } } /produce-rest/src/main/java/cl/lherrera/pr/security/JwtTokenFilter.java Implementa OncePerRequestFilter , esto significa que sobre escribiendo el m\u00e9todo doFilterInternal , por cada una de las peticiones, el request ser\u00e1 analizado, y se confirmar\u00e1 su validez o no. package cl.lherrera.pr.security; import java.io.IOException; import javax.servlet.FilterChain; import javax.servlet.ServletException; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import org.springframework.security.core.Authentication; import org.springframework.security.core.context.SecurityContextHolder; import org.springframework.web.filter.OncePerRequestFilter; import cl.lherrera.pr.exception.RestServiceException; public class JwtTokenFilter extends OncePerRequestFilter { private JwtTokenProvider jwtTokenProvider; public JwtTokenFilter(JwtTokenProvider jwtTokenProvider) { this.jwtTokenProvider = jwtTokenProvider; } @Override protected void doFilterInternal( HttpServletRequest request, HttpServletResponse respose, FilterChain filterChain) throws ServletException, IOException { // extraemos el token del request, este debe ir en el header // con el nombre Authentication y en el valor String token = jwtTokenProvider.resolveToken(request); try { // si el token no es nulo y si es v\u00e1lido... if (token != null && jwtTokenProvider.validateToken(token)) { // creamos un objeto (new UsernamePasswordAuthenticationToken) // ya las credenciales no est\u00e1n disponibles, solamente `userDetails`` Authentication auth = jwtTokenProvider.getAuthentication(token); SecurityContextHolder.getContext().setAuthentication(auth); } } catch (RestServiceException ex) { SecurityContextHolder.clearContext(); respose.sendError(ex.getHttpStatus().value(), ex.getMessage()); return; } filterChain.doFilter(request, respose); } } /produce-rest/src/main/java/cl/lherrera/pr/security/JwtTokenFilterConfigurer.java Configuraci\u00f3n de filtro antes que se ejecute UsernamePasswordAuthenticationFilter , es una de las implementaciones con adaptador de la interfaz SecurityConfigurer<O, B> , esta configuraci\u00f3n, es aplicada luego en WebSecurityConfig , que tambi\u00e9n es una implementaci\u00f3n con con adaptador de SecurityConfigurer<O, B> . package cl.lherrera.pr.security; import org.springframework.security.config.annotation.SecurityConfigurerAdapter; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.web.DefaultSecurityFilterChain; import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter; public class JwtTokenFilterConfigurer extends SecurityConfigurerAdapter<DefaultSecurityFilterChain, HttpSecurity> { private JwtTokenProvider jwtTokenProvider; public JwtTokenFilterConfigurer(JwtTokenProvider jwtTokenProvider) { this.jwtTokenProvider = jwtTokenProvider; } @Override public void configure(HttpSecurity http) throws Exception { JwtTokenFilter customFilter = new JwtTokenFilter(jwtTokenProvider); http.addFilterBefore(customFilter, UsernamePasswordAuthenticationFilter.class); } } /produce-rest/src/main/java/cl/lherrera/pr/security/WebSecurityConfig.java La verdadera configuraci\u00f3n de seguridad est\u00e1 ac\u00e1. El filtro, es decir, la implementaci\u00f3n que hace la verificaci\u00f3n si se crea una sesi\u00f3n o no, es JwtTokenFilterConfigurer , que se apoya en clases que crean el token, que lo validan, as\u00ed JwtTokenFilterConfigurer seg\u00fan estime que se cumple o no, crea la sesi\u00f3n o no. Para que esta configuraci\u00f3n sea aplicada, debe ser inyectada ac\u00e1. package cl.lherrera.pr.security; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.security.authentication.AuthenticationManager; import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity; import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter; import org.springframework.security.config.http.SessionCreationPolicy; import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder; import org.springframework.security.crypto.password.PasswordEncoder; @Configuration @EnableWebSecurity @EnableGlobalMethodSecurity(prePostEnabled = true) public class WebSecurityConfig extends WebSecurityConfigurerAdapter { @Autowired private JwtTokenProvider jwtTokenProvider; @Override protected void configure(HttpSecurity http) throws Exception { // sin verificaci\u00f3n csrf, inseguro. (Laravel) http.csrf().disable(); // sesi\u00f3n sin estado. http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS); // Autorizaci\u00f3n de peticiones http.authorizeRequests() // para los paths -> autorizar todo .antMatchers(\"/api/v1/users/signin\").permitAll() // para los paths -> autorizar todo .antMatchers(\"/api/v1/users/signup\").permitAll() // para todo lo dem\u00e1s, acceso solamente con // autentificaci\u00f3n. .anyRequest().authenticated(); // en caso que ocurra una excepci\u00f3n de p\u00e1giina // denegada por error de credenciales // personalizamos el servicio a ejecutar. // que en este caso nos lleva a la // web de login. http.exceptionHandling().accessDeniedPage(\"/login\"); // Applies a {@link SecurityConfigurer} to this {@link SecurityBuilder} overriding any // {@link SecurityConfigurer} of the exact same class. Note that object hierarchies // are not considered. // // // El filtro personaliizado que creamos en JwtTokenFilterConfigurer, donde // validamos el token, y si es v\u00e1lido crea el Authenticate, se aplica ac\u00e1 // es un filtro que se concatena a los que ya hemos puesto en este mismo // m\u00e9todo, se aplica antes que a todos por que JwtTokenFilterConfigurer // HttpSecurity.addFilterBefore(customFilter, UsernamePasswordAuthenticationFilter.class); // le decimos que el filtro lo realice antes que se ejecute la autenticaci\u00f3n con // user y password. http.apply(new JwtTokenFilterConfigurer(jwtTokenProvider) ); } @Bean @Override public AuthenticationManager authenticationManagerBean() throws Exception { return super.authenticationManagerBean(); } @Bean public PasswordEncoder passwordEncoder() { // fuerza = 12 (entre 4 y 31) return new BCryptPasswordEncoder(12); } }","title":"cl.lherrera.pr.security"},{"location":"modulos/mod_5/uni006/lectura002_002/#cllherreraprutils","text":"Esta clase es solamente adaptada para poder recibir los cambios de la entidad. Es decir que se cambia el alias, por un userName \u001d. /produce-rest/src/main/java/cl/lherrera/pr/utils/DTOMapper.java package cl.lherrera.pr.utils; import cl.lherrera.pr.dto.UserDTO; import cl.lherrera.pr.modelo.entity.User; public class DTOMapper { private DTOMapper() { } private static void toEntity(UserDTO userDTO, User user) { user.setId(userDTO.getId()); user.setName(userDTO.getName()); user.setUsername(userDTO.getUsername()); user.setEmail(userDTO.getEmail()); user.setPassword(userDTO.getPassword()); user.setRoles(userDTO.getRoles()); } public static User toEntity(UserDTO userDTO) { User user = new User(); toEntity(userDTO, user); return user; } public static UserDTO toDTO(User user) { UserDTO userDTO = new UserDTO(); userDTO.setId(user.getId()); userDTO.setName(user.getName()); userDTO.setUsername(user.getUsername()); userDTO.setEmail(user.getEmail()); userDTO.setPassword(null); userDTO.setRoles(user.getRoles()); return userDTO; } }","title":"cl.lherrera.pr.utils"},{"location":"modulos/mod_5/uni006/lectura002_002/#cllherreraprservicio","text":"Los servicios cuentan con m\u00e1s intervenciones /produce-rest/src/main/java/cl/lherrera/pr/servicio/UserService.java \u001c Se adicionan m\u00e9todos que ser\u00e1n implementados, dado que actualizamos la entidad para que tenga las exigencias de un nombre de usuario y una contrase\u00f1a, configurados en WebSecurityConfig . Podemos personalizar el nombre de los campos a verificar, pero en este caso se utilizan los que vienen por defecto, como lo son username , password . package cl.lherrera.pr.servicio; import java.util.List; import org.springframework.security.core.userdetails.UserDetails; import cl.lherrera.pr.dto.UserDTO; public interface UserService { void actualizar(UserDTO user); List<UserDTO> encontrarTodos(); UserDTO encontrarPorId(Long id); void eliminar(UserDTO user); // usados para las credenciales. String signin(String username, String password); // nuestro nuevo ingresar String signup(UserDTO user); UserDetails loadUserByUsername(String username); } /produce-rest/src/main/java/cl/lherrera/pr/servicio/UserServiceImp.java La implementaci\u00f3n del servicio de registro e ingreso al sistema, son las que destacan de todas las modificaciones realizadas, ya que estas producen el token. package cl.lherrera.pr.servicio; import java.util.List; import java.util.stream.Collectors; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpStatus; import org.springframework.security.authentication.AuthenticationManager; import org.springframework.security.authentication.UsernamePasswordAuthenticationToken; import org.springframework.security.core.Authentication; import org.springframework.security.core.AuthenticationException; import org.springframework.security.core.userdetails.UserDetails; import org.springframework.security.core.userdetails.UserDetailsService; import org.springframework.security.core.userdetails.UsernameNotFoundException; import org.springframework.security.crypto.password.PasswordEncoder; import org.springframework.stereotype.Service; import cl.lherrera.pr.dto.UserDTO; import cl.lherrera.pr.modelo.entity.User; import cl.lherrera.pr.modelo.repository.UserRepository; import cl.lherrera.pr.security.JwtTokenProvider; import cl.lherrera.pr.utils.DTOMapper; import cl.lherrera.pr.exception.RestServiceException; @Service public class UserServiceImp implements UserService, UserDetailsService { @Autowired UserRepository repoUsuario; // secci\u00f3n de seguridad @Autowired private PasswordEncoder passwordEncoder; @Autowired private JwtTokenProvider jwtTokenProvider; @Autowired private AuthenticationManager authenticationManager; // secci\u00f3n de seguridad # @Override public void actualizar(UserDTO user) { repoUsuario.save(DTOMapper.toEntity(user)); } @Override public List<UserDTO> encontrarTodos() { // cada elemento de la lista deber\u00e1 ser // convertido en su dto. return repoUsuario.findAll().stream().map(usuario -> DTOMapper.toDTO(usuario)).collect(Collectors.toList()); } @Override public UserDTO encontrarPorId(Long id) { User usuario = repoUsuario.findById(id).orElse(null); // TODO Auto-generated method stub return DTOMapper.toDTO(usuario); } @Override public void eliminar(UserDTO user) { User usuario = DTOMapper.toEntity(user); repoUsuario.delete(usuario); } /** * Inicia la sesi\u00f3n, retornando un token en caso que sea exitoso o * retornando una exeption en caso de no ser exitoso. * * La t\u00e9cnica es fabricar un objeto que implemente Authentication, en este caso * UsernamePasswordAuthenticationToken, una de sus implementaciones y la que * usaremos ac\u00e1. Esta implementaci\u00f3n requiere dos par\u00e1metros, un principal * que para nuestro caso es el username, y un credentials que es la * contrase\u00f1a. Posee un tercer par\u00e1metro que no vemos y este es * setAutenticated(false). Es decir que se crea un objeto tipo * Authentication, con tres par\u00e1metros: * - principal: username * - credentials: password * - setAuthenticated(false) * * Este objeto es pasado a authenticationManager.authenticate(), y pueden pasar 2 cosas. * La primera es que se logre hacer el inicio de sesi\u00f3n y siga la ejecuci\u00f3n y la otra * es que no se pueda realizar la autenticaci\u00f3n y se arroje un AuthenticationException * lo que har\u00e1 que no se genere el token por que no se sigue ejecutando la aplicaci\u00f3n * en ese contexto. * * La generaci\u00f3n del token es independiente a si se pudo o no iniciar sesi\u00f3n. Esta * generaci\u00f3n se puede realizar con un usuario que no est\u00e9 autenticado. Pero en el * ejemplo, como se arroja una excepci\u00f3n no se contin\u00faa con la ejecuci\u00f3n y es por * este motivo que no llega a generarse el token. * * El intento de inicio de sesi\u00f3n es interno, se deduce de los par\u00e1metros que * tenga asignados en la configuraci\u00f3n de los par\u00e1metros que se mapean en la * base de datos, en este caso, tenemos que en la tabla user, hay un campo * username y un campo password, que este `authenticate` comparar\u00e1 con los campos * principal y credentials que en este caso son los `raw_username y raw_password` * aunque solamente en la base de datos est\u00e9 la contrase\u00f1a encriptada, el m\u00e9todo * `authenticate` sabe como realizar una operaci\u00f3n que indique que el `raw_password` * sea matem\u00e1ticamente equivalente con nuestra contrase\u00f1a en la base de datos. * */ @Override public String signin(String username, String password) { String token = \"\"; try { // llenamos el objeto de autenticaci\u00f3n. en este caso se crea por defecto // con setAutenticated en falso. Setear esto en verdadero, es tarea de // authenticationManager, que al no poder realizar el match, arroja // un AuthenticationException. si no se retorna el token. Authentication objetoAutentificacion = new UsernamePasswordAuthenticationToken(username, password); // le decimos al administrador de authenticacion, que intente autenticar con el usuario dado. // si esto no es posible, en este punto se arroja una excepci\u00f3n. y nada m\u00e1s se ejecuta. authenticationManager.authenticate(objetoAutentificacion); User usuarioAutenticado = repoUsuario.findByUsername(username); // solamente si el usuario pasa la existencia correcta de sus credenciiales // llegaremos hasta este punto, es decir que el token no juega // ning\u00fan papel en la validaci\u00f3n de usuario, todo lo que puede // validar es un token. token = generaToken(usuarioAutenticado); } catch (AuthenticationException e) { throw new RestServiceException(\"username o password invalido\", HttpStatus.UNPROCESSABLE_ENTITY); } return token; } /** * Registro de usuario en el sistema, ingresa un nuevo usuario en la base * de datos. Retorna el token para poder comenzar con las peticioines. * Quiz\u00e1s no sea una buena manera, quiz\u00e1s el token, solamente deber\u00eda * ser entregado al momento de hacer un inicio de sesi\u00f3n; perso * as\u00ed est\u00e1 implementado en el ejemplo. */ @Override public String signup(UserDTO user) { String jwtToken = \"\"; boolean existeUsuario = repoUsuario.existsByUsername(user.getUsername()); if (!existeUsuario) { User usuario = registraUsuario(user); jwtToken = generaToken(usuario); } else { String message = \"Username ya est\u00e1 en uso\"; HttpStatus httpStatus = HttpStatus.UNPROCESSABLE_ENTITY; throw new RestServiceException(message, httpStatus); } return jwtToken; } /** * Construye un `UserDetails` est\u00e1tico, con la informaci\u00f3n que se le proporcione. * En este caso, el nombre de usuario que ven\u00eda como argumento y * la contrase\u00f1a que est\u00e1 en la base de datos. Este proceso * es implementado ya que este \u00fanico m\u00e9todo, posee * acceso a la contrase\u00f1a del usuario. * * La t\u00e9cnica usada es que cada m\u00e9todo retorna un `UserBuilder`, hasta * llegar a `build()`, es cuando finalmente es convertido en * un `UserDetail`.\u001c *\u001c **/ @Override public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException { final User user = repoUsuario.findByUsername(username); if (user == null) { throw new UsernameNotFoundException(\"Usuario '\" + username + \"' no encontrado\"); } return org.springframework.security.core.userdetails.User// .withUsername(username).password(user.getPassword()).authorities(user.getRoles()).accountExpired(false) .accountLocked(false).credentialsExpired(false).disabled(false).build(); } /** * Executa el ingreso de un usuario al sistema. */ private User registraUsuario(UserDTO userDto) { String rawPassword = userDto.getPassword(); // uso de la referencia al objeto passwordEncoder // posee un m\u00e9todo encode que implementa Spring // que toma el rawPassword y lo encripta. String contraseniaEncriptada = passwordEncoder.encode(rawPassword); userDto.setPassword(contraseniaEncriptada); User usuario = DTOMapper.toEntity(userDto); repoUsuario.save(usuario); return usuario; } /** * Genera el token, usando el nombre de usuario y los * roles. (Usamos el usuario aunque se puede con * un usuarioDTO). */ private String generaToken(User usuario) { String token = jwtTokenProvider.createToken( usuario.getUsername(), usuario.getRoles() ); return token; } }","title":"cl.lherrera.pr.servicio"},{"location":"modulos/mod_5/uni006/lectura002_002/#cllherreraprexception","text":"Exception , especialmente dise\u00f1ada para mostrar un error en la solicitud, que incluir\u00e1 un atributo nuevo, con la misi\u00f3n de almacenar el c\u00f3digo de error, adem\u00e1s del mensaje. La llamamos muchas veces en la implementaci\u00f3n de la seguridad del token. /produce-rest/src/main/java/cl/lherrera/pr/exception/RestServiceException.java package cl.lherrera.pr.exception; import org.springframework.http.HttpStatus; public class RestServiceException extends RuntimeException { private static final long serialVersionUID = 5037553749745142029L; private final String message; private final HttpStatus httpStatus; public RestServiceException(String message, HttpStatus httpStatus) { super(); this.message = message; this.httpStatus = httpStatus; } @Override public String getMessage() { return message; } public HttpStatus getHttpStatus() { return httpStatus; } }","title":"cl.lherrera.pr.exception"},{"location":"modulos/mod_5/uni006/lectura002_002/#cllherreraprdto","text":"Solo cambios para adaptar la actualizaci\u00f3n en la entidad. /produce-rest/src/main/java/cl/lherrera/pr/dto/UserDTO.java package cl.lherrera.pr.dto; import java.util.List; import cl.lherrera.pr.modelo.entity.Role; public class UserDTO { private Long id; private String name; private String username; private String email; private String password; private List<Role> roles; public UserDTO(Long id, String name, String username, String email, String password, List<Role> roles) { super(); this.id = id; this.name = name; this.username = username; this.email = email; this.password = password; this.roles = roles; } public UserDTO() {} public Long getId() { return id; } public void setId(Long id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public List<Role> getRoles() { return roles; } public void setRoles(List<Role> roles) { this.roles = roles; } }","title":"cl.lherrera.pr.dto"},{"location":"modulos/mod_5/uni006/lectura002_002/#cllherreraprcontroller","text":"/produce-rest/src/main/java/cl/lherrera/pr/controller/UserController.java Podemos ver que no hay muchos cambios, pero no est\u00e1 dem\u00e1s la versi\u00f3n final funcionando, aunque parezca que los cambios son solamente en documentaci\u00f3n. package cl.lherrera.pr.controller; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpStatus; import org.springframework.web.bind.annotation.DeleteMapping; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.PutMapping; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.ResponseStatus; import org.springframework.web.bind.annotation.RestController; import cl.lherrera.pr.dto.UserDTO; import cl.lherrera.pr.servicio.UserService; @RestController @RequestMapping(\"/api/v1/users\") public class UserController { @Autowired private UserService userService; /** * M\u00e9todo encargado de hacer el login, ocupa el servicio signin. */ @PostMapping(\"/signin\") public String login(@RequestParam String username, @RequestParam String password) { return userService.signin(username, password); } /** * Registra un usuario, Realiza la tarea de ingreso. */ @PostMapping(\"/signup\") @ResponseStatus(HttpStatus.CREATED) public String signup(@RequestBody UserDTO userDTO) { return userService.signup(userDTO); } /** * Por defecto, la petici\u00f3n entrega una lista de los usuarios. */ @GetMapping(path = { \"\", \"/\" }) @ResponseStatus(code = HttpStatus.OK) public List<UserDTO> findAll() { return userService.encontrarTodos(); } /** * Encuentra un usuario por ID, es un servicio para cuando se necesite un * usuario en particular. */ @GetMapping(path = \"/{id}\") @ResponseStatus(code = HttpStatus.OK) public UserDTO findOne(@PathVariable Long id) { return userService.encontrarPorId(id); } /** * Servicio destinado a actualizar los datos de un usuario. */ @PutMapping(path = { \"\", \"/\" }) @ResponseStatus(HttpStatus.OK) void update(@RequestBody UserDTO userDTO) { userService.actualizar(userDTO); } /** * Servicio destinado a eliminar a un usuario. */ @DeleteMapping @ResponseStatus(HttpStatus.OK) void delete(@RequestBody UserDTO userDTO) { userService.eliminar(userDTO); } }","title":"cl.lherrera.pr.controller"},{"location":"modulos/mod_5/uni006/lectura002_002/#produce-restpomxml","text":"Adicionamos el soporte para JWT \u001d, herramientas que nos prestan toda clase de servicios implementados para la administraci\u00f3n de tokens, como por ejemplo el crearlos, validarlos correctamente, entre otras. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.7.RELEASE</version> <relativePath /> <!-- lookup parent from repository --> </parent> <groupId>cl.lherrera</groupId> <artifactId>produce-rest</artifactId> <version>20.0.0</version> <packaging>war</packaging> <name>produce-rest</name> <description>api mod5 uni5 lectura 2</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-jpa</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> <scope>provided</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> <!-- SQLITE - SUPPORT --> <dependency> <groupId>org.xerial</groupId> <artifactId>sqlite-jdbc</artifactId> </dependency> <!-- SQLITE - SUPPORT # --> <!-- JWT - SUPPORT --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-security</artifactId> </dependency> <dependency> <groupId>io.jsonwebtoken</groupId> <artifactId>jjwt</artifactId> <version>0.9.1</version> </dependency> <!-- JWT - SUPPORT # --> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project>","title":"/produce-rest/pom.xml"},{"location":"modulos/mod_5/uni006/lectura002_002/#todo","text":"Implementar otra aplicaci\u00f3n con un formulario, que contenga un back y un front . Que solamente realice la validaci\u00f3n y registro de usuarios.","title":"TODO"}]}